
4.IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08009490  08009490  00019490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a4c  08009a4c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a54  08009a54  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a54  08009a54  00019a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a58  08009a58  00019a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000078  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000258  20000258  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c441  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ade  00000000  00000000  0002c651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  0002f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb8  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000058fd  00000000  00000000  00030a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e158  00000000  00000000  00036315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c70  00000000  00000000  0004446d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c0dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a08  00000000  00000000  0012c130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009474 	.word	0x08009474

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08009474 	.word	0x08009474

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <HW579_Init>:
ADXL345 adxl345;
ITG3205 itg3205;


void HW579_Init(HW579* hw579, I2C_TypeDef* i2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	hw579->I2C.I2C = i2c;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	601a      	str	r2, [r3, #0]
	hw579->MAGNETO = &hmc5883l;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HW579_Init+0x38>)
 800102c:	609a      	str	r2, [r3, #8]
	hw579->ACCEL   = &adxl345;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HW579_Init+0x3c>)
 8001032:	60da      	str	r2, [r3, #12]
	hw579->GYRO    = &itg3205;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HW579_Init+0x40>)
 8001038:	611a      	str	r2, [r3, #16]

	getI2C_Address(hw579);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f80e 	bl	800105c <getI2C_Address>

	Gyro_Init(&itg3205, i2c);
 8001040:	6839      	ldr	r1, [r7, #0]
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HW579_Init+0x40>)
 8001044:	f000 f8da 	bl	80011fc <Gyro_Init>

}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001fc 	.word	0x200001fc
 8001054:	20000210 	.word	0x20000210
 8001058:	2000021c 	.word	0x2000021c

0800105c <getI2C_Address>:


void getI2C_Address(HW579* hw579)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	uint8_t slave_address;
	uint8_t numSensors = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	75bb      	strb	r3, [r7, #22]
	uint8_t sensors[3] = {0, };
 8001068:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <getI2C_Address+0x15c>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	81bb      	strh	r3, [r7, #12]
 800106e:	2300      	movs	r3, #0
 8001070:	73bb      	strb	r3, [r7, #14]


	hw579->MAGNETO->I2C = hw579->I2C;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107c:	e883 0003 	stmia.w	r3, {r0, r1}
	hw579->ACCEL->I2C   = hw579->I2C;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108a:	e883 0003 	stmia.w	r3, {r0, r1}
	hw579->GYRO->I2C    = hw579->I2C;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001098:	e883 0003 	stmia.w	r3, {r0, r1}

	int state=0;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
	for(slave_address = 1; slave_address < 128; slave_address++)
 80010a0:	2301      	movs	r3, #1
 80010a2:	75fb      	strb	r3, [r7, #23]
 80010a4:	e04f      	b.n	8001146 <getI2C_Address+0xea>
	{
		hw579->I2C.I2C->CR1 |= I2C_CR1_START;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b4:	601a      	str	r2, [r3, #0]
		while(!(hw579->I2C.I2C->SR1 & I2C_SR1_SB));
 80010b6:	bf00      	nop
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f8      	beq.n	80010b8 <getI2C_Address+0x5c>

		hw579->I2C.I2C->DR=(slave_address<<1|0);
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	005a      	lsls	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	611a      	str	r2, [r3, #16]
		while(!(hw579->I2C.I2C->SR1)|!(hw579->I2C.I2C->SR2)){};
 80010d0:	bf00      	nop
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1eb      	bne.n	80010d2 <getI2C_Address+0x76>
		hw579->I2C.I2C->CR1 |= I2C_CR1_STOP;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001108:	601a      	str	r2, [r3, #0]

		LL_mDelay(10);	//minium wait time is 40 uS, but for sure, leave it 100 uS
 800110a:	200a      	movs	r0, #10
 800110c:	f003 fcd4 	bl	8004ab8 <LL_mDelay>

		state=(hw579->I2C.I2C->SR1 & I2C_SR1_ADDR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
		if (state==2)	// get NACK after send
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d10e      	bne.n	8001140 <getI2C_Address+0xe4>
		{
			printf("Found I2C device at adress 0x%X (hexadecimal), or %3d (decimal) [%d]\r\n",slave_address, slave_address, numSensors);
 8001122:	7df9      	ldrb	r1, [r7, #23]
 8001124:	7dfa      	ldrb	r2, [r7, #23]
 8001126:	7dbb      	ldrb	r3, [r7, #22]
 8001128:	4824      	ldr	r0, [pc, #144]	; (80011bc <getI2C_Address+0x160>)
 800112a:	f004 fb97 	bl	800585c <iprintf>
			sensors[numSensors] = slave_address;
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	3318      	adds	r3, #24
 8001132:	443b      	add	r3, r7
 8001134:	7dfa      	ldrb	r2, [r7, #23]
 8001136:	f803 2c0c 	strb.w	r2, [r3, #-12]
			numSensors++;
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	3301      	adds	r3, #1
 800113e:	75bb      	strb	r3, [r7, #22]
	for(slave_address = 1; slave_address < 128; slave_address++)
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	3301      	adds	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
 8001146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800114a:	2b00      	cmp	r3, #0
 800114c:	daab      	bge.n	80010a6 <getI2C_Address+0x4a>


	}


	hw579->MAGNETO->compass_address = sensors[0] << 1;
 800114e:	7b3a      	ldrb	r2, [r7, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	0052      	lsls	r2, r2, #1
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	721a      	strb	r2, [r3, #8]
	hw579->ACCEL->accel_address	    = sensors[1] << 1;
 800115a:	7b7a      	ldrb	r2, [r7, #13]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0052      	lsls	r2, r2, #1
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	721a      	strb	r2, [r3, #8]
	hw579->GYRO->gyro_address   	= sensors[2] << 1;
 8001166:	7bba      	ldrb	r2, [r7, #14]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	0052      	lsls	r2, r2, #1
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	721a      	strb	r2, [r3, #8]


	printf("MAGNETO : 0x%X  = 0x%X\r\n", hw579->MAGNETO->compass_address, sensors[0]<< 1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	7a1b      	ldrb	r3, [r3, #8]
 8001178:	4619      	mov	r1, r3
 800117a:	7b3b      	ldrb	r3, [r7, #12]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	461a      	mov	r2, r3
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <getI2C_Address+0x164>)
 8001182:	f004 fb6b 	bl	800585c <iprintf>
	printf("ACCEL   : 0x%X  = 0x%X\r\n", hw579->ACCEL->accel_address, sensors[1]<< 1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	7a1b      	ldrb	r3, [r3, #8]
 800118c:	4619      	mov	r1, r3
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	461a      	mov	r2, r3
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <getI2C_Address+0x168>)
 8001196:	f004 fb61 	bl	800585c <iprintf>
	printf("GYRO    : 0x%X  = 0x%X\r\n", hw579->GYRO->gyro_address, sensors[2]<< 1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	7a1b      	ldrb	r3, [r3, #8]
 80011a0:	4619      	mov	r1, r3
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	461a      	mov	r2, r3
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <getI2C_Address+0x16c>)
 80011aa:	f004 fb57 	bl	800585c <iprintf>
	printf("ACCEL   : 0x%X\r\n", sensors[1] << 1);
	printf("GYRO    : 0x%X\r\n", sensors[2] << 1);
#endif


}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0800952c 	.word	0x0800952c
 80011bc:	08009490 	.word	0x08009490
 80011c0:	080094d8 	.word	0x080094d8
 80011c4:	080094f4 	.word	0x080094f4
 80011c8:	08009510 	.word	0x08009510

080011cc <Gyro_Writebyte>:

#include "ITG3205.h"



void Gyro_Writebyte(ITG3205* itg3205, uint8_t register_address, uint8_t data){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
 80011d8:	4613      	mov	r3, r2
 80011da:	70bb      	strb	r3, [r7, #2]
	/////////////////////////////////////////////////////////
	// |Start bit|AD+W|   |Register Address|   |DATA|   |P|//
	// |		 |	  |ACK|				   |ACK|	|ACK| |//
	/////////////////////////////////////////////////////////
	uint8_t Trans[2] = {register_address, data};
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	733b      	strb	r3, [r7, #12]
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	737b      	strb	r3, [r7, #13]

	I2C_Transmit(&(itg3205->I2C), itg3205->gyro_address, Trans, 2);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7a19      	ldrb	r1, [r3, #8]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	2302      	movs	r3, #2
 80011f0:	f000 fc02 	bl	80019f8 <I2C_Transmit>

}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <Gyro_Init>:
	return Receive[0];
}



void Gyro_Init(ITG3205* itg3205, I2C_TypeDef* i2c){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]

	itg3205->I2C.I2C = i2c;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	601a      	str	r2, [r3, #0]
	itg3205->I2C.i2c_busy = 0;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	711a      	strb	r2, [r3, #4]
	itg3205->I2C.i2c_IsRx = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	715a      	strb	r2, [r3, #5]

	printf("Gyro_Init -> GET : 0x%X\r\n", itg3205->gyro_address);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7a1b      	ldrb	r3, [r3, #8]
 800121c:	4619      	mov	r1, r3
 800121e:	481a      	ldr	r0, [pc, #104]	; (8001288 <Gyro_Init+0x8c>)
 8001220:	f004 fb1c 	bl	800585c <iprintf>

    Gyro_Writebyte(itg3205,PWR_MGM,0x00);
 8001224:	2200      	movs	r2, #0
 8001226:	213e      	movs	r1, #62	; 0x3e
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffcf 	bl	80011cc <Gyro_Writebyte>

    LL_mDelay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f003 fc42 	bl	8004ab8 <LL_mDelay>
    Gyro_Writebyte(itg3205, PWR_MGM,0x01);
 8001234:	2201      	movs	r2, #1
 8001236:	213e      	movs	r1, #62	; 0x3e
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffc7 	bl	80011cc <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, SMPLRT_DIV,0X00);
 800123e:	2200      	movs	r2, #0
 8001240:	2115      	movs	r1, #21
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffc2 	bl	80011cc <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, DLPFFS_FS_SEL, RANGE2000 << 3);
 8001248:	2218      	movs	r2, #24
 800124a:	2118      	movs	r1, #24
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffbd 	bl	80011cc <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, DLPFFS_DLPF_CFG, BW256_SR8);
 8001252:	2200      	movs	r2, #0
 8001254:	2107      	movs	r1, #7
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffb8 	bl	80011cc <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, PWRMGM_CLK_SEL, PLL_ZGYRO_REF);
 800125c:	2203      	movs	r2, #3
 800125e:	2107      	movs	r1, #7
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffb3 	bl	80011cc <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, INTCFG_ITG_RDY_EN, INTSTATUS_ITG_RDY);
 8001266:	2204      	movs	r2, #4
 8001268:	2104      	movs	r1, #4
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffae 	bl	80011cc <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, INTCFG_RAW_RDY_EN, INTSTATUS_RAW_DATA_RDY);
 8001270:	2201      	movs	r2, #1
 8001272:	2101      	movs	r1, #1
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffa9 	bl	80011cc <Gyro_Writebyte>

    LL_mDelay(GYROSTART_UP_DELAY);
 800127a:	2046      	movs	r0, #70	; 0x46
 800127c:	f003 fc1c 	bl	8004ab8 <LL_mDelay>


}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08009530 	.word	0x08009530

0800128c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <LL_SYSCFG_SetEXTISource+0x58>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	3302      	adds	r3, #2
 800129e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	0c1b      	lsrs	r3, r3, #16
 80012a6:	43db      	mvns	r3, r3
 80012a8:	ea02 0103 	and.w	r1, r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	fa03 f202 	lsl.w	r2, r3, r2
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <LL_SYSCFG_SetEXTISource+0x58>)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	430a      	orrs	r2, r1
 80012d2:	3302      	adds	r3, #2
 80012d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40013800 	.word	0x40013800

080012e8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	613b      	str	r3, [r7, #16]
  return result;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2103      	movs	r1, #3
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	61bb      	str	r3, [r7, #24]
  return result;
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	431a      	orrs	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001346:	b480      	push	{r7}
 8001348:	b089      	sub	sp, #36	; 0x24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	613b      	str	r3, [r7, #16]
  return result;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	fab3 f383 	clz	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2103      	movs	r1, #3
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	401a      	ands	r2, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	61bb      	str	r3, [r7, #24]
  return result;
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	431a      	orrs	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	60da      	str	r2, [r3, #12]
}
 8001398:	bf00      	nop
 800139a:	3724      	adds	r7, #36	; 0x24
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001414:	2004      	movs	r0, #4
 8001416:	f7ff ffd5 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800141a:	2080      	movs	r0, #128	; 0x80
 800141c:	f7ff ffd2 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff ffcf 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001426:	2002      	movs	r0, #2
 8001428:	f7ff ffcc 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800142c:	2008      	movs	r0, #8
 800142e:	f7ff ffc9 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8001432:	2040      	movs	r0, #64	; 0x40
 8001434:	f7ff ffc6 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8001438:	f244 0181 	movw	r1, #16513	; 0x4081
 800143c:	4861      	ldr	r0, [pc, #388]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 800143e:	f7ff ffb1 	bl	80013a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin);
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	4860      	ldr	r0, [pc, #384]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 8001446:	f7ff ffad 	bl	80013a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800144a:	4960      	ldr	r1, [pc, #384]	; (80015cc <MX_GPIO_Init+0x1d8>)
 800144c:	2002      	movs	r0, #2
 800144e:	f7ff ff1d 	bl	800128c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001458:	2301      	movs	r3, #1
 800145a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800145c:	2300      	movs	r3, #0
 800145e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001460:	2301      	movs	r3, #1
 8001462:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f002 f8c1 	bl	80035f0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_PULL_NO);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001474:	4856      	ldr	r0, [pc, #344]	; (80015d0 <MX_GPIO_Init+0x1dc>)
 8001476:	f7ff ff66 	bl	8001346 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_MODE_INPUT);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001480:	4853      	ldr	r0, [pc, #332]	; (80015d0 <MX_GPIO_Init+0x1dc>)
 8001482:	f7ff ff31 	bl	80012e8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001486:	2332      	movs	r3, #50	; 0x32
 8001488:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800148a:	2302      	movs	r3, #2
 800148c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 800149a:	230b      	movs	r3, #11
 800149c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	484b      	ldr	r0, [pc, #300]	; (80015d0 <MX_GPIO_Init+0x1dc>)
 80014a4:	f002 fa2a 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014a8:	2386      	movs	r3, #134	; 0x86
 80014aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014ac:	2302      	movs	r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 80014bc:	230b      	movs	r3, #11
 80014be:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4843      	ldr	r0, [pc, #268]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 80014c6:	f002 fa19 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80014ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d0:	2301      	movs	r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4837      	ldr	r0, [pc, #220]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 80014e6:	f002 fa09 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80014ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	4831      	ldr	r0, [pc, #196]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 80014fe:	f002 f9fd 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001506:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001508:	2302      	movs	r3, #2
 800150a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001518:	230b      	movs	r3, #11
 800151a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800151c:	463b      	mov	r3, r7
 800151e:	4619      	mov	r1, r3
 8001520:	4828      	ldr	r0, [pc, #160]	; (80015c4 <MX_GPIO_Init+0x1d0>)
 8001522:	f002 f9eb 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800152a:	2301      	movs	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4822      	ldr	r0, [pc, #136]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 8001540:	f002 f9dc 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 8001556:	f002 f9d1 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800155a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800155e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001560:	2302      	movs	r3, #2
 8001562:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8001570:	230a      	movs	r3, #10
 8001572:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 800157a:	f002 f9bf 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800157e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001582:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4810      	ldr	r0, [pc, #64]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 8001592:	f002 f9b3 	bl	80038fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001596:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800159a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800159c:	2302      	movs	r3, #2
 800159e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 80015ac:	230b      	movs	r3, #11
 80015ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_GPIO_Init+0x1d4>)
 80015b6:	f002 f9a1 	bl	80038fc <LL_GPIO_Init>

}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	00f00003 	.word	0x00f00003
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020000 	.word	0x40020000

080015d8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_I2C_IsEnabled>:
  * @rmtoll CR1          PE            LL_I2C_IsEnabled
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	601a      	str	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	60da      	str	r2, [r3, #12]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f023 0201 	bic.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_I2C_DisableIT_TX>:
  *         CR2          ITBUFEN       LL_I2C_DisableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d4:	2b80      	cmp	r3, #128	; 0x80
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b02      	cmp	r3, #2
 8001748:	bf0c      	ite	eq
 800174a:	2301      	moveq	r3, #1
 800174c:	2300      	movne	r3, #0
 800174e:	b2db      	uxtb	r3, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b02      	cmp	r3, #2
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001790:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	601a      	str	r2, [r3, #0]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	611a      	str	r2, [r3, #16]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <LL_AHB1_GRP1_EnableClock>:
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40023800 	.word	0x40023800

08001860 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40023800 	.word	0x40023800

08001890 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001896:	f107 0318 	add.w	r3, r7, #24
 800189a:	2220      	movs	r2, #32
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f95a 	bl	8004b58 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	463b      	mov	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018b4:	2002      	movs	r0, #2
 80018b6:	f7ff ffbb 	bl	8001830 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80018ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018c0:	2302      	movs	r3, #2
 80018c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80018d0:	2304      	movs	r3, #4
 80018d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4817      	ldr	r0, [pc, #92]	; (8001938 <MX_I2C1_Init+0xa8>)
 80018da:	f002 f80f 	bl	80038fc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80018de:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80018e2:	f7ff ffbd 	bl	8001860 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80018e6:	4815      	ldr	r0, [pc, #84]	; (800193c <MX_I2C1_Init+0xac>)
 80018e8:	f7ff fecc 	bl	8001684 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <MX_I2C1_Init+0xac>)
 80018ee:	f7ff fea6 	bl	800163e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80018f2:	4812      	ldr	r0, [pc, #72]	; (800193c <MX_I2C1_Init+0xac>)
 80018f4:	f7ff fe93 	bl	800161e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_I2C1_Init+0xb0>)
 80018fe:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_I2C1_Init+0xac>)
 8001924:	f002 f96a 	bl	8003bfc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_I2C1_Init+0xac>)
 800192c:	f7ff fe97 	bl	800165e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40020400 	.word	0x40020400
 800193c:	40005400 	.word	0x40005400
 8001940:	000186a0 	.word	0x000186a0

08001944 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	2220      	movs	r2, #32
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f900 	bl	8004b58 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001968:	2002      	movs	r0, #2
 800196a:	f7ff ff61 	bl	8001830 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800196e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001972:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001974:	2302      	movs	r3, #2
 8001976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800197c:	2301      	movs	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001984:	2304      	movs	r3, #4
 8001986:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	463b      	mov	r3, r7
 800198a:	4619      	mov	r1, r3
 800198c:	4817      	ldr	r0, [pc, #92]	; (80019ec <MX_I2C2_Init+0xa8>)
 800198e:	f001 ffb5 	bl	80038fc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001992:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001996:	f7ff ff63 	bl	8001860 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 800199a:	4815      	ldr	r0, [pc, #84]	; (80019f0 <MX_I2C2_Init+0xac>)
 800199c:	f7ff fe72 	bl	8001684 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <MX_I2C2_Init+0xac>)
 80019a2:	f7ff fe4c 	bl	800163e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80019a6:	4812      	ldr	r0, [pc, #72]	; (80019f0 <MX_I2C2_Init+0xac>)
 80019a8:	f7ff fe39 	bl	800161e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_I2C2_Init+0xb0>)
 80019b2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <MX_I2C2_Init+0xac>)
 80019d8:	f002 f910 	bl	8003bfc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 80019dc:	2100      	movs	r1, #0
 80019de:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_I2C2_Init+0xac>)
 80019e0:	f7ff fe3d 	bl	800165e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3738      	adds	r7, #56	; 0x38
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40005800 	.word	0x40005800
 80019f4:	000186a0 	.word	0x000186a0

080019f8 <I2C_Transmit>:

/* USER CODE BEGIN 1 */
void I2C_Transmit(I2C_struct* I2C, uint8_t address, uint8_t* data, uint16_t size){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	72fb      	strb	r3, [r7, #11]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	813b      	strh	r3, [r7, #8]
	if(I2C->i2c_busy==1) return;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d076      	beq.n	8001b02 <I2C_Transmit+0x10a>
	I2C->i2c_busy = 1;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	711a      	strb	r2, [r3, #4]
	I2C->i2c_IsRx = 0;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	715a      	strb	r2, [r3, #5]

	LL_I2C_DisableIT_TX(I2C->I2C);				// Disable Interrupt
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe3d 	bl	80016a4 <LL_I2C_DisableIT_TX>

	if(!LL_I2C_IsEnabled(I2C->I2C)){				// Enable I2C
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fde2 	bl	80015f8 <LL_I2C_IsEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <I2C_Transmit+0x4c>
		LL_I2C_Enable(I2C->I2C);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fdca 	bl	80015d8 <LL_I2C_Enable>
	}
	LL_I2C_DisableBitPOS(I2C->I2C);				// Disable bit Position
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fecc 	bl	80017e6 <LL_I2C_DisableBitPOS>

	while(LL_I2C_IsActiveFlag_BUSY(I2C->I2C));	// wait for Ready
 8001a4e:	bf00      	nop
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fe81 	bl	800175c <LL_I2C_IsActiveFlag_BUSY>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f7      	bne.n	8001a50 <I2C_Transmit+0x58>

	LL_I2C_GenerateStartCondition(I2C->I2C);		// Start bit
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fe9e 	bl	80017a6 <LL_I2C_GenerateStartCondition>

	while(!LL_I2C_IsActiveFlag_SB(I2C->I2C));	// wait start bit
 8001a6a:	bf00      	nop
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fe4d 	bl	8001710 <LL_I2C_IsActiveFlag_SB>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f7      	beq.n	8001a6c <I2C_Transmit+0x74>
	LL_I2C_TransmitData8(I2C->I2C, address);		// transmit address
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	7afa      	ldrb	r2, [r7, #11]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff febe 	bl	8001806 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_ADDR(I2C->I2C));	// wait for transmitting address
 8001a8a:	bf00      	nop
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fe50 	bl	8001736 <LL_I2C_IsActiveFlag_ADDR>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f7      	beq.n	8001a8c <I2C_Transmit+0x94>
	LL_I2C_ClearFlag_ADDR(I2C->I2C);				// clear address flag
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fe6e 	bl	8001782 <LL_I2C_ClearFlag_ADDR>

	for(uint16_t i=0; i<size; i++){
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	82fb      	strh	r3, [r7, #22]
 8001aaa:	e014      	b.n	8001ad6 <I2C_Transmit+0xde>
		LL_I2C_TransmitData8(I2C->I2C, data[i]);	// transmit data array
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	8afb      	ldrh	r3, [r7, #22]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff fea4 	bl	8001806 <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_TXE(I2C->I2C));	// wait to complete transmitting data
 8001abe:	bf00      	nop
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fdfd 	bl	80016c4 <LL_I2C_IsActiveFlag_TXE>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f7      	beq.n	8001ac0 <I2C_Transmit+0xc8>
	for(uint16_t i=0; i<size; i++){
 8001ad0:	8afb      	ldrh	r3, [r7, #22]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	82fb      	strh	r3, [r7, #22]
 8001ad6:	8afa      	ldrh	r2, [r7, #22]
 8001ad8:	893b      	ldrh	r3, [r7, #8]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3e6      	bcc.n	8001aac <I2C_Transmit+0xb4>
	}
	while(!LL_I2C_IsActiveFlag_BTF(I2C->I2C));	// wait Byte Transfer Finished flag.
 8001ade:	bf00      	nop
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fe00 	bl	80016ea <LL_I2C_IsActiveFlag_BTF>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f7      	beq.n	8001ae0 <I2C_Transmit+0xe8>

	LL_I2C_GenerateStopCondition(I2C->I2C);		// Stop bit
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fe66 	bl	80017c6 <LL_I2C_GenerateStopCondition>

	I2C->i2c_busy = 0;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	711a      	strb	r2, [r3, #4]
 8001b00:	e000      	b.n	8001b04 <I2C_Transmit+0x10c>
	if(I2C->i2c_busy==1) return;
 8001b02:	bf00      	nop
}
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	621a      	str	r2, [r3, #32]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	621a      	str	r2, [r3, #32]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	330c      	adds	r3, #12
 8001b7c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	e853 3f00 	ldrex	r3, [r3]
 8001b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	330c      	adds	r3, #12
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	61ba      	str	r2, [r7, #24]
 8001b96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	e841 2300 	strex	r3, r2, [r1]
 8001ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e7      	bne.n	8001b78 <LL_USART_EnableIT_RXNE+0x8>
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	4013      	ands	r3, r2
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(uint32_t file, uint8_t* ptr, uint32_t len )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]

	for(int i = 0; i < len; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e00d      	b.n	8001c36 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART3, *(ptr+i));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	4808      	ldr	r0, [pc, #32]	; (8001c48 <_write+0x40>)
 8001c26:	f7ff ffc6 	bl	8001bb6 <LL_USART_TransmitData8>
		HAL_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f000 fe8a 	bl	8002944 <HAL_Delay>
	for(int i = 0; i < len; i++)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d8ed      	bhi.n	8001c1a <_write+0x12>
	}

	return len;
 8001c3e:	687b      	ldr	r3, [r7, #4]

	//if(HAL_UART_Transmit(&huart3, ptr, len, len) == HAL_OK) return len;
	//else return 0;
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40004800 	.word	0x40004800

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c52:	f000 fe05 	bl	8002860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c56:	f000 f8af 	bl	8001db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5a:	f7ff fbcb 	bl	80013f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001c5e:	f000 fd73 	bl	8002748 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001c62:	f000 fc0d 	bl	8002480 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001c66:	f7ff fe13 	bl	8001890 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c6a:	f7ff fe6b 	bl	8001944 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HW579_Init(&hw579, I2C1);
 8001c6e:	4944      	ldr	r1, [pc, #272]	; (8001d80 <main+0x134>)
 8001c70:	4844      	ldr	r0, [pc, #272]	; (8001d84 <main+0x138>)
 8001c72:	f7ff f9d1 	bl	8001018 <HW579_Init>

  LL_TIM_EnableCounter(TIM3);
 8001c76:	4844      	ldr	r0, [pc, #272]	; (8001d88 <main+0x13c>)
 8001c78:	f7ff ff47 	bl	8001b0a <LL_TIM_EnableCounter>
  LL_USART_EnableIT_RXNE(USART3);	// Receive Complete Interrupt -> IRQ Handler
 8001c7c:	4843      	ldr	r0, [pc, #268]	; (8001d8c <main+0x140>)
 8001c7e:	f7ff ff77 	bl	8001b70 <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	4840      	ldr	r0, [pc, #256]	; (8001d88 <main+0x13c>)
 8001c88:	f7ff ff4f 	bl	8001b2a <LL_TIM_CC_EnableChannel>
  for(int i=0; i< 4; i++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e013      	b.n	8001cba <main+0x6e>
   	  {
   		  TIM3->PSC = 3000 - 500*i;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a3e      	ldr	r2, [pc, #248]	; (8001d90 <main+0x144>)
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <main+0x13c>)
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
   		  printf("TIM3->PSC : %ld\r\n", TIM3->PSC);
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <main+0x13c>)
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	483a      	ldr	r0, [pc, #232]	; (8001d94 <main+0x148>)
 8001caa:	f003 fdd7 	bl	800585c <iprintf>
   		  HAL_Delay(100);
 8001cae:	2064      	movs	r0, #100	; 0x64
 8001cb0:	f000 fe48 	bl	8002944 <HAL_Delay>
  for(int i=0; i< 4; i++)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	dde8      	ble.n	8001c92 <main+0x46>

   	  }
   LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cc4:	4830      	ldr	r0, [pc, #192]	; (8001d88 <main+0x13c>)
 8001cc6:	f7ff ff41 	bl	8001b4c <LL_TIM_CC_DisableChannel>
  float f = 1.234;
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <main+0x14c>)
 8001ccc:	607b      	str	r3, [r7, #4]
  int32_t fToInt = (int32_t)(f * 1000);
 8001cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001d9c <main+0x150>
 8001cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cde:	ee17 3a90 	vmov	r3, s15
 8001ce2:	60bb      	str	r3, [r7, #8]
  printf("%f %ld\r\n", f, fToInt);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7fe fc3f 	bl	8000568 <__aeabi_f2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	9100      	str	r1, [sp, #0]
 8001cf2:	482b      	ldr	r0, [pc, #172]	; (8001da0 <main+0x154>)
 8001cf4:	f003 fdb2 	bl	800585c <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("%lf\r\n", (double)fToInt/1000);
 8001cf8:	68b8      	ldr	r0, [r7, #8]
 8001cfa:	f7fe fc23 	bl	8000544 <__aeabi_i2d>
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <main+0x158>)
 8001d04:	f7fe fdb2 	bl	800086c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4826      	ldr	r0, [pc, #152]	; (8001da8 <main+0x15c>)
 8001d0e:	f003 fda5 	bl	800585c <iprintf>
	  fToInt += 1;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
	  HAL_Delay(500);
 8001d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d1c:	f000 fe12 	bl	8002944 <HAL_Delay>


	  if(uart3_rx_flag == 1)
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <main+0x160>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d129      	bne.n	8001d7c <main+0x130>
	  {
		  uart3_rx_flag = 0;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <main+0x160>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART3, uart3_rx_data);	// Transmit received data
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <main+0x164>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	4815      	ldr	r0, [pc, #84]	; (8001d8c <main+0x140>)
 8001d36:	f7ff ff3e 	bl	8001bb6 <LL_USART_TransmitData8>
		  switch(uart3_rx_data)
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <main+0x164>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b32      	cmp	r3, #50	; 0x32
 8001d40:	d016      	beq.n	8001d70 <main+0x124>
 8001d42:	2b32      	cmp	r3, #50	; 0x32
 8001d44:	dcd8      	bgt.n	8001cf8 <main+0xac>
 8001d46:	2b30      	cmp	r3, #48	; 0x30
 8001d48:	d002      	beq.n	8001d50 <main+0x104>
 8001d4a:	2b31      	cmp	r3, #49	; 0x31
 8001d4c:	d00a      	beq.n	8001d64 <main+0x118>
 8001d4e:	e016      	b.n	8001d7e <main+0x132>
		  {
		  	  case '0':
		  		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0| LL_GPIO_PIN_7|LL_GPIO_PIN_14);
 8001d50:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d54:	4817      	ldr	r0, [pc, #92]	; (8001db4 <main+0x168>)
 8001d56:	f7ff ff3d 	bl	8001bd4 <LL_GPIO_TogglePin>
		  		  HAL_Delay(500);
 8001d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d5e:	f000 fdf1 	bl	8002944 <HAL_Delay>
		  		  break;
 8001d62:	e00c      	b.n	8001d7e <main+0x132>

		  	  case '1': LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); break;
 8001d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <main+0x13c>)
 8001d6a:	f7ff fede 	bl	8001b2a <LL_TIM_CC_EnableChannel>
 8001d6e:	e006      	b.n	8001d7e <main+0x132>
		  	  case '2': LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4); break;
 8001d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <main+0x13c>)
 8001d76:	f7ff fee9 	bl	8001b4c <LL_TIM_CC_DisableChannel>
 8001d7a:	e000      	b.n	8001d7e <main+0x132>
		  }
	  }
 8001d7c:	bf00      	nop
	  printf("%lf\r\n", (double)fToInt/1000);
 8001d7e:	e7bb      	b.n	8001cf8 <main+0xac>
 8001d80:	40005400 	.word	0x40005400
 8001d84:	20000228 	.word	0x20000228
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40004800 	.word	0x40004800
 8001d90:	fffffe0c 	.word	0xfffffe0c
 8001d94:	0800954c 	.word	0x0800954c
 8001d98:	3f9df3b6 	.word	0x3f9df3b6
 8001d9c:	447a0000 	.word	0x447a0000
 8001da0:	08009560 	.word	0x08009560
 8001da4:	408f4000 	.word	0x408f4000
 8001da8:	0800956c 	.word	0x0800956c
 8001dac:	2000023c 	.word	0x2000023c
 8001db0:	2000023d 	.word	0x2000023d
 8001db4:	40020400 	.word	0x40020400

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b094      	sub	sp, #80	; 0x50
 8001dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbe:	f107 0320 	add.w	r3, r7, #32
 8001dc2:	2230      	movs	r2, #48	; 0x30
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fec6 	bl	8004b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <SystemClock_Config+0xd8>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <SystemClock_Config+0xd8>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <SystemClock_Config+0xd8>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <SystemClock_Config+0xdc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <SystemClock_Config+0xdc>)
 8001e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <SystemClock_Config+0xdc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e14:	2301      	movs	r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001e2c:	23b4      	movs	r3, #180	; 0xb4
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e34:	2304      	movs	r3, #4
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fedb 	bl	8002bf8 <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e48:	f000 f826 	bl	8001e98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e4c:	f000 fe84 	bl	8002b58 <HAL_PWREx_EnableOverDrive>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001e56:	f000 f81f 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2105      	movs	r1, #5
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 f935 	bl	80030e8 <HAL_RCC_ClockConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001e84:	f000 f808 	bl	8001e98 <Error_Handler>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3750      	adds	r7, #80	; 0x50
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40007000 	.word	0x40007000

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x8>
	...

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <LL_USART_IsActiveFlag_RXNE>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_USART_ClearFlag_RXNE>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f06f 0220 	mvn.w	r2, #32
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_USART_ReceiveData8>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	b2db      	uxtb	r3, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <NMI_Handler+0x4>

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler+0x4>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f000 fcb2 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3))
 8001fb8:	480a      	ldr	r0, [pc, #40]	; (8001fe4 <USART3_IRQHandler+0x30>)
 8001fba:	f7ff ff9b 	bl	8001ef4 <LL_USART_IsActiveFlag_RXNE>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00c      	beq.n	8001fde <USART3_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <USART3_IRQHandler+0x30>)
 8001fc6:	f7ff ffa8 	bl	8001f1a <LL_USART_ClearFlag_RXNE>
		uart3_rx_data = LL_USART_ReceiveData8(USART3);
 8001fca:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <USART3_IRQHandler+0x30>)
 8001fcc:	f7ff ffb3 	bl	8001f36 <LL_USART_ReceiveData8>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <USART3_IRQHandler+0x34>)
 8001fd6:	701a      	strb	r2, [r3, #0]
		uart3_rx_flag = 1;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <USART3_IRQHandler+0x38>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40004800 	.word	0x40004800
 8001fe8:	2000023d 	.word	0x2000023d
 8001fec:	2000023c 	.word	0x2000023c

08001ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
	return 1;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_kill>:

int _kill(int pid, int sig)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800200a:	f002 fd7b 	bl	8004b04 <__errno>
 800200e:	4603      	mov	r3, r0
 8002010:	2216      	movs	r2, #22
 8002012:	601a      	str	r2, [r3, #0]
	return -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_exit>:

void _exit (int status)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffe7 	bl	8002000 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002032:	e7fe      	b.n	8002032 <_exit+0x12>

08002034 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e00a      	b.n	800205c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002046:	f3af 8000 	nop.w
 800204a:	4601      	mov	r1, r0
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	60ba      	str	r2, [r7, #8]
 8002052:	b2ca      	uxtb	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	dbf0      	blt.n	8002046 <_read+0x12>
	}

return len;
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_close>:
	}
	return len;
}

int _close(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002096:	605a      	str	r2, [r3, #4]
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_isatty>:

int _isatty(int file)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	return 1;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <_sbrk+0x5c>)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <_sbrk+0x60>)
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x64>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_sbrk+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d207      	bcs.n	8002118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002108:	f002 fcfc 	bl	8004b04 <__errno>
 800210c:	4603      	mov	r3, r0
 800210e:	220c      	movs	r2, #12
 8002110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e009      	b.n	800212c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_sbrk+0x64>)
 8002128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20030000 	.word	0x20030000
 8002138:	00000400 	.word	0x00000400
 800213c:	20000240 	.word	0x20000240
 8002140:	20000258 	.word	0x20000258

08002144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <SystemInit+0x20>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <SystemInit+0x20>)
 8002150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4907      	ldr	r1, [pc, #28]	; (80021bc <__NVIC_EnableIRQ+0x38>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_TIM_EnableARRPreload>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d01c      	beq.n	80022e6 <LL_TIM_OC_DisableFast+0x4a>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d017      	beq.n	80022e2 <LL_TIM_OC_DisableFast+0x46>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d012      	beq.n	80022de <LL_TIM_OC_DisableFast+0x42>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d00d      	beq.n	80022da <LL_TIM_OC_DisableFast+0x3e>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c4:	d007      	beq.n	80022d6 <LL_TIM_OC_DisableFast+0x3a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022cc:	d101      	bne.n	80022d2 <LL_TIM_OC_DisableFast+0x36>
 80022ce:	2305      	movs	r3, #5
 80022d0:	e00a      	b.n	80022e8 <LL_TIM_OC_DisableFast+0x4c>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e008      	b.n	80022e8 <LL_TIM_OC_DisableFast+0x4c>
 80022d6:	2304      	movs	r3, #4
 80022d8:	e006      	b.n	80022e8 <LL_TIM_OC_DisableFast+0x4c>
 80022da:	2303      	movs	r3, #3
 80022dc:	e004      	b.n	80022e8 <LL_TIM_OC_DisableFast+0x4c>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <LL_TIM_OC_DisableFast+0x4c>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_TIM_OC_DisableFast+0x4c>
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3318      	adds	r3, #24
 80022ee:	4619      	mov	r1, r3
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <LL_TIM_OC_DisableFast+0x84>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	440b      	add	r3, r1
 80022f8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	4908      	ldr	r1, [pc, #32]	; (8002324 <LL_TIM_OC_DisableFast+0x88>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	4619      	mov	r1, r3
 8002306:	2304      	movs	r3, #4
 8002308:	408b      	lsls	r3, r1
 800230a:	43db      	mvns	r3, r3
 800230c:	401a      	ands	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	601a      	str	r2, [r3, #0]

}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	0800958c 	.word	0x0800958c
 8002324:	08009594 	.word	0x08009594

08002328 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d01c      	beq.n	8002372 <LL_TIM_OC_EnablePreload+0x4a>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b04      	cmp	r3, #4
 800233c:	d017      	beq.n	800236e <LL_TIM_OC_EnablePreload+0x46>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b10      	cmp	r3, #16
 8002342:	d012      	beq.n	800236a <LL_TIM_OC_EnablePreload+0x42>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d00d      	beq.n	8002366 <LL_TIM_OC_EnablePreload+0x3e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002350:	d007      	beq.n	8002362 <LL_TIM_OC_EnablePreload+0x3a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002358:	d101      	bne.n	800235e <LL_TIM_OC_EnablePreload+0x36>
 800235a:	2305      	movs	r3, #5
 800235c:	e00a      	b.n	8002374 <LL_TIM_OC_EnablePreload+0x4c>
 800235e:	2306      	movs	r3, #6
 8002360:	e008      	b.n	8002374 <LL_TIM_OC_EnablePreload+0x4c>
 8002362:	2304      	movs	r3, #4
 8002364:	e006      	b.n	8002374 <LL_TIM_OC_EnablePreload+0x4c>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <LL_TIM_OC_EnablePreload+0x4c>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <LL_TIM_OC_EnablePreload+0x4c>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_TIM_OC_EnablePreload+0x4c>
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3318      	adds	r3, #24
 800237a:	4619      	mov	r1, r3
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <LL_TIM_OC_EnablePreload+0x80>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	440b      	add	r3, r1
 8002384:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <LL_TIM_OC_EnablePreload+0x84>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	4619      	mov	r1, r3
 8002392:	2308      	movs	r3, #8
 8002394:	408b      	lsls	r3, r1
 8002396:	431a      	orrs	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	0800958c 	.word	0x0800958c
 80023ac:	08009594 	.word	0x08009594

080023b0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	609a      	str	r2, [r3, #8]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_AHB1_GRP1_EnableClock>:
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800242a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242c:	4907      	ldr	r1, [pc, #28]	; (800244c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40023800 	.word	0x40023800

08002450 <LL_APB1_GRP1_EnableClock>:
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <LL_APB1_GRP1_EnableClock+0x2c>)
 800245a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <LL_APB1_GRP1_EnableClock+0x2c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4313      	orrs	r3, r2
 8002462:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40023800 	.word	0x40023800

08002480 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b094      	sub	sp, #80	; 0x50
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	2220      	movs	r2, #32
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fb5a 	bl	8004b58 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
 80024b0:	611a      	str	r2, [r3, #16]
 80024b2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7ff ffcb 	bl	8002450 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024ba:	f7ff fe55 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80024be:	4603      	mov	r3, r0
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fea5 	bl	8002214 <NVIC_EncodePriority>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	201d      	movs	r0, #29
 80024d0:	f7ff fe76 	bl	80021c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80024d4:	201d      	movs	r0, #29
 80024d6:	f7ff fe55 	bl	8002184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80024da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024de:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024e0:	2300      	movs	r3, #0
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 30-LL_TIM_IC_FILTER_FDIV1_N2;
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <MX_TIM3_Init+0xfc>)
 80024e6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80024ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4823      	ldr	r0, [pc, #140]	; (8002580 <MX_TIM3_Init+0x100>)
 80024f4:	f001 fd68 	bl	8003fc8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80024f8:	4821      	ldr	r0, [pc, #132]	; (8002580 <MX_TIM3_Init+0x100>)
 80024fa:	f7ff febe 	bl	800227a <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024fe:	2100      	movs	r1, #0
 8002500:	481f      	ldr	r0, [pc, #124]	; (8002580 <MX_TIM3_Init+0x100>)
 8002502:	f7ff ff55 	bl	80023b0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800250a:	481d      	ldr	r0, [pc, #116]	; (8002580 <MX_TIM3_Init+0x100>)
 800250c:	f7ff ff0c 	bl	8002328 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002510:	2360      	movs	r3, #96	; 0x60
 8002512:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 14;
 800251c:	230e      	movs	r3, #14
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	461a      	mov	r2, r3
 800252a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800252e:	4814      	ldr	r0, [pc, #80]	; (8002580 <MX_TIM3_Init+0x100>)
 8002530:	f001 fde4 	bl	80040fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002538:	4811      	ldr	r0, [pc, #68]	; (8002580 <MX_TIM3_Init+0x100>)
 800253a:	f7ff feaf 	bl	800229c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800253e:	2100      	movs	r1, #0
 8002540:	480f      	ldr	r0, [pc, #60]	; (8002580 <MX_TIM3_Init+0x100>)
 8002542:	f7ff ff4a 	bl	80023da <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002546:	480e      	ldr	r0, [pc, #56]	; (8002580 <MX_TIM3_Init+0x100>)
 8002548:	f7ff ff5a 	bl	8002400 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800254c:	2002      	movs	r0, #2
 800254e:	f7ff ff67 	bl	8002420 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002552:	2302      	movs	r3, #2
 8002554:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002556:	2302      	movs	r3, #2
 8002558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002566:	2302      	movs	r3, #2
 8002568:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_TIM3_Init+0x104>)
 8002570:	f001 f9c4 	bl	80038fc <LL_GPIO_Init>

}
 8002574:	bf00      	nop
 8002576:	3750      	adds	r7, #80	; 0x50
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	fff0001e 	.word	0xfff0001e
 8002580:	40000400 	.word	0x40000400
 8002584:	40020400 	.word	0x40020400

08002588 <__NVIC_GetPriorityGrouping>:
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	; (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_USART_Enable>:
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60da      	str	r2, [r3, #12]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_USART_ConfigAsyncMode>:
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	615a      	str	r2, [r3, #20]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <LL_AHB1_GRP1_EnableClock>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40023800 	.word	0x40023800

08002718 <LL_APB1_GRP1_EnableClock>:
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4313      	orrs	r3, r2
 800272a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <LL_APB1_GRP1_EnableClock+0x2c>)
 800272e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40023800 	.word	0x40023800

08002748 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08e      	sub	sp, #56	; 0x38
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	615a      	str	r2, [r3, #20]
 8002760:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002772:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002776:	f7ff ffcf 	bl	8002718 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800277a:	2008      	movs	r0, #8
 800277c:	f7ff ffb4 	bl	80026e8 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002780:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002786:	2302      	movs	r3, #2
 8002788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002796:	2307      	movs	r3, #7
 8002798:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4819      	ldr	r0, [pc, #100]	; (8002804 <MX_USART3_UART_Init+0xbc>)
 80027a0:	f001 f8ac 	bl	80038fc <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027a4:	f7ff fef0 	bl	8002588 <__NVIC_GetPriorityGrouping>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff40 	bl	8002634 <NVIC_EncodePriority>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4619      	mov	r1, r3
 80027b8:	2027      	movs	r0, #39	; 0x27
 80027ba:	f7ff ff11 	bl	80025e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80027be:	2027      	movs	r0, #39	; 0x27
 80027c0:	f7ff fef0 	bl	80025a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 80027c4:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80027c8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027d6:	230c      	movs	r3, #12
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80027da:	2300      	movs	r3, #0
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80027e2:	f107 031c 	add.w	r3, r7, #28
 80027e6:	4619      	mov	r1, r3
 80027e8:	4807      	ldr	r0, [pc, #28]	; (8002808 <MX_USART3_UART_Init+0xc0>)
 80027ea:	f002 f8d3 	bl	8004994 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <MX_USART3_UART_Init+0xc0>)
 80027f0:	f7ff ff63 	bl	80026ba <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <MX_USART3_UART_Init+0xc0>)
 80027f6:	f7ff ff50 	bl	800269a <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	3738      	adds	r7, #56	; 0x38
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40004800 	.word	0x40004800

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002844 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002812:	490e      	ldr	r1, [pc, #56]	; (800284c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002818:	e002      	b.n	8002820 <LoopCopyDataInit>

0800281a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800281c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281e:	3304      	adds	r3, #4

08002820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002824:	d3f9      	bcc.n	800281a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002828:	4c0b      	ldr	r4, [pc, #44]	; (8002858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800282c:	e001      	b.n	8002832 <LoopFillZerobss>

0800282e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002830:	3204      	adds	r2, #4

08002832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002834:	d3fb      	bcc.n	800282e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002836:	f7ff fc85 	bl	8002144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283a:	f002 f969 	bl	8004b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7ff fa05 	bl	8001c4c <main>
  bx  lr    
 8002842:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002844:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002850:	08009a5c 	.word	0x08009a5c
  ldr r2, =_sbss
 8002854:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002858:	20000258 	.word	0x20000258

0800285c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <HAL_Init+0x40>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <HAL_Init+0x40>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <HAL_Init+0x40>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 f931 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	2000      	movs	r0, #0
 8002890:	f000 f808 	bl	80028a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002894:	f7ff fb06 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_InitTick+0x54>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_InitTick+0x58>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f93b 	bl	8002b3e <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f000 f911 	bl	8002b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_InitTick+0x5c>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000008 	.word	0x20000008
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000008 	.word	0x20000008
 8002928:	20000244 	.word	0x20000244

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000244 	.word	0x20000244

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000008 	.word	0x20000008

0800298c <__NVIC_SetPriorityGrouping>:
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_SetPriority>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f7ff ff8e 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff47 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff5c 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff8e 	bl	8002a44 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5d 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffb0 	bl	8002aac <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_PWREx_EnableOverDrive+0x94>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b84:	f7ff fed2 	bl	800292c <HAL_GetTick>
 8002b88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b8a:	e009      	b.n	8002ba0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b8c:	f7ff fece 	bl	800292c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b9a:	d901      	bls.n	8002ba0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e01f      	b.n	8002be0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bac:	d1ee      	bne.n	8002b8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb4:	f7ff feba 	bl	800292c <HAL_GetTick>
 8002bb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bba:	e009      	b.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bbc:	f7ff feb6 	bl	800292c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bca:	d901      	bls.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e007      	b.n	8002be0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	420e0040 	.word	0x420e0040
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	420e0044 	.word	0x420e0044

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e267      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d075      	beq.n	8002d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d00c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b85      	ldr	r3, [pc, #532]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d112      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2e:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	4b7e      	ldr	r3, [pc, #504]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d05b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x108>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d157      	bne.n	8002d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e242      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x74>
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x98>
 8002c76:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6f      	ldr	r2, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b6d      	ldr	r3, [pc, #436]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6c      	ldr	r2, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xb0>
 8002c90:	4b69      	ldr	r3, [pc, #420]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a68      	ldr	r2, [pc, #416]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fe3c 	bl	800292c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff fe38 	bl	800292c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e207      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xc0>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7ff fe28 	bl	800292c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7ff fe24 	bl	800292c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1f3      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b51      	ldr	r3, [pc, #324]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xe8>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d063      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x152>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e1c7      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4937      	ldr	r1, [pc, #220]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	e03a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d68:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fddd 	bl	800292c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7ff fdd9 	bl	800292c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1a8      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4925      	ldr	r1, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7ff fdbc 	bl	800292c <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db8:	f7ff fdb8 	bl	800292c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e187      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d036      	beq.n	8002e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x248>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7ff fd9c 	bl	800292c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df8:	f7ff fd98 	bl	800292c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e167      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x200>
 8002e16:	e01b      	b.n	8002e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x248>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1e:	f7ff fd85 	bl	800292c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	e00e      	b.n	8002e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e26:	f7ff fd81 	bl	800292c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d907      	bls.n	8002e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e150      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470000 	.word	0x42470000
 8002e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ea      	bne.n	8002e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8097 	beq.w	8002f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10f      	bne.n	8002e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b7d      	ldr	r3, [pc, #500]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a7c      	ldr	r2, [pc, #496]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b77      	ldr	r3, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x474>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d118      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9a:	4b74      	ldr	r3, [pc, #464]	; (800306c <HAL_RCC_OscConfig+0x474>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a73      	ldr	r2, [pc, #460]	; (800306c <HAL_RCC_OscConfig+0x474>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff fd41 	bl	800292c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7ff fd3d 	bl	800292c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e10c      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x474>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x2ea>
 8002ed4:	4b64      	ldr	r3, [pc, #400]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a63      	ldr	r2, [pc, #396]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	e01c      	b.n	8002f1c <HAL_RCC_OscConfig+0x324>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x30c>
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a5e      	ldr	r2, [pc, #376]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a5b      	ldr	r2, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0x324>
 8002f04:	4b58      	ldr	r3, [pc, #352]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a57      	ldr	r2, [pc, #348]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f10:	4b55      	ldr	r3, [pc, #340]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a54      	ldr	r2, [pc, #336]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d015      	beq.n	8002f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7ff fd02 	bl	800292c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7ff fcfe 	bl	800292c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0cb      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	4b49      	ldr	r3, [pc, #292]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ee      	beq.n	8002f2c <HAL_RCC_OscConfig+0x334>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7ff fcec 	bl	800292c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7ff fce8 	bl	800292c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0b5      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ee      	bne.n	8002f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	4a38      	ldr	r2, [pc, #224]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a1 	beq.w	80030d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f96:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d05c      	beq.n	800305c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d141      	bne.n	800302e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCC_OscConfig+0x478>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7ff fcbc 	bl	800292c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7ff fcb8 	bl	800292c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e087      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	019b      	lsls	r3, r3, #6
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	491b      	ldr	r1, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x478>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7ff fc91 	bl	800292c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300e:	f7ff fc8d 	bl	800292c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e05c      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x416>
 800302c:	e054      	b.n	80030d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCC_OscConfig+0x478>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7ff fc7a 	bl	800292c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303c:	f7ff fc76 	bl	800292c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e045      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_OscConfig+0x470>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x444>
 800305a:	e03d      	b.n	80030d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e038      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
 8003068:	40023800 	.word	0x40023800
 800306c:	40007000 	.word	0x40007000
 8003070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4ec>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d028      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d121      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d11a      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d111      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0cc      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d90c      	bls.n	8003124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800315e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d044      	beq.n	8003208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d119      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e067      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4934      	ldr	r1, [pc, #208]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d8:	f7ff fba8 	bl	800292c <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7ff fba4 	bl	800292c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e04f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d20c      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb08 	bl	80028a4 <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023c00 	.word	0x40023c00
 80032a4:	40023800 	.word	0x40023800
 80032a8:	08009574 	.word	0x08009574
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b8:	b094      	sub	sp, #80	; 0x50
 80032ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	647b      	str	r3, [r7, #68]	; 0x44
 80032c0:	2300      	movs	r3, #0
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c4:	2300      	movs	r3, #0
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032cc:	4b79      	ldr	r3, [pc, #484]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d00d      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x40>
 80032d8:	2b08      	cmp	r3, #8
 80032da:	f200 80e1 	bhi.w	80034a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x34>
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x3a>
 80032e6:	e0db      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032ec:	e0db      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ee:	4b73      	ldr	r3, [pc, #460]	; (80034bc <HAL_RCC_GetSysClockFreq+0x208>)
 80032f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f2:	e0d8      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fe:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d063      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	2200      	movs	r2, #0
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
 8003314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
 800331e:	2300      	movs	r3, #0
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
 8003322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003326:	4622      	mov	r2, r4
 8003328:	462b      	mov	r3, r5
 800332a:	f04f 0000 	mov.w	r0, #0
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003338:	0150      	lsls	r0, r2, #5
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4621      	mov	r1, r4
 8003340:	1a51      	subs	r1, r2, r1
 8003342:	6139      	str	r1, [r7, #16]
 8003344:	4629      	mov	r1, r5
 8003346:	eb63 0301 	sbc.w	r3, r3, r1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003358:	4659      	mov	r1, fp
 800335a:	018b      	lsls	r3, r1, #6
 800335c:	4651      	mov	r1, sl
 800335e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003362:	4651      	mov	r1, sl
 8003364:	018a      	lsls	r2, r1, #6
 8003366:	4651      	mov	r1, sl
 8003368:	ebb2 0801 	subs.w	r8, r2, r1
 800336c:	4659      	mov	r1, fp
 800336e:	eb63 0901 	sbc.w	r9, r3, r1
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800337e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003386:	4690      	mov	r8, r2
 8003388:	4699      	mov	r9, r3
 800338a:	4623      	mov	r3, r4
 800338c:	eb18 0303 	adds.w	r3, r8, r3
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	462b      	mov	r3, r5
 8003394:	eb49 0303 	adc.w	r3, r9, r3
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033a6:	4629      	mov	r1, r5
 80033a8:	024b      	lsls	r3, r1, #9
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b0:	4621      	mov	r1, r4
 80033b2:	024a      	lsls	r2, r1, #9
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ba:	2200      	movs	r2, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033c4:	f7fd fc70 	bl	8000ca8 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	e058      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	2200      	movs	r2, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	4611      	mov	r1, r2
 80033de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	f04f 0000 	mov.w	r0, #0
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	0159      	lsls	r1, r3, #5
 80033fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fe:	0150      	lsls	r0, r2, #5
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4641      	mov	r1, r8
 8003406:	ebb2 0a01 	subs.w	sl, r2, r1
 800340a:	4649      	mov	r1, r9
 800340c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800341c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003424:	ebb2 040a 	subs.w	r4, r2, sl
 8003428:	eb63 050b 	sbc.w	r5, r3, fp
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4643      	mov	r3, r8
 8003442:	18e3      	adds	r3, r4, r3
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	464b      	mov	r3, r9
 8003448:	eb45 0303 	adc.w	r3, r5, r3
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345a:	4629      	mov	r1, r5
 800345c:	028b      	lsls	r3, r1, #10
 800345e:	4621      	mov	r1, r4
 8003460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003464:	4621      	mov	r1, r4
 8003466:	028a      	lsls	r2, r1, #10
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346e:	2200      	movs	r2, #0
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	61fa      	str	r2, [r7, #28]
 8003474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003478:	f7fd fc16 	bl	8000ca8 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4613      	mov	r3, r2
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800349e:	e002      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3750      	adds	r7, #80	; 0x50
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <LL_EXTI_EnableIT_0_31+0x20>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4904      	ldr	r1, [pc, #16]	; (80034e0 <LL_EXTI_EnableIT_0_31+0x20>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <LL_EXTI_DisableIT_0_31+0x24>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	4904      	ldr	r1, [pc, #16]	; (8003508 <LL_EXTI_DisableIT_0_31+0x24>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40013c00 	.word	0x40013c00

0800350c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	4904      	ldr	r1, [pc, #16]	; (800352c <LL_EXTI_EnableEvent_0_31+0x20>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]

}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40013c00 	.word	0x40013c00

08003530 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <LL_EXTI_DisableEvent_0_31+0x24>)
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	43db      	mvns	r3, r3
 8003540:	4904      	ldr	r1, [pc, #16]	; (8003554 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003542:	4013      	ands	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40013c00 	.word	0x40013c00

08003558 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	4904      	ldr	r1, [pc, #16]	; (8003578 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40013c00 	.word	0x40013c00

0800357c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	43db      	mvns	r3, r3
 800358c:	4904      	ldr	r1, [pc, #16]	; (80035a0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800358e:	4013      	ands	r3, r2
 8003590:	608b      	str	r3, [r1, #8]

}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40013c00 	.word	0x40013c00

080035a4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4904      	ldr	r1, [pc, #16]	; (80035c4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40013c00 	.word	0x40013c00

080035c8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035da:	4013      	ands	r3, r2
 80035dc:	60cb      	str	r3, [r1, #12]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40013c00 	.word	0x40013c00

080035f0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	791b      	ldrb	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d065      	beq.n	80036d0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d06c      	beq.n	80036e6 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	795b      	ldrb	r3, [r3, #5]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d01c      	beq.n	800364e <LL_EXTI_Init+0x5e>
 8003614:	2b02      	cmp	r3, #2
 8003616:	dc25      	bgt.n	8003664 <LL_EXTI_Init+0x74>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <LL_EXTI_Init+0x32>
 800361c:	2b01      	cmp	r3, #1
 800361e:	d00b      	beq.n	8003638 <LL_EXTI_Init+0x48>
 8003620:	e020      	b.n	8003664 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff82 	bl	8003530 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff45 	bl	80034c0 <LL_EXTI_EnableIT_0_31>
          break;
 8003636:	e018      	b.n	800366a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff51 	bl	80034e4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff60 	bl	800350c <LL_EXTI_EnableEvent_0_31>
          break;
 800364c:	e00d      	b.n	800366a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff34 	bl	80034c0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff55 	bl	800350c <LL_EXTI_EnableEvent_0_31>
          break;
 8003662:	e002      	b.n	800366a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
          break;
 8003668:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	799b      	ldrb	r3, [r3, #6]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d039      	beq.n	80036e6 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	799b      	ldrb	r3, [r3, #6]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d01c      	beq.n	80036b4 <LL_EXTI_Init+0xc4>
 800367a:	2b03      	cmp	r3, #3
 800367c:	dc25      	bgt.n	80036ca <LL_EXTI_Init+0xda>
 800367e:	2b01      	cmp	r3, #1
 8003680:	d002      	beq.n	8003688 <LL_EXTI_Init+0x98>
 8003682:	2b02      	cmp	r3, #2
 8003684:	d00b      	beq.n	800369e <LL_EXTI_Init+0xae>
 8003686:	e020      	b.n	80036ca <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff9b 	bl	80035c8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff5e 	bl	8003558 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800369c:	e024      	b.n	80036e8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff6a 	bl	800357c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff79 	bl	80035a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80036b2:	e019      	b.n	80036e8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff4d 	bl	8003558 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff6e 	bl	80035a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80036c8:	e00e      	b.n	80036e8 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
            break;
 80036ce:	e00b      	b.n	80036e8 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff05 	bl	80034e4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ff26 	bl	8003530 <LL_EXTI_DisableEvent_0_31>
 80036e4:	e000      	b.n	80036e8 <LL_EXTI_Init+0xf8>
      }
 80036e6:	bf00      	nop
  }
  return status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <LL_GPIO_SetPinMode>:
{
 80036f2:	b480      	push	{r7}
 80036f4:	b089      	sub	sp, #36	; 0x24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	613b      	str	r3, [r7, #16]
  return result;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2103      	movs	r1, #3
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	401a      	ands	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	61bb      	str	r3, [r7, #24]
  return result;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	431a      	orrs	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	3724      	adds	r7, #36	; 0x24
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_GPIO_SetPinOutputType>:
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	43db      	mvns	r3, r3
 8003764:	401a      	ands	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_GPIO_SetPinSpeed>:
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	613b      	str	r3, [r7, #16]
  return result;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2103      	movs	r1, #3
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	61bb      	str	r3, [r7, #24]
  return result;
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	609a      	str	r2, [r3, #8]
}
 80037d2:	bf00      	nop
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_GPIO_SetPinPull>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b089      	sub	sp, #36	; 0x24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	613b      	str	r3, [r7, #16]
  return result;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2103      	movs	r1, #3
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	401a      	ands	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	61bb      	str	r3, [r7, #24]
  return result;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	431a      	orrs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	60da      	str	r2, [r3, #12]
}
 8003830:	bf00      	nop
 8003832:	3724      	adds	r7, #36	; 0x24
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_GPIO_SetAFPin_0_7>:
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	613b      	str	r3, [r7, #16]
  return result;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	210f      	movs	r1, #15
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	61bb      	str	r3, [r7, #24]
  return result;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_GPIO_SetAFPin_8_15>:
{
 800389a:	b480      	push	{r7}
 800389c:	b089      	sub	sp, #36	; 0x24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	613b      	str	r3, [r7, #16]
  return result;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	210f      	movs	r1, #15
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	401a      	ands	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	61bb      	str	r3, [r7, #24]
  return result;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	431a      	orrs	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038f0:	bf00      	nop
 80038f2:	3724      	adds	r7, #36	; 0x24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	613b      	str	r3, [r7, #16]
  return result;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003926:	e050      	b.n	80039ca <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d042      	beq.n	80039c4 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d003      	beq.n	800394e <LL_GPIO_Init+0x52>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d10d      	bne.n	800396a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	461a      	mov	r2, r3
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff12 	bl	8003780 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	461a      	mov	r2, r3
 8003962:	69b9      	ldr	r1, [r7, #24]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fef3 	bl	8003750 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	461a      	mov	r2, r3
 8003970:	69b9      	ldr	r1, [r7, #24]
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff33 	bl	80037de <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d11a      	bne.n	80039b6 <LL_GPIO_Init+0xba>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	60bb      	str	r3, [r7, #8]
  return result;
 800398c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b07      	cmp	r3, #7
 8003996:	d807      	bhi.n	80039a8 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	461a      	mov	r2, r3
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff4b 	bl	800383c <LL_GPIO_SetAFPin_0_7>
 80039a6:	e006      	b.n	80039b6 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	461a      	mov	r2, r3
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff72 	bl	800389a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	461a      	mov	r2, r3
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fe97 	bl	80036f2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3301      	adds	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1a7      	bne.n	8003928 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <LL_I2C_Enable>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_I2C_Disable>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0201 	bic.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_I2C_ConfigFilters>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f023 021f 	bic.w	r2, r3, #31
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <LL_I2C_SetOwnAddress1>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <LL_I2C_ConfigSpeed>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4a42      	ldr	r2, [pc, #264]	; (8003ba4 <LL_I2C_ConfigSpeed+0x124>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0c9b      	lsrs	r3, r3, #18
 8003aa0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	493a      	ldr	r1, [pc, #232]	; (8003ba8 <LL_I2C_ConfigSpeed+0x128>)
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d802      	bhi.n	8003ac8 <LL_I2C_ConfigSpeed+0x48>
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	e009      	b.n	8003adc <LL_I2C_ConfigSpeed+0x5c>
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4936      	ldr	r1, [pc, #216]	; (8003bac <LL_I2C_ConfigSpeed+0x12c>)
 8003ad4:	fba1 1303 	umull	r1, r3, r1, r3
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	3301      	adds	r3, #1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <LL_I2C_ConfigSpeed+0x128>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d939      	bls.n	8003b5e <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d117      	bne.n	8003b20 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b18:	e01d      	b.n	8003b56 <LL_I2C_ConfigSpeed+0xd6>
 8003b1a:	f248 0301 	movw	r3, #32769	; 0x8001
 8003b1e:	e01a      	b.n	8003b56 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009a      	lsls	r2, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009a      	lsls	r2, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b50:	e001      	b.n	8003b56 <LL_I2C_ConfigSpeed+0xd6>
 8003b52:	f248 0301 	movw	r3, #32769	; 0x8001
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e011      	b.n	8003b82 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b6c:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	e000      	b.n	8003b80 <LL_I2C_ConfigSpeed+0x100>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	61da      	str	r2, [r3, #28]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	431bde83 	.word	0x431bde83
 8003ba8:	000186a0 	.word	0x000186a0
 8003bac:	10624dd3 	.word	0x10624dd3

08003bb0 <LL_I2C_SetMode>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 021a 	bic.w	r2, r3, #26
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_I2C_AcknowledgeNextData>:
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fefb 	bl	8003a02 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003c0c:	f107 0308 	add.w	r3, r7, #8
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 f89d 	bl	8003d50 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68d9      	ldr	r1, [r3, #12]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fefe 	bl	8003a22 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003c26:	6939      	ldr	r1, [r7, #16]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff25 	bl	8003a80 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6959      	ldr	r1, [r3, #20]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff04 	bl	8003a4e <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ffaf 	bl	8003bb0 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fec5 	bl	80039e2 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ffb9 	bl	8003bd6 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <LL_RCC_GetSysClkSource+0x18>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800

08003c8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <LL_RCC_GetAHBPrescaler+0x18>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800

08003ca8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <LL_RCC_GetAPB2Prescaler+0x18>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <LL_RCC_PLL_GetMainSource+0x18>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800

08003cfc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <LL_RCC_PLL_GetN+0x18>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40023800 	.word	0x40023800

08003d18 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <LL_RCC_PLL_GetP+0x18>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <LL_RCC_PLL_GetDivider+0x18>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800

08003d50 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003d58:	f000 f820 	bl	8003d9c <RCC_GetSystemClockFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f840 	bl	8003dec <RCC_GetHCLKClockFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f84e 	bl	8003e18 <RCC_GetPCLK1ClockFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f85a 	bl	8003e40 <RCC_GetPCLK2ClockFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003da6:	f7ff ff63 	bl	8003c70 <LL_RCC_GetSysClkSource>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d00c      	beq.n	8003dca <RCC_GetSystemClockFreq+0x2e>
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d80f      	bhi.n	8003dd4 <RCC_GetSystemClockFreq+0x38>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <RCC_GetSystemClockFreq+0x22>
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d003      	beq.n	8003dc4 <RCC_GetSystemClockFreq+0x28>
 8003dbc:	e00a      	b.n	8003dd4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <RCC_GetSystemClockFreq+0x48>)
 8003dc0:	607b      	str	r3, [r7, #4]
      break;
 8003dc2:	e00a      	b.n	8003dda <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <RCC_GetSystemClockFreq+0x4c>)
 8003dc6:	607b      	str	r3, [r7, #4]
      break;
 8003dc8:	e007      	b.n	8003dda <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003dca:	2008      	movs	r0, #8
 8003dcc:	f000 f84c 	bl	8003e68 <RCC_PLL_GetFreqDomain_SYS>
 8003dd0:	6078      	str	r0, [r7, #4]
      break;
 8003dd2:	e002      	b.n	8003dda <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <RCC_GetSystemClockFreq+0x48>)
 8003dd6:	607b      	str	r3, [r7, #4]
      break;
 8003dd8:	bf00      	nop
  }

  return frequency;
 8003dda:	687b      	ldr	r3, [r7, #4]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	00f42400 	.word	0x00f42400
 8003de8:	007a1200 	.word	0x007a1200

08003dec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003df4:	f7ff ff4a 	bl	8003c8c <LL_RCC_GetAHBPrescaler>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <RCC_GetHCLKClockFreq+0x28>)
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	40d3      	lsrs	r3, r2
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	08009574 	.word	0x08009574

08003e18 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003e20:	f7ff ff42 	bl	8003ca8 <LL_RCC_GetAPB1Prescaler>
 8003e24:	4603      	mov	r3, r0
 8003e26:	0a9b      	lsrs	r3, r3, #10
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <RCC_GetPCLK1ClockFreq+0x24>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	40d3      	lsrs	r3, r2
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	08009584 	.word	0x08009584

08003e40 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003e48:	f7ff ff3c 	bl	8003cc4 <LL_RCC_GetAPB2Prescaler>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	0b5b      	lsrs	r3, r3, #13
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <RCC_GetPCLK2ClockFreq+0x24>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	40d3      	lsrs	r3, r2
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	08009584 	.word	0x08009584

08003e68 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003e7c:	f7ff ff30 	bl	8003ce0 <LL_RCC_PLL_GetMainSource>
 8003e80:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e8e:	d003      	beq.n	8003e98 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003e90:	e005      	b.n	8003e9e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e94:	617b      	str	r3, [r7, #20]
      break;
 8003e96:	e005      	b.n	8003ea4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003e9a:	617b      	str	r3, [r7, #20]
      break;
 8003e9c:	e002      	b.n	8003ea4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003ea0:	617b      	str	r3, [r7, #20]
      break;
 8003ea2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d113      	bne.n	8003ed2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003eaa:	f7ff ff43 	bl	8003d34 <LL_RCC_PLL_GetDivider>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fbb3 f4f2 	udiv	r4, r3, r2
 8003eb6:	f7ff ff21 	bl	8003cfc <LL_RCC_PLL_GetN>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	fb03 f404 	mul.w	r4, r3, r4
 8003ec0:	f7ff ff2a 	bl	8003d18 <LL_RCC_PLL_GetP>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	3301      	adds	r3, #1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ed0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003ed2:	693b      	ldr	r3, [r7, #16]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	007a1200 	.word	0x007a1200

08003ee4 <LL_TIM_SetPrescaler>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_TIM_SetAutoReload>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_TIM_SetRepetitionCounter>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_TIM_OC_SetCompareCH1>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_TIM_OC_SetCompareCH2>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_TIM_OC_SetCompareCH3>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_TIM_OC_SetCompareCH4>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	615a      	str	r2, [r3, #20]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <LL_TIM_Init+0x108>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <LL_TIM_Init+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d00f      	beq.n	8004008 <LL_TIM_Init+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3a      	ldr	r2, [pc, #232]	; (80040d4 <LL_TIM_Init+0x10c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <LL_TIM_Init+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a39      	ldr	r2, [pc, #228]	; (80040d8 <LL_TIM_Init+0x110>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <LL_TIM_Init+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <LL_TIM_Init+0x114>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <LL_TIM_Init+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a37      	ldr	r2, [pc, #220]	; (80040e0 <LL_TIM_Init+0x118>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d106      	bne.n	8004016 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <LL_TIM_Init+0x108>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d02b      	beq.n	8004076 <LL_TIM_Init+0xae>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d027      	beq.n	8004076 <LL_TIM_Init+0xae>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <LL_TIM_Init+0x10c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d023      	beq.n	8004076 <LL_TIM_Init+0xae>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <LL_TIM_Init+0x110>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01f      	beq.n	8004076 <LL_TIM_Init+0xae>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <LL_TIM_Init+0x114>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <LL_TIM_Init+0xae>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <LL_TIM_Init+0x118>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d017      	beq.n	8004076 <LL_TIM_Init+0xae>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <LL_TIM_Init+0x11c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <LL_TIM_Init+0xae>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <LL_TIM_Init+0x120>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <LL_TIM_Init+0xae>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <LL_TIM_Init+0x124>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <LL_TIM_Init+0xae>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <LL_TIM_Init+0x128>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <LL_TIM_Init+0xae>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <LL_TIM_Init+0x12c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <LL_TIM_Init+0xae>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <LL_TIM_Init+0x130>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d106      	bne.n	8004084 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff35 	bl	8003f00 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff21 	bl	8003ee4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <LL_TIM_Init+0x108>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <LL_TIM_Init+0xea>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <LL_TIM_Init+0x118>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d105      	bne.n	80040be <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff2f 	bl	8003f1c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff72 	bl	8003fa8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40010400 	.word	0x40010400
 80040e4:	40014000 	.word	0x40014000
 80040e8:	40014400 	.word	0x40014400
 80040ec:	40014800 	.word	0x40014800
 80040f0:	40001800 	.word	0x40001800
 80040f4:	40001c00 	.word	0x40001c00
 80040f8:	40002000 	.word	0x40002000

080040fc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004112:	d027      	beq.n	8004164 <LL_TIM_OC_Init+0x68>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d82a      	bhi.n	8004172 <LL_TIM_OC_Init+0x76>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004122:	d018      	beq.n	8004156 <LL_TIM_OC_Init+0x5a>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412a:	d822      	bhi.n	8004172 <LL_TIM_OC_Init+0x76>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d003      	beq.n	800413a <LL_TIM_OC_Init+0x3e>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d007      	beq.n	8004148 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004138:	e01b      	b.n	8004172 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f81f 	bl	8004180 <OC1Config>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]
      break;
 8004146:	e015      	b.n	8004174 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f884 	bl	8004258 <OC2Config>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]
      break;
 8004154:	e00e      	b.n	8004174 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f8ed 	bl	8004338 <OC3Config>
 800415e:	4603      	mov	r3, r0
 8004160:	75fb      	strb	r3, [r7, #23]
      break;
 8004162:	e007      	b.n	8004174 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f956 	bl	8004418 <OC4Config>
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]
      break;
 8004170:	e000      	b.n	8004174 <LL_TIM_OC_Init+0x78>
      break;
 8004172:	bf00      	nop
  }

  return result;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f023 0202 	bic.w	r2, r3, #2
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <OC1Config+0xd0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <OC1Config+0x6a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <OC1Config+0xd4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d11e      	bne.n	8004228 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f023 0208 	bic.w	r2, r3, #8
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0204 	bic.w	r2, r3, #4
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe7c 	bl	8003f38 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40010000 	.word	0x40010000
 8004254:	40010400 	.word	0x40010400

08004258 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0220 	bic.w	r2, r3, #32
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0210 	bic.w	r2, r3, #16
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <OC2Config+0xd8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <OC2Config+0x70>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <OC2Config+0xdc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d11f      	bne.n	8004308 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	019b      	lsls	r3, r3, #6
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fe1a 	bl	8003f54 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40010000 	.word	0x40010000
 8004334:	40010400 	.word	0x40010400

08004338 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <OC3Config+0xd8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <OC3Config+0x6e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <OC3Config+0xdc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d11f      	bne.n	80043e6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	029b      	lsls	r3, r3, #10
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	029b      	lsls	r3, r3, #10
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	015b      	lsls	r3, r3, #5
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff fdb9 	bl	8003f70 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	40010400 	.word	0x40010400

08004418 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	031b      	lsls	r3, r3, #12
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	031b      	lsls	r3, r3, #12
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <OC4Config+0xa8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <OC4Config+0x70>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <OC4Config+0xac>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d107      	bne.n	8004498 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	019b      	lsls	r3, r3, #6
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fd6e 	bl	8003f8c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40010400 	.word	0x40010400

080044c8 <LL_USART_IsEnabled>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <LL_USART_SetStopBitsLength>:
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	611a      	str	r2, [r3, #16]
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_USART_SetHWFlowCtrl>:
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	615a      	str	r2, [r3, #20]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_USART_SetBaudRate>:
{
 800453c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004540:	b0c0      	sub	sp, #256	; 0x100
 8004542:	af00      	add	r7, sp, #0
 8004544:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004548:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800454c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004550:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	f040 810c 	bne.w	8004778 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800456a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800456e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	1891      	adds	r1, r2, r2
 8004578:	6639      	str	r1, [r7, #96]	; 0x60
 800457a:	415b      	adcs	r3, r3
 800457c:	667b      	str	r3, [r7, #100]	; 0x64
 800457e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004582:	4621      	mov	r1, r4
 8004584:	eb12 0801 	adds.w	r8, r2, r1
 8004588:	4629      	mov	r1, r5
 800458a:	eb43 0901 	adc.w	r9, r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a2:	4690      	mov	r8, r2
 80045a4:	4699      	mov	r9, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	eb18 0303 	adds.w	r3, r8, r3
 80045ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045b0:	462b      	mov	r3, r5
 80045b2:	eb49 0303 	adc.w	r3, r9, r3
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045be:	2200      	movs	r2, #0
 80045c0:	469a      	mov	sl, r3
 80045c2:	4693      	mov	fp, r2
 80045c4:	eb1a 030a 	adds.w	r3, sl, sl
 80045c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80045ca:	eb4b 030b 	adc.w	r3, fp, fp
 80045ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045d8:	f7fc fb66 	bl	8000ca8 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b64      	ldr	r3, [pc, #400]	; (8004774 <LL_USART_SetBaudRate+0x238>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	b29c      	uxth	r4, r3
 80045ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045f8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045fc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	6539      	str	r1, [r7, #80]	; 0x50
 8004608:	415b      	adcs	r3, r3
 800460a:	657b      	str	r3, [r7, #84]	; 0x54
 800460c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004610:	4641      	mov	r1, r8
 8004612:	1851      	adds	r1, r2, r1
 8004614:	64b9      	str	r1, [r7, #72]	; 0x48
 8004616:	4649      	mov	r1, r9
 8004618:	414b      	adcs	r3, r1
 800461a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004628:	4659      	mov	r1, fp
 800462a:	00cb      	lsls	r3, r1, #3
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004632:	4651      	mov	r1, sl
 8004634:	00ca      	lsls	r2, r1, #3
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	4603      	mov	r3, r0
 800463c:	4642      	mov	r2, r8
 800463e:	189b      	adds	r3, r3, r2
 8004640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004644:	464b      	mov	r3, r9
 8004646:	460a      	mov	r2, r1
 8004648:	eb42 0303 	adc.w	r3, r2, r3
 800464c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004650:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004654:	2200      	movs	r2, #0
 8004656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800465a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800465e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004662:	460b      	mov	r3, r1
 8004664:	18db      	adds	r3, r3, r3
 8004666:	643b      	str	r3, [r7, #64]	; 0x40
 8004668:	4613      	mov	r3, r2
 800466a:	eb42 0303 	adc.w	r3, r2, r3
 800466e:	647b      	str	r3, [r7, #68]	; 0x44
 8004670:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004674:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004678:	f7fc fb16 	bl	8000ca8 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4611      	mov	r1, r2
 8004682:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <LL_USART_SetBaudRate+0x238>)
 8004684:	fba3 2301 	umull	r2, r3, r3, r1
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2264      	movs	r2, #100	; 0x64
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	1acb      	subs	r3, r1, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <LL_USART_SetBaudRate+0x238>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	4423      	add	r3, r4
 80046ae:	b29c      	uxth	r4, r3
 80046b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ba:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046be:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80046ca:	415b      	adcs	r3, r3
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046d2:	4641      	mov	r1, r8
 80046d4:	1851      	adds	r1, r2, r1
 80046d6:	6339      	str	r1, [r7, #48]	; 0x30
 80046d8:	4649      	mov	r1, r9
 80046da:	414b      	adcs	r3, r1
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046ea:	4659      	mov	r1, fp
 80046ec:	00cb      	lsls	r3, r1, #3
 80046ee:	4651      	mov	r1, sl
 80046f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f4:	4651      	mov	r1, sl
 80046f6:	00ca      	lsls	r2, r1, #3
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	4642      	mov	r2, r8
 8004700:	189b      	adds	r3, r3, r2
 8004702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004706:	464b      	mov	r3, r9
 8004708:	460a      	mov	r2, r1
 800470a:	eb42 0303 	adc.w	r3, r2, r3
 800470e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004712:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800471c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004720:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004736:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800473a:	f7fc fab5 	bl	8000ca8 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <LL_USART_SetBaudRate+0x238>)
 8004744:	fba3 1302 	umull	r1, r3, r3, r2
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	2164      	movs	r1, #100	; 0x64
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	3332      	adds	r3, #50	; 0x32
 8004756:	4a07      	ldr	r2, [pc, #28]	; (8004774 <LL_USART_SetBaudRate+0x238>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	b29b      	uxth	r3, r3
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	b29b      	uxth	r3, r3
 8004766:	4423      	add	r3, r4
 8004768:	b29b      	uxth	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	e107      	b.n	8004984 <LL_USART_SetBaudRate+0x448>
 8004774:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800477c:	2200      	movs	r2, #0
 800477e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004782:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004786:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800478a:	4642      	mov	r2, r8
 800478c:	464b      	mov	r3, r9
 800478e:	1891      	adds	r1, r2, r2
 8004790:	6239      	str	r1, [r7, #32]
 8004792:	415b      	adcs	r3, r3
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479a:	4641      	mov	r1, r8
 800479c:	1854      	adds	r4, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0501 	adc.w	r5, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	00eb      	lsls	r3, r5, #3
 80047ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b2:	00e2      	lsls	r2, r4, #3
 80047b4:	4614      	mov	r4, r2
 80047b6:	461d      	mov	r5, r3
 80047b8:	4643      	mov	r3, r8
 80047ba:	18e3      	adds	r3, r4, r3
 80047bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047c0:	464b      	mov	r3, r9
 80047c2:	eb45 0303 	adc.w	r3, r5, r3
 80047c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80047e4:	4629      	mov	r1, r5
 80047e6:	008b      	lsls	r3, r1, #2
 80047e8:	4621      	mov	r1, r4
 80047ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ee:	4621      	mov	r1, r4
 80047f0:	008a      	lsls	r2, r1, #2
 80047f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80047f6:	f7fc fa57 	bl	8000ca8 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4b64      	ldr	r3, [pc, #400]	; (8004990 <LL_USART_SetBaudRate+0x454>)
 8004800:	fba3 2302 	umull	r2, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	b29b      	uxth	r3, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	b29c      	uxth	r4, r3
 800480c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800481a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800481e:	4642      	mov	r2, r8
 8004820:	464b      	mov	r3, r9
 8004822:	1891      	adds	r1, r2, r2
 8004824:	61b9      	str	r1, [r7, #24]
 8004826:	415b      	adcs	r3, r3
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482e:	4641      	mov	r1, r8
 8004830:	1851      	adds	r1, r2, r1
 8004832:	6139      	str	r1, [r7, #16]
 8004834:	4649      	mov	r1, r9
 8004836:	414b      	adcs	r3, r1
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004846:	4659      	mov	r1, fp
 8004848:	00cb      	lsls	r3, r1, #3
 800484a:	4651      	mov	r1, sl
 800484c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004850:	4651      	mov	r1, sl
 8004852:	00ca      	lsls	r2, r1, #3
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	4603      	mov	r3, r0
 800485a:	4642      	mov	r2, r8
 800485c:	189b      	adds	r3, r3, r2
 800485e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004862:	464b      	mov	r3, r9
 8004864:	460a      	mov	r2, r1
 8004866:	eb42 0303 	adc.w	r3, r2, r3
 800486a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800486e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004878:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004888:	4649      	mov	r1, r9
 800488a:	008b      	lsls	r3, r1, #2
 800488c:	4641      	mov	r1, r8
 800488e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004892:	4641      	mov	r1, r8
 8004894:	008a      	lsls	r2, r1, #2
 8004896:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800489a:	f7fc fa05 	bl	8000ca8 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <LL_USART_SetBaudRate+0x454>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a36      	ldr	r2, [pc, #216]	; (8004990 <LL_USART_SetBaudRate+0x454>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4423      	add	r3, r4
 80048c8:	b29c      	uxth	r4, r3
 80048ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ce:	2200      	movs	r2, #0
 80048d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80048d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	415b      	adcs	r3, r3
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e8:	4641      	mov	r1, r8
 80048ea:	1851      	adds	r1, r2, r1
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	4649      	mov	r1, r9
 80048f0:	414b      	adcs	r3, r1
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004900:	4659      	mov	r1, fp
 8004902:	00cb      	lsls	r3, r1, #3
 8004904:	4651      	mov	r1, sl
 8004906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490a:	4651      	mov	r1, sl
 800490c:	00ca      	lsls	r2, r1, #3
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	4603      	mov	r3, r0
 8004914:	4642      	mov	r2, r8
 8004916:	189b      	adds	r3, r3, r2
 8004918:	673b      	str	r3, [r7, #112]	; 0x70
 800491a:	464b      	mov	r3, r9
 800491c:	460a      	mov	r2, r1
 800491e:	eb42 0303 	adc.w	r3, r2, r3
 8004922:	677b      	str	r3, [r7, #116]	; 0x74
 8004924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004928:	2200      	movs	r2, #0
 800492a:	66bb      	str	r3, [r7, #104]	; 0x68
 800492c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800493a:	4649      	mov	r1, r9
 800493c:	008b      	lsls	r3, r1, #2
 800493e:	4641      	mov	r1, r8
 8004940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004944:	4641      	mov	r1, r8
 8004946:	008a      	lsls	r2, r1, #2
 8004948:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800494c:	f7fc f9ac 	bl	8000ca8 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <LL_USART_SetBaudRate+0x454>)
 8004956:	fba3 1302 	umull	r1, r3, r3, r2
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2164      	movs	r1, #100	; 0x64
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	3332      	adds	r3, #50	; 0x32
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <LL_USART_SetBaudRate+0x454>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	b29b      	uxth	r3, r3
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	b29b      	uxth	r3, r3
 8004978:	4423      	add	r3, r4
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	bf00      	nop
 8004986:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800498a:	46bd      	mov	sp, r7
 800498c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004990:	51eb851f 	.word	0x51eb851f

08004994 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fd8e 	bl	80044c8 <LL_USART_IsEnabled>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d16c      	bne.n	8004a8c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049ba:	f023 030c 	bic.w	r3, r3, #12
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	6851      	ldr	r1, [r2, #4]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	68d2      	ldr	r2, [r2, #12]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	6912      	ldr	r2, [r2, #16]
 80049cc:	4311      	orrs	r1, r2
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	6992      	ldr	r2, [r2, #24]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fd85 	bl	80044f0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff fd92 	bl	8004516 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80049f2:	f107 0308 	add.w	r3, r7, #8
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff f9aa 	bl	8003d50 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <LL_USART_Init+0x104>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d102      	bne.n	8004a0a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e02f      	b.n	8004a6a <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <LL_USART_Init+0x108>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d102      	bne.n	8004a18 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e028      	b.n	8004a6a <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <LL_USART_Init+0x10c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d102      	bne.n	8004a26 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e021      	b.n	8004a6a <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <LL_USART_Init+0x110>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d102      	bne.n	8004a34 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	e01a      	b.n	8004a6a <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <LL_USART_Init+0x114>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e013      	b.n	8004a6a <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a19      	ldr	r2, [pc, #100]	; (8004aac <LL_USART_Init+0x118>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d102      	bne.n	8004a50 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e00c      	b.n	8004a6a <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <LL_USART_Init+0x11c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d102      	bne.n	8004a5e <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	e005      	b.n	8004a6a <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <LL_USART_Init+0x120>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fd58 	bl	800453c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40011000 	.word	0x40011000
 8004a9c:	40004400 	.word	0x40004400
 8004aa0:	40004800 	.word	0x40004800
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	40004c00 	.word	0x40004c00
 8004aac:	40005000 	.word	0x40005000
 8004ab0:	40007800 	.word	0x40007800
 8004ab4:	40007c00 	.word	0x40007c00

08004ab8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <LL_mDelay+0x48>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004ac6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d00c      	beq.n	8004aea <LL_mDelay+0x32>
  {
    Delay++;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004ad6:	e008      	b.n	8004aea <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <LL_mDelay+0x48>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <LL_mDelay+0x32>
    {
      Delay--;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f3      	bne.n	8004ad8 <LL_mDelay+0x20>
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010

08004b04 <__errno>:
 8004b04:	4b01      	ldr	r3, [pc, #4]	; (8004b0c <__errno+0x8>)
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	2000000c 	.word	0x2000000c

08004b10 <__libc_init_array>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	4d0d      	ldr	r5, [pc, #52]	; (8004b48 <__libc_init_array+0x38>)
 8004b14:	4c0d      	ldr	r4, [pc, #52]	; (8004b4c <__libc_init_array+0x3c>)
 8004b16:	1b64      	subs	r4, r4, r5
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	42a6      	cmp	r6, r4
 8004b1e:	d109      	bne.n	8004b34 <__libc_init_array+0x24>
 8004b20:	4d0b      	ldr	r5, [pc, #44]	; (8004b50 <__libc_init_array+0x40>)
 8004b22:	4c0c      	ldr	r4, [pc, #48]	; (8004b54 <__libc_init_array+0x44>)
 8004b24:	f004 fca6 	bl	8009474 <_init>
 8004b28:	1b64      	subs	r4, r4, r5
 8004b2a:	10a4      	asrs	r4, r4, #2
 8004b2c:	2600      	movs	r6, #0
 8004b2e:	42a6      	cmp	r6, r4
 8004b30:	d105      	bne.n	8004b3e <__libc_init_array+0x2e>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b38:	4798      	blx	r3
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7ee      	b.n	8004b1c <__libc_init_array+0xc>
 8004b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b42:	4798      	blx	r3
 8004b44:	3601      	adds	r6, #1
 8004b46:	e7f2      	b.n	8004b2e <__libc_init_array+0x1e>
 8004b48:	08009a54 	.word	0x08009a54
 8004b4c:	08009a54 	.word	0x08009a54
 8004b50:	08009a54 	.word	0x08009a54
 8004b54:	08009a58 	.word	0x08009a58

08004b58 <memset>:
 8004b58:	4402      	add	r2, r0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d100      	bne.n	8004b62 <memset+0xa>
 8004b60:	4770      	bx	lr
 8004b62:	f803 1b01 	strb.w	r1, [r3], #1
 8004b66:	e7f9      	b.n	8004b5c <memset+0x4>

08004b68 <__cvt>:
 8004b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	ec55 4b10 	vmov	r4, r5, d0
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	460e      	mov	r6, r1
 8004b74:	4619      	mov	r1, r3
 8004b76:	462b      	mov	r3, r5
 8004b78:	bfbb      	ittet	lt
 8004b7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b7e:	461d      	movlt	r5, r3
 8004b80:	2300      	movge	r3, #0
 8004b82:	232d      	movlt	r3, #45	; 0x2d
 8004b84:	700b      	strb	r3, [r1, #0]
 8004b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b8c:	4691      	mov	r9, r2
 8004b8e:	f023 0820 	bic.w	r8, r3, #32
 8004b92:	bfbc      	itt	lt
 8004b94:	4622      	movlt	r2, r4
 8004b96:	4614      	movlt	r4, r2
 8004b98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b9c:	d005      	beq.n	8004baa <__cvt+0x42>
 8004b9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ba2:	d100      	bne.n	8004ba6 <__cvt+0x3e>
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	e000      	b.n	8004bac <__cvt+0x44>
 8004baa:	2103      	movs	r1, #3
 8004bac:	ab03      	add	r3, sp, #12
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	ab02      	add	r3, sp, #8
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	ec45 4b10 	vmov	d0, r4, r5
 8004bb8:	4653      	mov	r3, sl
 8004bba:	4632      	mov	r2, r6
 8004bbc:	f001 fe84 	bl	80068c8 <_dtoa_r>
 8004bc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	d102      	bne.n	8004bce <__cvt+0x66>
 8004bc8:	f019 0f01 	tst.w	r9, #1
 8004bcc:	d022      	beq.n	8004c14 <__cvt+0xac>
 8004bce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bd2:	eb07 0906 	add.w	r9, r7, r6
 8004bd6:	d110      	bne.n	8004bfa <__cvt+0x92>
 8004bd8:	783b      	ldrb	r3, [r7, #0]
 8004bda:	2b30      	cmp	r3, #48	; 0x30
 8004bdc:	d10a      	bne.n	8004bf4 <__cvt+0x8c>
 8004bde:	2200      	movs	r2, #0
 8004be0:	2300      	movs	r3, #0
 8004be2:	4620      	mov	r0, r4
 8004be4:	4629      	mov	r1, r5
 8004be6:	f7fb ff7f 	bl	8000ae8 <__aeabi_dcmpeq>
 8004bea:	b918      	cbnz	r0, 8004bf4 <__cvt+0x8c>
 8004bec:	f1c6 0601 	rsb	r6, r6, #1
 8004bf0:	f8ca 6000 	str.w	r6, [sl]
 8004bf4:	f8da 3000 	ldr.w	r3, [sl]
 8004bf8:	4499      	add	r9, r3
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	f7fb ff71 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c06:	b108      	cbz	r0, 8004c0c <__cvt+0xa4>
 8004c08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c0c:	2230      	movs	r2, #48	; 0x30
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	454b      	cmp	r3, r9
 8004c12:	d307      	bcc.n	8004c24 <__cvt+0xbc>
 8004c14:	9b03      	ldr	r3, [sp, #12]
 8004c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c18:	1bdb      	subs	r3, r3, r7
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	b004      	add	sp, #16
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	1c59      	adds	r1, r3, #1
 8004c26:	9103      	str	r1, [sp, #12]
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e7f0      	b.n	8004c0e <__cvt+0xa6>

08004c2c <__exponent>:
 8004c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2900      	cmp	r1, #0
 8004c32:	bfb8      	it	lt
 8004c34:	4249      	neglt	r1, r1
 8004c36:	f803 2b02 	strb.w	r2, [r3], #2
 8004c3a:	bfb4      	ite	lt
 8004c3c:	222d      	movlt	r2, #45	; 0x2d
 8004c3e:	222b      	movge	r2, #43	; 0x2b
 8004c40:	2909      	cmp	r1, #9
 8004c42:	7042      	strb	r2, [r0, #1]
 8004c44:	dd2a      	ble.n	8004c9c <__exponent+0x70>
 8004c46:	f10d 0407 	add.w	r4, sp, #7
 8004c4a:	46a4      	mov	ip, r4
 8004c4c:	270a      	movs	r7, #10
 8004c4e:	46a6      	mov	lr, r4
 8004c50:	460a      	mov	r2, r1
 8004c52:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c56:	fb07 1516 	mls	r5, r7, r6, r1
 8004c5a:	3530      	adds	r5, #48	; 0x30
 8004c5c:	2a63      	cmp	r2, #99	; 0x63
 8004c5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c66:	4631      	mov	r1, r6
 8004c68:	dcf1      	bgt.n	8004c4e <__exponent+0x22>
 8004c6a:	3130      	adds	r1, #48	; 0x30
 8004c6c:	f1ae 0502 	sub.w	r5, lr, #2
 8004c70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c74:	1c44      	adds	r4, r0, #1
 8004c76:	4629      	mov	r1, r5
 8004c78:	4561      	cmp	r1, ip
 8004c7a:	d30a      	bcc.n	8004c92 <__exponent+0x66>
 8004c7c:	f10d 0209 	add.w	r2, sp, #9
 8004c80:	eba2 020e 	sub.w	r2, r2, lr
 8004c84:	4565      	cmp	r5, ip
 8004c86:	bf88      	it	hi
 8004c88:	2200      	movhi	r2, #0
 8004c8a:	4413      	add	r3, r2
 8004c8c:	1a18      	subs	r0, r3, r0
 8004c8e:	b003      	add	sp, #12
 8004c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c9a:	e7ed      	b.n	8004c78 <__exponent+0x4c>
 8004c9c:	2330      	movs	r3, #48	; 0x30
 8004c9e:	3130      	adds	r1, #48	; 0x30
 8004ca0:	7083      	strb	r3, [r0, #2]
 8004ca2:	70c1      	strb	r1, [r0, #3]
 8004ca4:	1d03      	adds	r3, r0, #4
 8004ca6:	e7f1      	b.n	8004c8c <__exponent+0x60>

08004ca8 <_printf_float>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	ed2d 8b02 	vpush	{d8}
 8004cb0:	b08d      	sub	sp, #52	; 0x34
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004cb8:	4616      	mov	r6, r2
 8004cba:	461f      	mov	r7, r3
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	f003 f917 	bl	8007ef0 <_localeconv_r>
 8004cc2:	f8d0 a000 	ldr.w	sl, [r0]
 8004cc6:	4650      	mov	r0, sl
 8004cc8:	f7fb fa92 	bl	80001f0 <strlen>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	9305      	str	r3, [sp, #20]
 8004cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004cdc:	3307      	adds	r3, #7
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	f103 0208 	add.w	r2, r3, #8
 8004ce6:	f8c8 2000 	str.w	r2, [r8]
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004cf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cfa:	9307      	str	r3, [sp, #28]
 8004cfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d00:	ee08 0a10 	vmov	s16, r0
 8004d04:	4b9f      	ldr	r3, [pc, #636]	; (8004f84 <_printf_float+0x2dc>)
 8004d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	f7fb ff1d 	bl	8000b4c <__aeabi_dcmpun>
 8004d12:	bb88      	cbnz	r0, 8004d78 <_printf_float+0xd0>
 8004d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d18:	4b9a      	ldr	r3, [pc, #616]	; (8004f84 <_printf_float+0x2dc>)
 8004d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1e:	f7fb fef7 	bl	8000b10 <__aeabi_dcmple>
 8004d22:	bb48      	cbnz	r0, 8004d78 <_printf_float+0xd0>
 8004d24:	2200      	movs	r2, #0
 8004d26:	2300      	movs	r3, #0
 8004d28:	4640      	mov	r0, r8
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	f7fb fee6 	bl	8000afc <__aeabi_dcmplt>
 8004d30:	b110      	cbz	r0, 8004d38 <_printf_float+0x90>
 8004d32:	232d      	movs	r3, #45	; 0x2d
 8004d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d38:	4b93      	ldr	r3, [pc, #588]	; (8004f88 <_printf_float+0x2e0>)
 8004d3a:	4894      	ldr	r0, [pc, #592]	; (8004f8c <_printf_float+0x2e4>)
 8004d3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d40:	bf94      	ite	ls
 8004d42:	4698      	movls	r8, r3
 8004d44:	4680      	movhi	r8, r0
 8004d46:	2303      	movs	r3, #3
 8004d48:	6123      	str	r3, [r4, #16]
 8004d4a:	9b05      	ldr	r3, [sp, #20]
 8004d4c:	f023 0204 	bic.w	r2, r3, #4
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	f04f 0900 	mov.w	r9, #0
 8004d56:	9700      	str	r7, [sp, #0]
 8004d58:	4633      	mov	r3, r6
 8004d5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 f9d8 	bl	8005114 <_printf_common>
 8004d64:	3001      	adds	r0, #1
 8004d66:	f040 8090 	bne.w	8004e8a <_printf_float+0x1e2>
 8004d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6e:	b00d      	add	sp, #52	; 0x34
 8004d70:	ecbd 8b02 	vpop	{d8}
 8004d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	4649      	mov	r1, r9
 8004d80:	f7fb fee4 	bl	8000b4c <__aeabi_dcmpun>
 8004d84:	b140      	cbz	r0, 8004d98 <_printf_float+0xf0>
 8004d86:	464b      	mov	r3, r9
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bfbc      	itt	lt
 8004d8c:	232d      	movlt	r3, #45	; 0x2d
 8004d8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d92:	487f      	ldr	r0, [pc, #508]	; (8004f90 <_printf_float+0x2e8>)
 8004d94:	4b7f      	ldr	r3, [pc, #508]	; (8004f94 <_printf_float+0x2ec>)
 8004d96:	e7d1      	b.n	8004d3c <_printf_float+0x94>
 8004d98:	6863      	ldr	r3, [r4, #4]
 8004d9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d9e:	9206      	str	r2, [sp, #24]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	d13f      	bne.n	8004e24 <_printf_float+0x17c>
 8004da4:	2306      	movs	r3, #6
 8004da6:	6063      	str	r3, [r4, #4]
 8004da8:	9b05      	ldr	r3, [sp, #20]
 8004daa:	6861      	ldr	r1, [r4, #4]
 8004dac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004db0:	2300      	movs	r3, #0
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	ab0a      	add	r3, sp, #40	; 0x28
 8004db6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004dba:	ab09      	add	r3, sp, #36	; 0x24
 8004dbc:	ec49 8b10 	vmov	d0, r8, r9
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	6022      	str	r2, [r4, #0]
 8004dc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f7ff fecd 	bl	8004b68 <__cvt>
 8004dce:	9b06      	ldr	r3, [sp, #24]
 8004dd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dd2:	2b47      	cmp	r3, #71	; 0x47
 8004dd4:	4680      	mov	r8, r0
 8004dd6:	d108      	bne.n	8004dea <_printf_float+0x142>
 8004dd8:	1cc8      	adds	r0, r1, #3
 8004dda:	db02      	blt.n	8004de2 <_printf_float+0x13a>
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	4299      	cmp	r1, r3
 8004de0:	dd41      	ble.n	8004e66 <_printf_float+0x1be>
 8004de2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004de6:	fa5f fb8b 	uxtb.w	fp, fp
 8004dea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dee:	d820      	bhi.n	8004e32 <_printf_float+0x18a>
 8004df0:	3901      	subs	r1, #1
 8004df2:	465a      	mov	r2, fp
 8004df4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004df8:	9109      	str	r1, [sp, #36]	; 0x24
 8004dfa:	f7ff ff17 	bl	8004c2c <__exponent>
 8004dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e00:	1813      	adds	r3, r2, r0
 8004e02:	2a01      	cmp	r2, #1
 8004e04:	4681      	mov	r9, r0
 8004e06:	6123      	str	r3, [r4, #16]
 8004e08:	dc02      	bgt.n	8004e10 <_printf_float+0x168>
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	07d2      	lsls	r2, r2, #31
 8004e0e:	d501      	bpl.n	8004e14 <_printf_float+0x16c>
 8004e10:	3301      	adds	r3, #1
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d09c      	beq.n	8004d56 <_printf_float+0xae>
 8004e1c:	232d      	movs	r3, #45	; 0x2d
 8004e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e22:	e798      	b.n	8004d56 <_printf_float+0xae>
 8004e24:	9a06      	ldr	r2, [sp, #24]
 8004e26:	2a47      	cmp	r2, #71	; 0x47
 8004e28:	d1be      	bne.n	8004da8 <_printf_float+0x100>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1bc      	bne.n	8004da8 <_printf_float+0x100>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e7b9      	b.n	8004da6 <_printf_float+0xfe>
 8004e32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e36:	d118      	bne.n	8004e6a <_printf_float+0x1c2>
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	dd0b      	ble.n	8004e56 <_printf_float+0x1ae>
 8004e3e:	6121      	str	r1, [r4, #16]
 8004e40:	b913      	cbnz	r3, 8004e48 <_printf_float+0x1a0>
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	07d0      	lsls	r0, r2, #31
 8004e46:	d502      	bpl.n	8004e4e <_printf_float+0x1a6>
 8004e48:	3301      	adds	r3, #1
 8004e4a:	440b      	add	r3, r1
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e50:	f04f 0900 	mov.w	r9, #0
 8004e54:	e7de      	b.n	8004e14 <_printf_float+0x16c>
 8004e56:	b913      	cbnz	r3, 8004e5e <_printf_float+0x1b6>
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	07d2      	lsls	r2, r2, #31
 8004e5c:	d501      	bpl.n	8004e62 <_printf_float+0x1ba>
 8004e5e:	3302      	adds	r3, #2
 8004e60:	e7f4      	b.n	8004e4c <_printf_float+0x1a4>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e7f2      	b.n	8004e4c <_printf_float+0x1a4>
 8004e66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	db05      	blt.n	8004e7c <_printf_float+0x1d4>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	6121      	str	r1, [r4, #16]
 8004e74:	07d8      	lsls	r0, r3, #31
 8004e76:	d5ea      	bpl.n	8004e4e <_printf_float+0x1a6>
 8004e78:	1c4b      	adds	r3, r1, #1
 8004e7a:	e7e7      	b.n	8004e4c <_printf_float+0x1a4>
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	bfd4      	ite	le
 8004e80:	f1c1 0202 	rsble	r2, r1, #2
 8004e84:	2201      	movgt	r2, #1
 8004e86:	4413      	add	r3, r2
 8004e88:	e7e0      	b.n	8004e4c <_printf_float+0x1a4>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	055a      	lsls	r2, r3, #21
 8004e8e:	d407      	bmi.n	8004ea0 <_printf_float+0x1f8>
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	4642      	mov	r2, r8
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b8      	blx	r7
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d12c      	bne.n	8004ef8 <_printf_float+0x250>
 8004e9e:	e764      	b.n	8004d6a <_printf_float+0xc2>
 8004ea0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ea4:	f240 80e0 	bls.w	8005068 <_printf_float+0x3c0>
 8004ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eac:	2200      	movs	r2, #0
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f7fb fe1a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d034      	beq.n	8004f22 <_printf_float+0x27a>
 8004eb8:	4a37      	ldr	r2, [pc, #220]	; (8004f98 <_printf_float+0x2f0>)
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f43f af51 	beq.w	8004d6a <_printf_float+0xc2>
 8004ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	db02      	blt.n	8004ed6 <_printf_float+0x22e>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	07d8      	lsls	r0, r3, #31
 8004ed4:	d510      	bpl.n	8004ef8 <_printf_float+0x250>
 8004ed6:	ee18 3a10 	vmov	r3, s16
 8004eda:	4652      	mov	r2, sl
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f af41 	beq.w	8004d6a <_printf_float+0xc2>
 8004ee8:	f04f 0800 	mov.w	r8, #0
 8004eec:	f104 091a 	add.w	r9, r4, #26
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	4543      	cmp	r3, r8
 8004ef6:	dc09      	bgt.n	8004f0c <_printf_float+0x264>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	079b      	lsls	r3, r3, #30
 8004efc:	f100 8105 	bmi.w	800510a <_printf_float+0x462>
 8004f00:	68e0      	ldr	r0, [r4, #12]
 8004f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f04:	4298      	cmp	r0, r3
 8004f06:	bfb8      	it	lt
 8004f08:	4618      	movlt	r0, r3
 8004f0a:	e730      	b.n	8004d6e <_printf_float+0xc6>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	464a      	mov	r2, r9
 8004f10:	4631      	mov	r1, r6
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	f43f af27 	beq.w	8004d6a <_printf_float+0xc2>
 8004f1c:	f108 0801 	add.w	r8, r8, #1
 8004f20:	e7e6      	b.n	8004ef0 <_printf_float+0x248>
 8004f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	dc39      	bgt.n	8004f9c <_printf_float+0x2f4>
 8004f28:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <_printf_float+0x2f0>)
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4628      	mov	r0, r5
 8004f30:	47b8      	blx	r7
 8004f32:	3001      	adds	r0, #1
 8004f34:	f43f af19 	beq.w	8004d6a <_printf_float+0xc2>
 8004f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	d102      	bne.n	8004f46 <_printf_float+0x29e>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	d5d8      	bpl.n	8004ef8 <_printf_float+0x250>
 8004f46:	ee18 3a10 	vmov	r3, s16
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f af09 	beq.w	8004d6a <_printf_float+0xc2>
 8004f58:	f04f 0900 	mov.w	r9, #0
 8004f5c:	f104 0a1a 	add.w	sl, r4, #26
 8004f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f62:	425b      	negs	r3, r3
 8004f64:	454b      	cmp	r3, r9
 8004f66:	dc01      	bgt.n	8004f6c <_printf_float+0x2c4>
 8004f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f6a:	e792      	b.n	8004e92 <_printf_float+0x1ea>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4652      	mov	r2, sl
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f aef7 	beq.w	8004d6a <_printf_float+0xc2>
 8004f7c:	f109 0901 	add.w	r9, r9, #1
 8004f80:	e7ee      	b.n	8004f60 <_printf_float+0x2b8>
 8004f82:	bf00      	nop
 8004f84:	7fefffff 	.word	0x7fefffff
 8004f88:	080095a0 	.word	0x080095a0
 8004f8c:	080095a4 	.word	0x080095a4
 8004f90:	080095ac 	.word	0x080095ac
 8004f94:	080095a8 	.word	0x080095a8
 8004f98:	080095b0 	.word	0x080095b0
 8004f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	bfa8      	it	ge
 8004fa4:	461a      	movge	r2, r3
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	4691      	mov	r9, r2
 8004faa:	dc37      	bgt.n	800501c <_printf_float+0x374>
 8004fac:	f04f 0b00 	mov.w	fp, #0
 8004fb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fb4:	f104 021a 	add.w	r2, r4, #26
 8004fb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	eba3 0309 	sub.w	r3, r3, r9
 8004fc0:	455b      	cmp	r3, fp
 8004fc2:	dc33      	bgt.n	800502c <_printf_float+0x384>
 8004fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	db3b      	blt.n	8005044 <_printf_float+0x39c>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	07da      	lsls	r2, r3, #31
 8004fd0:	d438      	bmi.n	8005044 <_printf_float+0x39c>
 8004fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd4:	9a05      	ldr	r2, [sp, #20]
 8004fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fd8:	1a9a      	subs	r2, r3, r2
 8004fda:	eba3 0901 	sub.w	r9, r3, r1
 8004fde:	4591      	cmp	r9, r2
 8004fe0:	bfa8      	it	ge
 8004fe2:	4691      	movge	r9, r2
 8004fe4:	f1b9 0f00 	cmp.w	r9, #0
 8004fe8:	dc35      	bgt.n	8005056 <_printf_float+0x3ae>
 8004fea:	f04f 0800 	mov.w	r8, #0
 8004fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ff2:	f104 0a1a 	add.w	sl, r4, #26
 8004ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	eba3 0309 	sub.w	r3, r3, r9
 8005000:	4543      	cmp	r3, r8
 8005002:	f77f af79 	ble.w	8004ef8 <_printf_float+0x250>
 8005006:	2301      	movs	r3, #1
 8005008:	4652      	mov	r2, sl
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	f43f aeaa 	beq.w	8004d6a <_printf_float+0xc2>
 8005016:	f108 0801 	add.w	r8, r8, #1
 800501a:	e7ec      	b.n	8004ff6 <_printf_float+0x34e>
 800501c:	4613      	mov	r3, r2
 800501e:	4631      	mov	r1, r6
 8005020:	4642      	mov	r2, r8
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	d1c0      	bne.n	8004fac <_printf_float+0x304>
 800502a:	e69e      	b.n	8004d6a <_printf_float+0xc2>
 800502c:	2301      	movs	r3, #1
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	9205      	str	r2, [sp, #20]
 8005034:	47b8      	blx	r7
 8005036:	3001      	adds	r0, #1
 8005038:	f43f ae97 	beq.w	8004d6a <_printf_float+0xc2>
 800503c:	9a05      	ldr	r2, [sp, #20]
 800503e:	f10b 0b01 	add.w	fp, fp, #1
 8005042:	e7b9      	b.n	8004fb8 <_printf_float+0x310>
 8005044:	ee18 3a10 	vmov	r3, s16
 8005048:	4652      	mov	r2, sl
 800504a:	4631      	mov	r1, r6
 800504c:	4628      	mov	r0, r5
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	d1be      	bne.n	8004fd2 <_printf_float+0x32a>
 8005054:	e689      	b.n	8004d6a <_printf_float+0xc2>
 8005056:	9a05      	ldr	r2, [sp, #20]
 8005058:	464b      	mov	r3, r9
 800505a:	4442      	add	r2, r8
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	d1c1      	bne.n	8004fea <_printf_float+0x342>
 8005066:	e680      	b.n	8004d6a <_printf_float+0xc2>
 8005068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800506a:	2a01      	cmp	r2, #1
 800506c:	dc01      	bgt.n	8005072 <_printf_float+0x3ca>
 800506e:	07db      	lsls	r3, r3, #31
 8005070:	d538      	bpl.n	80050e4 <_printf_float+0x43c>
 8005072:	2301      	movs	r3, #1
 8005074:	4642      	mov	r2, r8
 8005076:	4631      	mov	r1, r6
 8005078:	4628      	mov	r0, r5
 800507a:	47b8      	blx	r7
 800507c:	3001      	adds	r0, #1
 800507e:	f43f ae74 	beq.w	8004d6a <_printf_float+0xc2>
 8005082:	ee18 3a10 	vmov	r3, s16
 8005086:	4652      	mov	r2, sl
 8005088:	4631      	mov	r1, r6
 800508a:	4628      	mov	r0, r5
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	f43f ae6b 	beq.w	8004d6a <_printf_float+0xc2>
 8005094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005098:	2200      	movs	r2, #0
 800509a:	2300      	movs	r3, #0
 800509c:	f7fb fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 80050a0:	b9d8      	cbnz	r0, 80050da <_printf_float+0x432>
 80050a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a4:	f108 0201 	add.w	r2, r8, #1
 80050a8:	3b01      	subs	r3, #1
 80050aa:	4631      	mov	r1, r6
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	d10e      	bne.n	80050d2 <_printf_float+0x42a>
 80050b4:	e659      	b.n	8004d6a <_printf_float+0xc2>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4652      	mov	r2, sl
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	f43f ae52 	beq.w	8004d6a <_printf_float+0xc2>
 80050c6:	f108 0801 	add.w	r8, r8, #1
 80050ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4543      	cmp	r3, r8
 80050d0:	dcf1      	bgt.n	80050b6 <_printf_float+0x40e>
 80050d2:	464b      	mov	r3, r9
 80050d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050d8:	e6dc      	b.n	8004e94 <_printf_float+0x1ec>
 80050da:	f04f 0800 	mov.w	r8, #0
 80050de:	f104 0a1a 	add.w	sl, r4, #26
 80050e2:	e7f2      	b.n	80050ca <_printf_float+0x422>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4642      	mov	r2, r8
 80050e8:	e7df      	b.n	80050aa <_printf_float+0x402>
 80050ea:	2301      	movs	r3, #1
 80050ec:	464a      	mov	r2, r9
 80050ee:	4631      	mov	r1, r6
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b8      	blx	r7
 80050f4:	3001      	adds	r0, #1
 80050f6:	f43f ae38 	beq.w	8004d6a <_printf_float+0xc2>
 80050fa:	f108 0801 	add.w	r8, r8, #1
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005102:	1a5b      	subs	r3, r3, r1
 8005104:	4543      	cmp	r3, r8
 8005106:	dcf0      	bgt.n	80050ea <_printf_float+0x442>
 8005108:	e6fa      	b.n	8004f00 <_printf_float+0x258>
 800510a:	f04f 0800 	mov.w	r8, #0
 800510e:	f104 0919 	add.w	r9, r4, #25
 8005112:	e7f4      	b.n	80050fe <_printf_float+0x456>

08005114 <_printf_common>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	4616      	mov	r6, r2
 800511a:	4699      	mov	r9, r3
 800511c:	688a      	ldr	r2, [r1, #8]
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005124:	4293      	cmp	r3, r2
 8005126:	bfb8      	it	lt
 8005128:	4613      	movlt	r3, r2
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005130:	4607      	mov	r7, r0
 8005132:	460c      	mov	r4, r1
 8005134:	b10a      	cbz	r2, 800513a <_printf_common+0x26>
 8005136:	3301      	adds	r3, #1
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	6833      	ldrmi	r3, [r6, #0]
 8005142:	3302      	addmi	r3, #2
 8005144:	6033      	strmi	r3, [r6, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d106      	bne.n	800515c <_printf_common+0x48>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	6832      	ldr	r2, [r6, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	42ab      	cmp	r3, r5
 800515a:	dc26      	bgt.n	80051aa <_printf_common+0x96>
 800515c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005160:	1e13      	subs	r3, r2, #0
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	bf18      	it	ne
 8005166:	2301      	movne	r3, #1
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d42b      	bmi.n	80051c4 <_printf_common+0xb0>
 800516c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d01e      	beq.n	80051b8 <_printf_common+0xa4>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	68e5      	ldr	r5, [r4, #12]
 800517e:	6832      	ldr	r2, [r6, #0]
 8005180:	f003 0306 	and.w	r3, r3, #6
 8005184:	2b04      	cmp	r3, #4
 8005186:	bf08      	it	eq
 8005188:	1aad      	subeq	r5, r5, r2
 800518a:	68a3      	ldr	r3, [r4, #8]
 800518c:	6922      	ldr	r2, [r4, #16]
 800518e:	bf0c      	ite	eq
 8005190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005194:	2500      	movne	r5, #0
 8005196:	4293      	cmp	r3, r2
 8005198:	bfc4      	itt	gt
 800519a:	1a9b      	subgt	r3, r3, r2
 800519c:	18ed      	addgt	r5, r5, r3
 800519e:	2600      	movs	r6, #0
 80051a0:	341a      	adds	r4, #26
 80051a2:	42b5      	cmp	r5, r6
 80051a4:	d11a      	bne.n	80051dc <_printf_common+0xc8>
 80051a6:	2000      	movs	r0, #0
 80051a8:	e008      	b.n	80051bc <_printf_common+0xa8>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4652      	mov	r2, sl
 80051ae:	4649      	mov	r1, r9
 80051b0:	4638      	mov	r0, r7
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d103      	bne.n	80051c0 <_printf_common+0xac>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	3501      	adds	r5, #1
 80051c2:	e7c6      	b.n	8005152 <_printf_common+0x3e>
 80051c4:	18e1      	adds	r1, r4, r3
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	2030      	movs	r0, #48	; 0x30
 80051ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ce:	4422      	add	r2, r4
 80051d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051d8:	3302      	adds	r3, #2
 80051da:	e7c7      	b.n	800516c <_printf_common+0x58>
 80051dc:	2301      	movs	r3, #1
 80051de:	4622      	mov	r2, r4
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d0e6      	beq.n	80051b8 <_printf_common+0xa4>
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7d9      	b.n	80051a2 <_printf_common+0x8e>
	...

080051f0 <_printf_i>:
 80051f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	7e0f      	ldrb	r7, [r1, #24]
 80051f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051f8:	2f78      	cmp	r7, #120	; 0x78
 80051fa:	4691      	mov	r9, r2
 80051fc:	4680      	mov	r8, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	469a      	mov	sl, r3
 8005202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005206:	d807      	bhi.n	8005218 <_printf_i+0x28>
 8005208:	2f62      	cmp	r7, #98	; 0x62
 800520a:	d80a      	bhi.n	8005222 <_printf_i+0x32>
 800520c:	2f00      	cmp	r7, #0
 800520e:	f000 80d8 	beq.w	80053c2 <_printf_i+0x1d2>
 8005212:	2f58      	cmp	r7, #88	; 0x58
 8005214:	f000 80a3 	beq.w	800535e <_printf_i+0x16e>
 8005218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800521c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005220:	e03a      	b.n	8005298 <_printf_i+0xa8>
 8005222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005226:	2b15      	cmp	r3, #21
 8005228:	d8f6      	bhi.n	8005218 <_printf_i+0x28>
 800522a:	a101      	add	r1, pc, #4	; (adr r1, 8005230 <_printf_i+0x40>)
 800522c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005230:	08005289 	.word	0x08005289
 8005234:	0800529d 	.word	0x0800529d
 8005238:	08005219 	.word	0x08005219
 800523c:	08005219 	.word	0x08005219
 8005240:	08005219 	.word	0x08005219
 8005244:	08005219 	.word	0x08005219
 8005248:	0800529d 	.word	0x0800529d
 800524c:	08005219 	.word	0x08005219
 8005250:	08005219 	.word	0x08005219
 8005254:	08005219 	.word	0x08005219
 8005258:	08005219 	.word	0x08005219
 800525c:	080053a9 	.word	0x080053a9
 8005260:	080052cd 	.word	0x080052cd
 8005264:	0800538b 	.word	0x0800538b
 8005268:	08005219 	.word	0x08005219
 800526c:	08005219 	.word	0x08005219
 8005270:	080053cb 	.word	0x080053cb
 8005274:	08005219 	.word	0x08005219
 8005278:	080052cd 	.word	0x080052cd
 800527c:	08005219 	.word	0x08005219
 8005280:	08005219 	.word	0x08005219
 8005284:	08005393 	.word	0x08005393
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	602a      	str	r2, [r5, #0]
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005298:	2301      	movs	r3, #1
 800529a:	e0a3      	b.n	80053e4 <_printf_i+0x1f4>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	6829      	ldr	r1, [r5, #0]
 80052a0:	0606      	lsls	r6, r0, #24
 80052a2:	f101 0304 	add.w	r3, r1, #4
 80052a6:	d50a      	bpl.n	80052be <_printf_i+0xce>
 80052a8:	680e      	ldr	r6, [r1, #0]
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	2e00      	cmp	r6, #0
 80052ae:	da03      	bge.n	80052b8 <_printf_i+0xc8>
 80052b0:	232d      	movs	r3, #45	; 0x2d
 80052b2:	4276      	negs	r6, r6
 80052b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b8:	485e      	ldr	r0, [pc, #376]	; (8005434 <_printf_i+0x244>)
 80052ba:	230a      	movs	r3, #10
 80052bc:	e019      	b.n	80052f2 <_printf_i+0x102>
 80052be:	680e      	ldr	r6, [r1, #0]
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052c6:	bf18      	it	ne
 80052c8:	b236      	sxthne	r6, r6
 80052ca:	e7ef      	b.n	80052ac <_printf_i+0xbc>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	6820      	ldr	r0, [r4, #0]
 80052d0:	1d19      	adds	r1, r3, #4
 80052d2:	6029      	str	r1, [r5, #0]
 80052d4:	0601      	lsls	r1, r0, #24
 80052d6:	d501      	bpl.n	80052dc <_printf_i+0xec>
 80052d8:	681e      	ldr	r6, [r3, #0]
 80052da:	e002      	b.n	80052e2 <_printf_i+0xf2>
 80052dc:	0646      	lsls	r6, r0, #25
 80052de:	d5fb      	bpl.n	80052d8 <_printf_i+0xe8>
 80052e0:	881e      	ldrh	r6, [r3, #0]
 80052e2:	4854      	ldr	r0, [pc, #336]	; (8005434 <_printf_i+0x244>)
 80052e4:	2f6f      	cmp	r7, #111	; 0x6f
 80052e6:	bf0c      	ite	eq
 80052e8:	2308      	moveq	r3, #8
 80052ea:	230a      	movne	r3, #10
 80052ec:	2100      	movs	r1, #0
 80052ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052f2:	6865      	ldr	r5, [r4, #4]
 80052f4:	60a5      	str	r5, [r4, #8]
 80052f6:	2d00      	cmp	r5, #0
 80052f8:	bfa2      	ittt	ge
 80052fa:	6821      	ldrge	r1, [r4, #0]
 80052fc:	f021 0104 	bicge.w	r1, r1, #4
 8005300:	6021      	strge	r1, [r4, #0]
 8005302:	b90e      	cbnz	r6, 8005308 <_printf_i+0x118>
 8005304:	2d00      	cmp	r5, #0
 8005306:	d04d      	beq.n	80053a4 <_printf_i+0x1b4>
 8005308:	4615      	mov	r5, r2
 800530a:	fbb6 f1f3 	udiv	r1, r6, r3
 800530e:	fb03 6711 	mls	r7, r3, r1, r6
 8005312:	5dc7      	ldrb	r7, [r0, r7]
 8005314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005318:	4637      	mov	r7, r6
 800531a:	42bb      	cmp	r3, r7
 800531c:	460e      	mov	r6, r1
 800531e:	d9f4      	bls.n	800530a <_printf_i+0x11a>
 8005320:	2b08      	cmp	r3, #8
 8005322:	d10b      	bne.n	800533c <_printf_i+0x14c>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	07de      	lsls	r6, r3, #31
 8005328:	d508      	bpl.n	800533c <_printf_i+0x14c>
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	6861      	ldr	r1, [r4, #4]
 800532e:	4299      	cmp	r1, r3
 8005330:	bfde      	ittt	le
 8005332:	2330      	movle	r3, #48	; 0x30
 8005334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800533c:	1b52      	subs	r2, r2, r5
 800533e:	6122      	str	r2, [r4, #16]
 8005340:	f8cd a000 	str.w	sl, [sp]
 8005344:	464b      	mov	r3, r9
 8005346:	aa03      	add	r2, sp, #12
 8005348:	4621      	mov	r1, r4
 800534a:	4640      	mov	r0, r8
 800534c:	f7ff fee2 	bl	8005114 <_printf_common>
 8005350:	3001      	adds	r0, #1
 8005352:	d14c      	bne.n	80053ee <_printf_i+0x1fe>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	b004      	add	sp, #16
 800535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535e:	4835      	ldr	r0, [pc, #212]	; (8005434 <_printf_i+0x244>)
 8005360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005364:	6829      	ldr	r1, [r5, #0]
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	f851 6b04 	ldr.w	r6, [r1], #4
 800536c:	6029      	str	r1, [r5, #0]
 800536e:	061d      	lsls	r5, r3, #24
 8005370:	d514      	bpl.n	800539c <_printf_i+0x1ac>
 8005372:	07df      	lsls	r7, r3, #31
 8005374:	bf44      	itt	mi
 8005376:	f043 0320 	orrmi.w	r3, r3, #32
 800537a:	6023      	strmi	r3, [r4, #0]
 800537c:	b91e      	cbnz	r6, 8005386 <_printf_i+0x196>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	f023 0320 	bic.w	r3, r3, #32
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	2310      	movs	r3, #16
 8005388:	e7b0      	b.n	80052ec <_printf_i+0xfc>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f043 0320 	orr.w	r3, r3, #32
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	2378      	movs	r3, #120	; 0x78
 8005394:	4828      	ldr	r0, [pc, #160]	; (8005438 <_printf_i+0x248>)
 8005396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800539a:	e7e3      	b.n	8005364 <_printf_i+0x174>
 800539c:	0659      	lsls	r1, r3, #25
 800539e:	bf48      	it	mi
 80053a0:	b2b6      	uxthmi	r6, r6
 80053a2:	e7e6      	b.n	8005372 <_printf_i+0x182>
 80053a4:	4615      	mov	r5, r2
 80053a6:	e7bb      	b.n	8005320 <_printf_i+0x130>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	6826      	ldr	r6, [r4, #0]
 80053ac:	6961      	ldr	r1, [r4, #20]
 80053ae:	1d18      	adds	r0, r3, #4
 80053b0:	6028      	str	r0, [r5, #0]
 80053b2:	0635      	lsls	r5, r6, #24
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	d501      	bpl.n	80053bc <_printf_i+0x1cc>
 80053b8:	6019      	str	r1, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <_printf_i+0x1d2>
 80053bc:	0670      	lsls	r0, r6, #25
 80053be:	d5fb      	bpl.n	80053b8 <_printf_i+0x1c8>
 80053c0:	8019      	strh	r1, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	4615      	mov	r5, r2
 80053c8:	e7ba      	b.n	8005340 <_printf_i+0x150>
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	602a      	str	r2, [r5, #0]
 80053d0:	681d      	ldr	r5, [r3, #0]
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	2100      	movs	r1, #0
 80053d6:	4628      	mov	r0, r5
 80053d8:	f7fa ff12 	bl	8000200 <memchr>
 80053dc:	b108      	cbz	r0, 80053e2 <_printf_i+0x1f2>
 80053de:	1b40      	subs	r0, r0, r5
 80053e0:	6060      	str	r0, [r4, #4]
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	2300      	movs	r3, #0
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ec:	e7a8      	b.n	8005340 <_printf_i+0x150>
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	462a      	mov	r2, r5
 80053f2:	4649      	mov	r1, r9
 80053f4:	4640      	mov	r0, r8
 80053f6:	47d0      	blx	sl
 80053f8:	3001      	adds	r0, #1
 80053fa:	d0ab      	beq.n	8005354 <_printf_i+0x164>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	079b      	lsls	r3, r3, #30
 8005400:	d413      	bmi.n	800542a <_printf_i+0x23a>
 8005402:	68e0      	ldr	r0, [r4, #12]
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	4298      	cmp	r0, r3
 8005408:	bfb8      	it	lt
 800540a:	4618      	movlt	r0, r3
 800540c:	e7a4      	b.n	8005358 <_printf_i+0x168>
 800540e:	2301      	movs	r3, #1
 8005410:	4632      	mov	r2, r6
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d09b      	beq.n	8005354 <_printf_i+0x164>
 800541c:	3501      	adds	r5, #1
 800541e:	68e3      	ldr	r3, [r4, #12]
 8005420:	9903      	ldr	r1, [sp, #12]
 8005422:	1a5b      	subs	r3, r3, r1
 8005424:	42ab      	cmp	r3, r5
 8005426:	dcf2      	bgt.n	800540e <_printf_i+0x21e>
 8005428:	e7eb      	b.n	8005402 <_printf_i+0x212>
 800542a:	2500      	movs	r5, #0
 800542c:	f104 0619 	add.w	r6, r4, #25
 8005430:	e7f5      	b.n	800541e <_printf_i+0x22e>
 8005432:	bf00      	nop
 8005434:	080095b2 	.word	0x080095b2
 8005438:	080095c3 	.word	0x080095c3

0800543c <_scanf_float>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	b087      	sub	sp, #28
 8005442:	4617      	mov	r7, r2
 8005444:	9303      	str	r3, [sp, #12]
 8005446:	688b      	ldr	r3, [r1, #8]
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800544e:	bf83      	ittte	hi
 8005450:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005454:	195b      	addhi	r3, r3, r5
 8005456:	9302      	strhi	r3, [sp, #8]
 8005458:	2300      	movls	r3, #0
 800545a:	bf86      	itte	hi
 800545c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005460:	608b      	strhi	r3, [r1, #8]
 8005462:	9302      	strls	r3, [sp, #8]
 8005464:	680b      	ldr	r3, [r1, #0]
 8005466:	468b      	mov	fp, r1
 8005468:	2500      	movs	r5, #0
 800546a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800546e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005472:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005476:	4680      	mov	r8, r0
 8005478:	460c      	mov	r4, r1
 800547a:	465e      	mov	r6, fp
 800547c:	46aa      	mov	sl, r5
 800547e:	46a9      	mov	r9, r5
 8005480:	9501      	str	r5, [sp, #4]
 8005482:	68a2      	ldr	r2, [r4, #8]
 8005484:	b152      	cbz	r2, 800549c <_scanf_float+0x60>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b4e      	cmp	r3, #78	; 0x4e
 800548c:	d864      	bhi.n	8005558 <_scanf_float+0x11c>
 800548e:	2b40      	cmp	r3, #64	; 0x40
 8005490:	d83c      	bhi.n	800550c <_scanf_float+0xd0>
 8005492:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005496:	b2c8      	uxtb	r0, r1
 8005498:	280e      	cmp	r0, #14
 800549a:	d93a      	bls.n	8005512 <_scanf_float+0xd6>
 800549c:	f1b9 0f00 	cmp.w	r9, #0
 80054a0:	d003      	beq.n	80054aa <_scanf_float+0x6e>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ae:	f1ba 0f01 	cmp.w	sl, #1
 80054b2:	f200 8113 	bhi.w	80056dc <_scanf_float+0x2a0>
 80054b6:	455e      	cmp	r6, fp
 80054b8:	f200 8105 	bhi.w	80056c6 <_scanf_float+0x28a>
 80054bc:	2501      	movs	r5, #1
 80054be:	4628      	mov	r0, r5
 80054c0:	b007      	add	sp, #28
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054ca:	2a0d      	cmp	r2, #13
 80054cc:	d8e6      	bhi.n	800549c <_scanf_float+0x60>
 80054ce:	a101      	add	r1, pc, #4	; (adr r1, 80054d4 <_scanf_float+0x98>)
 80054d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054d4:	08005613 	.word	0x08005613
 80054d8:	0800549d 	.word	0x0800549d
 80054dc:	0800549d 	.word	0x0800549d
 80054e0:	0800549d 	.word	0x0800549d
 80054e4:	08005673 	.word	0x08005673
 80054e8:	0800564b 	.word	0x0800564b
 80054ec:	0800549d 	.word	0x0800549d
 80054f0:	0800549d 	.word	0x0800549d
 80054f4:	08005621 	.word	0x08005621
 80054f8:	0800549d 	.word	0x0800549d
 80054fc:	0800549d 	.word	0x0800549d
 8005500:	0800549d 	.word	0x0800549d
 8005504:	0800549d 	.word	0x0800549d
 8005508:	080055d9 	.word	0x080055d9
 800550c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005510:	e7db      	b.n	80054ca <_scanf_float+0x8e>
 8005512:	290e      	cmp	r1, #14
 8005514:	d8c2      	bhi.n	800549c <_scanf_float+0x60>
 8005516:	a001      	add	r0, pc, #4	; (adr r0, 800551c <_scanf_float+0xe0>)
 8005518:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800551c:	080055cb 	.word	0x080055cb
 8005520:	0800549d 	.word	0x0800549d
 8005524:	080055cb 	.word	0x080055cb
 8005528:	0800565f 	.word	0x0800565f
 800552c:	0800549d 	.word	0x0800549d
 8005530:	08005579 	.word	0x08005579
 8005534:	080055b5 	.word	0x080055b5
 8005538:	080055b5 	.word	0x080055b5
 800553c:	080055b5 	.word	0x080055b5
 8005540:	080055b5 	.word	0x080055b5
 8005544:	080055b5 	.word	0x080055b5
 8005548:	080055b5 	.word	0x080055b5
 800554c:	080055b5 	.word	0x080055b5
 8005550:	080055b5 	.word	0x080055b5
 8005554:	080055b5 	.word	0x080055b5
 8005558:	2b6e      	cmp	r3, #110	; 0x6e
 800555a:	d809      	bhi.n	8005570 <_scanf_float+0x134>
 800555c:	2b60      	cmp	r3, #96	; 0x60
 800555e:	d8b2      	bhi.n	80054c6 <_scanf_float+0x8a>
 8005560:	2b54      	cmp	r3, #84	; 0x54
 8005562:	d077      	beq.n	8005654 <_scanf_float+0x218>
 8005564:	2b59      	cmp	r3, #89	; 0x59
 8005566:	d199      	bne.n	800549c <_scanf_float+0x60>
 8005568:	2d07      	cmp	r5, #7
 800556a:	d197      	bne.n	800549c <_scanf_float+0x60>
 800556c:	2508      	movs	r5, #8
 800556e:	e029      	b.n	80055c4 <_scanf_float+0x188>
 8005570:	2b74      	cmp	r3, #116	; 0x74
 8005572:	d06f      	beq.n	8005654 <_scanf_float+0x218>
 8005574:	2b79      	cmp	r3, #121	; 0x79
 8005576:	e7f6      	b.n	8005566 <_scanf_float+0x12a>
 8005578:	6821      	ldr	r1, [r4, #0]
 800557a:	05c8      	lsls	r0, r1, #23
 800557c:	d51a      	bpl.n	80055b4 <_scanf_float+0x178>
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005584:	6021      	str	r1, [r4, #0]
 8005586:	f109 0901 	add.w	r9, r9, #1
 800558a:	b11b      	cbz	r3, 8005594 <_scanf_float+0x158>
 800558c:	3b01      	subs	r3, #1
 800558e:	3201      	adds	r2, #1
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	60a2      	str	r2, [r4, #8]
 8005594:	68a3      	ldr	r3, [r4, #8]
 8005596:	3b01      	subs	r3, #1
 8005598:	60a3      	str	r3, [r4, #8]
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	3301      	adds	r3, #1
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	607b      	str	r3, [r7, #4]
 80055a8:	f340 8084 	ble.w	80056b4 <_scanf_float+0x278>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	e766      	b.n	8005482 <_scanf_float+0x46>
 80055b4:	eb1a 0f05 	cmn.w	sl, r5
 80055b8:	f47f af70 	bne.w	800549c <_scanf_float+0x60>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	f806 3b01 	strb.w	r3, [r6], #1
 80055c8:	e7e4      	b.n	8005594 <_scanf_float+0x158>
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	0610      	lsls	r0, r2, #24
 80055ce:	f57f af65 	bpl.w	800549c <_scanf_float+0x60>
 80055d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055d6:	e7f4      	b.n	80055c2 <_scanf_float+0x186>
 80055d8:	f1ba 0f00 	cmp.w	sl, #0
 80055dc:	d10e      	bne.n	80055fc <_scanf_float+0x1c0>
 80055de:	f1b9 0f00 	cmp.w	r9, #0
 80055e2:	d10e      	bne.n	8005602 <_scanf_float+0x1c6>
 80055e4:	6822      	ldr	r2, [r4, #0]
 80055e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055ee:	d108      	bne.n	8005602 <_scanf_float+0x1c6>
 80055f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055f4:	6022      	str	r2, [r4, #0]
 80055f6:	f04f 0a01 	mov.w	sl, #1
 80055fa:	e7e3      	b.n	80055c4 <_scanf_float+0x188>
 80055fc:	f1ba 0f02 	cmp.w	sl, #2
 8005600:	d055      	beq.n	80056ae <_scanf_float+0x272>
 8005602:	2d01      	cmp	r5, #1
 8005604:	d002      	beq.n	800560c <_scanf_float+0x1d0>
 8005606:	2d04      	cmp	r5, #4
 8005608:	f47f af48 	bne.w	800549c <_scanf_float+0x60>
 800560c:	3501      	adds	r5, #1
 800560e:	b2ed      	uxtb	r5, r5
 8005610:	e7d8      	b.n	80055c4 <_scanf_float+0x188>
 8005612:	f1ba 0f01 	cmp.w	sl, #1
 8005616:	f47f af41 	bne.w	800549c <_scanf_float+0x60>
 800561a:	f04f 0a02 	mov.w	sl, #2
 800561e:	e7d1      	b.n	80055c4 <_scanf_float+0x188>
 8005620:	b97d      	cbnz	r5, 8005642 <_scanf_float+0x206>
 8005622:	f1b9 0f00 	cmp.w	r9, #0
 8005626:	f47f af3c 	bne.w	80054a2 <_scanf_float+0x66>
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005630:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005634:	f47f af39 	bne.w	80054aa <_scanf_float+0x6e>
 8005638:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	2501      	movs	r5, #1
 8005640:	e7c0      	b.n	80055c4 <_scanf_float+0x188>
 8005642:	2d03      	cmp	r5, #3
 8005644:	d0e2      	beq.n	800560c <_scanf_float+0x1d0>
 8005646:	2d05      	cmp	r5, #5
 8005648:	e7de      	b.n	8005608 <_scanf_float+0x1cc>
 800564a:	2d02      	cmp	r5, #2
 800564c:	f47f af26 	bne.w	800549c <_scanf_float+0x60>
 8005650:	2503      	movs	r5, #3
 8005652:	e7b7      	b.n	80055c4 <_scanf_float+0x188>
 8005654:	2d06      	cmp	r5, #6
 8005656:	f47f af21 	bne.w	800549c <_scanf_float+0x60>
 800565a:	2507      	movs	r5, #7
 800565c:	e7b2      	b.n	80055c4 <_scanf_float+0x188>
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	0591      	lsls	r1, r2, #22
 8005662:	f57f af1b 	bpl.w	800549c <_scanf_float+0x60>
 8005666:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800566a:	6022      	str	r2, [r4, #0]
 800566c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005670:	e7a8      	b.n	80055c4 <_scanf_float+0x188>
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005678:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800567c:	d006      	beq.n	800568c <_scanf_float+0x250>
 800567e:	0550      	lsls	r0, r2, #21
 8005680:	f57f af0c 	bpl.w	800549c <_scanf_float+0x60>
 8005684:	f1b9 0f00 	cmp.w	r9, #0
 8005688:	f43f af0f 	beq.w	80054aa <_scanf_float+0x6e>
 800568c:	0591      	lsls	r1, r2, #22
 800568e:	bf58      	it	pl
 8005690:	9901      	ldrpl	r1, [sp, #4]
 8005692:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005696:	bf58      	it	pl
 8005698:	eba9 0101 	subpl.w	r1, r9, r1
 800569c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80056a0:	bf58      	it	pl
 80056a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80056a6:	6022      	str	r2, [r4, #0]
 80056a8:	f04f 0900 	mov.w	r9, #0
 80056ac:	e78a      	b.n	80055c4 <_scanf_float+0x188>
 80056ae:	f04f 0a03 	mov.w	sl, #3
 80056b2:	e787      	b.n	80055c4 <_scanf_float+0x188>
 80056b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056b8:	4639      	mov	r1, r7
 80056ba:	4640      	mov	r0, r8
 80056bc:	4798      	blx	r3
 80056be:	2800      	cmp	r0, #0
 80056c0:	f43f aedf 	beq.w	8005482 <_scanf_float+0x46>
 80056c4:	e6ea      	b.n	800549c <_scanf_float+0x60>
 80056c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056ce:	463a      	mov	r2, r7
 80056d0:	4640      	mov	r0, r8
 80056d2:	4798      	blx	r3
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	e6ec      	b.n	80054b6 <_scanf_float+0x7a>
 80056dc:	1e6b      	subs	r3, r5, #1
 80056de:	2b06      	cmp	r3, #6
 80056e0:	d825      	bhi.n	800572e <_scanf_float+0x2f2>
 80056e2:	2d02      	cmp	r5, #2
 80056e4:	d836      	bhi.n	8005754 <_scanf_float+0x318>
 80056e6:	455e      	cmp	r6, fp
 80056e8:	f67f aee8 	bls.w	80054bc <_scanf_float+0x80>
 80056ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056f4:	463a      	mov	r2, r7
 80056f6:	4640      	mov	r0, r8
 80056f8:	4798      	blx	r3
 80056fa:	6923      	ldr	r3, [r4, #16]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	e7f1      	b.n	80056e6 <_scanf_float+0x2aa>
 8005702:	9802      	ldr	r0, [sp, #8]
 8005704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005708:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800570c:	9002      	str	r0, [sp, #8]
 800570e:	463a      	mov	r2, r7
 8005710:	4640      	mov	r0, r8
 8005712:	4798      	blx	r3
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	3b01      	subs	r3, #1
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800571e:	fa5f fa8a 	uxtb.w	sl, sl
 8005722:	f1ba 0f02 	cmp.w	sl, #2
 8005726:	d1ec      	bne.n	8005702 <_scanf_float+0x2c6>
 8005728:	3d03      	subs	r5, #3
 800572a:	b2ed      	uxtb	r5, r5
 800572c:	1b76      	subs	r6, r6, r5
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	05da      	lsls	r2, r3, #23
 8005732:	d52f      	bpl.n	8005794 <_scanf_float+0x358>
 8005734:	055b      	lsls	r3, r3, #21
 8005736:	d510      	bpl.n	800575a <_scanf_float+0x31e>
 8005738:	455e      	cmp	r6, fp
 800573a:	f67f aebf 	bls.w	80054bc <_scanf_float+0x80>
 800573e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005746:	463a      	mov	r2, r7
 8005748:	4640      	mov	r0, r8
 800574a:	4798      	blx	r3
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	3b01      	subs	r3, #1
 8005750:	6123      	str	r3, [r4, #16]
 8005752:	e7f1      	b.n	8005738 <_scanf_float+0x2fc>
 8005754:	46aa      	mov	sl, r5
 8005756:	9602      	str	r6, [sp, #8]
 8005758:	e7df      	b.n	800571a <_scanf_float+0x2de>
 800575a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	2965      	cmp	r1, #101	; 0x65
 8005762:	f103 33ff 	add.w	r3, r3, #4294967295
 8005766:	f106 35ff 	add.w	r5, r6, #4294967295
 800576a:	6123      	str	r3, [r4, #16]
 800576c:	d00c      	beq.n	8005788 <_scanf_float+0x34c>
 800576e:	2945      	cmp	r1, #69	; 0x45
 8005770:	d00a      	beq.n	8005788 <_scanf_float+0x34c>
 8005772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005776:	463a      	mov	r2, r7
 8005778:	4640      	mov	r0, r8
 800577a:	4798      	blx	r3
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005782:	3b01      	subs	r3, #1
 8005784:	1eb5      	subs	r5, r6, #2
 8005786:	6123      	str	r3, [r4, #16]
 8005788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800578c:	463a      	mov	r2, r7
 800578e:	4640      	mov	r0, r8
 8005790:	4798      	blx	r3
 8005792:	462e      	mov	r6, r5
 8005794:	6825      	ldr	r5, [r4, #0]
 8005796:	f015 0510 	ands.w	r5, r5, #16
 800579a:	d159      	bne.n	8005850 <_scanf_float+0x414>
 800579c:	7035      	strb	r5, [r6, #0]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d11b      	bne.n	80057e2 <_scanf_float+0x3a6>
 80057aa:	9b01      	ldr	r3, [sp, #4]
 80057ac:	454b      	cmp	r3, r9
 80057ae:	eba3 0209 	sub.w	r2, r3, r9
 80057b2:	d123      	bne.n	80057fc <_scanf_float+0x3c0>
 80057b4:	2200      	movs	r2, #0
 80057b6:	4659      	mov	r1, fp
 80057b8:	4640      	mov	r0, r8
 80057ba:	f000 feaf 	bl	800651c <_strtod_r>
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	9b03      	ldr	r3, [sp, #12]
 80057c2:	f012 0f02 	tst.w	r2, #2
 80057c6:	ec57 6b10 	vmov	r6, r7, d0
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	d021      	beq.n	8005812 <_scanf_float+0x3d6>
 80057ce:	9903      	ldr	r1, [sp, #12]
 80057d0:	1d1a      	adds	r2, r3, #4
 80057d2:	600a      	str	r2, [r1, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	e9c3 6700 	strd	r6, r7, [r3]
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60e3      	str	r3, [r4, #12]
 80057e0:	e66d      	b.n	80054be <_scanf_float+0x82>
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0e5      	beq.n	80057b4 <_scanf_float+0x378>
 80057e8:	9905      	ldr	r1, [sp, #20]
 80057ea:	230a      	movs	r3, #10
 80057ec:	462a      	mov	r2, r5
 80057ee:	3101      	adds	r1, #1
 80057f0:	4640      	mov	r0, r8
 80057f2:	f000 ff1b 	bl	800662c <_strtol_r>
 80057f6:	9b04      	ldr	r3, [sp, #16]
 80057f8:	9e05      	ldr	r6, [sp, #20]
 80057fa:	1ac2      	subs	r2, r0, r3
 80057fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005800:	429e      	cmp	r6, r3
 8005802:	bf28      	it	cs
 8005804:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005808:	4912      	ldr	r1, [pc, #72]	; (8005854 <_scanf_float+0x418>)
 800580a:	4630      	mov	r0, r6
 800580c:	f000 f844 	bl	8005898 <siprintf>
 8005810:	e7d0      	b.n	80057b4 <_scanf_float+0x378>
 8005812:	9903      	ldr	r1, [sp, #12]
 8005814:	f012 0f04 	tst.w	r2, #4
 8005818:	f103 0204 	add.w	r2, r3, #4
 800581c:	600a      	str	r2, [r1, #0]
 800581e:	d1d9      	bne.n	80057d4 <_scanf_float+0x398>
 8005820:	f8d3 8000 	ldr.w	r8, [r3]
 8005824:	ee10 2a10 	vmov	r2, s0
 8005828:	ee10 0a10 	vmov	r0, s0
 800582c:	463b      	mov	r3, r7
 800582e:	4639      	mov	r1, r7
 8005830:	f7fb f98c 	bl	8000b4c <__aeabi_dcmpun>
 8005834:	b128      	cbz	r0, 8005842 <_scanf_float+0x406>
 8005836:	4808      	ldr	r0, [pc, #32]	; (8005858 <_scanf_float+0x41c>)
 8005838:	f000 f828 	bl	800588c <nanf>
 800583c:	ed88 0a00 	vstr	s0, [r8]
 8005840:	e7cb      	b.n	80057da <_scanf_float+0x39e>
 8005842:	4630      	mov	r0, r6
 8005844:	4639      	mov	r1, r7
 8005846:	f7fb f9df 	bl	8000c08 <__aeabi_d2f>
 800584a:	f8c8 0000 	str.w	r0, [r8]
 800584e:	e7c4      	b.n	80057da <_scanf_float+0x39e>
 8005850:	2500      	movs	r5, #0
 8005852:	e634      	b.n	80054be <_scanf_float+0x82>
 8005854:	080095d4 	.word	0x080095d4
 8005858:	08009a48 	.word	0x08009a48

0800585c <iprintf>:
 800585c:	b40f      	push	{r0, r1, r2, r3}
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <iprintf+0x2c>)
 8005860:	b513      	push	{r0, r1, r4, lr}
 8005862:	681c      	ldr	r4, [r3, #0]
 8005864:	b124      	cbz	r4, 8005870 <iprintf+0x14>
 8005866:	69a3      	ldr	r3, [r4, #24]
 8005868:	b913      	cbnz	r3, 8005870 <iprintf+0x14>
 800586a:	4620      	mov	r0, r4
 800586c:	f001 ff34 	bl	80076d8 <__sinit>
 8005870:	ab05      	add	r3, sp, #20
 8005872:	9a04      	ldr	r2, [sp, #16]
 8005874:	68a1      	ldr	r1, [r4, #8]
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	4620      	mov	r0, r4
 800587a:	f003 fb0b 	bl	8008e94 <_vfiprintf_r>
 800587e:	b002      	add	sp, #8
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	b004      	add	sp, #16
 8005886:	4770      	bx	lr
 8005888:	2000000c 	.word	0x2000000c

0800588c <nanf>:
 800588c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005894 <nanf+0x8>
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	7fc00000 	.word	0x7fc00000

08005898 <siprintf>:
 8005898:	b40e      	push	{r1, r2, r3}
 800589a:	b500      	push	{lr}
 800589c:	b09c      	sub	sp, #112	; 0x70
 800589e:	ab1d      	add	r3, sp, #116	; 0x74
 80058a0:	9002      	str	r0, [sp, #8]
 80058a2:	9006      	str	r0, [sp, #24]
 80058a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058a8:	4809      	ldr	r0, [pc, #36]	; (80058d0 <siprintf+0x38>)
 80058aa:	9107      	str	r1, [sp, #28]
 80058ac:	9104      	str	r1, [sp, #16]
 80058ae:	4909      	ldr	r1, [pc, #36]	; (80058d4 <siprintf+0x3c>)
 80058b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b4:	9105      	str	r1, [sp, #20]
 80058b6:	6800      	ldr	r0, [r0, #0]
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	a902      	add	r1, sp, #8
 80058bc:	f003 f9c0 	bl	8008c40 <_svfiprintf_r>
 80058c0:	9b02      	ldr	r3, [sp, #8]
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	b01c      	add	sp, #112	; 0x70
 80058c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058cc:	b003      	add	sp, #12
 80058ce:	4770      	bx	lr
 80058d0:	2000000c 	.word	0x2000000c
 80058d4:	ffff0208 	.word	0xffff0208

080058d8 <sulp>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4604      	mov	r4, r0
 80058dc:	460d      	mov	r5, r1
 80058de:	ec45 4b10 	vmov	d0, r4, r5
 80058e2:	4616      	mov	r6, r2
 80058e4:	f002 ff0a 	bl	80086fc <__ulp>
 80058e8:	ec51 0b10 	vmov	r0, r1, d0
 80058ec:	b17e      	cbz	r6, 800590e <sulp+0x36>
 80058ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80058f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dd09      	ble.n	800590e <sulp+0x36>
 80058fa:	051b      	lsls	r3, r3, #20
 80058fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005900:	2400      	movs	r4, #0
 8005902:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005906:	4622      	mov	r2, r4
 8005908:	462b      	mov	r3, r5
 800590a:	f7fa fe85 	bl	8000618 <__aeabi_dmul>
 800590e:	bd70      	pop	{r4, r5, r6, pc}

08005910 <_strtod_l>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	ed2d 8b02 	vpush	{d8}
 8005918:	b09d      	sub	sp, #116	; 0x74
 800591a:	461f      	mov	r7, r3
 800591c:	2300      	movs	r3, #0
 800591e:	9318      	str	r3, [sp, #96]	; 0x60
 8005920:	4ba2      	ldr	r3, [pc, #648]	; (8005bac <_strtod_l+0x29c>)
 8005922:	9213      	str	r2, [sp, #76]	; 0x4c
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	9305      	str	r3, [sp, #20]
 8005928:	4604      	mov	r4, r0
 800592a:	4618      	mov	r0, r3
 800592c:	4688      	mov	r8, r1
 800592e:	f7fa fc5f 	bl	80001f0 <strlen>
 8005932:	f04f 0a00 	mov.w	sl, #0
 8005936:	4605      	mov	r5, r0
 8005938:	f04f 0b00 	mov.w	fp, #0
 800593c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	2a2b      	cmp	r2, #43	; 0x2b
 8005946:	d04e      	beq.n	80059e6 <_strtod_l+0xd6>
 8005948:	d83b      	bhi.n	80059c2 <_strtod_l+0xb2>
 800594a:	2a0d      	cmp	r2, #13
 800594c:	d834      	bhi.n	80059b8 <_strtod_l+0xa8>
 800594e:	2a08      	cmp	r2, #8
 8005950:	d834      	bhi.n	80059bc <_strtod_l+0xac>
 8005952:	2a00      	cmp	r2, #0
 8005954:	d03e      	beq.n	80059d4 <_strtod_l+0xc4>
 8005956:	2300      	movs	r3, #0
 8005958:	930a      	str	r3, [sp, #40]	; 0x28
 800595a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800595c:	7833      	ldrb	r3, [r6, #0]
 800595e:	2b30      	cmp	r3, #48	; 0x30
 8005960:	f040 80b0 	bne.w	8005ac4 <_strtod_l+0x1b4>
 8005964:	7873      	ldrb	r3, [r6, #1]
 8005966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800596a:	2b58      	cmp	r3, #88	; 0x58
 800596c:	d168      	bne.n	8005a40 <_strtod_l+0x130>
 800596e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	ab18      	add	r3, sp, #96	; 0x60
 8005974:	9702      	str	r7, [sp, #8]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4a8d      	ldr	r2, [pc, #564]	; (8005bb0 <_strtod_l+0x2a0>)
 800597a:	ab19      	add	r3, sp, #100	; 0x64
 800597c:	a917      	add	r1, sp, #92	; 0x5c
 800597e:	4620      	mov	r0, r4
 8005980:	f001 ffae 	bl	80078e0 <__gethex>
 8005984:	f010 0707 	ands.w	r7, r0, #7
 8005988:	4605      	mov	r5, r0
 800598a:	d005      	beq.n	8005998 <_strtod_l+0x88>
 800598c:	2f06      	cmp	r7, #6
 800598e:	d12c      	bne.n	80059ea <_strtod_l+0xda>
 8005990:	3601      	adds	r6, #1
 8005992:	2300      	movs	r3, #0
 8005994:	9617      	str	r6, [sp, #92]	; 0x5c
 8005996:	930a      	str	r3, [sp, #40]	; 0x28
 8005998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 8590 	bne.w	80064c0 <_strtod_l+0xbb0>
 80059a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a2:	b1eb      	cbz	r3, 80059e0 <_strtod_l+0xd0>
 80059a4:	4652      	mov	r2, sl
 80059a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80059aa:	ec43 2b10 	vmov	d0, r2, r3
 80059ae:	b01d      	add	sp, #116	; 0x74
 80059b0:	ecbd 8b02 	vpop	{d8}
 80059b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b8:	2a20      	cmp	r2, #32
 80059ba:	d1cc      	bne.n	8005956 <_strtod_l+0x46>
 80059bc:	3301      	adds	r3, #1
 80059be:	9317      	str	r3, [sp, #92]	; 0x5c
 80059c0:	e7be      	b.n	8005940 <_strtod_l+0x30>
 80059c2:	2a2d      	cmp	r2, #45	; 0x2d
 80059c4:	d1c7      	bne.n	8005956 <_strtod_l+0x46>
 80059c6:	2201      	movs	r2, #1
 80059c8:	920a      	str	r2, [sp, #40]	; 0x28
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1c2      	bne.n	800595a <_strtod_l+0x4a>
 80059d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 856e 	bne.w	80064bc <_strtod_l+0xbac>
 80059e0:	4652      	mov	r2, sl
 80059e2:	465b      	mov	r3, fp
 80059e4:	e7e1      	b.n	80059aa <_strtod_l+0x9a>
 80059e6:	2200      	movs	r2, #0
 80059e8:	e7ee      	b.n	80059c8 <_strtod_l+0xb8>
 80059ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80059ec:	b13a      	cbz	r2, 80059fe <_strtod_l+0xee>
 80059ee:	2135      	movs	r1, #53	; 0x35
 80059f0:	a81a      	add	r0, sp, #104	; 0x68
 80059f2:	f002 ff8e 	bl	8008912 <__copybits>
 80059f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059f8:	4620      	mov	r0, r4
 80059fa:	f002 fb4d 	bl	8008098 <_Bfree>
 80059fe:	3f01      	subs	r7, #1
 8005a00:	2f04      	cmp	r7, #4
 8005a02:	d806      	bhi.n	8005a12 <_strtod_l+0x102>
 8005a04:	e8df f007 	tbb	[pc, r7]
 8005a08:	1714030a 	.word	0x1714030a
 8005a0c:	0a          	.byte	0x0a
 8005a0d:	00          	.byte	0x00
 8005a0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005a12:	0728      	lsls	r0, r5, #28
 8005a14:	d5c0      	bpl.n	8005998 <_strtod_l+0x88>
 8005a16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005a1a:	e7bd      	b.n	8005998 <_strtod_l+0x88>
 8005a1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005a20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a2e:	e7f0      	b.n	8005a12 <_strtod_l+0x102>
 8005a30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005bb4 <_strtod_l+0x2a4>
 8005a34:	e7ed      	b.n	8005a12 <_strtod_l+0x102>
 8005a36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005a3a:	f04f 3aff 	mov.w	sl, #4294967295
 8005a3e:	e7e8      	b.n	8005a12 <_strtod_l+0x102>
 8005a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2b30      	cmp	r3, #48	; 0x30
 8005a4a:	d0f9      	beq.n	8005a40 <_strtod_l+0x130>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0a3      	beq.n	8005998 <_strtod_l+0x88>
 8005a50:	2301      	movs	r3, #1
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	9304      	str	r3, [sp, #16]
 8005a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a5a:	9308      	str	r3, [sp, #32]
 8005a5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a60:	464f      	mov	r7, r9
 8005a62:	220a      	movs	r2, #10
 8005a64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005a66:	7806      	ldrb	r6, [r0, #0]
 8005a68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005a6c:	b2d9      	uxtb	r1, r3
 8005a6e:	2909      	cmp	r1, #9
 8005a70:	d92a      	bls.n	8005ac8 <_strtod_l+0x1b8>
 8005a72:	9905      	ldr	r1, [sp, #20]
 8005a74:	462a      	mov	r2, r5
 8005a76:	f003 fb9a 	bl	80091ae <strncmp>
 8005a7a:	b398      	cbz	r0, 8005ae4 <_strtod_l+0x1d4>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	4632      	mov	r2, r6
 8005a80:	463d      	mov	r5, r7
 8005a82:	9005      	str	r0, [sp, #20]
 8005a84:	4603      	mov	r3, r0
 8005a86:	2a65      	cmp	r2, #101	; 0x65
 8005a88:	d001      	beq.n	8005a8e <_strtod_l+0x17e>
 8005a8a:	2a45      	cmp	r2, #69	; 0x45
 8005a8c:	d118      	bne.n	8005ac0 <_strtod_l+0x1b0>
 8005a8e:	b91d      	cbnz	r5, 8005a98 <_strtod_l+0x188>
 8005a90:	9a04      	ldr	r2, [sp, #16]
 8005a92:	4302      	orrs	r2, r0
 8005a94:	d09e      	beq.n	80059d4 <_strtod_l+0xc4>
 8005a96:	2500      	movs	r5, #0
 8005a98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005a9c:	f108 0201 	add.w	r2, r8, #1
 8005aa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005aa2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005aa6:	2a2b      	cmp	r2, #43	; 0x2b
 8005aa8:	d075      	beq.n	8005b96 <_strtod_l+0x286>
 8005aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8005aac:	d07b      	beq.n	8005ba6 <_strtod_l+0x296>
 8005aae:	f04f 0c00 	mov.w	ip, #0
 8005ab2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005ab6:	2909      	cmp	r1, #9
 8005ab8:	f240 8082 	bls.w	8005bc0 <_strtod_l+0x2b0>
 8005abc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ac0:	2600      	movs	r6, #0
 8005ac2:	e09d      	b.n	8005c00 <_strtod_l+0x2f0>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e7c4      	b.n	8005a52 <_strtod_l+0x142>
 8005ac8:	2f08      	cmp	r7, #8
 8005aca:	bfd8      	it	le
 8005acc:	9907      	ldrle	r1, [sp, #28]
 8005ace:	f100 0001 	add.w	r0, r0, #1
 8005ad2:	bfda      	itte	le
 8005ad4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ad8:	9307      	strle	r3, [sp, #28]
 8005ada:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005ade:	3701      	adds	r7, #1
 8005ae0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005ae2:	e7bf      	b.n	8005a64 <_strtod_l+0x154>
 8005ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ae6:	195a      	adds	r2, r3, r5
 8005ae8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005aea:	5d5a      	ldrb	r2, [r3, r5]
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	d037      	beq.n	8005b60 <_strtod_l+0x250>
 8005af0:	9005      	str	r0, [sp, #20]
 8005af2:	463d      	mov	r5, r7
 8005af4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005af8:	2b09      	cmp	r3, #9
 8005afa:	d912      	bls.n	8005b22 <_strtod_l+0x212>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e7c2      	b.n	8005a86 <_strtod_l+0x176>
 8005b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b06:	785a      	ldrb	r2, [r3, #1]
 8005b08:	3001      	adds	r0, #1
 8005b0a:	2a30      	cmp	r2, #48	; 0x30
 8005b0c:	d0f8      	beq.n	8005b00 <_strtod_l+0x1f0>
 8005b0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	f200 84d9 	bhi.w	80064ca <_strtod_l+0xbba>
 8005b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b1a:	9005      	str	r0, [sp, #20]
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	9308      	str	r3, [sp, #32]
 8005b20:	4605      	mov	r5, r0
 8005b22:	3a30      	subs	r2, #48	; 0x30
 8005b24:	f100 0301 	add.w	r3, r0, #1
 8005b28:	d014      	beq.n	8005b54 <_strtod_l+0x244>
 8005b2a:	9905      	ldr	r1, [sp, #20]
 8005b2c:	4419      	add	r1, r3
 8005b2e:	9105      	str	r1, [sp, #20]
 8005b30:	462b      	mov	r3, r5
 8005b32:	eb00 0e05 	add.w	lr, r0, r5
 8005b36:	210a      	movs	r1, #10
 8005b38:	4573      	cmp	r3, lr
 8005b3a:	d113      	bne.n	8005b64 <_strtod_l+0x254>
 8005b3c:	182b      	adds	r3, r5, r0
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	f105 0501 	add.w	r5, r5, #1
 8005b44:	4405      	add	r5, r0
 8005b46:	dc1c      	bgt.n	8005b82 <_strtod_l+0x272>
 8005b48:	9907      	ldr	r1, [sp, #28]
 8005b4a:	230a      	movs	r3, #10
 8005b4c:	fb03 2301 	mla	r3, r3, r1, r2
 8005b50:	9307      	str	r3, [sp, #28]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b56:	1c51      	adds	r1, r2, #1
 8005b58:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b5a:	7852      	ldrb	r2, [r2, #1]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	e7c9      	b.n	8005af4 <_strtod_l+0x1e4>
 8005b60:	4638      	mov	r0, r7
 8005b62:	e7d2      	b.n	8005b0a <_strtod_l+0x1fa>
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	dc04      	bgt.n	8005b72 <_strtod_l+0x262>
 8005b68:	9e07      	ldr	r6, [sp, #28]
 8005b6a:	434e      	muls	r6, r1
 8005b6c:	9607      	str	r6, [sp, #28]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	e7e2      	b.n	8005b38 <_strtod_l+0x228>
 8005b72:	f103 0c01 	add.w	ip, r3, #1
 8005b76:	f1bc 0f10 	cmp.w	ip, #16
 8005b7a:	bfd8      	it	le
 8005b7c:	fb01 f909 	mulle.w	r9, r1, r9
 8005b80:	e7f5      	b.n	8005b6e <_strtod_l+0x25e>
 8005b82:	2d10      	cmp	r5, #16
 8005b84:	bfdc      	itt	le
 8005b86:	230a      	movle	r3, #10
 8005b88:	fb03 2909 	mlale	r9, r3, r9, r2
 8005b8c:	e7e1      	b.n	8005b52 <_strtod_l+0x242>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9305      	str	r3, [sp, #20]
 8005b92:	2301      	movs	r3, #1
 8005b94:	e77c      	b.n	8005a90 <_strtod_l+0x180>
 8005b96:	f04f 0c00 	mov.w	ip, #0
 8005b9a:	f108 0202 	add.w	r2, r8, #2
 8005b9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ba0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005ba4:	e785      	b.n	8005ab2 <_strtod_l+0x1a2>
 8005ba6:	f04f 0c01 	mov.w	ip, #1
 8005baa:	e7f6      	b.n	8005b9a <_strtod_l+0x28a>
 8005bac:	0800988c 	.word	0x0800988c
 8005bb0:	080095dc 	.word	0x080095dc
 8005bb4:	7ff00000 	.word	0x7ff00000
 8005bb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bba:	1c51      	adds	r1, r2, #1
 8005bbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8005bbe:	7852      	ldrb	r2, [r2, #1]
 8005bc0:	2a30      	cmp	r2, #48	; 0x30
 8005bc2:	d0f9      	beq.n	8005bb8 <_strtod_l+0x2a8>
 8005bc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005bc8:	2908      	cmp	r1, #8
 8005bca:	f63f af79 	bhi.w	8005ac0 <_strtod_l+0x1b0>
 8005bce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005bd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bd4:	9206      	str	r2, [sp, #24]
 8005bd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bd8:	1c51      	adds	r1, r2, #1
 8005bda:	9117      	str	r1, [sp, #92]	; 0x5c
 8005bdc:	7852      	ldrb	r2, [r2, #1]
 8005bde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005be2:	2e09      	cmp	r6, #9
 8005be4:	d937      	bls.n	8005c56 <_strtod_l+0x346>
 8005be6:	9e06      	ldr	r6, [sp, #24]
 8005be8:	1b89      	subs	r1, r1, r6
 8005bea:	2908      	cmp	r1, #8
 8005bec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005bf0:	dc02      	bgt.n	8005bf8 <_strtod_l+0x2e8>
 8005bf2:	4576      	cmp	r6, lr
 8005bf4:	bfa8      	it	ge
 8005bf6:	4676      	movge	r6, lr
 8005bf8:	f1bc 0f00 	cmp.w	ip, #0
 8005bfc:	d000      	beq.n	8005c00 <_strtod_l+0x2f0>
 8005bfe:	4276      	negs	r6, r6
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	d14d      	bne.n	8005ca0 <_strtod_l+0x390>
 8005c04:	9904      	ldr	r1, [sp, #16]
 8005c06:	4301      	orrs	r1, r0
 8005c08:	f47f aec6 	bne.w	8005998 <_strtod_l+0x88>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f47f aee1 	bne.w	80059d4 <_strtod_l+0xc4>
 8005c12:	2a69      	cmp	r2, #105	; 0x69
 8005c14:	d027      	beq.n	8005c66 <_strtod_l+0x356>
 8005c16:	dc24      	bgt.n	8005c62 <_strtod_l+0x352>
 8005c18:	2a49      	cmp	r2, #73	; 0x49
 8005c1a:	d024      	beq.n	8005c66 <_strtod_l+0x356>
 8005c1c:	2a4e      	cmp	r2, #78	; 0x4e
 8005c1e:	f47f aed9 	bne.w	80059d4 <_strtod_l+0xc4>
 8005c22:	499f      	ldr	r1, [pc, #636]	; (8005ea0 <_strtod_l+0x590>)
 8005c24:	a817      	add	r0, sp, #92	; 0x5c
 8005c26:	f002 f8b3 	bl	8007d90 <__match>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f43f aed2 	beq.w	80059d4 <_strtod_l+0xc4>
 8005c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b28      	cmp	r3, #40	; 0x28
 8005c36:	d12d      	bne.n	8005c94 <_strtod_l+0x384>
 8005c38:	499a      	ldr	r1, [pc, #616]	; (8005ea4 <_strtod_l+0x594>)
 8005c3a:	aa1a      	add	r2, sp, #104	; 0x68
 8005c3c:	a817      	add	r0, sp, #92	; 0x5c
 8005c3e:	f002 f8bb 	bl	8007db8 <__hexnan>
 8005c42:	2805      	cmp	r0, #5
 8005c44:	d126      	bne.n	8005c94 <_strtod_l+0x384>
 8005c46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005c4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c54:	e6a0      	b.n	8005998 <_strtod_l+0x88>
 8005c56:	210a      	movs	r1, #10
 8005c58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005c5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c60:	e7b9      	b.n	8005bd6 <_strtod_l+0x2c6>
 8005c62:	2a6e      	cmp	r2, #110	; 0x6e
 8005c64:	e7db      	b.n	8005c1e <_strtod_l+0x30e>
 8005c66:	4990      	ldr	r1, [pc, #576]	; (8005ea8 <_strtod_l+0x598>)
 8005c68:	a817      	add	r0, sp, #92	; 0x5c
 8005c6a:	f002 f891 	bl	8007d90 <__match>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f43f aeb0 	beq.w	80059d4 <_strtod_l+0xc4>
 8005c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c76:	498d      	ldr	r1, [pc, #564]	; (8005eac <_strtod_l+0x59c>)
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	a817      	add	r0, sp, #92	; 0x5c
 8005c7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c7e:	f002 f887 	bl	8007d90 <__match>
 8005c82:	b910      	cbnz	r0, 8005c8a <_strtod_l+0x37a>
 8005c84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c86:	3301      	adds	r3, #1
 8005c88:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005ebc <_strtod_l+0x5ac>
 8005c8e:	f04f 0a00 	mov.w	sl, #0
 8005c92:	e681      	b.n	8005998 <_strtod_l+0x88>
 8005c94:	4886      	ldr	r0, [pc, #536]	; (8005eb0 <_strtod_l+0x5a0>)
 8005c96:	f003 fa2f 	bl	80090f8 <nan>
 8005c9a:	ec5b ab10 	vmov	sl, fp, d0
 8005c9e:	e67b      	b.n	8005998 <_strtod_l+0x88>
 8005ca0:	9b05      	ldr	r3, [sp, #20]
 8005ca2:	9807      	ldr	r0, [sp, #28]
 8005ca4:	1af3      	subs	r3, r6, r3
 8005ca6:	2f00      	cmp	r7, #0
 8005ca8:	bf08      	it	eq
 8005caa:	462f      	moveq	r7, r5
 8005cac:	2d10      	cmp	r5, #16
 8005cae:	9306      	str	r3, [sp, #24]
 8005cb0:	46a8      	mov	r8, r5
 8005cb2:	bfa8      	it	ge
 8005cb4:	f04f 0810 	movge.w	r8, #16
 8005cb8:	f7fa fc34 	bl	8000524 <__aeabi_ui2d>
 8005cbc:	2d09      	cmp	r5, #9
 8005cbe:	4682      	mov	sl, r0
 8005cc0:	468b      	mov	fp, r1
 8005cc2:	dd13      	ble.n	8005cec <_strtod_l+0x3dc>
 8005cc4:	4b7b      	ldr	r3, [pc, #492]	; (8005eb4 <_strtod_l+0x5a4>)
 8005cc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005cca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005cce:	f7fa fca3 	bl	8000618 <__aeabi_dmul>
 8005cd2:	4682      	mov	sl, r0
 8005cd4:	4648      	mov	r0, r9
 8005cd6:	468b      	mov	fp, r1
 8005cd8:	f7fa fc24 	bl	8000524 <__aeabi_ui2d>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4650      	mov	r0, sl
 8005ce2:	4659      	mov	r1, fp
 8005ce4:	f7fa fae2 	bl	80002ac <__adddf3>
 8005ce8:	4682      	mov	sl, r0
 8005cea:	468b      	mov	fp, r1
 8005cec:	2d0f      	cmp	r5, #15
 8005cee:	dc38      	bgt.n	8005d62 <_strtod_l+0x452>
 8005cf0:	9b06      	ldr	r3, [sp, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f43f ae50 	beq.w	8005998 <_strtod_l+0x88>
 8005cf8:	dd24      	ble.n	8005d44 <_strtod_l+0x434>
 8005cfa:	2b16      	cmp	r3, #22
 8005cfc:	dc0b      	bgt.n	8005d16 <_strtod_l+0x406>
 8005cfe:	496d      	ldr	r1, [pc, #436]	; (8005eb4 <_strtod_l+0x5a4>)
 8005d00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d08:	4652      	mov	r2, sl
 8005d0a:	465b      	mov	r3, fp
 8005d0c:	f7fa fc84 	bl	8000618 <__aeabi_dmul>
 8005d10:	4682      	mov	sl, r0
 8005d12:	468b      	mov	fp, r1
 8005d14:	e640      	b.n	8005998 <_strtod_l+0x88>
 8005d16:	9a06      	ldr	r2, [sp, #24]
 8005d18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	db20      	blt.n	8005d62 <_strtod_l+0x452>
 8005d20:	4c64      	ldr	r4, [pc, #400]	; (8005eb4 <_strtod_l+0x5a4>)
 8005d22:	f1c5 050f 	rsb	r5, r5, #15
 8005d26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	465b      	mov	r3, fp
 8005d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d32:	f7fa fc71 	bl	8000618 <__aeabi_dmul>
 8005d36:	9b06      	ldr	r3, [sp, #24]
 8005d38:	1b5d      	subs	r5, r3, r5
 8005d3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d42:	e7e3      	b.n	8005d0c <_strtod_l+0x3fc>
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	3316      	adds	r3, #22
 8005d48:	db0b      	blt.n	8005d62 <_strtod_l+0x452>
 8005d4a:	9b05      	ldr	r3, [sp, #20]
 8005d4c:	1b9e      	subs	r6, r3, r6
 8005d4e:	4b59      	ldr	r3, [pc, #356]	; (8005eb4 <_strtod_l+0x5a4>)
 8005d50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d58:	4650      	mov	r0, sl
 8005d5a:	4659      	mov	r1, fp
 8005d5c:	f7fa fd86 	bl	800086c <__aeabi_ddiv>
 8005d60:	e7d6      	b.n	8005d10 <_strtod_l+0x400>
 8005d62:	9b06      	ldr	r3, [sp, #24]
 8005d64:	eba5 0808 	sub.w	r8, r5, r8
 8005d68:	4498      	add	r8, r3
 8005d6a:	f1b8 0f00 	cmp.w	r8, #0
 8005d6e:	dd74      	ble.n	8005e5a <_strtod_l+0x54a>
 8005d70:	f018 030f 	ands.w	r3, r8, #15
 8005d74:	d00a      	beq.n	8005d8c <_strtod_l+0x47c>
 8005d76:	494f      	ldr	r1, [pc, #316]	; (8005eb4 <_strtod_l+0x5a4>)
 8005d78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	465b      	mov	r3, fp
 8005d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d84:	f7fa fc48 	bl	8000618 <__aeabi_dmul>
 8005d88:	4682      	mov	sl, r0
 8005d8a:	468b      	mov	fp, r1
 8005d8c:	f038 080f 	bics.w	r8, r8, #15
 8005d90:	d04f      	beq.n	8005e32 <_strtod_l+0x522>
 8005d92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d96:	dd22      	ble.n	8005dde <_strtod_l+0x4ce>
 8005d98:	2500      	movs	r5, #0
 8005d9a:	462e      	mov	r6, r5
 8005d9c:	9507      	str	r5, [sp, #28]
 8005d9e:	9505      	str	r5, [sp, #20]
 8005da0:	2322      	movs	r3, #34	; 0x22
 8005da2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005ebc <_strtod_l+0x5ac>
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	f04f 0a00 	mov.w	sl, #0
 8005dac:	9b07      	ldr	r3, [sp, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f43f adf2 	beq.w	8005998 <_strtod_l+0x88>
 8005db4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005db6:	4620      	mov	r0, r4
 8005db8:	f002 f96e 	bl	8008098 <_Bfree>
 8005dbc:	9905      	ldr	r1, [sp, #20]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f002 f96a 	bl	8008098 <_Bfree>
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f002 f966 	bl	8008098 <_Bfree>
 8005dcc:	9907      	ldr	r1, [sp, #28]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f002 f962 	bl	8008098 <_Bfree>
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f002 f95e 	bl	8008098 <_Bfree>
 8005ddc:	e5dc      	b.n	8005998 <_strtod_l+0x88>
 8005dde:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <_strtod_l+0x5a8>)
 8005de0:	9304      	str	r3, [sp, #16]
 8005de2:	2300      	movs	r3, #0
 8005de4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005de8:	4650      	mov	r0, sl
 8005dea:	4659      	mov	r1, fp
 8005dec:	4699      	mov	r9, r3
 8005dee:	f1b8 0f01 	cmp.w	r8, #1
 8005df2:	dc21      	bgt.n	8005e38 <_strtod_l+0x528>
 8005df4:	b10b      	cbz	r3, 8005dfa <_strtod_l+0x4ea>
 8005df6:	4682      	mov	sl, r0
 8005df8:	468b      	mov	fp, r1
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	; (8005eb8 <_strtod_l+0x5a8>)
 8005dfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005e00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005e04:	4652      	mov	r2, sl
 8005e06:	465b      	mov	r3, fp
 8005e08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005e0c:	f7fa fc04 	bl	8000618 <__aeabi_dmul>
 8005e10:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <_strtod_l+0x5ac>)
 8005e12:	460a      	mov	r2, r1
 8005e14:	400b      	ands	r3, r1
 8005e16:	492a      	ldr	r1, [pc, #168]	; (8005ec0 <_strtod_l+0x5b0>)
 8005e18:	428b      	cmp	r3, r1
 8005e1a:	4682      	mov	sl, r0
 8005e1c:	d8bc      	bhi.n	8005d98 <_strtod_l+0x488>
 8005e1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e22:	428b      	cmp	r3, r1
 8005e24:	bf86      	itte	hi
 8005e26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005ec4 <_strtod_l+0x5b4>
 8005e2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8005e2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005e32:	2300      	movs	r3, #0
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	e084      	b.n	8005f42 <_strtod_l+0x632>
 8005e38:	f018 0f01 	tst.w	r8, #1
 8005e3c:	d005      	beq.n	8005e4a <_strtod_l+0x53a>
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f7fa fbe8 	bl	8000618 <__aeabi_dmul>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	9a04      	ldr	r2, [sp, #16]
 8005e4c:	3208      	adds	r2, #8
 8005e4e:	f109 0901 	add.w	r9, r9, #1
 8005e52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e56:	9204      	str	r2, [sp, #16]
 8005e58:	e7c9      	b.n	8005dee <_strtod_l+0x4de>
 8005e5a:	d0ea      	beq.n	8005e32 <_strtod_l+0x522>
 8005e5c:	f1c8 0800 	rsb	r8, r8, #0
 8005e60:	f018 020f 	ands.w	r2, r8, #15
 8005e64:	d00a      	beq.n	8005e7c <_strtod_l+0x56c>
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <_strtod_l+0x5a4>)
 8005e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	4659      	mov	r1, fp
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fcfa 	bl	800086c <__aeabi_ddiv>
 8005e78:	4682      	mov	sl, r0
 8005e7a:	468b      	mov	fp, r1
 8005e7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e80:	d0d7      	beq.n	8005e32 <_strtod_l+0x522>
 8005e82:	f1b8 0f1f 	cmp.w	r8, #31
 8005e86:	dd1f      	ble.n	8005ec8 <_strtod_l+0x5b8>
 8005e88:	2500      	movs	r5, #0
 8005e8a:	462e      	mov	r6, r5
 8005e8c:	9507      	str	r5, [sp, #28]
 8005e8e:	9505      	str	r5, [sp, #20]
 8005e90:	2322      	movs	r3, #34	; 0x22
 8005e92:	f04f 0a00 	mov.w	sl, #0
 8005e96:	f04f 0b00 	mov.w	fp, #0
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	e786      	b.n	8005dac <_strtod_l+0x49c>
 8005e9e:	bf00      	nop
 8005ea0:	080095ad 	.word	0x080095ad
 8005ea4:	080095f0 	.word	0x080095f0
 8005ea8:	080095a5 	.word	0x080095a5
 8005eac:	08009734 	.word	0x08009734
 8005eb0:	08009a48 	.word	0x08009a48
 8005eb4:	08009928 	.word	0x08009928
 8005eb8:	08009900 	.word	0x08009900
 8005ebc:	7ff00000 	.word	0x7ff00000
 8005ec0:	7ca00000 	.word	0x7ca00000
 8005ec4:	7fefffff 	.word	0x7fefffff
 8005ec8:	f018 0310 	ands.w	r3, r8, #16
 8005ecc:	bf18      	it	ne
 8005ece:	236a      	movne	r3, #106	; 0x6a
 8005ed0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006280 <_strtod_l+0x970>
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	4659      	mov	r1, fp
 8005eda:	2300      	movs	r3, #0
 8005edc:	f018 0f01 	tst.w	r8, #1
 8005ee0:	d004      	beq.n	8005eec <_strtod_l+0x5dc>
 8005ee2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ee6:	f7fa fb97 	bl	8000618 <__aeabi_dmul>
 8005eea:	2301      	movs	r3, #1
 8005eec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005ef0:	f109 0908 	add.w	r9, r9, #8
 8005ef4:	d1f2      	bne.n	8005edc <_strtod_l+0x5cc>
 8005ef6:	b10b      	cbz	r3, 8005efc <_strtod_l+0x5ec>
 8005ef8:	4682      	mov	sl, r0
 8005efa:	468b      	mov	fp, r1
 8005efc:	9b04      	ldr	r3, [sp, #16]
 8005efe:	b1c3      	cbz	r3, 8005f32 <_strtod_l+0x622>
 8005f00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005f04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	dd11      	ble.n	8005f32 <_strtod_l+0x622>
 8005f0e:	2b1f      	cmp	r3, #31
 8005f10:	f340 8124 	ble.w	800615c <_strtod_l+0x84c>
 8005f14:	2b34      	cmp	r3, #52	; 0x34
 8005f16:	bfde      	ittt	le
 8005f18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005f1c:	f04f 33ff 	movle.w	r3, #4294967295
 8005f20:	fa03 f202 	lslle.w	r2, r3, r2
 8005f24:	f04f 0a00 	mov.w	sl, #0
 8005f28:	bfcc      	ite	gt
 8005f2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005f2e:	ea02 0b01 	andle.w	fp, r2, r1
 8005f32:	2200      	movs	r2, #0
 8005f34:	2300      	movs	r3, #0
 8005f36:	4650      	mov	r0, sl
 8005f38:	4659      	mov	r1, fp
 8005f3a:	f7fa fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d1a2      	bne.n	8005e88 <_strtod_l+0x578>
 8005f42:	9b07      	ldr	r3, [sp, #28]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	9908      	ldr	r1, [sp, #32]
 8005f48:	462b      	mov	r3, r5
 8005f4a:	463a      	mov	r2, r7
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f002 f90b 	bl	8008168 <__s2b>
 8005f52:	9007      	str	r0, [sp, #28]
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f43f af1f 	beq.w	8005d98 <_strtod_l+0x488>
 8005f5a:	9b05      	ldr	r3, [sp, #20]
 8005f5c:	1b9e      	subs	r6, r3, r6
 8005f5e:	9b06      	ldr	r3, [sp, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bfb4      	ite	lt
 8005f64:	4633      	movlt	r3, r6
 8005f66:	2300      	movge	r3, #0
 8005f68:	930c      	str	r3, [sp, #48]	; 0x30
 8005f6a:	9b06      	ldr	r3, [sp, #24]
 8005f6c:	2500      	movs	r5, #0
 8005f6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f72:	9312      	str	r3, [sp, #72]	; 0x48
 8005f74:	462e      	mov	r6, r5
 8005f76:	9b07      	ldr	r3, [sp, #28]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	6859      	ldr	r1, [r3, #4]
 8005f7c:	f002 f84c 	bl	8008018 <_Balloc>
 8005f80:	9005      	str	r0, [sp, #20]
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f43f af0c 	beq.w	8005da0 <_strtod_l+0x490>
 8005f88:	9b07      	ldr	r3, [sp, #28]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	3202      	adds	r2, #2
 8005f8e:	f103 010c 	add.w	r1, r3, #12
 8005f92:	0092      	lsls	r2, r2, #2
 8005f94:	300c      	adds	r0, #12
 8005f96:	f002 f831 	bl	8007ffc <memcpy>
 8005f9a:	ec4b ab10 	vmov	d0, sl, fp
 8005f9e:	aa1a      	add	r2, sp, #104	; 0x68
 8005fa0:	a919      	add	r1, sp, #100	; 0x64
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f002 fc26 	bl	80087f4 <__d2b>
 8005fa8:	ec4b ab18 	vmov	d8, sl, fp
 8005fac:	9018      	str	r0, [sp, #96]	; 0x60
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f43f aef6 	beq.w	8005da0 <_strtod_l+0x490>
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f002 f970 	bl	800829c <__i2b>
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f43f aeee 	beq.w	8005da0 <_strtod_l+0x490>
 8005fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fc6:	9904      	ldr	r1, [sp, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bfab      	itete	ge
 8005fcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005fce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005fd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005fd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005fd6:	bfac      	ite	ge
 8005fd8:	eb03 0902 	addge.w	r9, r3, r2
 8005fdc:	1ad7      	sublt	r7, r2, r3
 8005fde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fe0:	eba3 0801 	sub.w	r8, r3, r1
 8005fe4:	4490      	add	r8, r2
 8005fe6:	4ba1      	ldr	r3, [pc, #644]	; (800626c <_strtod_l+0x95c>)
 8005fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fec:	4598      	cmp	r8, r3
 8005fee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ff2:	f280 80c7 	bge.w	8006184 <_strtod_l+0x874>
 8005ff6:	eba3 0308 	sub.w	r3, r3, r8
 8005ffa:	2b1f      	cmp	r3, #31
 8005ffc:	eba2 0203 	sub.w	r2, r2, r3
 8006000:	f04f 0101 	mov.w	r1, #1
 8006004:	f300 80b1 	bgt.w	800616a <_strtod_l+0x85a>
 8006008:	fa01 f303 	lsl.w	r3, r1, r3
 800600c:	930d      	str	r3, [sp, #52]	; 0x34
 800600e:	2300      	movs	r3, #0
 8006010:	9308      	str	r3, [sp, #32]
 8006012:	eb09 0802 	add.w	r8, r9, r2
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	45c1      	cmp	r9, r8
 800601a:	4417      	add	r7, r2
 800601c:	441f      	add	r7, r3
 800601e:	464b      	mov	r3, r9
 8006020:	bfa8      	it	ge
 8006022:	4643      	movge	r3, r8
 8006024:	42bb      	cmp	r3, r7
 8006026:	bfa8      	it	ge
 8006028:	463b      	movge	r3, r7
 800602a:	2b00      	cmp	r3, #0
 800602c:	bfc2      	ittt	gt
 800602e:	eba8 0803 	subgt.w	r8, r8, r3
 8006032:	1aff      	subgt	r7, r7, r3
 8006034:	eba9 0903 	subgt.w	r9, r9, r3
 8006038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd17      	ble.n	800606e <_strtod_l+0x75e>
 800603e:	4631      	mov	r1, r6
 8006040:	461a      	mov	r2, r3
 8006042:	4620      	mov	r0, r4
 8006044:	f002 f9ea 	bl	800841c <__pow5mult>
 8006048:	4606      	mov	r6, r0
 800604a:	2800      	cmp	r0, #0
 800604c:	f43f aea8 	beq.w	8005da0 <_strtod_l+0x490>
 8006050:	4601      	mov	r1, r0
 8006052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006054:	4620      	mov	r0, r4
 8006056:	f002 f937 	bl	80082c8 <__multiply>
 800605a:	900b      	str	r0, [sp, #44]	; 0x2c
 800605c:	2800      	cmp	r0, #0
 800605e:	f43f ae9f 	beq.w	8005da0 <_strtod_l+0x490>
 8006062:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006064:	4620      	mov	r0, r4
 8006066:	f002 f817 	bl	8008098 <_Bfree>
 800606a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800606c:	9318      	str	r3, [sp, #96]	; 0x60
 800606e:	f1b8 0f00 	cmp.w	r8, #0
 8006072:	f300 808c 	bgt.w	800618e <_strtod_l+0x87e>
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	dd08      	ble.n	800608e <_strtod_l+0x77e>
 800607c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800607e:	9905      	ldr	r1, [sp, #20]
 8006080:	4620      	mov	r0, r4
 8006082:	f002 f9cb 	bl	800841c <__pow5mult>
 8006086:	9005      	str	r0, [sp, #20]
 8006088:	2800      	cmp	r0, #0
 800608a:	f43f ae89 	beq.w	8005da0 <_strtod_l+0x490>
 800608e:	2f00      	cmp	r7, #0
 8006090:	dd08      	ble.n	80060a4 <_strtod_l+0x794>
 8006092:	9905      	ldr	r1, [sp, #20]
 8006094:	463a      	mov	r2, r7
 8006096:	4620      	mov	r0, r4
 8006098:	f002 fa1a 	bl	80084d0 <__lshift>
 800609c:	9005      	str	r0, [sp, #20]
 800609e:	2800      	cmp	r0, #0
 80060a0:	f43f ae7e 	beq.w	8005da0 <_strtod_l+0x490>
 80060a4:	f1b9 0f00 	cmp.w	r9, #0
 80060a8:	dd08      	ble.n	80060bc <_strtod_l+0x7ac>
 80060aa:	4631      	mov	r1, r6
 80060ac:	464a      	mov	r2, r9
 80060ae:	4620      	mov	r0, r4
 80060b0:	f002 fa0e 	bl	80084d0 <__lshift>
 80060b4:	4606      	mov	r6, r0
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f43f ae72 	beq.w	8005da0 <_strtod_l+0x490>
 80060bc:	9a05      	ldr	r2, [sp, #20]
 80060be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060c0:	4620      	mov	r0, r4
 80060c2:	f002 fa91 	bl	80085e8 <__mdiff>
 80060c6:	4605      	mov	r5, r0
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f43f ae69 	beq.w	8005da0 <_strtod_l+0x490>
 80060ce:	68c3      	ldr	r3, [r0, #12]
 80060d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d2:	2300      	movs	r3, #0
 80060d4:	60c3      	str	r3, [r0, #12]
 80060d6:	4631      	mov	r1, r6
 80060d8:	f002 fa6a 	bl	80085b0 <__mcmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	da60      	bge.n	80061a2 <_strtod_l+0x892>
 80060e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e2:	ea53 030a 	orrs.w	r3, r3, sl
 80060e6:	f040 8082 	bne.w	80061ee <_strtod_l+0x8de>
 80060ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d17d      	bne.n	80061ee <_strtod_l+0x8de>
 80060f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060f6:	0d1b      	lsrs	r3, r3, #20
 80060f8:	051b      	lsls	r3, r3, #20
 80060fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060fe:	d976      	bls.n	80061ee <_strtod_l+0x8de>
 8006100:	696b      	ldr	r3, [r5, #20]
 8006102:	b913      	cbnz	r3, 800610a <_strtod_l+0x7fa>
 8006104:	692b      	ldr	r3, [r5, #16]
 8006106:	2b01      	cmp	r3, #1
 8006108:	dd71      	ble.n	80061ee <_strtod_l+0x8de>
 800610a:	4629      	mov	r1, r5
 800610c:	2201      	movs	r2, #1
 800610e:	4620      	mov	r0, r4
 8006110:	f002 f9de 	bl	80084d0 <__lshift>
 8006114:	4631      	mov	r1, r6
 8006116:	4605      	mov	r5, r0
 8006118:	f002 fa4a 	bl	80085b0 <__mcmp>
 800611c:	2800      	cmp	r0, #0
 800611e:	dd66      	ble.n	80061ee <_strtod_l+0x8de>
 8006120:	9904      	ldr	r1, [sp, #16]
 8006122:	4a53      	ldr	r2, [pc, #332]	; (8006270 <_strtod_l+0x960>)
 8006124:	465b      	mov	r3, fp
 8006126:	2900      	cmp	r1, #0
 8006128:	f000 8081 	beq.w	800622e <_strtod_l+0x91e>
 800612c:	ea02 010b 	and.w	r1, r2, fp
 8006130:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006134:	dc7b      	bgt.n	800622e <_strtod_l+0x91e>
 8006136:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800613a:	f77f aea9 	ble.w	8005e90 <_strtod_l+0x580>
 800613e:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <_strtod_l+0x964>)
 8006140:	4650      	mov	r0, sl
 8006142:	4659      	mov	r1, fp
 8006144:	2200      	movs	r2, #0
 8006146:	f7fa fa67 	bl	8000618 <__aeabi_dmul>
 800614a:	460b      	mov	r3, r1
 800614c:	4303      	orrs	r3, r0
 800614e:	bf08      	it	eq
 8006150:	2322      	moveq	r3, #34	; 0x22
 8006152:	4682      	mov	sl, r0
 8006154:	468b      	mov	fp, r1
 8006156:	bf08      	it	eq
 8006158:	6023      	streq	r3, [r4, #0]
 800615a:	e62b      	b.n	8005db4 <_strtod_l+0x4a4>
 800615c:	f04f 32ff 	mov.w	r2, #4294967295
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	ea03 0a0a 	and.w	sl, r3, sl
 8006168:	e6e3      	b.n	8005f32 <_strtod_l+0x622>
 800616a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800616e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006172:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006176:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800617a:	fa01 f308 	lsl.w	r3, r1, r8
 800617e:	9308      	str	r3, [sp, #32]
 8006180:	910d      	str	r1, [sp, #52]	; 0x34
 8006182:	e746      	b.n	8006012 <_strtod_l+0x702>
 8006184:	2300      	movs	r3, #0
 8006186:	9308      	str	r3, [sp, #32]
 8006188:	2301      	movs	r3, #1
 800618a:	930d      	str	r3, [sp, #52]	; 0x34
 800618c:	e741      	b.n	8006012 <_strtod_l+0x702>
 800618e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006190:	4642      	mov	r2, r8
 8006192:	4620      	mov	r0, r4
 8006194:	f002 f99c 	bl	80084d0 <__lshift>
 8006198:	9018      	str	r0, [sp, #96]	; 0x60
 800619a:	2800      	cmp	r0, #0
 800619c:	f47f af6b 	bne.w	8006076 <_strtod_l+0x766>
 80061a0:	e5fe      	b.n	8005da0 <_strtod_l+0x490>
 80061a2:	465f      	mov	r7, fp
 80061a4:	d16e      	bne.n	8006284 <_strtod_l+0x974>
 80061a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061ac:	b342      	cbz	r2, 8006200 <_strtod_l+0x8f0>
 80061ae:	4a32      	ldr	r2, [pc, #200]	; (8006278 <_strtod_l+0x968>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d128      	bne.n	8006206 <_strtod_l+0x8f6>
 80061b4:	9b04      	ldr	r3, [sp, #16]
 80061b6:	4651      	mov	r1, sl
 80061b8:	b1eb      	cbz	r3, 80061f6 <_strtod_l+0x8e6>
 80061ba:	4b2d      	ldr	r3, [pc, #180]	; (8006270 <_strtod_l+0x960>)
 80061bc:	403b      	ands	r3, r7
 80061be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061c2:	f04f 32ff 	mov.w	r2, #4294967295
 80061c6:	d819      	bhi.n	80061fc <_strtod_l+0x8ec>
 80061c8:	0d1b      	lsrs	r3, r3, #20
 80061ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	4299      	cmp	r1, r3
 80061d4:	d117      	bne.n	8006206 <_strtod_l+0x8f6>
 80061d6:	4b29      	ldr	r3, [pc, #164]	; (800627c <_strtod_l+0x96c>)
 80061d8:	429f      	cmp	r7, r3
 80061da:	d102      	bne.n	80061e2 <_strtod_l+0x8d2>
 80061dc:	3101      	adds	r1, #1
 80061de:	f43f addf 	beq.w	8005da0 <_strtod_l+0x490>
 80061e2:	4b23      	ldr	r3, [pc, #140]	; (8006270 <_strtod_l+0x960>)
 80061e4:	403b      	ands	r3, r7
 80061e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80061ea:	f04f 0a00 	mov.w	sl, #0
 80061ee:	9b04      	ldr	r3, [sp, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1a4      	bne.n	800613e <_strtod_l+0x82e>
 80061f4:	e5de      	b.n	8005db4 <_strtod_l+0x4a4>
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	e7ea      	b.n	80061d2 <_strtod_l+0x8c2>
 80061fc:	4613      	mov	r3, r2
 80061fe:	e7e8      	b.n	80061d2 <_strtod_l+0x8c2>
 8006200:	ea53 030a 	orrs.w	r3, r3, sl
 8006204:	d08c      	beq.n	8006120 <_strtod_l+0x810>
 8006206:	9b08      	ldr	r3, [sp, #32]
 8006208:	b1db      	cbz	r3, 8006242 <_strtod_l+0x932>
 800620a:	423b      	tst	r3, r7
 800620c:	d0ef      	beq.n	80061ee <_strtod_l+0x8de>
 800620e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006210:	9a04      	ldr	r2, [sp, #16]
 8006212:	4650      	mov	r0, sl
 8006214:	4659      	mov	r1, fp
 8006216:	b1c3      	cbz	r3, 800624a <_strtod_l+0x93a>
 8006218:	f7ff fb5e 	bl	80058d8 <sulp>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	ec51 0b18 	vmov	r0, r1, d8
 8006224:	f7fa f842 	bl	80002ac <__adddf3>
 8006228:	4682      	mov	sl, r0
 800622a:	468b      	mov	fp, r1
 800622c:	e7df      	b.n	80061ee <_strtod_l+0x8de>
 800622e:	4013      	ands	r3, r2
 8006230:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006234:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006238:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800623c:	f04f 3aff 	mov.w	sl, #4294967295
 8006240:	e7d5      	b.n	80061ee <_strtod_l+0x8de>
 8006242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006244:	ea13 0f0a 	tst.w	r3, sl
 8006248:	e7e0      	b.n	800620c <_strtod_l+0x8fc>
 800624a:	f7ff fb45 	bl	80058d8 <sulp>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	ec51 0b18 	vmov	r0, r1, d8
 8006256:	f7fa f827 	bl	80002a8 <__aeabi_dsub>
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	4682      	mov	sl, r0
 8006260:	468b      	mov	fp, r1
 8006262:	f7fa fc41 	bl	8000ae8 <__aeabi_dcmpeq>
 8006266:	2800      	cmp	r0, #0
 8006268:	d0c1      	beq.n	80061ee <_strtod_l+0x8de>
 800626a:	e611      	b.n	8005e90 <_strtod_l+0x580>
 800626c:	fffffc02 	.word	0xfffffc02
 8006270:	7ff00000 	.word	0x7ff00000
 8006274:	39500000 	.word	0x39500000
 8006278:	000fffff 	.word	0x000fffff
 800627c:	7fefffff 	.word	0x7fefffff
 8006280:	08009608 	.word	0x08009608
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	f002 fb10 	bl	80088ac <__ratio>
 800628c:	ec59 8b10 	vmov	r8, r9, d0
 8006290:	ee10 0a10 	vmov	r0, s0
 8006294:	2200      	movs	r2, #0
 8006296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800629a:	4649      	mov	r1, r9
 800629c:	f7fa fc38 	bl	8000b10 <__aeabi_dcmple>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d07a      	beq.n	800639a <_strtod_l+0xa8a>
 80062a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d04a      	beq.n	8006340 <_strtod_l+0xa30>
 80062aa:	4b95      	ldr	r3, [pc, #596]	; (8006500 <_strtod_l+0xbf0>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006500 <_strtod_l+0xbf0>
 80062b6:	f04f 0800 	mov.w	r8, #0
 80062ba:	4b92      	ldr	r3, [pc, #584]	; (8006504 <_strtod_l+0xbf4>)
 80062bc:	403b      	ands	r3, r7
 80062be:	930d      	str	r3, [sp, #52]	; 0x34
 80062c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062c2:	4b91      	ldr	r3, [pc, #580]	; (8006508 <_strtod_l+0xbf8>)
 80062c4:	429a      	cmp	r2, r3
 80062c6:	f040 80b0 	bne.w	800642a <_strtod_l+0xb1a>
 80062ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80062d2:	ec4b ab10 	vmov	d0, sl, fp
 80062d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062da:	f002 fa0f 	bl	80086fc <__ulp>
 80062de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062e2:	ec53 2b10 	vmov	r2, r3, d0
 80062e6:	f7fa f997 	bl	8000618 <__aeabi_dmul>
 80062ea:	4652      	mov	r2, sl
 80062ec:	465b      	mov	r3, fp
 80062ee:	f7f9 ffdd 	bl	80002ac <__adddf3>
 80062f2:	460b      	mov	r3, r1
 80062f4:	4983      	ldr	r1, [pc, #524]	; (8006504 <_strtod_l+0xbf4>)
 80062f6:	4a85      	ldr	r2, [pc, #532]	; (800650c <_strtod_l+0xbfc>)
 80062f8:	4019      	ands	r1, r3
 80062fa:	4291      	cmp	r1, r2
 80062fc:	4682      	mov	sl, r0
 80062fe:	d960      	bls.n	80063c2 <_strtod_l+0xab2>
 8006300:	ee18 3a90 	vmov	r3, s17
 8006304:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006308:	4293      	cmp	r3, r2
 800630a:	d104      	bne.n	8006316 <_strtod_l+0xa06>
 800630c:	ee18 3a10 	vmov	r3, s16
 8006310:	3301      	adds	r3, #1
 8006312:	f43f ad45 	beq.w	8005da0 <_strtod_l+0x490>
 8006316:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006518 <_strtod_l+0xc08>
 800631a:	f04f 3aff 	mov.w	sl, #4294967295
 800631e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006320:	4620      	mov	r0, r4
 8006322:	f001 feb9 	bl	8008098 <_Bfree>
 8006326:	9905      	ldr	r1, [sp, #20]
 8006328:	4620      	mov	r0, r4
 800632a:	f001 feb5 	bl	8008098 <_Bfree>
 800632e:	4631      	mov	r1, r6
 8006330:	4620      	mov	r0, r4
 8006332:	f001 feb1 	bl	8008098 <_Bfree>
 8006336:	4629      	mov	r1, r5
 8006338:	4620      	mov	r0, r4
 800633a:	f001 fead 	bl	8008098 <_Bfree>
 800633e:	e61a      	b.n	8005f76 <_strtod_l+0x666>
 8006340:	f1ba 0f00 	cmp.w	sl, #0
 8006344:	d11b      	bne.n	800637e <_strtod_l+0xa6e>
 8006346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800634a:	b9f3      	cbnz	r3, 800638a <_strtod_l+0xa7a>
 800634c:	4b6c      	ldr	r3, [pc, #432]	; (8006500 <_strtod_l+0xbf0>)
 800634e:	2200      	movs	r2, #0
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa fbd2 	bl	8000afc <__aeabi_dcmplt>
 8006358:	b9d0      	cbnz	r0, 8006390 <_strtod_l+0xa80>
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	4b6c      	ldr	r3, [pc, #432]	; (8006510 <_strtod_l+0xc00>)
 8006360:	2200      	movs	r2, #0
 8006362:	f7fa f959 	bl	8000618 <__aeabi_dmul>
 8006366:	4680      	mov	r8, r0
 8006368:	4689      	mov	r9, r1
 800636a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800636e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006372:	9315      	str	r3, [sp, #84]	; 0x54
 8006374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006378:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800637c:	e79d      	b.n	80062ba <_strtod_l+0x9aa>
 800637e:	f1ba 0f01 	cmp.w	sl, #1
 8006382:	d102      	bne.n	800638a <_strtod_l+0xa7a>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f43f ad83 	beq.w	8005e90 <_strtod_l+0x580>
 800638a:	4b62      	ldr	r3, [pc, #392]	; (8006514 <_strtod_l+0xc04>)
 800638c:	2200      	movs	r2, #0
 800638e:	e78e      	b.n	80062ae <_strtod_l+0x99e>
 8006390:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006510 <_strtod_l+0xc00>
 8006394:	f04f 0800 	mov.w	r8, #0
 8006398:	e7e7      	b.n	800636a <_strtod_l+0xa5a>
 800639a:	4b5d      	ldr	r3, [pc, #372]	; (8006510 <_strtod_l+0xc00>)
 800639c:	4640      	mov	r0, r8
 800639e:	4649      	mov	r1, r9
 80063a0:	2200      	movs	r2, #0
 80063a2:	f7fa f939 	bl	8000618 <__aeabi_dmul>
 80063a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a8:	4680      	mov	r8, r0
 80063aa:	4689      	mov	r9, r1
 80063ac:	b933      	cbnz	r3, 80063bc <_strtod_l+0xaac>
 80063ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063b2:	900e      	str	r0, [sp, #56]	; 0x38
 80063b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80063b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80063ba:	e7dd      	b.n	8006378 <_strtod_l+0xa68>
 80063bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80063c0:	e7f9      	b.n	80063b6 <_strtod_l+0xaa6>
 80063c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1a8      	bne.n	800631e <_strtod_l+0xa0e>
 80063cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063d2:	0d1b      	lsrs	r3, r3, #20
 80063d4:	051b      	lsls	r3, r3, #20
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d1a1      	bne.n	800631e <_strtod_l+0xa0e>
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa fc7b 	bl	8000cd8 <__aeabi_d2lz>
 80063e2:	f7fa f8eb 	bl	80005bc <__aeabi_l2d>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	f7f9 ff5b 	bl	80002a8 <__aeabi_dsub>
 80063f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063f8:	ea43 030a 	orr.w	r3, r3, sl
 80063fc:	4313      	orrs	r3, r2
 80063fe:	4680      	mov	r8, r0
 8006400:	4689      	mov	r9, r1
 8006402:	d055      	beq.n	80064b0 <_strtod_l+0xba0>
 8006404:	a336      	add	r3, pc, #216	; (adr r3, 80064e0 <_strtod_l+0xbd0>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7fa fb77 	bl	8000afc <__aeabi_dcmplt>
 800640e:	2800      	cmp	r0, #0
 8006410:	f47f acd0 	bne.w	8005db4 <_strtod_l+0x4a4>
 8006414:	a334      	add	r3, pc, #208	; (adr r3, 80064e8 <_strtod_l+0xbd8>)
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	4640      	mov	r0, r8
 800641c:	4649      	mov	r1, r9
 800641e:	f7fa fb8b 	bl	8000b38 <__aeabi_dcmpgt>
 8006422:	2800      	cmp	r0, #0
 8006424:	f43f af7b 	beq.w	800631e <_strtod_l+0xa0e>
 8006428:	e4c4      	b.n	8005db4 <_strtod_l+0x4a4>
 800642a:	9b04      	ldr	r3, [sp, #16]
 800642c:	b333      	cbz	r3, 800647c <_strtod_l+0xb6c>
 800642e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006430:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006434:	d822      	bhi.n	800647c <_strtod_l+0xb6c>
 8006436:	a32e      	add	r3, pc, #184	; (adr r3, 80064f0 <_strtod_l+0xbe0>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	4640      	mov	r0, r8
 800643e:	4649      	mov	r1, r9
 8006440:	f7fa fb66 	bl	8000b10 <__aeabi_dcmple>
 8006444:	b1a0      	cbz	r0, 8006470 <_strtod_l+0xb60>
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	f7fa fbbd 	bl	8000bc8 <__aeabi_d2uiz>
 800644e:	2801      	cmp	r0, #1
 8006450:	bf38      	it	cc
 8006452:	2001      	movcc	r0, #1
 8006454:	f7fa f866 	bl	8000524 <__aeabi_ui2d>
 8006458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645a:	4680      	mov	r8, r0
 800645c:	4689      	mov	r9, r1
 800645e:	bb23      	cbnz	r3, 80064aa <_strtod_l+0xb9a>
 8006460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006464:	9010      	str	r0, [sp, #64]	; 0x40
 8006466:	9311      	str	r3, [sp, #68]	; 0x44
 8006468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800646c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006474:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	9309      	str	r3, [sp, #36]	; 0x24
 800647c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006480:	eeb0 0a48 	vmov.f32	s0, s16
 8006484:	eef0 0a68 	vmov.f32	s1, s17
 8006488:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800648c:	f002 f936 	bl	80086fc <__ulp>
 8006490:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006494:	ec53 2b10 	vmov	r2, r3, d0
 8006498:	f7fa f8be 	bl	8000618 <__aeabi_dmul>
 800649c:	ec53 2b18 	vmov	r2, r3, d8
 80064a0:	f7f9 ff04 	bl	80002ac <__adddf3>
 80064a4:	4682      	mov	sl, r0
 80064a6:	468b      	mov	fp, r1
 80064a8:	e78d      	b.n	80063c6 <_strtod_l+0xab6>
 80064aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80064ae:	e7db      	b.n	8006468 <_strtod_l+0xb58>
 80064b0:	a311      	add	r3, pc, #68	; (adr r3, 80064f8 <_strtod_l+0xbe8>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7fa fb21 	bl	8000afc <__aeabi_dcmplt>
 80064ba:	e7b2      	b.n	8006422 <_strtod_l+0xb12>
 80064bc:	2300      	movs	r3, #0
 80064be:	930a      	str	r3, [sp, #40]	; 0x28
 80064c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	f7ff ba6b 	b.w	80059a0 <_strtod_l+0x90>
 80064ca:	2a65      	cmp	r2, #101	; 0x65
 80064cc:	f43f ab5f 	beq.w	8005b8e <_strtod_l+0x27e>
 80064d0:	2a45      	cmp	r2, #69	; 0x45
 80064d2:	f43f ab5c 	beq.w	8005b8e <_strtod_l+0x27e>
 80064d6:	2301      	movs	r3, #1
 80064d8:	f7ff bb94 	b.w	8005c04 <_strtod_l+0x2f4>
 80064dc:	f3af 8000 	nop.w
 80064e0:	94a03595 	.word	0x94a03595
 80064e4:	3fdfffff 	.word	0x3fdfffff
 80064e8:	35afe535 	.word	0x35afe535
 80064ec:	3fe00000 	.word	0x3fe00000
 80064f0:	ffc00000 	.word	0xffc00000
 80064f4:	41dfffff 	.word	0x41dfffff
 80064f8:	94a03595 	.word	0x94a03595
 80064fc:	3fcfffff 	.word	0x3fcfffff
 8006500:	3ff00000 	.word	0x3ff00000
 8006504:	7ff00000 	.word	0x7ff00000
 8006508:	7fe00000 	.word	0x7fe00000
 800650c:	7c9fffff 	.word	0x7c9fffff
 8006510:	3fe00000 	.word	0x3fe00000
 8006514:	bff00000 	.word	0xbff00000
 8006518:	7fefffff 	.word	0x7fefffff

0800651c <_strtod_r>:
 800651c:	4b01      	ldr	r3, [pc, #4]	; (8006524 <_strtod_r+0x8>)
 800651e:	f7ff b9f7 	b.w	8005910 <_strtod_l>
 8006522:	bf00      	nop
 8006524:	20000074 	.word	0x20000074

08006528 <_strtol_l.constprop.0>:
 8006528:	2b01      	cmp	r3, #1
 800652a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652e:	d001      	beq.n	8006534 <_strtol_l.constprop.0+0xc>
 8006530:	2b24      	cmp	r3, #36	; 0x24
 8006532:	d906      	bls.n	8006542 <_strtol_l.constprop.0+0x1a>
 8006534:	f7fe fae6 	bl	8004b04 <__errno>
 8006538:	2316      	movs	r3, #22
 800653a:	6003      	str	r3, [r0, #0]
 800653c:	2000      	movs	r0, #0
 800653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006542:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006628 <_strtol_l.constprop.0+0x100>
 8006546:	460d      	mov	r5, r1
 8006548:	462e      	mov	r6, r5
 800654a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800654e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006552:	f017 0708 	ands.w	r7, r7, #8
 8006556:	d1f7      	bne.n	8006548 <_strtol_l.constprop.0+0x20>
 8006558:	2c2d      	cmp	r4, #45	; 0x2d
 800655a:	d132      	bne.n	80065c2 <_strtol_l.constprop.0+0x9a>
 800655c:	782c      	ldrb	r4, [r5, #0]
 800655e:	2701      	movs	r7, #1
 8006560:	1cb5      	adds	r5, r6, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d05b      	beq.n	800661e <_strtol_l.constprop.0+0xf6>
 8006566:	2b10      	cmp	r3, #16
 8006568:	d109      	bne.n	800657e <_strtol_l.constprop.0+0x56>
 800656a:	2c30      	cmp	r4, #48	; 0x30
 800656c:	d107      	bne.n	800657e <_strtol_l.constprop.0+0x56>
 800656e:	782c      	ldrb	r4, [r5, #0]
 8006570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006574:	2c58      	cmp	r4, #88	; 0x58
 8006576:	d14d      	bne.n	8006614 <_strtol_l.constprop.0+0xec>
 8006578:	786c      	ldrb	r4, [r5, #1]
 800657a:	2310      	movs	r3, #16
 800657c:	3502      	adds	r5, #2
 800657e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006582:	f108 38ff 	add.w	r8, r8, #4294967295
 8006586:	f04f 0c00 	mov.w	ip, #0
 800658a:	fbb8 f9f3 	udiv	r9, r8, r3
 800658e:	4666      	mov	r6, ip
 8006590:	fb03 8a19 	mls	sl, r3, r9, r8
 8006594:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006598:	f1be 0f09 	cmp.w	lr, #9
 800659c:	d816      	bhi.n	80065cc <_strtol_l.constprop.0+0xa4>
 800659e:	4674      	mov	r4, lr
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	dd24      	ble.n	80065ee <_strtol_l.constprop.0+0xc6>
 80065a4:	f1bc 0f00 	cmp.w	ip, #0
 80065a8:	db1e      	blt.n	80065e8 <_strtol_l.constprop.0+0xc0>
 80065aa:	45b1      	cmp	r9, r6
 80065ac:	d31c      	bcc.n	80065e8 <_strtol_l.constprop.0+0xc0>
 80065ae:	d101      	bne.n	80065b4 <_strtol_l.constprop.0+0x8c>
 80065b0:	45a2      	cmp	sl, r4
 80065b2:	db19      	blt.n	80065e8 <_strtol_l.constprop.0+0xc0>
 80065b4:	fb06 4603 	mla	r6, r6, r3, r4
 80065b8:	f04f 0c01 	mov.w	ip, #1
 80065bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065c0:	e7e8      	b.n	8006594 <_strtol_l.constprop.0+0x6c>
 80065c2:	2c2b      	cmp	r4, #43	; 0x2b
 80065c4:	bf04      	itt	eq
 80065c6:	782c      	ldrbeq	r4, [r5, #0]
 80065c8:	1cb5      	addeq	r5, r6, #2
 80065ca:	e7ca      	b.n	8006562 <_strtol_l.constprop.0+0x3a>
 80065cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80065d0:	f1be 0f19 	cmp.w	lr, #25
 80065d4:	d801      	bhi.n	80065da <_strtol_l.constprop.0+0xb2>
 80065d6:	3c37      	subs	r4, #55	; 0x37
 80065d8:	e7e2      	b.n	80065a0 <_strtol_l.constprop.0+0x78>
 80065da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80065de:	f1be 0f19 	cmp.w	lr, #25
 80065e2:	d804      	bhi.n	80065ee <_strtol_l.constprop.0+0xc6>
 80065e4:	3c57      	subs	r4, #87	; 0x57
 80065e6:	e7db      	b.n	80065a0 <_strtol_l.constprop.0+0x78>
 80065e8:	f04f 3cff 	mov.w	ip, #4294967295
 80065ec:	e7e6      	b.n	80065bc <_strtol_l.constprop.0+0x94>
 80065ee:	f1bc 0f00 	cmp.w	ip, #0
 80065f2:	da05      	bge.n	8006600 <_strtol_l.constprop.0+0xd8>
 80065f4:	2322      	movs	r3, #34	; 0x22
 80065f6:	6003      	str	r3, [r0, #0]
 80065f8:	4646      	mov	r6, r8
 80065fa:	b942      	cbnz	r2, 800660e <_strtol_l.constprop.0+0xe6>
 80065fc:	4630      	mov	r0, r6
 80065fe:	e79e      	b.n	800653e <_strtol_l.constprop.0+0x16>
 8006600:	b107      	cbz	r7, 8006604 <_strtol_l.constprop.0+0xdc>
 8006602:	4276      	negs	r6, r6
 8006604:	2a00      	cmp	r2, #0
 8006606:	d0f9      	beq.n	80065fc <_strtol_l.constprop.0+0xd4>
 8006608:	f1bc 0f00 	cmp.w	ip, #0
 800660c:	d000      	beq.n	8006610 <_strtol_l.constprop.0+0xe8>
 800660e:	1e69      	subs	r1, r5, #1
 8006610:	6011      	str	r1, [r2, #0]
 8006612:	e7f3      	b.n	80065fc <_strtol_l.constprop.0+0xd4>
 8006614:	2430      	movs	r4, #48	; 0x30
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1b1      	bne.n	800657e <_strtol_l.constprop.0+0x56>
 800661a:	2308      	movs	r3, #8
 800661c:	e7af      	b.n	800657e <_strtol_l.constprop.0+0x56>
 800661e:	2c30      	cmp	r4, #48	; 0x30
 8006620:	d0a5      	beq.n	800656e <_strtol_l.constprop.0+0x46>
 8006622:	230a      	movs	r3, #10
 8006624:	e7ab      	b.n	800657e <_strtol_l.constprop.0+0x56>
 8006626:	bf00      	nop
 8006628:	08009631 	.word	0x08009631

0800662c <_strtol_r>:
 800662c:	f7ff bf7c 	b.w	8006528 <_strtol_l.constprop.0>

08006630 <__swbuf_r>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	460e      	mov	r6, r1
 8006634:	4614      	mov	r4, r2
 8006636:	4605      	mov	r5, r0
 8006638:	b118      	cbz	r0, 8006642 <__swbuf_r+0x12>
 800663a:	6983      	ldr	r3, [r0, #24]
 800663c:	b90b      	cbnz	r3, 8006642 <__swbuf_r+0x12>
 800663e:	f001 f84b 	bl	80076d8 <__sinit>
 8006642:	4b21      	ldr	r3, [pc, #132]	; (80066c8 <__swbuf_r+0x98>)
 8006644:	429c      	cmp	r4, r3
 8006646:	d12b      	bne.n	80066a0 <__swbuf_r+0x70>
 8006648:	686c      	ldr	r4, [r5, #4]
 800664a:	69a3      	ldr	r3, [r4, #24]
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	071a      	lsls	r2, r3, #28
 8006652:	d52f      	bpl.n	80066b4 <__swbuf_r+0x84>
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	b36b      	cbz	r3, 80066b4 <__swbuf_r+0x84>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	1ac0      	subs	r0, r0, r3
 800665e:	6963      	ldr	r3, [r4, #20]
 8006660:	b2f6      	uxtb	r6, r6
 8006662:	4283      	cmp	r3, r0
 8006664:	4637      	mov	r7, r6
 8006666:	dc04      	bgt.n	8006672 <__swbuf_r+0x42>
 8006668:	4621      	mov	r1, r4
 800666a:	4628      	mov	r0, r5
 800666c:	f000 ffa0 	bl	80075b0 <_fflush_r>
 8006670:	bb30      	cbnz	r0, 80066c0 <__swbuf_r+0x90>
 8006672:	68a3      	ldr	r3, [r4, #8]
 8006674:	3b01      	subs	r3, #1
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	701e      	strb	r6, [r3, #0]
 8006680:	6963      	ldr	r3, [r4, #20]
 8006682:	3001      	adds	r0, #1
 8006684:	4283      	cmp	r3, r0
 8006686:	d004      	beq.n	8006692 <__swbuf_r+0x62>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	07db      	lsls	r3, r3, #31
 800668c:	d506      	bpl.n	800669c <__swbuf_r+0x6c>
 800668e:	2e0a      	cmp	r6, #10
 8006690:	d104      	bne.n	800669c <__swbuf_r+0x6c>
 8006692:	4621      	mov	r1, r4
 8006694:	4628      	mov	r0, r5
 8006696:	f000 ff8b 	bl	80075b0 <_fflush_r>
 800669a:	b988      	cbnz	r0, 80066c0 <__swbuf_r+0x90>
 800669c:	4638      	mov	r0, r7
 800669e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <__swbuf_r+0x9c>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	d101      	bne.n	80066aa <__swbuf_r+0x7a>
 80066a6:	68ac      	ldr	r4, [r5, #8]
 80066a8:	e7cf      	b.n	800664a <__swbuf_r+0x1a>
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <__swbuf_r+0xa0>)
 80066ac:	429c      	cmp	r4, r3
 80066ae:	bf08      	it	eq
 80066b0:	68ec      	ldreq	r4, [r5, #12]
 80066b2:	e7ca      	b.n	800664a <__swbuf_r+0x1a>
 80066b4:	4621      	mov	r1, r4
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 f80c 	bl	80066d4 <__swsetup_r>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d0cb      	beq.n	8006658 <__swbuf_r+0x28>
 80066c0:	f04f 37ff 	mov.w	r7, #4294967295
 80066c4:	e7ea      	b.n	800669c <__swbuf_r+0x6c>
 80066c6:	bf00      	nop
 80066c8:	080097e4 	.word	0x080097e4
 80066cc:	08009804 	.word	0x08009804
 80066d0:	080097c4 	.word	0x080097c4

080066d4 <__swsetup_r>:
 80066d4:	4b32      	ldr	r3, [pc, #200]	; (80067a0 <__swsetup_r+0xcc>)
 80066d6:	b570      	push	{r4, r5, r6, lr}
 80066d8:	681d      	ldr	r5, [r3, #0]
 80066da:	4606      	mov	r6, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	b125      	cbz	r5, 80066ea <__swsetup_r+0x16>
 80066e0:	69ab      	ldr	r3, [r5, #24]
 80066e2:	b913      	cbnz	r3, 80066ea <__swsetup_r+0x16>
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 fff7 	bl	80076d8 <__sinit>
 80066ea:	4b2e      	ldr	r3, [pc, #184]	; (80067a4 <__swsetup_r+0xd0>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d10f      	bne.n	8006710 <__swsetup_r+0x3c>
 80066f0:	686c      	ldr	r4, [r5, #4]
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066f8:	0719      	lsls	r1, r3, #28
 80066fa:	d42c      	bmi.n	8006756 <__swsetup_r+0x82>
 80066fc:	06dd      	lsls	r5, r3, #27
 80066fe:	d411      	bmi.n	8006724 <__swsetup_r+0x50>
 8006700:	2309      	movs	r3, #9
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	f04f 30ff 	mov.w	r0, #4294967295
 800670e:	e03e      	b.n	800678e <__swsetup_r+0xba>
 8006710:	4b25      	ldr	r3, [pc, #148]	; (80067a8 <__swsetup_r+0xd4>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d101      	bne.n	800671a <__swsetup_r+0x46>
 8006716:	68ac      	ldr	r4, [r5, #8]
 8006718:	e7eb      	b.n	80066f2 <__swsetup_r+0x1e>
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <__swsetup_r+0xd8>)
 800671c:	429c      	cmp	r4, r3
 800671e:	bf08      	it	eq
 8006720:	68ec      	ldreq	r4, [r5, #12]
 8006722:	e7e6      	b.n	80066f2 <__swsetup_r+0x1e>
 8006724:	0758      	lsls	r0, r3, #29
 8006726:	d512      	bpl.n	800674e <__swsetup_r+0x7a>
 8006728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800672a:	b141      	cbz	r1, 800673e <__swsetup_r+0x6a>
 800672c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006730:	4299      	cmp	r1, r3
 8006732:	d002      	beq.n	800673a <__swsetup_r+0x66>
 8006734:	4630      	mov	r0, r6
 8006736:	f002 f947 	bl	80089c8 <_free_r>
 800673a:	2300      	movs	r3, #0
 800673c:	6363      	str	r3, [r4, #52]	; 0x34
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	2300      	movs	r3, #0
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f043 0308 	orr.w	r3, r3, #8
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	b94b      	cbnz	r3, 800676e <__swsetup_r+0x9a>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d003      	beq.n	800676e <__swsetup_r+0x9a>
 8006766:	4621      	mov	r1, r4
 8006768:	4630      	mov	r0, r6
 800676a:	f001 fbed 	bl	8007f48 <__smakebuf_r>
 800676e:	89a0      	ldrh	r0, [r4, #12]
 8006770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006774:	f010 0301 	ands.w	r3, r0, #1
 8006778:	d00a      	beq.n	8006790 <__swsetup_r+0xbc>
 800677a:	2300      	movs	r3, #0
 800677c:	60a3      	str	r3, [r4, #8]
 800677e:	6963      	ldr	r3, [r4, #20]
 8006780:	425b      	negs	r3, r3
 8006782:	61a3      	str	r3, [r4, #24]
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	b943      	cbnz	r3, 800679a <__swsetup_r+0xc6>
 8006788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800678c:	d1ba      	bne.n	8006704 <__swsetup_r+0x30>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	0781      	lsls	r1, r0, #30
 8006792:	bf58      	it	pl
 8006794:	6963      	ldrpl	r3, [r4, #20]
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	e7f4      	b.n	8006784 <__swsetup_r+0xb0>
 800679a:	2000      	movs	r0, #0
 800679c:	e7f7      	b.n	800678e <__swsetup_r+0xba>
 800679e:	bf00      	nop
 80067a0:	2000000c 	.word	0x2000000c
 80067a4:	080097e4 	.word	0x080097e4
 80067a8:	08009804 	.word	0x08009804
 80067ac:	080097c4 	.word	0x080097c4

080067b0 <quorem>:
 80067b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	6903      	ldr	r3, [r0, #16]
 80067b6:	690c      	ldr	r4, [r1, #16]
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	4607      	mov	r7, r0
 80067bc:	f2c0 8081 	blt.w	80068c2 <quorem+0x112>
 80067c0:	3c01      	subs	r4, #1
 80067c2:	f101 0814 	add.w	r8, r1, #20
 80067c6:	f100 0514 	add.w	r5, r0, #20
 80067ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d8:	3301      	adds	r3, #1
 80067da:	429a      	cmp	r2, r3
 80067dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80067e8:	d331      	bcc.n	800684e <quorem+0x9e>
 80067ea:	f04f 0e00 	mov.w	lr, #0
 80067ee:	4640      	mov	r0, r8
 80067f0:	46ac      	mov	ip, r5
 80067f2:	46f2      	mov	sl, lr
 80067f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80067f8:	b293      	uxth	r3, r2
 80067fa:	fb06 e303 	mla	r3, r6, r3, lr
 80067fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006802:	b29b      	uxth	r3, r3
 8006804:	ebaa 0303 	sub.w	r3, sl, r3
 8006808:	f8dc a000 	ldr.w	sl, [ip]
 800680c:	0c12      	lsrs	r2, r2, #16
 800680e:	fa13 f38a 	uxtah	r3, r3, sl
 8006812:	fb06 e202 	mla	r2, r6, r2, lr
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	9b00      	ldr	r3, [sp, #0]
 800681a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800681e:	b292      	uxth	r2, r2
 8006820:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006828:	f8bd 3000 	ldrh.w	r3, [sp]
 800682c:	4581      	cmp	r9, r0
 800682e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006832:	f84c 3b04 	str.w	r3, [ip], #4
 8006836:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800683a:	d2db      	bcs.n	80067f4 <quorem+0x44>
 800683c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006840:	b92b      	cbnz	r3, 800684e <quorem+0x9e>
 8006842:	9b01      	ldr	r3, [sp, #4]
 8006844:	3b04      	subs	r3, #4
 8006846:	429d      	cmp	r5, r3
 8006848:	461a      	mov	r2, r3
 800684a:	d32e      	bcc.n	80068aa <quorem+0xfa>
 800684c:	613c      	str	r4, [r7, #16]
 800684e:	4638      	mov	r0, r7
 8006850:	f001 feae 	bl	80085b0 <__mcmp>
 8006854:	2800      	cmp	r0, #0
 8006856:	db24      	blt.n	80068a2 <quorem+0xf2>
 8006858:	3601      	adds	r6, #1
 800685a:	4628      	mov	r0, r5
 800685c:	f04f 0c00 	mov.w	ip, #0
 8006860:	f858 2b04 	ldr.w	r2, [r8], #4
 8006864:	f8d0 e000 	ldr.w	lr, [r0]
 8006868:	b293      	uxth	r3, r2
 800686a:	ebac 0303 	sub.w	r3, ip, r3
 800686e:	0c12      	lsrs	r2, r2, #16
 8006870:	fa13 f38e 	uxtah	r3, r3, lr
 8006874:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800687c:	b29b      	uxth	r3, r3
 800687e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006882:	45c1      	cmp	r9, r8
 8006884:	f840 3b04 	str.w	r3, [r0], #4
 8006888:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800688c:	d2e8      	bcs.n	8006860 <quorem+0xb0>
 800688e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006896:	b922      	cbnz	r2, 80068a2 <quorem+0xf2>
 8006898:	3b04      	subs	r3, #4
 800689a:	429d      	cmp	r5, r3
 800689c:	461a      	mov	r2, r3
 800689e:	d30a      	bcc.n	80068b6 <quorem+0x106>
 80068a0:	613c      	str	r4, [r7, #16]
 80068a2:	4630      	mov	r0, r6
 80068a4:	b003      	add	sp, #12
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	3b04      	subs	r3, #4
 80068ae:	2a00      	cmp	r2, #0
 80068b0:	d1cc      	bne.n	800684c <quorem+0x9c>
 80068b2:	3c01      	subs	r4, #1
 80068b4:	e7c7      	b.n	8006846 <quorem+0x96>
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	3b04      	subs	r3, #4
 80068ba:	2a00      	cmp	r2, #0
 80068bc:	d1f0      	bne.n	80068a0 <quorem+0xf0>
 80068be:	3c01      	subs	r4, #1
 80068c0:	e7eb      	b.n	800689a <quorem+0xea>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e7ee      	b.n	80068a4 <quorem+0xf4>
	...

080068c8 <_dtoa_r>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	ed2d 8b04 	vpush	{d8-d9}
 80068d0:	ec57 6b10 	vmov	r6, r7, d0
 80068d4:	b093      	sub	sp, #76	; 0x4c
 80068d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068dc:	9106      	str	r1, [sp, #24]
 80068de:	ee10 aa10 	vmov	sl, s0
 80068e2:	4604      	mov	r4, r0
 80068e4:	9209      	str	r2, [sp, #36]	; 0x24
 80068e6:	930c      	str	r3, [sp, #48]	; 0x30
 80068e8:	46bb      	mov	fp, r7
 80068ea:	b975      	cbnz	r5, 800690a <_dtoa_r+0x42>
 80068ec:	2010      	movs	r0, #16
 80068ee:	f001 fb6b 	bl	8007fc8 <malloc>
 80068f2:	4602      	mov	r2, r0
 80068f4:	6260      	str	r0, [r4, #36]	; 0x24
 80068f6:	b920      	cbnz	r0, 8006902 <_dtoa_r+0x3a>
 80068f8:	4ba7      	ldr	r3, [pc, #668]	; (8006b98 <_dtoa_r+0x2d0>)
 80068fa:	21ea      	movs	r1, #234	; 0xea
 80068fc:	48a7      	ldr	r0, [pc, #668]	; (8006b9c <_dtoa_r+0x2d4>)
 80068fe:	f002 fc89 	bl	8009214 <__assert_func>
 8006902:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006906:	6005      	str	r5, [r0, #0]
 8006908:	60c5      	str	r5, [r0, #12]
 800690a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690c:	6819      	ldr	r1, [r3, #0]
 800690e:	b151      	cbz	r1, 8006926 <_dtoa_r+0x5e>
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	604a      	str	r2, [r1, #4]
 8006914:	2301      	movs	r3, #1
 8006916:	4093      	lsls	r3, r2
 8006918:	608b      	str	r3, [r1, #8]
 800691a:	4620      	mov	r0, r4
 800691c:	f001 fbbc 	bl	8008098 <_Bfree>
 8006920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	1e3b      	subs	r3, r7, #0
 8006928:	bfaa      	itet	ge
 800692a:	2300      	movge	r3, #0
 800692c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006930:	f8c8 3000 	strge.w	r3, [r8]
 8006934:	4b9a      	ldr	r3, [pc, #616]	; (8006ba0 <_dtoa_r+0x2d8>)
 8006936:	bfbc      	itt	lt
 8006938:	2201      	movlt	r2, #1
 800693a:	f8c8 2000 	strlt.w	r2, [r8]
 800693e:	ea33 030b 	bics.w	r3, r3, fp
 8006942:	d11b      	bne.n	800697c <_dtoa_r+0xb4>
 8006944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006946:	f242 730f 	movw	r3, #9999	; 0x270f
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006950:	4333      	orrs	r3, r6
 8006952:	f000 8592 	beq.w	800747a <_dtoa_r+0xbb2>
 8006956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006958:	b963      	cbnz	r3, 8006974 <_dtoa_r+0xac>
 800695a:	4b92      	ldr	r3, [pc, #584]	; (8006ba4 <_dtoa_r+0x2dc>)
 800695c:	e022      	b.n	80069a4 <_dtoa_r+0xdc>
 800695e:	4b92      	ldr	r3, [pc, #584]	; (8006ba8 <_dtoa_r+0x2e0>)
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	3308      	adds	r3, #8
 8006964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	9801      	ldr	r0, [sp, #4]
 800696a:	b013      	add	sp, #76	; 0x4c
 800696c:	ecbd 8b04 	vpop	{d8-d9}
 8006970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006974:	4b8b      	ldr	r3, [pc, #556]	; (8006ba4 <_dtoa_r+0x2dc>)
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	3303      	adds	r3, #3
 800697a:	e7f3      	b.n	8006964 <_dtoa_r+0x9c>
 800697c:	2200      	movs	r2, #0
 800697e:	2300      	movs	r3, #0
 8006980:	4650      	mov	r0, sl
 8006982:	4659      	mov	r1, fp
 8006984:	f7fa f8b0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006988:	ec4b ab19 	vmov	d9, sl, fp
 800698c:	4680      	mov	r8, r0
 800698e:	b158      	cbz	r0, 80069a8 <_dtoa_r+0xe0>
 8006990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006992:	2301      	movs	r3, #1
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 856b 	beq.w	8007474 <_dtoa_r+0xbac>
 800699e:	4883      	ldr	r0, [pc, #524]	; (8006bac <_dtoa_r+0x2e4>)
 80069a0:	6018      	str	r0, [r3, #0]
 80069a2:	1e43      	subs	r3, r0, #1
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	e7df      	b.n	8006968 <_dtoa_r+0xa0>
 80069a8:	ec4b ab10 	vmov	d0, sl, fp
 80069ac:	aa10      	add	r2, sp, #64	; 0x40
 80069ae:	a911      	add	r1, sp, #68	; 0x44
 80069b0:	4620      	mov	r0, r4
 80069b2:	f001 ff1f 	bl	80087f4 <__d2b>
 80069b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80069ba:	ee08 0a10 	vmov	s16, r0
 80069be:	2d00      	cmp	r5, #0
 80069c0:	f000 8084 	beq.w	8006acc <_dtoa_r+0x204>
 80069c4:	ee19 3a90 	vmov	r3, s19
 80069c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069d0:	4656      	mov	r6, sl
 80069d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80069de:	4b74      	ldr	r3, [pc, #464]	; (8006bb0 <_dtoa_r+0x2e8>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	4630      	mov	r0, r6
 80069e4:	4639      	mov	r1, r7
 80069e6:	f7f9 fc5f 	bl	80002a8 <__aeabi_dsub>
 80069ea:	a365      	add	r3, pc, #404	; (adr r3, 8006b80 <_dtoa_r+0x2b8>)
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f7f9 fe12 	bl	8000618 <__aeabi_dmul>
 80069f4:	a364      	add	r3, pc, #400	; (adr r3, 8006b88 <_dtoa_r+0x2c0>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f7f9 fc57 	bl	80002ac <__adddf3>
 80069fe:	4606      	mov	r6, r0
 8006a00:	4628      	mov	r0, r5
 8006a02:	460f      	mov	r7, r1
 8006a04:	f7f9 fd9e 	bl	8000544 <__aeabi_i2d>
 8006a08:	a361      	add	r3, pc, #388	; (adr r3, 8006b90 <_dtoa_r+0x2c8>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fe03 	bl	8000618 <__aeabi_dmul>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4630      	mov	r0, r6
 8006a18:	4639      	mov	r1, r7
 8006a1a:	f7f9 fc47 	bl	80002ac <__adddf3>
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	f7fa f8a9 	bl	8000b78 <__aeabi_d2iz>
 8006a26:	2200      	movs	r2, #0
 8006a28:	9000      	str	r0, [sp, #0]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	4639      	mov	r1, r7
 8006a30:	f7fa f864 	bl	8000afc <__aeabi_dcmplt>
 8006a34:	b150      	cbz	r0, 8006a4c <_dtoa_r+0x184>
 8006a36:	9800      	ldr	r0, [sp, #0]
 8006a38:	f7f9 fd84 	bl	8000544 <__aeabi_i2d>
 8006a3c:	4632      	mov	r2, r6
 8006a3e:	463b      	mov	r3, r7
 8006a40:	f7fa f852 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a44:	b910      	cbnz	r0, 8006a4c <_dtoa_r+0x184>
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	9b00      	ldr	r3, [sp, #0]
 8006a4e:	2b16      	cmp	r3, #22
 8006a50:	d85a      	bhi.n	8006b08 <_dtoa_r+0x240>
 8006a52:	9a00      	ldr	r2, [sp, #0]
 8006a54:	4b57      	ldr	r3, [pc, #348]	; (8006bb4 <_dtoa_r+0x2ec>)
 8006a56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	ec51 0b19 	vmov	r0, r1, d9
 8006a62:	f7fa f84b 	bl	8000afc <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d050      	beq.n	8006b0c <_dtoa_r+0x244>
 8006a6a:	9b00      	ldr	r3, [sp, #0]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	2300      	movs	r3, #0
 8006a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a76:	1b5d      	subs	r5, r3, r5
 8006a78:	1e6b      	subs	r3, r5, #1
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	bf45      	ittet	mi
 8006a7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006a82:	9304      	strmi	r3, [sp, #16]
 8006a84:	2300      	movpl	r3, #0
 8006a86:	2300      	movmi	r3, #0
 8006a88:	bf4c      	ite	mi
 8006a8a:	9305      	strmi	r3, [sp, #20]
 8006a8c:	9304      	strpl	r3, [sp, #16]
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db3d      	blt.n	8006b10 <_dtoa_r+0x248>
 8006a94:	9b05      	ldr	r3, [sp, #20]
 8006a96:	9a00      	ldr	r2, [sp, #0]
 8006a98:	920a      	str	r2, [sp, #40]	; 0x28
 8006a9a:	4413      	add	r3, r2
 8006a9c:	9305      	str	r3, [sp, #20]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	9307      	str	r3, [sp, #28]
 8006aa2:	9b06      	ldr	r3, [sp, #24]
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	f200 8089 	bhi.w	8006bbc <_dtoa_r+0x2f4>
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	bfc4      	itt	gt
 8006aae:	3b04      	subgt	r3, #4
 8006ab0:	9306      	strgt	r3, [sp, #24]
 8006ab2:	9b06      	ldr	r3, [sp, #24]
 8006ab4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ab8:	bfcc      	ite	gt
 8006aba:	2500      	movgt	r5, #0
 8006abc:	2501      	movle	r5, #1
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	f200 8087 	bhi.w	8006bd2 <_dtoa_r+0x30a>
 8006ac4:	e8df f003 	tbb	[pc, r3]
 8006ac8:	59383a2d 	.word	0x59383a2d
 8006acc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ad0:	441d      	add	r5, r3
 8006ad2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	bfc1      	itttt	gt
 8006ada:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ade:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ae2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ae6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006aea:	bfda      	itte	le
 8006aec:	f1c3 0320 	rsble	r3, r3, #32
 8006af0:	fa06 f003 	lslle.w	r0, r6, r3
 8006af4:	4318      	orrgt	r0, r3
 8006af6:	f7f9 fd15 	bl	8000524 <__aeabi_ui2d>
 8006afa:	2301      	movs	r3, #1
 8006afc:	4606      	mov	r6, r0
 8006afe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b02:	3d01      	subs	r5, #1
 8006b04:	930e      	str	r3, [sp, #56]	; 0x38
 8006b06:	e76a      	b.n	80069de <_dtoa_r+0x116>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e7b2      	b.n	8006a72 <_dtoa_r+0x1aa>
 8006b0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b0e:	e7b1      	b.n	8006a74 <_dtoa_r+0x1ac>
 8006b10:	9b04      	ldr	r3, [sp, #16]
 8006b12:	9a00      	ldr	r2, [sp, #0]
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	9304      	str	r3, [sp, #16]
 8006b18:	4253      	negs	r3, r2
 8006b1a:	9307      	str	r3, [sp, #28]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b20:	e7bf      	b.n	8006aa2 <_dtoa_r+0x1da>
 8006b22:	2300      	movs	r3, #0
 8006b24:	9308      	str	r3, [sp, #32]
 8006b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dc55      	bgt.n	8006bd8 <_dtoa_r+0x310>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b32:	461a      	mov	r2, r3
 8006b34:	9209      	str	r2, [sp, #36]	; 0x24
 8006b36:	e00c      	b.n	8006b52 <_dtoa_r+0x28a>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e7f3      	b.n	8006b24 <_dtoa_r+0x25c>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b40:	9308      	str	r3, [sp, #32]
 8006b42:	9b00      	ldr	r3, [sp, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	9302      	str	r3, [sp, #8]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	9303      	str	r3, [sp, #12]
 8006b4e:	bfb8      	it	lt
 8006b50:	2301      	movlt	r3, #1
 8006b52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b54:	2200      	movs	r2, #0
 8006b56:	6042      	str	r2, [r0, #4]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	f102 0614 	add.w	r6, r2, #20
 8006b5e:	429e      	cmp	r6, r3
 8006b60:	6841      	ldr	r1, [r0, #4]
 8006b62:	d93d      	bls.n	8006be0 <_dtoa_r+0x318>
 8006b64:	4620      	mov	r0, r4
 8006b66:	f001 fa57 	bl	8008018 <_Balloc>
 8006b6a:	9001      	str	r0, [sp, #4]
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d13b      	bne.n	8006be8 <_dtoa_r+0x320>
 8006b70:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <_dtoa_r+0x2f0>)
 8006b72:	4602      	mov	r2, r0
 8006b74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b78:	e6c0      	b.n	80068fc <_dtoa_r+0x34>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e7df      	b.n	8006b3e <_dtoa_r+0x276>
 8006b7e:	bf00      	nop
 8006b80:	636f4361 	.word	0x636f4361
 8006b84:	3fd287a7 	.word	0x3fd287a7
 8006b88:	8b60c8b3 	.word	0x8b60c8b3
 8006b8c:	3fc68a28 	.word	0x3fc68a28
 8006b90:	509f79fb 	.word	0x509f79fb
 8006b94:	3fd34413 	.word	0x3fd34413
 8006b98:	0800973e 	.word	0x0800973e
 8006b9c:	08009755 	.word	0x08009755
 8006ba0:	7ff00000 	.word	0x7ff00000
 8006ba4:	0800973a 	.word	0x0800973a
 8006ba8:	08009731 	.word	0x08009731
 8006bac:	080095b1 	.word	0x080095b1
 8006bb0:	3ff80000 	.word	0x3ff80000
 8006bb4:	08009928 	.word	0x08009928
 8006bb8:	080097b0 	.word	0x080097b0
 8006bbc:	2501      	movs	r5, #1
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9306      	str	r3, [sp, #24]
 8006bc2:	9508      	str	r5, [sp, #32]
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2312      	movs	r3, #18
 8006bd0:	e7b0      	b.n	8006b34 <_dtoa_r+0x26c>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	9308      	str	r3, [sp, #32]
 8006bd6:	e7f5      	b.n	8006bc4 <_dtoa_r+0x2fc>
 8006bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bde:	e7b8      	b.n	8006b52 <_dtoa_r+0x28a>
 8006be0:	3101      	adds	r1, #1
 8006be2:	6041      	str	r1, [r0, #4]
 8006be4:	0052      	lsls	r2, r2, #1
 8006be6:	e7b8      	b.n	8006b5a <_dtoa_r+0x292>
 8006be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bea:	9a01      	ldr	r2, [sp, #4]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	9b03      	ldr	r3, [sp, #12]
 8006bf0:	2b0e      	cmp	r3, #14
 8006bf2:	f200 809d 	bhi.w	8006d30 <_dtoa_r+0x468>
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	f000 809a 	beq.w	8006d30 <_dtoa_r+0x468>
 8006bfc:	9b00      	ldr	r3, [sp, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dd32      	ble.n	8006c68 <_dtoa_r+0x3a0>
 8006c02:	4ab7      	ldr	r2, [pc, #732]	; (8006ee0 <_dtoa_r+0x618>)
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c10:	9b00      	ldr	r3, [sp, #0]
 8006c12:	05d8      	lsls	r0, r3, #23
 8006c14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c18:	d516      	bpl.n	8006c48 <_dtoa_r+0x380>
 8006c1a:	4bb2      	ldr	r3, [pc, #712]	; (8006ee4 <_dtoa_r+0x61c>)
 8006c1c:	ec51 0b19 	vmov	r0, r1, d9
 8006c20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c24:	f7f9 fe22 	bl	800086c <__aeabi_ddiv>
 8006c28:	f007 070f 	and.w	r7, r7, #15
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	468b      	mov	fp, r1
 8006c30:	2503      	movs	r5, #3
 8006c32:	4eac      	ldr	r6, [pc, #688]	; (8006ee4 <_dtoa_r+0x61c>)
 8006c34:	b957      	cbnz	r7, 8006c4c <_dtoa_r+0x384>
 8006c36:	4642      	mov	r2, r8
 8006c38:	464b      	mov	r3, r9
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	4659      	mov	r1, fp
 8006c3e:	f7f9 fe15 	bl	800086c <__aeabi_ddiv>
 8006c42:	4682      	mov	sl, r0
 8006c44:	468b      	mov	fp, r1
 8006c46:	e028      	b.n	8006c9a <_dtoa_r+0x3d2>
 8006c48:	2502      	movs	r5, #2
 8006c4a:	e7f2      	b.n	8006c32 <_dtoa_r+0x36a>
 8006c4c:	07f9      	lsls	r1, r7, #31
 8006c4e:	d508      	bpl.n	8006c62 <_dtoa_r+0x39a>
 8006c50:	4640      	mov	r0, r8
 8006c52:	4649      	mov	r1, r9
 8006c54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c58:	f7f9 fcde 	bl	8000618 <__aeabi_dmul>
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4689      	mov	r9, r1
 8006c62:	107f      	asrs	r7, r7, #1
 8006c64:	3608      	adds	r6, #8
 8006c66:	e7e5      	b.n	8006c34 <_dtoa_r+0x36c>
 8006c68:	f000 809b 	beq.w	8006da2 <_dtoa_r+0x4da>
 8006c6c:	9b00      	ldr	r3, [sp, #0]
 8006c6e:	4f9d      	ldr	r7, [pc, #628]	; (8006ee4 <_dtoa_r+0x61c>)
 8006c70:	425e      	negs	r6, r3
 8006c72:	4b9b      	ldr	r3, [pc, #620]	; (8006ee0 <_dtoa_r+0x618>)
 8006c74:	f006 020f 	and.w	r2, r6, #15
 8006c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	ec51 0b19 	vmov	r0, r1, d9
 8006c84:	f7f9 fcc8 	bl	8000618 <__aeabi_dmul>
 8006c88:	1136      	asrs	r6, r6, #4
 8006c8a:	4682      	mov	sl, r0
 8006c8c:	468b      	mov	fp, r1
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2502      	movs	r5, #2
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	d17a      	bne.n	8006d8c <_dtoa_r+0x4c4>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1d3      	bne.n	8006c42 <_dtoa_r+0x37a>
 8006c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8082 	beq.w	8006da6 <_dtoa_r+0x4de>
 8006ca2:	4b91      	ldr	r3, [pc, #580]	; (8006ee8 <_dtoa_r+0x620>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	4659      	mov	r1, fp
 8006caa:	f7f9 ff27 	bl	8000afc <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d079      	beq.n	8006da6 <_dtoa_r+0x4de>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d076      	beq.n	8006da6 <_dtoa_r+0x4de>
 8006cb8:	9b02      	ldr	r3, [sp, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dd36      	ble.n	8006d2c <_dtoa_r+0x464>
 8006cbe:	9b00      	ldr	r3, [sp, #0]
 8006cc0:	4650      	mov	r0, sl
 8006cc2:	4659      	mov	r1, fp
 8006cc4:	1e5f      	subs	r7, r3, #1
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4b88      	ldr	r3, [pc, #544]	; (8006eec <_dtoa_r+0x624>)
 8006cca:	f7f9 fca5 	bl	8000618 <__aeabi_dmul>
 8006cce:	9e02      	ldr	r6, [sp, #8]
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	468b      	mov	fp, r1
 8006cd4:	3501      	adds	r5, #1
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f7f9 fc34 	bl	8000544 <__aeabi_i2d>
 8006cdc:	4652      	mov	r2, sl
 8006cde:	465b      	mov	r3, fp
 8006ce0:	f7f9 fc9a 	bl	8000618 <__aeabi_dmul>
 8006ce4:	4b82      	ldr	r3, [pc, #520]	; (8006ef0 <_dtoa_r+0x628>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f7f9 fae0 	bl	80002ac <__adddf3>
 8006cec:	46d0      	mov	r8, sl
 8006cee:	46d9      	mov	r9, fp
 8006cf0:	4682      	mov	sl, r0
 8006cf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	d158      	bne.n	8006dac <_dtoa_r+0x4e4>
 8006cfa:	4b7e      	ldr	r3, [pc, #504]	; (8006ef4 <_dtoa_r+0x62c>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4649      	mov	r1, r9
 8006d02:	f7f9 fad1 	bl	80002a8 <__aeabi_dsub>
 8006d06:	4652      	mov	r2, sl
 8006d08:	465b      	mov	r3, fp
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	4689      	mov	r9, r1
 8006d0e:	f7f9 ff13 	bl	8000b38 <__aeabi_dcmpgt>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f040 8295 	bne.w	8007242 <_dtoa_r+0x97a>
 8006d18:	4652      	mov	r2, sl
 8006d1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 feeb 	bl	8000afc <__aeabi_dcmplt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f040 8289 	bne.w	800723e <_dtoa_r+0x976>
 8006d2c:	ec5b ab19 	vmov	sl, fp, d9
 8006d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f2c0 8148 	blt.w	8006fc8 <_dtoa_r+0x700>
 8006d38:	9a00      	ldr	r2, [sp, #0]
 8006d3a:	2a0e      	cmp	r2, #14
 8006d3c:	f300 8144 	bgt.w	8006fc8 <_dtoa_r+0x700>
 8006d40:	4b67      	ldr	r3, [pc, #412]	; (8006ee0 <_dtoa_r+0x618>)
 8006d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f280 80d5 	bge.w	8006efc <_dtoa_r+0x634>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f300 80d1 	bgt.w	8006efc <_dtoa_r+0x634>
 8006d5a:	f040 826f 	bne.w	800723c <_dtoa_r+0x974>
 8006d5e:	4b65      	ldr	r3, [pc, #404]	; (8006ef4 <_dtoa_r+0x62c>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	4640      	mov	r0, r8
 8006d64:	4649      	mov	r1, r9
 8006d66:	f7f9 fc57 	bl	8000618 <__aeabi_dmul>
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	465b      	mov	r3, fp
 8006d6e:	f7f9 fed9 	bl	8000b24 <__aeabi_dcmpge>
 8006d72:	9e03      	ldr	r6, [sp, #12]
 8006d74:	4637      	mov	r7, r6
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f040 8245 	bne.w	8007206 <_dtoa_r+0x93e>
 8006d7c:	9d01      	ldr	r5, [sp, #4]
 8006d7e:	2331      	movs	r3, #49	; 0x31
 8006d80:	f805 3b01 	strb.w	r3, [r5], #1
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	e240      	b.n	800720e <_dtoa_r+0x946>
 8006d8c:	07f2      	lsls	r2, r6, #31
 8006d8e:	d505      	bpl.n	8006d9c <_dtoa_r+0x4d4>
 8006d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d94:	f7f9 fc40 	bl	8000618 <__aeabi_dmul>
 8006d98:	3501      	adds	r5, #1
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	1076      	asrs	r6, r6, #1
 8006d9e:	3708      	adds	r7, #8
 8006da0:	e777      	b.n	8006c92 <_dtoa_r+0x3ca>
 8006da2:	2502      	movs	r5, #2
 8006da4:	e779      	b.n	8006c9a <_dtoa_r+0x3d2>
 8006da6:	9f00      	ldr	r7, [sp, #0]
 8006da8:	9e03      	ldr	r6, [sp, #12]
 8006daa:	e794      	b.n	8006cd6 <_dtoa_r+0x40e>
 8006dac:	9901      	ldr	r1, [sp, #4]
 8006dae:	4b4c      	ldr	r3, [pc, #304]	; (8006ee0 <_dtoa_r+0x618>)
 8006db0:	4431      	add	r1, r6
 8006db2:	910d      	str	r1, [sp, #52]	; 0x34
 8006db4:	9908      	ldr	r1, [sp, #32]
 8006db6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006dba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	d043      	beq.n	8006e4a <_dtoa_r+0x582>
 8006dc2:	494d      	ldr	r1, [pc, #308]	; (8006ef8 <_dtoa_r+0x630>)
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	f7f9 fd51 	bl	800086c <__aeabi_ddiv>
 8006dca:	4652      	mov	r2, sl
 8006dcc:	465b      	mov	r3, fp
 8006dce:	f7f9 fa6b 	bl	80002a8 <__aeabi_dsub>
 8006dd2:	9d01      	ldr	r5, [sp, #4]
 8006dd4:	4682      	mov	sl, r0
 8006dd6:	468b      	mov	fp, r1
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f7f9 fecc 	bl	8000b78 <__aeabi_d2iz>
 8006de0:	4606      	mov	r6, r0
 8006de2:	f7f9 fbaf 	bl	8000544 <__aeabi_i2d>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fa5b 	bl	80002a8 <__aeabi_dsub>
 8006df2:	3630      	adds	r6, #48	; 0x30
 8006df4:	f805 6b01 	strb.w	r6, [r5], #1
 8006df8:	4652      	mov	r2, sl
 8006dfa:	465b      	mov	r3, fp
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	4689      	mov	r9, r1
 8006e00:	f7f9 fe7c 	bl	8000afc <__aeabi_dcmplt>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d163      	bne.n	8006ed0 <_dtoa_r+0x608>
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	4936      	ldr	r1, [pc, #216]	; (8006ee8 <_dtoa_r+0x620>)
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f7f9 fa4a 	bl	80002a8 <__aeabi_dsub>
 8006e14:	4652      	mov	r2, sl
 8006e16:	465b      	mov	r3, fp
 8006e18:	f7f9 fe70 	bl	8000afc <__aeabi_dcmplt>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	f040 80b5 	bne.w	8006f8c <_dtoa_r+0x6c4>
 8006e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e24:	429d      	cmp	r5, r3
 8006e26:	d081      	beq.n	8006d2c <_dtoa_r+0x464>
 8006e28:	4b30      	ldr	r3, [pc, #192]	; (8006eec <_dtoa_r+0x624>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	4659      	mov	r1, fp
 8006e30:	f7f9 fbf2 	bl	8000618 <__aeabi_dmul>
 8006e34:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <_dtoa_r+0x624>)
 8006e36:	4682      	mov	sl, r0
 8006e38:	468b      	mov	fp, r1
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f7f9 fbea 	bl	8000618 <__aeabi_dmul>
 8006e44:	4680      	mov	r8, r0
 8006e46:	4689      	mov	r9, r1
 8006e48:	e7c6      	b.n	8006dd8 <_dtoa_r+0x510>
 8006e4a:	4650      	mov	r0, sl
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	f7f9 fbe3 	bl	8000618 <__aeabi_dmul>
 8006e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e54:	9d01      	ldr	r5, [sp, #4]
 8006e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e58:	4682      	mov	sl, r0
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f7f9 fe8a 	bl	8000b78 <__aeabi_d2iz>
 8006e64:	4606      	mov	r6, r0
 8006e66:	f7f9 fb6d 	bl	8000544 <__aeabi_i2d>
 8006e6a:	3630      	adds	r6, #48	; 0x30
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fa18 	bl	80002a8 <__aeabi_dsub>
 8006e78:	f805 6b01 	strb.w	r6, [r5], #1
 8006e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e7e:	429d      	cmp	r5, r3
 8006e80:	4680      	mov	r8, r0
 8006e82:	4689      	mov	r9, r1
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	d124      	bne.n	8006ed4 <_dtoa_r+0x60c>
 8006e8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <_dtoa_r+0x630>)
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	4659      	mov	r1, fp
 8006e90:	f7f9 fa0c 	bl	80002ac <__adddf3>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4640      	mov	r0, r8
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	f7f9 fe4c 	bl	8000b38 <__aeabi_dcmpgt>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d173      	bne.n	8006f8c <_dtoa_r+0x6c4>
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	465b      	mov	r3, fp
 8006ea8:	4913      	ldr	r1, [pc, #76]	; (8006ef8 <_dtoa_r+0x630>)
 8006eaa:	2000      	movs	r0, #0
 8006eac:	f7f9 f9fc 	bl	80002a8 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 fe20 	bl	8000afc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f43f af35 	beq.w	8006d2c <_dtoa_r+0x464>
 8006ec2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ec4:	1e6b      	subs	r3, r5, #1
 8006ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ecc:	2b30      	cmp	r3, #48	; 0x30
 8006ece:	d0f8      	beq.n	8006ec2 <_dtoa_r+0x5fa>
 8006ed0:	9700      	str	r7, [sp, #0]
 8006ed2:	e049      	b.n	8006f68 <_dtoa_r+0x6a0>
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <_dtoa_r+0x624>)
 8006ed6:	f7f9 fb9f 	bl	8000618 <__aeabi_dmul>
 8006eda:	4680      	mov	r8, r0
 8006edc:	4689      	mov	r9, r1
 8006ede:	e7bd      	b.n	8006e5c <_dtoa_r+0x594>
 8006ee0:	08009928 	.word	0x08009928
 8006ee4:	08009900 	.word	0x08009900
 8006ee8:	3ff00000 	.word	0x3ff00000
 8006eec:	40240000 	.word	0x40240000
 8006ef0:	401c0000 	.word	0x401c0000
 8006ef4:	40140000 	.word	0x40140000
 8006ef8:	3fe00000 	.word	0x3fe00000
 8006efc:	9d01      	ldr	r5, [sp, #4]
 8006efe:	4656      	mov	r6, sl
 8006f00:	465f      	mov	r7, fp
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	4630      	mov	r0, r6
 8006f08:	4639      	mov	r1, r7
 8006f0a:	f7f9 fcaf 	bl	800086c <__aeabi_ddiv>
 8006f0e:	f7f9 fe33 	bl	8000b78 <__aeabi_d2iz>
 8006f12:	4682      	mov	sl, r0
 8006f14:	f7f9 fb16 	bl	8000544 <__aeabi_i2d>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	f7f9 fb7c 	bl	8000618 <__aeabi_dmul>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f2c:	f7f9 f9bc 	bl	80002a8 <__aeabi_dsub>
 8006f30:	f805 6b01 	strb.w	r6, [r5], #1
 8006f34:	9e01      	ldr	r6, [sp, #4]
 8006f36:	9f03      	ldr	r7, [sp, #12]
 8006f38:	1bae      	subs	r6, r5, r6
 8006f3a:	42b7      	cmp	r7, r6
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	d135      	bne.n	8006fae <_dtoa_r+0x6e6>
 8006f42:	f7f9 f9b3 	bl	80002ac <__adddf3>
 8006f46:	4642      	mov	r2, r8
 8006f48:	464b      	mov	r3, r9
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	f7f9 fdf3 	bl	8000b38 <__aeabi_dcmpgt>
 8006f52:	b9d0      	cbnz	r0, 8006f8a <_dtoa_r+0x6c2>
 8006f54:	4642      	mov	r2, r8
 8006f56:	464b      	mov	r3, r9
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fdc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f60:	b110      	cbz	r0, 8006f68 <_dtoa_r+0x6a0>
 8006f62:	f01a 0f01 	tst.w	sl, #1
 8006f66:	d110      	bne.n	8006f8a <_dtoa_r+0x6c2>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	ee18 1a10 	vmov	r1, s16
 8006f6e:	f001 f893 	bl	8008098 <_Bfree>
 8006f72:	2300      	movs	r3, #0
 8006f74:	9800      	ldr	r0, [sp, #0]
 8006f76:	702b      	strb	r3, [r5, #0]
 8006f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	6018      	str	r0, [r3, #0]
 8006f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f43f acf1 	beq.w	8006968 <_dtoa_r+0xa0>
 8006f86:	601d      	str	r5, [r3, #0]
 8006f88:	e4ee      	b.n	8006968 <_dtoa_r+0xa0>
 8006f8a:	9f00      	ldr	r7, [sp, #0]
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	461d      	mov	r5, r3
 8006f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f94:	2a39      	cmp	r2, #57	; 0x39
 8006f96:	d106      	bne.n	8006fa6 <_dtoa_r+0x6de>
 8006f98:	9a01      	ldr	r2, [sp, #4]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d1f7      	bne.n	8006f8e <_dtoa_r+0x6c6>
 8006f9e:	9901      	ldr	r1, [sp, #4]
 8006fa0:	2230      	movs	r2, #48	; 0x30
 8006fa2:	3701      	adds	r7, #1
 8006fa4:	700a      	strb	r2, [r1, #0]
 8006fa6:	781a      	ldrb	r2, [r3, #0]
 8006fa8:	3201      	adds	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	e790      	b.n	8006ed0 <_dtoa_r+0x608>
 8006fae:	4ba6      	ldr	r3, [pc, #664]	; (8007248 <_dtoa_r+0x980>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f7f9 fb31 	bl	8000618 <__aeabi_dmul>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	f7f9 fd93 	bl	8000ae8 <__aeabi_dcmpeq>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d09d      	beq.n	8006f02 <_dtoa_r+0x63a>
 8006fc6:	e7cf      	b.n	8006f68 <_dtoa_r+0x6a0>
 8006fc8:	9a08      	ldr	r2, [sp, #32]
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	f000 80d7 	beq.w	800717e <_dtoa_r+0x8b6>
 8006fd0:	9a06      	ldr	r2, [sp, #24]
 8006fd2:	2a01      	cmp	r2, #1
 8006fd4:	f300 80ba 	bgt.w	800714c <_dtoa_r+0x884>
 8006fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	f000 80b2 	beq.w	8007144 <_dtoa_r+0x87c>
 8006fe0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fe4:	9e07      	ldr	r6, [sp, #28]
 8006fe6:	9d04      	ldr	r5, [sp, #16]
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	441a      	add	r2, r3
 8006fec:	9204      	str	r2, [sp, #16]
 8006fee:	9a05      	ldr	r2, [sp, #20]
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	441a      	add	r2, r3
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	9205      	str	r2, [sp, #20]
 8006ff8:	f001 f950 	bl	800829c <__i2b>
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	dd0c      	ble.n	800701c <_dtoa_r+0x754>
 8007002:	9b05      	ldr	r3, [sp, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	dd09      	ble.n	800701c <_dtoa_r+0x754>
 8007008:	42ab      	cmp	r3, r5
 800700a:	9a04      	ldr	r2, [sp, #16]
 800700c:	bfa8      	it	ge
 800700e:	462b      	movge	r3, r5
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	9204      	str	r2, [sp, #16]
 8007014:	9a05      	ldr	r2, [sp, #20]
 8007016:	1aed      	subs	r5, r5, r3
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	9305      	str	r3, [sp, #20]
 800701c:	9b07      	ldr	r3, [sp, #28]
 800701e:	b31b      	cbz	r3, 8007068 <_dtoa_r+0x7a0>
 8007020:	9b08      	ldr	r3, [sp, #32]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 80af 	beq.w	8007186 <_dtoa_r+0x8be>
 8007028:	2e00      	cmp	r6, #0
 800702a:	dd13      	ble.n	8007054 <_dtoa_r+0x78c>
 800702c:	4639      	mov	r1, r7
 800702e:	4632      	mov	r2, r6
 8007030:	4620      	mov	r0, r4
 8007032:	f001 f9f3 	bl	800841c <__pow5mult>
 8007036:	ee18 2a10 	vmov	r2, s16
 800703a:	4601      	mov	r1, r0
 800703c:	4607      	mov	r7, r0
 800703e:	4620      	mov	r0, r4
 8007040:	f001 f942 	bl	80082c8 <__multiply>
 8007044:	ee18 1a10 	vmov	r1, s16
 8007048:	4680      	mov	r8, r0
 800704a:	4620      	mov	r0, r4
 800704c:	f001 f824 	bl	8008098 <_Bfree>
 8007050:	ee08 8a10 	vmov	s16, r8
 8007054:	9b07      	ldr	r3, [sp, #28]
 8007056:	1b9a      	subs	r2, r3, r6
 8007058:	d006      	beq.n	8007068 <_dtoa_r+0x7a0>
 800705a:	ee18 1a10 	vmov	r1, s16
 800705e:	4620      	mov	r0, r4
 8007060:	f001 f9dc 	bl	800841c <__pow5mult>
 8007064:	ee08 0a10 	vmov	s16, r0
 8007068:	2101      	movs	r1, #1
 800706a:	4620      	mov	r0, r4
 800706c:	f001 f916 	bl	800829c <__i2b>
 8007070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	4606      	mov	r6, r0
 8007076:	f340 8088 	ble.w	800718a <_dtoa_r+0x8c2>
 800707a:	461a      	mov	r2, r3
 800707c:	4601      	mov	r1, r0
 800707e:	4620      	mov	r0, r4
 8007080:	f001 f9cc 	bl	800841c <__pow5mult>
 8007084:	9b06      	ldr	r3, [sp, #24]
 8007086:	2b01      	cmp	r3, #1
 8007088:	4606      	mov	r6, r0
 800708a:	f340 8081 	ble.w	8007190 <_dtoa_r+0x8c8>
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	6933      	ldr	r3, [r6, #16]
 8007094:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007098:	6918      	ldr	r0, [r3, #16]
 800709a:	f001 f8af 	bl	80081fc <__hi0bits>
 800709e:	f1c0 0020 	rsb	r0, r0, #32
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	4418      	add	r0, r3
 80070a6:	f010 001f 	ands.w	r0, r0, #31
 80070aa:	f000 8092 	beq.w	80071d2 <_dtoa_r+0x90a>
 80070ae:	f1c0 0320 	rsb	r3, r0, #32
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	f340 808a 	ble.w	80071cc <_dtoa_r+0x904>
 80070b8:	f1c0 001c 	rsb	r0, r0, #28
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	4403      	add	r3, r0
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	9b05      	ldr	r3, [sp, #20]
 80070c4:	4403      	add	r3, r0
 80070c6:	4405      	add	r5, r0
 80070c8:	9305      	str	r3, [sp, #20]
 80070ca:	9b04      	ldr	r3, [sp, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dd07      	ble.n	80070e0 <_dtoa_r+0x818>
 80070d0:	ee18 1a10 	vmov	r1, s16
 80070d4:	461a      	mov	r2, r3
 80070d6:	4620      	mov	r0, r4
 80070d8:	f001 f9fa 	bl	80084d0 <__lshift>
 80070dc:	ee08 0a10 	vmov	s16, r0
 80070e0:	9b05      	ldr	r3, [sp, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	dd05      	ble.n	80070f2 <_dtoa_r+0x82a>
 80070e6:	4631      	mov	r1, r6
 80070e8:	461a      	mov	r2, r3
 80070ea:	4620      	mov	r0, r4
 80070ec:	f001 f9f0 	bl	80084d0 <__lshift>
 80070f0:	4606      	mov	r6, r0
 80070f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d06e      	beq.n	80071d6 <_dtoa_r+0x90e>
 80070f8:	ee18 0a10 	vmov	r0, s16
 80070fc:	4631      	mov	r1, r6
 80070fe:	f001 fa57 	bl	80085b0 <__mcmp>
 8007102:	2800      	cmp	r0, #0
 8007104:	da67      	bge.n	80071d6 <_dtoa_r+0x90e>
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	3b01      	subs	r3, #1
 800710a:	ee18 1a10 	vmov	r1, s16
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	220a      	movs	r2, #10
 8007112:	2300      	movs	r3, #0
 8007114:	4620      	mov	r0, r4
 8007116:	f000 ffe1 	bl	80080dc <__multadd>
 800711a:	9b08      	ldr	r3, [sp, #32]
 800711c:	ee08 0a10 	vmov	s16, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 81b1 	beq.w	8007488 <_dtoa_r+0xbc0>
 8007126:	2300      	movs	r3, #0
 8007128:	4639      	mov	r1, r7
 800712a:	220a      	movs	r2, #10
 800712c:	4620      	mov	r0, r4
 800712e:	f000 ffd5 	bl	80080dc <__multadd>
 8007132:	9b02      	ldr	r3, [sp, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	4607      	mov	r7, r0
 8007138:	f300 808e 	bgt.w	8007258 <_dtoa_r+0x990>
 800713c:	9b06      	ldr	r3, [sp, #24]
 800713e:	2b02      	cmp	r3, #2
 8007140:	dc51      	bgt.n	80071e6 <_dtoa_r+0x91e>
 8007142:	e089      	b.n	8007258 <_dtoa_r+0x990>
 8007144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800714a:	e74b      	b.n	8006fe4 <_dtoa_r+0x71c>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	1e5e      	subs	r6, r3, #1
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	42b3      	cmp	r3, r6
 8007154:	bfbf      	itttt	lt
 8007156:	9b07      	ldrlt	r3, [sp, #28]
 8007158:	9607      	strlt	r6, [sp, #28]
 800715a:	1af2      	sublt	r2, r6, r3
 800715c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800715e:	bfb6      	itet	lt
 8007160:	189b      	addlt	r3, r3, r2
 8007162:	1b9e      	subge	r6, r3, r6
 8007164:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	bfb8      	it	lt
 800716a:	2600      	movlt	r6, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	bfb7      	itett	lt
 8007170:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007174:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007178:	1a9d      	sublt	r5, r3, r2
 800717a:	2300      	movlt	r3, #0
 800717c:	e734      	b.n	8006fe8 <_dtoa_r+0x720>
 800717e:	9e07      	ldr	r6, [sp, #28]
 8007180:	9d04      	ldr	r5, [sp, #16]
 8007182:	9f08      	ldr	r7, [sp, #32]
 8007184:	e73b      	b.n	8006ffe <_dtoa_r+0x736>
 8007186:	9a07      	ldr	r2, [sp, #28]
 8007188:	e767      	b.n	800705a <_dtoa_r+0x792>
 800718a:	9b06      	ldr	r3, [sp, #24]
 800718c:	2b01      	cmp	r3, #1
 800718e:	dc18      	bgt.n	80071c2 <_dtoa_r+0x8fa>
 8007190:	f1ba 0f00 	cmp.w	sl, #0
 8007194:	d115      	bne.n	80071c2 <_dtoa_r+0x8fa>
 8007196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800719a:	b993      	cbnz	r3, 80071c2 <_dtoa_r+0x8fa>
 800719c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071a0:	0d1b      	lsrs	r3, r3, #20
 80071a2:	051b      	lsls	r3, r3, #20
 80071a4:	b183      	cbz	r3, 80071c8 <_dtoa_r+0x900>
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	3301      	adds	r3, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	9b05      	ldr	r3, [sp, #20]
 80071ae:	3301      	adds	r3, #1
 80071b0:	9305      	str	r3, [sp, #20]
 80071b2:	f04f 0801 	mov.w	r8, #1
 80071b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f47f af6a 	bne.w	8007092 <_dtoa_r+0x7ca>
 80071be:	2001      	movs	r0, #1
 80071c0:	e76f      	b.n	80070a2 <_dtoa_r+0x7da>
 80071c2:	f04f 0800 	mov.w	r8, #0
 80071c6:	e7f6      	b.n	80071b6 <_dtoa_r+0x8ee>
 80071c8:	4698      	mov	r8, r3
 80071ca:	e7f4      	b.n	80071b6 <_dtoa_r+0x8ee>
 80071cc:	f43f af7d 	beq.w	80070ca <_dtoa_r+0x802>
 80071d0:	4618      	mov	r0, r3
 80071d2:	301c      	adds	r0, #28
 80071d4:	e772      	b.n	80070bc <_dtoa_r+0x7f4>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	dc37      	bgt.n	800724c <_dtoa_r+0x984>
 80071dc:	9b06      	ldr	r3, [sp, #24]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	dd34      	ble.n	800724c <_dtoa_r+0x984>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	9302      	str	r3, [sp, #8]
 80071e6:	9b02      	ldr	r3, [sp, #8]
 80071e8:	b96b      	cbnz	r3, 8007206 <_dtoa_r+0x93e>
 80071ea:	4631      	mov	r1, r6
 80071ec:	2205      	movs	r2, #5
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 ff74 	bl	80080dc <__multadd>
 80071f4:	4601      	mov	r1, r0
 80071f6:	4606      	mov	r6, r0
 80071f8:	ee18 0a10 	vmov	r0, s16
 80071fc:	f001 f9d8 	bl	80085b0 <__mcmp>
 8007200:	2800      	cmp	r0, #0
 8007202:	f73f adbb 	bgt.w	8006d7c <_dtoa_r+0x4b4>
 8007206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007208:	9d01      	ldr	r5, [sp, #4]
 800720a:	43db      	mvns	r3, r3
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	f04f 0800 	mov.w	r8, #0
 8007212:	4631      	mov	r1, r6
 8007214:	4620      	mov	r0, r4
 8007216:	f000 ff3f 	bl	8008098 <_Bfree>
 800721a:	2f00      	cmp	r7, #0
 800721c:	f43f aea4 	beq.w	8006f68 <_dtoa_r+0x6a0>
 8007220:	f1b8 0f00 	cmp.w	r8, #0
 8007224:	d005      	beq.n	8007232 <_dtoa_r+0x96a>
 8007226:	45b8      	cmp	r8, r7
 8007228:	d003      	beq.n	8007232 <_dtoa_r+0x96a>
 800722a:	4641      	mov	r1, r8
 800722c:	4620      	mov	r0, r4
 800722e:	f000 ff33 	bl	8008098 <_Bfree>
 8007232:	4639      	mov	r1, r7
 8007234:	4620      	mov	r0, r4
 8007236:	f000 ff2f 	bl	8008098 <_Bfree>
 800723a:	e695      	b.n	8006f68 <_dtoa_r+0x6a0>
 800723c:	2600      	movs	r6, #0
 800723e:	4637      	mov	r7, r6
 8007240:	e7e1      	b.n	8007206 <_dtoa_r+0x93e>
 8007242:	9700      	str	r7, [sp, #0]
 8007244:	4637      	mov	r7, r6
 8007246:	e599      	b.n	8006d7c <_dtoa_r+0x4b4>
 8007248:	40240000 	.word	0x40240000
 800724c:	9b08      	ldr	r3, [sp, #32]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80ca 	beq.w	80073e8 <_dtoa_r+0xb20>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	2d00      	cmp	r5, #0
 800725a:	dd05      	ble.n	8007268 <_dtoa_r+0x9a0>
 800725c:	4639      	mov	r1, r7
 800725e:	462a      	mov	r2, r5
 8007260:	4620      	mov	r0, r4
 8007262:	f001 f935 	bl	80084d0 <__lshift>
 8007266:	4607      	mov	r7, r0
 8007268:	f1b8 0f00 	cmp.w	r8, #0
 800726c:	d05b      	beq.n	8007326 <_dtoa_r+0xa5e>
 800726e:	6879      	ldr	r1, [r7, #4]
 8007270:	4620      	mov	r0, r4
 8007272:	f000 fed1 	bl	8008018 <_Balloc>
 8007276:	4605      	mov	r5, r0
 8007278:	b928      	cbnz	r0, 8007286 <_dtoa_r+0x9be>
 800727a:	4b87      	ldr	r3, [pc, #540]	; (8007498 <_dtoa_r+0xbd0>)
 800727c:	4602      	mov	r2, r0
 800727e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007282:	f7ff bb3b 	b.w	80068fc <_dtoa_r+0x34>
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	3202      	adds	r2, #2
 800728a:	0092      	lsls	r2, r2, #2
 800728c:	f107 010c 	add.w	r1, r7, #12
 8007290:	300c      	adds	r0, #12
 8007292:	f000 feb3 	bl	8007ffc <memcpy>
 8007296:	2201      	movs	r2, #1
 8007298:	4629      	mov	r1, r5
 800729a:	4620      	mov	r0, r4
 800729c:	f001 f918 	bl	80084d0 <__lshift>
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	f103 0901 	add.w	r9, r3, #1
 80072a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	9305      	str	r3, [sp, #20]
 80072ae:	f00a 0301 	and.w	r3, sl, #1
 80072b2:	46b8      	mov	r8, r7
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	4607      	mov	r7, r0
 80072b8:	4631      	mov	r1, r6
 80072ba:	ee18 0a10 	vmov	r0, s16
 80072be:	f7ff fa77 	bl	80067b0 <quorem>
 80072c2:	4641      	mov	r1, r8
 80072c4:	9002      	str	r0, [sp, #8]
 80072c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072ca:	ee18 0a10 	vmov	r0, s16
 80072ce:	f001 f96f 	bl	80085b0 <__mcmp>
 80072d2:	463a      	mov	r2, r7
 80072d4:	9003      	str	r0, [sp, #12]
 80072d6:	4631      	mov	r1, r6
 80072d8:	4620      	mov	r0, r4
 80072da:	f001 f985 	bl	80085e8 <__mdiff>
 80072de:	68c2      	ldr	r2, [r0, #12]
 80072e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80072e4:	4605      	mov	r5, r0
 80072e6:	bb02      	cbnz	r2, 800732a <_dtoa_r+0xa62>
 80072e8:	4601      	mov	r1, r0
 80072ea:	ee18 0a10 	vmov	r0, s16
 80072ee:	f001 f95f 	bl	80085b0 <__mcmp>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4629      	mov	r1, r5
 80072f6:	4620      	mov	r0, r4
 80072f8:	9207      	str	r2, [sp, #28]
 80072fa:	f000 fecd 	bl	8008098 <_Bfree>
 80072fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007302:	ea43 0102 	orr.w	r1, r3, r2
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	430b      	orrs	r3, r1
 800730a:	464d      	mov	r5, r9
 800730c:	d10f      	bne.n	800732e <_dtoa_r+0xa66>
 800730e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007312:	d02a      	beq.n	800736a <_dtoa_r+0xaa2>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	dd02      	ble.n	8007320 <_dtoa_r+0xa58>
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007320:	f88b a000 	strb.w	sl, [fp]
 8007324:	e775      	b.n	8007212 <_dtoa_r+0x94a>
 8007326:	4638      	mov	r0, r7
 8007328:	e7ba      	b.n	80072a0 <_dtoa_r+0x9d8>
 800732a:	2201      	movs	r2, #1
 800732c:	e7e2      	b.n	80072f4 <_dtoa_r+0xa2c>
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	db04      	blt.n	800733e <_dtoa_r+0xa76>
 8007334:	9906      	ldr	r1, [sp, #24]
 8007336:	430b      	orrs	r3, r1
 8007338:	9904      	ldr	r1, [sp, #16]
 800733a:	430b      	orrs	r3, r1
 800733c:	d122      	bne.n	8007384 <_dtoa_r+0xabc>
 800733e:	2a00      	cmp	r2, #0
 8007340:	ddee      	ble.n	8007320 <_dtoa_r+0xa58>
 8007342:	ee18 1a10 	vmov	r1, s16
 8007346:	2201      	movs	r2, #1
 8007348:	4620      	mov	r0, r4
 800734a:	f001 f8c1 	bl	80084d0 <__lshift>
 800734e:	4631      	mov	r1, r6
 8007350:	ee08 0a10 	vmov	s16, r0
 8007354:	f001 f92c 	bl	80085b0 <__mcmp>
 8007358:	2800      	cmp	r0, #0
 800735a:	dc03      	bgt.n	8007364 <_dtoa_r+0xa9c>
 800735c:	d1e0      	bne.n	8007320 <_dtoa_r+0xa58>
 800735e:	f01a 0f01 	tst.w	sl, #1
 8007362:	d0dd      	beq.n	8007320 <_dtoa_r+0xa58>
 8007364:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007368:	d1d7      	bne.n	800731a <_dtoa_r+0xa52>
 800736a:	2339      	movs	r3, #57	; 0x39
 800736c:	f88b 3000 	strb.w	r3, [fp]
 8007370:	462b      	mov	r3, r5
 8007372:	461d      	mov	r5, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800737a:	2a39      	cmp	r2, #57	; 0x39
 800737c:	d071      	beq.n	8007462 <_dtoa_r+0xb9a>
 800737e:	3201      	adds	r2, #1
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e746      	b.n	8007212 <_dtoa_r+0x94a>
 8007384:	2a00      	cmp	r2, #0
 8007386:	dd07      	ble.n	8007398 <_dtoa_r+0xad0>
 8007388:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800738c:	d0ed      	beq.n	800736a <_dtoa_r+0xaa2>
 800738e:	f10a 0301 	add.w	r3, sl, #1
 8007392:	f88b 3000 	strb.w	r3, [fp]
 8007396:	e73c      	b.n	8007212 <_dtoa_r+0x94a>
 8007398:	9b05      	ldr	r3, [sp, #20]
 800739a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800739e:	4599      	cmp	r9, r3
 80073a0:	d047      	beq.n	8007432 <_dtoa_r+0xb6a>
 80073a2:	ee18 1a10 	vmov	r1, s16
 80073a6:	2300      	movs	r3, #0
 80073a8:	220a      	movs	r2, #10
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fe96 	bl	80080dc <__multadd>
 80073b0:	45b8      	cmp	r8, r7
 80073b2:	ee08 0a10 	vmov	s16, r0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	f04f 020a 	mov.w	r2, #10
 80073be:	4641      	mov	r1, r8
 80073c0:	4620      	mov	r0, r4
 80073c2:	d106      	bne.n	80073d2 <_dtoa_r+0xb0a>
 80073c4:	f000 fe8a 	bl	80080dc <__multadd>
 80073c8:	4680      	mov	r8, r0
 80073ca:	4607      	mov	r7, r0
 80073cc:	f109 0901 	add.w	r9, r9, #1
 80073d0:	e772      	b.n	80072b8 <_dtoa_r+0x9f0>
 80073d2:	f000 fe83 	bl	80080dc <__multadd>
 80073d6:	4639      	mov	r1, r7
 80073d8:	4680      	mov	r8, r0
 80073da:	2300      	movs	r3, #0
 80073dc:	220a      	movs	r2, #10
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fe7c 	bl	80080dc <__multadd>
 80073e4:	4607      	mov	r7, r0
 80073e6:	e7f1      	b.n	80073cc <_dtoa_r+0xb04>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	9302      	str	r3, [sp, #8]
 80073ec:	9d01      	ldr	r5, [sp, #4]
 80073ee:	ee18 0a10 	vmov	r0, s16
 80073f2:	4631      	mov	r1, r6
 80073f4:	f7ff f9dc 	bl	80067b0 <quorem>
 80073f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073fc:	9b01      	ldr	r3, [sp, #4]
 80073fe:	f805 ab01 	strb.w	sl, [r5], #1
 8007402:	1aea      	subs	r2, r5, r3
 8007404:	9b02      	ldr	r3, [sp, #8]
 8007406:	4293      	cmp	r3, r2
 8007408:	dd09      	ble.n	800741e <_dtoa_r+0xb56>
 800740a:	ee18 1a10 	vmov	r1, s16
 800740e:	2300      	movs	r3, #0
 8007410:	220a      	movs	r2, #10
 8007412:	4620      	mov	r0, r4
 8007414:	f000 fe62 	bl	80080dc <__multadd>
 8007418:	ee08 0a10 	vmov	s16, r0
 800741c:	e7e7      	b.n	80073ee <_dtoa_r+0xb26>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	bfc8      	it	gt
 8007424:	461d      	movgt	r5, r3
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	bfd8      	it	le
 800742a:	2501      	movle	r5, #1
 800742c:	441d      	add	r5, r3
 800742e:	f04f 0800 	mov.w	r8, #0
 8007432:	ee18 1a10 	vmov	r1, s16
 8007436:	2201      	movs	r2, #1
 8007438:	4620      	mov	r0, r4
 800743a:	f001 f849 	bl	80084d0 <__lshift>
 800743e:	4631      	mov	r1, r6
 8007440:	ee08 0a10 	vmov	s16, r0
 8007444:	f001 f8b4 	bl	80085b0 <__mcmp>
 8007448:	2800      	cmp	r0, #0
 800744a:	dc91      	bgt.n	8007370 <_dtoa_r+0xaa8>
 800744c:	d102      	bne.n	8007454 <_dtoa_r+0xb8c>
 800744e:	f01a 0f01 	tst.w	sl, #1
 8007452:	d18d      	bne.n	8007370 <_dtoa_r+0xaa8>
 8007454:	462b      	mov	r3, r5
 8007456:	461d      	mov	r5, r3
 8007458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800745c:	2a30      	cmp	r2, #48	; 0x30
 800745e:	d0fa      	beq.n	8007456 <_dtoa_r+0xb8e>
 8007460:	e6d7      	b.n	8007212 <_dtoa_r+0x94a>
 8007462:	9a01      	ldr	r2, [sp, #4]
 8007464:	429a      	cmp	r2, r3
 8007466:	d184      	bne.n	8007372 <_dtoa_r+0xaaa>
 8007468:	9b00      	ldr	r3, [sp, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	2331      	movs	r3, #49	; 0x31
 8007470:	7013      	strb	r3, [r2, #0]
 8007472:	e6ce      	b.n	8007212 <_dtoa_r+0x94a>
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <_dtoa_r+0xbd4>)
 8007476:	f7ff ba95 	b.w	80069a4 <_dtoa_r+0xdc>
 800747a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800747c:	2b00      	cmp	r3, #0
 800747e:	f47f aa6e 	bne.w	800695e <_dtoa_r+0x96>
 8007482:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <_dtoa_r+0xbd8>)
 8007484:	f7ff ba8e 	b.w	80069a4 <_dtoa_r+0xdc>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dcae      	bgt.n	80073ec <_dtoa_r+0xb24>
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	2b02      	cmp	r3, #2
 8007492:	f73f aea8 	bgt.w	80071e6 <_dtoa_r+0x91e>
 8007496:	e7a9      	b.n	80073ec <_dtoa_r+0xb24>
 8007498:	080097b0 	.word	0x080097b0
 800749c:	080095b0 	.word	0x080095b0
 80074a0:	08009731 	.word	0x08009731

080074a4 <__sflush_r>:
 80074a4:	898a      	ldrh	r2, [r1, #12]
 80074a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074aa:	4605      	mov	r5, r0
 80074ac:	0710      	lsls	r0, r2, #28
 80074ae:	460c      	mov	r4, r1
 80074b0:	d458      	bmi.n	8007564 <__sflush_r+0xc0>
 80074b2:	684b      	ldr	r3, [r1, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dc05      	bgt.n	80074c4 <__sflush_r+0x20>
 80074b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dc02      	bgt.n	80074c4 <__sflush_r+0x20>
 80074be:	2000      	movs	r0, #0
 80074c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074c6:	2e00      	cmp	r6, #0
 80074c8:	d0f9      	beq.n	80074be <__sflush_r+0x1a>
 80074ca:	2300      	movs	r3, #0
 80074cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074d0:	682f      	ldr	r7, [r5, #0]
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	d032      	beq.n	800753c <__sflush_r+0x98>
 80074d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	075a      	lsls	r2, r3, #29
 80074dc:	d505      	bpl.n	80074ea <__sflush_r+0x46>
 80074de:	6863      	ldr	r3, [r4, #4]
 80074e0:	1ac0      	subs	r0, r0, r3
 80074e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074e4:	b10b      	cbz	r3, 80074ea <__sflush_r+0x46>
 80074e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074e8:	1ac0      	subs	r0, r0, r3
 80074ea:	2300      	movs	r3, #0
 80074ec:	4602      	mov	r2, r0
 80074ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f0:	6a21      	ldr	r1, [r4, #32]
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b0      	blx	r6
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	d106      	bne.n	800750a <__sflush_r+0x66>
 80074fc:	6829      	ldr	r1, [r5, #0]
 80074fe:	291d      	cmp	r1, #29
 8007500:	d82c      	bhi.n	800755c <__sflush_r+0xb8>
 8007502:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <__sflush_r+0x108>)
 8007504:	40ca      	lsrs	r2, r1
 8007506:	07d6      	lsls	r6, r2, #31
 8007508:	d528      	bpl.n	800755c <__sflush_r+0xb8>
 800750a:	2200      	movs	r2, #0
 800750c:	6062      	str	r2, [r4, #4]
 800750e:	04d9      	lsls	r1, r3, #19
 8007510:	6922      	ldr	r2, [r4, #16]
 8007512:	6022      	str	r2, [r4, #0]
 8007514:	d504      	bpl.n	8007520 <__sflush_r+0x7c>
 8007516:	1c42      	adds	r2, r0, #1
 8007518:	d101      	bne.n	800751e <__sflush_r+0x7a>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	b903      	cbnz	r3, 8007520 <__sflush_r+0x7c>
 800751e:	6560      	str	r0, [r4, #84]	; 0x54
 8007520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007522:	602f      	str	r7, [r5, #0]
 8007524:	2900      	cmp	r1, #0
 8007526:	d0ca      	beq.n	80074be <__sflush_r+0x1a>
 8007528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800752c:	4299      	cmp	r1, r3
 800752e:	d002      	beq.n	8007536 <__sflush_r+0x92>
 8007530:	4628      	mov	r0, r5
 8007532:	f001 fa49 	bl	80089c8 <_free_r>
 8007536:	2000      	movs	r0, #0
 8007538:	6360      	str	r0, [r4, #52]	; 0x34
 800753a:	e7c1      	b.n	80074c0 <__sflush_r+0x1c>
 800753c:	6a21      	ldr	r1, [r4, #32]
 800753e:	2301      	movs	r3, #1
 8007540:	4628      	mov	r0, r5
 8007542:	47b0      	blx	r6
 8007544:	1c41      	adds	r1, r0, #1
 8007546:	d1c7      	bne.n	80074d8 <__sflush_r+0x34>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0c4      	beq.n	80074d8 <__sflush_r+0x34>
 800754e:	2b1d      	cmp	r3, #29
 8007550:	d001      	beq.n	8007556 <__sflush_r+0xb2>
 8007552:	2b16      	cmp	r3, #22
 8007554:	d101      	bne.n	800755a <__sflush_r+0xb6>
 8007556:	602f      	str	r7, [r5, #0]
 8007558:	e7b1      	b.n	80074be <__sflush_r+0x1a>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	e7ad      	b.n	80074c0 <__sflush_r+0x1c>
 8007564:	690f      	ldr	r7, [r1, #16]
 8007566:	2f00      	cmp	r7, #0
 8007568:	d0a9      	beq.n	80074be <__sflush_r+0x1a>
 800756a:	0793      	lsls	r3, r2, #30
 800756c:	680e      	ldr	r6, [r1, #0]
 800756e:	bf08      	it	eq
 8007570:	694b      	ldreq	r3, [r1, #20]
 8007572:	600f      	str	r7, [r1, #0]
 8007574:	bf18      	it	ne
 8007576:	2300      	movne	r3, #0
 8007578:	eba6 0807 	sub.w	r8, r6, r7
 800757c:	608b      	str	r3, [r1, #8]
 800757e:	f1b8 0f00 	cmp.w	r8, #0
 8007582:	dd9c      	ble.n	80074be <__sflush_r+0x1a>
 8007584:	6a21      	ldr	r1, [r4, #32]
 8007586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007588:	4643      	mov	r3, r8
 800758a:	463a      	mov	r2, r7
 800758c:	4628      	mov	r0, r5
 800758e:	47b0      	blx	r6
 8007590:	2800      	cmp	r0, #0
 8007592:	dc06      	bgt.n	80075a2 <__sflush_r+0xfe>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e78e      	b.n	80074c0 <__sflush_r+0x1c>
 80075a2:	4407      	add	r7, r0
 80075a4:	eba8 0800 	sub.w	r8, r8, r0
 80075a8:	e7e9      	b.n	800757e <__sflush_r+0xda>
 80075aa:	bf00      	nop
 80075ac:	20400001 	.word	0x20400001

080075b0 <_fflush_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	690b      	ldr	r3, [r1, #16]
 80075b4:	4605      	mov	r5, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	b913      	cbnz	r3, 80075c0 <_fflush_r+0x10>
 80075ba:	2500      	movs	r5, #0
 80075bc:	4628      	mov	r0, r5
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	b118      	cbz	r0, 80075ca <_fflush_r+0x1a>
 80075c2:	6983      	ldr	r3, [r0, #24]
 80075c4:	b90b      	cbnz	r3, 80075ca <_fflush_r+0x1a>
 80075c6:	f000 f887 	bl	80076d8 <__sinit>
 80075ca:	4b14      	ldr	r3, [pc, #80]	; (800761c <_fflush_r+0x6c>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	d11b      	bne.n	8007608 <_fflush_r+0x58>
 80075d0:	686c      	ldr	r4, [r5, #4]
 80075d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0ef      	beq.n	80075ba <_fflush_r+0xa>
 80075da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075dc:	07d0      	lsls	r0, r2, #31
 80075de:	d404      	bmi.n	80075ea <_fflush_r+0x3a>
 80075e0:	0599      	lsls	r1, r3, #22
 80075e2:	d402      	bmi.n	80075ea <_fflush_r+0x3a>
 80075e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075e6:	f000 fc88 	bl	8007efa <__retarget_lock_acquire_recursive>
 80075ea:	4628      	mov	r0, r5
 80075ec:	4621      	mov	r1, r4
 80075ee:	f7ff ff59 	bl	80074a4 <__sflush_r>
 80075f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f4:	07da      	lsls	r2, r3, #31
 80075f6:	4605      	mov	r5, r0
 80075f8:	d4e0      	bmi.n	80075bc <_fflush_r+0xc>
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	059b      	lsls	r3, r3, #22
 80075fe:	d4dd      	bmi.n	80075bc <_fflush_r+0xc>
 8007600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007602:	f000 fc7b 	bl	8007efc <__retarget_lock_release_recursive>
 8007606:	e7d9      	b.n	80075bc <_fflush_r+0xc>
 8007608:	4b05      	ldr	r3, [pc, #20]	; (8007620 <_fflush_r+0x70>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d101      	bne.n	8007612 <_fflush_r+0x62>
 800760e:	68ac      	ldr	r4, [r5, #8]
 8007610:	e7df      	b.n	80075d2 <_fflush_r+0x22>
 8007612:	4b04      	ldr	r3, [pc, #16]	; (8007624 <_fflush_r+0x74>)
 8007614:	429c      	cmp	r4, r3
 8007616:	bf08      	it	eq
 8007618:	68ec      	ldreq	r4, [r5, #12]
 800761a:	e7da      	b.n	80075d2 <_fflush_r+0x22>
 800761c:	080097e4 	.word	0x080097e4
 8007620:	08009804 	.word	0x08009804
 8007624:	080097c4 	.word	0x080097c4

08007628 <std>:
 8007628:	2300      	movs	r3, #0
 800762a:	b510      	push	{r4, lr}
 800762c:	4604      	mov	r4, r0
 800762e:	e9c0 3300 	strd	r3, r3, [r0]
 8007632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007636:	6083      	str	r3, [r0, #8]
 8007638:	8181      	strh	r1, [r0, #12]
 800763a:	6643      	str	r3, [r0, #100]	; 0x64
 800763c:	81c2      	strh	r2, [r0, #14]
 800763e:	6183      	str	r3, [r0, #24]
 8007640:	4619      	mov	r1, r3
 8007642:	2208      	movs	r2, #8
 8007644:	305c      	adds	r0, #92	; 0x5c
 8007646:	f7fd fa87 	bl	8004b58 <memset>
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <std+0x38>)
 800764c:	6263      	str	r3, [r4, #36]	; 0x24
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <std+0x3c>)
 8007650:	62a3      	str	r3, [r4, #40]	; 0x28
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x40>)
 8007654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x44>)
 8007658:	6224      	str	r4, [r4, #32]
 800765a:	6323      	str	r3, [r4, #48]	; 0x30
 800765c:	bd10      	pop	{r4, pc}
 800765e:	bf00      	nop
 8007660:	08009129 	.word	0x08009129
 8007664:	0800914b 	.word	0x0800914b
 8007668:	08009183 	.word	0x08009183
 800766c:	080091a7 	.word	0x080091a7

08007670 <_cleanup_r>:
 8007670:	4901      	ldr	r1, [pc, #4]	; (8007678 <_cleanup_r+0x8>)
 8007672:	f000 b8af 	b.w	80077d4 <_fwalk_reent>
 8007676:	bf00      	nop
 8007678:	080075b1 	.word	0x080075b1

0800767c <__sfmoreglue>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	2268      	movs	r2, #104	; 0x68
 8007680:	1e4d      	subs	r5, r1, #1
 8007682:	4355      	muls	r5, r2
 8007684:	460e      	mov	r6, r1
 8007686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800768a:	f001 fa09 	bl	8008aa0 <_malloc_r>
 800768e:	4604      	mov	r4, r0
 8007690:	b140      	cbz	r0, 80076a4 <__sfmoreglue+0x28>
 8007692:	2100      	movs	r1, #0
 8007694:	e9c0 1600 	strd	r1, r6, [r0]
 8007698:	300c      	adds	r0, #12
 800769a:	60a0      	str	r0, [r4, #8]
 800769c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076a0:	f7fd fa5a 	bl	8004b58 <memset>
 80076a4:	4620      	mov	r0, r4
 80076a6:	bd70      	pop	{r4, r5, r6, pc}

080076a8 <__sfp_lock_acquire>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__sfp_lock_acquire+0x8>)
 80076aa:	f000 bc26 	b.w	8007efa <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	20000249 	.word	0x20000249

080076b4 <__sfp_lock_release>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__sfp_lock_release+0x8>)
 80076b6:	f000 bc21 	b.w	8007efc <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	20000249 	.word	0x20000249

080076c0 <__sinit_lock_acquire>:
 80076c0:	4801      	ldr	r0, [pc, #4]	; (80076c8 <__sinit_lock_acquire+0x8>)
 80076c2:	f000 bc1a 	b.w	8007efa <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	2000024a 	.word	0x2000024a

080076cc <__sinit_lock_release>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__sinit_lock_release+0x8>)
 80076ce:	f000 bc15 	b.w	8007efc <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	2000024a 	.word	0x2000024a

080076d8 <__sinit>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	4604      	mov	r4, r0
 80076dc:	f7ff fff0 	bl	80076c0 <__sinit_lock_acquire>
 80076e0:	69a3      	ldr	r3, [r4, #24]
 80076e2:	b11b      	cbz	r3, 80076ec <__sinit+0x14>
 80076e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e8:	f7ff bff0 	b.w	80076cc <__sinit_lock_release>
 80076ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076f0:	6523      	str	r3, [r4, #80]	; 0x50
 80076f2:	4b13      	ldr	r3, [pc, #76]	; (8007740 <__sinit+0x68>)
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <__sinit+0x6c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	bf04      	itt	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	61a3      	streq	r3, [r4, #24]
 8007702:	4620      	mov	r0, r4
 8007704:	f000 f820 	bl	8007748 <__sfp>
 8007708:	6060      	str	r0, [r4, #4]
 800770a:	4620      	mov	r0, r4
 800770c:	f000 f81c 	bl	8007748 <__sfp>
 8007710:	60a0      	str	r0, [r4, #8]
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f818 	bl	8007748 <__sfp>
 8007718:	2200      	movs	r2, #0
 800771a:	60e0      	str	r0, [r4, #12]
 800771c:	2104      	movs	r1, #4
 800771e:	6860      	ldr	r0, [r4, #4]
 8007720:	f7ff ff82 	bl	8007628 <std>
 8007724:	68a0      	ldr	r0, [r4, #8]
 8007726:	2201      	movs	r2, #1
 8007728:	2109      	movs	r1, #9
 800772a:	f7ff ff7d 	bl	8007628 <std>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	2202      	movs	r2, #2
 8007732:	2112      	movs	r1, #18
 8007734:	f7ff ff78 	bl	8007628 <std>
 8007738:	2301      	movs	r3, #1
 800773a:	61a3      	str	r3, [r4, #24]
 800773c:	e7d2      	b.n	80076e4 <__sinit+0xc>
 800773e:	bf00      	nop
 8007740:	0800959c 	.word	0x0800959c
 8007744:	08007671 	.word	0x08007671

08007748 <__sfp>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	4607      	mov	r7, r0
 800774c:	f7ff ffac 	bl	80076a8 <__sfp_lock_acquire>
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <__sfp+0x84>)
 8007752:	681e      	ldr	r6, [r3, #0]
 8007754:	69b3      	ldr	r3, [r6, #24]
 8007756:	b913      	cbnz	r3, 800775e <__sfp+0x16>
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff ffbd 	bl	80076d8 <__sinit>
 800775e:	3648      	adds	r6, #72	; 0x48
 8007760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007764:	3b01      	subs	r3, #1
 8007766:	d503      	bpl.n	8007770 <__sfp+0x28>
 8007768:	6833      	ldr	r3, [r6, #0]
 800776a:	b30b      	cbz	r3, 80077b0 <__sfp+0x68>
 800776c:	6836      	ldr	r6, [r6, #0]
 800776e:	e7f7      	b.n	8007760 <__sfp+0x18>
 8007770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007774:	b9d5      	cbnz	r5, 80077ac <__sfp+0x64>
 8007776:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <__sfp+0x88>)
 8007778:	60e3      	str	r3, [r4, #12]
 800777a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800777e:	6665      	str	r5, [r4, #100]	; 0x64
 8007780:	f000 fbba 	bl	8007ef8 <__retarget_lock_init_recursive>
 8007784:	f7ff ff96 	bl	80076b4 <__sfp_lock_release>
 8007788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800778c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007790:	6025      	str	r5, [r4, #0]
 8007792:	61a5      	str	r5, [r4, #24]
 8007794:	2208      	movs	r2, #8
 8007796:	4629      	mov	r1, r5
 8007798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800779c:	f7fd f9dc 	bl	8004b58 <memset>
 80077a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077a8:	4620      	mov	r0, r4
 80077aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ac:	3468      	adds	r4, #104	; 0x68
 80077ae:	e7d9      	b.n	8007764 <__sfp+0x1c>
 80077b0:	2104      	movs	r1, #4
 80077b2:	4638      	mov	r0, r7
 80077b4:	f7ff ff62 	bl	800767c <__sfmoreglue>
 80077b8:	4604      	mov	r4, r0
 80077ba:	6030      	str	r0, [r6, #0]
 80077bc:	2800      	cmp	r0, #0
 80077be:	d1d5      	bne.n	800776c <__sfp+0x24>
 80077c0:	f7ff ff78 	bl	80076b4 <__sfp_lock_release>
 80077c4:	230c      	movs	r3, #12
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	e7ee      	b.n	80077a8 <__sfp+0x60>
 80077ca:	bf00      	nop
 80077cc:	0800959c 	.word	0x0800959c
 80077d0:	ffff0001 	.word	0xffff0001

080077d4 <_fwalk_reent>:
 80077d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d8:	4606      	mov	r6, r0
 80077da:	4688      	mov	r8, r1
 80077dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077e0:	2700      	movs	r7, #0
 80077e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e6:	f1b9 0901 	subs.w	r9, r9, #1
 80077ea:	d505      	bpl.n	80077f8 <_fwalk_reent+0x24>
 80077ec:	6824      	ldr	r4, [r4, #0]
 80077ee:	2c00      	cmp	r4, #0
 80077f0:	d1f7      	bne.n	80077e2 <_fwalk_reent+0xe>
 80077f2:	4638      	mov	r0, r7
 80077f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f8:	89ab      	ldrh	r3, [r5, #12]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d907      	bls.n	800780e <_fwalk_reent+0x3a>
 80077fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007802:	3301      	adds	r3, #1
 8007804:	d003      	beq.n	800780e <_fwalk_reent+0x3a>
 8007806:	4629      	mov	r1, r5
 8007808:	4630      	mov	r0, r6
 800780a:	47c0      	blx	r8
 800780c:	4307      	orrs	r7, r0
 800780e:	3568      	adds	r5, #104	; 0x68
 8007810:	e7e9      	b.n	80077e6 <_fwalk_reent+0x12>

08007812 <rshift>:
 8007812:	6903      	ldr	r3, [r0, #16]
 8007814:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800781c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007820:	f100 0414 	add.w	r4, r0, #20
 8007824:	dd45      	ble.n	80078b2 <rshift+0xa0>
 8007826:	f011 011f 	ands.w	r1, r1, #31
 800782a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800782e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007832:	d10c      	bne.n	800784e <rshift+0x3c>
 8007834:	f100 0710 	add.w	r7, r0, #16
 8007838:	4629      	mov	r1, r5
 800783a:	42b1      	cmp	r1, r6
 800783c:	d334      	bcc.n	80078a8 <rshift+0x96>
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	1eea      	subs	r2, r5, #3
 8007844:	4296      	cmp	r6, r2
 8007846:	bf38      	it	cc
 8007848:	2300      	movcc	r3, #0
 800784a:	4423      	add	r3, r4
 800784c:	e015      	b.n	800787a <rshift+0x68>
 800784e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007852:	f1c1 0820 	rsb	r8, r1, #32
 8007856:	40cf      	lsrs	r7, r1
 8007858:	f105 0e04 	add.w	lr, r5, #4
 800785c:	46a1      	mov	r9, r4
 800785e:	4576      	cmp	r6, lr
 8007860:	46f4      	mov	ip, lr
 8007862:	d815      	bhi.n	8007890 <rshift+0x7e>
 8007864:	1a9a      	subs	r2, r3, r2
 8007866:	0092      	lsls	r2, r2, #2
 8007868:	3a04      	subs	r2, #4
 800786a:	3501      	adds	r5, #1
 800786c:	42ae      	cmp	r6, r5
 800786e:	bf38      	it	cc
 8007870:	2200      	movcc	r2, #0
 8007872:	18a3      	adds	r3, r4, r2
 8007874:	50a7      	str	r7, [r4, r2]
 8007876:	b107      	cbz	r7, 800787a <rshift+0x68>
 8007878:	3304      	adds	r3, #4
 800787a:	1b1a      	subs	r2, r3, r4
 800787c:	42a3      	cmp	r3, r4
 800787e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007882:	bf08      	it	eq
 8007884:	2300      	moveq	r3, #0
 8007886:	6102      	str	r2, [r0, #16]
 8007888:	bf08      	it	eq
 800788a:	6143      	streq	r3, [r0, #20]
 800788c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007890:	f8dc c000 	ldr.w	ip, [ip]
 8007894:	fa0c fc08 	lsl.w	ip, ip, r8
 8007898:	ea4c 0707 	orr.w	r7, ip, r7
 800789c:	f849 7b04 	str.w	r7, [r9], #4
 80078a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078a4:	40cf      	lsrs	r7, r1
 80078a6:	e7da      	b.n	800785e <rshift+0x4c>
 80078a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80078ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80078b0:	e7c3      	b.n	800783a <rshift+0x28>
 80078b2:	4623      	mov	r3, r4
 80078b4:	e7e1      	b.n	800787a <rshift+0x68>

080078b6 <__hexdig_fun>:
 80078b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80078ba:	2b09      	cmp	r3, #9
 80078bc:	d802      	bhi.n	80078c4 <__hexdig_fun+0xe>
 80078be:	3820      	subs	r0, #32
 80078c0:	b2c0      	uxtb	r0, r0
 80078c2:	4770      	bx	lr
 80078c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80078c8:	2b05      	cmp	r3, #5
 80078ca:	d801      	bhi.n	80078d0 <__hexdig_fun+0x1a>
 80078cc:	3847      	subs	r0, #71	; 0x47
 80078ce:	e7f7      	b.n	80078c0 <__hexdig_fun+0xa>
 80078d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	d801      	bhi.n	80078dc <__hexdig_fun+0x26>
 80078d8:	3827      	subs	r0, #39	; 0x27
 80078da:	e7f1      	b.n	80078c0 <__hexdig_fun+0xa>
 80078dc:	2000      	movs	r0, #0
 80078de:	4770      	bx	lr

080078e0 <__gethex>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	ed2d 8b02 	vpush	{d8}
 80078e8:	b089      	sub	sp, #36	; 0x24
 80078ea:	ee08 0a10 	vmov	s16, r0
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	4bb4      	ldr	r3, [pc, #720]	; (8007bc4 <__gethex+0x2e4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	4618      	mov	r0, r3
 80078f8:	468b      	mov	fp, r1
 80078fa:	4690      	mov	r8, r2
 80078fc:	f7f8 fc78 	bl	80001f0 <strlen>
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	f8db 2000 	ldr.w	r2, [fp]
 8007906:	4403      	add	r3, r0
 8007908:	4682      	mov	sl, r0
 800790a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800790e:	9305      	str	r3, [sp, #20]
 8007910:	1c93      	adds	r3, r2, #2
 8007912:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007916:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800791a:	32fe      	adds	r2, #254	; 0xfe
 800791c:	18d1      	adds	r1, r2, r3
 800791e:	461f      	mov	r7, r3
 8007920:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007924:	9100      	str	r1, [sp, #0]
 8007926:	2830      	cmp	r0, #48	; 0x30
 8007928:	d0f8      	beq.n	800791c <__gethex+0x3c>
 800792a:	f7ff ffc4 	bl	80078b6 <__hexdig_fun>
 800792e:	4604      	mov	r4, r0
 8007930:	2800      	cmp	r0, #0
 8007932:	d13a      	bne.n	80079aa <__gethex+0xca>
 8007934:	9901      	ldr	r1, [sp, #4]
 8007936:	4652      	mov	r2, sl
 8007938:	4638      	mov	r0, r7
 800793a:	f001 fc38 	bl	80091ae <strncmp>
 800793e:	4605      	mov	r5, r0
 8007940:	2800      	cmp	r0, #0
 8007942:	d168      	bne.n	8007a16 <__gethex+0x136>
 8007944:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007948:	eb07 060a 	add.w	r6, r7, sl
 800794c:	f7ff ffb3 	bl	80078b6 <__hexdig_fun>
 8007950:	2800      	cmp	r0, #0
 8007952:	d062      	beq.n	8007a1a <__gethex+0x13a>
 8007954:	4633      	mov	r3, r6
 8007956:	7818      	ldrb	r0, [r3, #0]
 8007958:	2830      	cmp	r0, #48	; 0x30
 800795a:	461f      	mov	r7, r3
 800795c:	f103 0301 	add.w	r3, r3, #1
 8007960:	d0f9      	beq.n	8007956 <__gethex+0x76>
 8007962:	f7ff ffa8 	bl	80078b6 <__hexdig_fun>
 8007966:	2301      	movs	r3, #1
 8007968:	fab0 f480 	clz	r4, r0
 800796c:	0964      	lsrs	r4, r4, #5
 800796e:	4635      	mov	r5, r6
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	463a      	mov	r2, r7
 8007974:	4616      	mov	r6, r2
 8007976:	3201      	adds	r2, #1
 8007978:	7830      	ldrb	r0, [r6, #0]
 800797a:	f7ff ff9c 	bl	80078b6 <__hexdig_fun>
 800797e:	2800      	cmp	r0, #0
 8007980:	d1f8      	bne.n	8007974 <__gethex+0x94>
 8007982:	9901      	ldr	r1, [sp, #4]
 8007984:	4652      	mov	r2, sl
 8007986:	4630      	mov	r0, r6
 8007988:	f001 fc11 	bl	80091ae <strncmp>
 800798c:	b980      	cbnz	r0, 80079b0 <__gethex+0xd0>
 800798e:	b94d      	cbnz	r5, 80079a4 <__gethex+0xc4>
 8007990:	eb06 050a 	add.w	r5, r6, sl
 8007994:	462a      	mov	r2, r5
 8007996:	4616      	mov	r6, r2
 8007998:	3201      	adds	r2, #1
 800799a:	7830      	ldrb	r0, [r6, #0]
 800799c:	f7ff ff8b 	bl	80078b6 <__hexdig_fun>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d1f8      	bne.n	8007996 <__gethex+0xb6>
 80079a4:	1bad      	subs	r5, r5, r6
 80079a6:	00ad      	lsls	r5, r5, #2
 80079a8:	e004      	b.n	80079b4 <__gethex+0xd4>
 80079aa:	2400      	movs	r4, #0
 80079ac:	4625      	mov	r5, r4
 80079ae:	e7e0      	b.n	8007972 <__gethex+0x92>
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	d1f7      	bne.n	80079a4 <__gethex+0xc4>
 80079b4:	7833      	ldrb	r3, [r6, #0]
 80079b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80079ba:	2b50      	cmp	r3, #80	; 0x50
 80079bc:	d13b      	bne.n	8007a36 <__gethex+0x156>
 80079be:	7873      	ldrb	r3, [r6, #1]
 80079c0:	2b2b      	cmp	r3, #43	; 0x2b
 80079c2:	d02c      	beq.n	8007a1e <__gethex+0x13e>
 80079c4:	2b2d      	cmp	r3, #45	; 0x2d
 80079c6:	d02e      	beq.n	8007a26 <__gethex+0x146>
 80079c8:	1c71      	adds	r1, r6, #1
 80079ca:	f04f 0900 	mov.w	r9, #0
 80079ce:	7808      	ldrb	r0, [r1, #0]
 80079d0:	f7ff ff71 	bl	80078b6 <__hexdig_fun>
 80079d4:	1e43      	subs	r3, r0, #1
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b18      	cmp	r3, #24
 80079da:	d82c      	bhi.n	8007a36 <__gethex+0x156>
 80079dc:	f1a0 0210 	sub.w	r2, r0, #16
 80079e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80079e4:	f7ff ff67 	bl	80078b6 <__hexdig_fun>
 80079e8:	1e43      	subs	r3, r0, #1
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b18      	cmp	r3, #24
 80079ee:	d91d      	bls.n	8007a2c <__gethex+0x14c>
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	d000      	beq.n	80079f8 <__gethex+0x118>
 80079f6:	4252      	negs	r2, r2
 80079f8:	4415      	add	r5, r2
 80079fa:	f8cb 1000 	str.w	r1, [fp]
 80079fe:	b1e4      	cbz	r4, 8007a3a <__gethex+0x15a>
 8007a00:	9b00      	ldr	r3, [sp, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2700      	movne	r7, #0
 8007a08:	2706      	moveq	r7, #6
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	b009      	add	sp, #36	; 0x24
 8007a0e:	ecbd 8b02 	vpop	{d8}
 8007a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a16:	463e      	mov	r6, r7
 8007a18:	4625      	mov	r5, r4
 8007a1a:	2401      	movs	r4, #1
 8007a1c:	e7ca      	b.n	80079b4 <__gethex+0xd4>
 8007a1e:	f04f 0900 	mov.w	r9, #0
 8007a22:	1cb1      	adds	r1, r6, #2
 8007a24:	e7d3      	b.n	80079ce <__gethex+0xee>
 8007a26:	f04f 0901 	mov.w	r9, #1
 8007a2a:	e7fa      	b.n	8007a22 <__gethex+0x142>
 8007a2c:	230a      	movs	r3, #10
 8007a2e:	fb03 0202 	mla	r2, r3, r2, r0
 8007a32:	3a10      	subs	r2, #16
 8007a34:	e7d4      	b.n	80079e0 <__gethex+0x100>
 8007a36:	4631      	mov	r1, r6
 8007a38:	e7df      	b.n	80079fa <__gethex+0x11a>
 8007a3a:	1bf3      	subs	r3, r6, r7
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4621      	mov	r1, r4
 8007a40:	2b07      	cmp	r3, #7
 8007a42:	dc0b      	bgt.n	8007a5c <__gethex+0x17c>
 8007a44:	ee18 0a10 	vmov	r0, s16
 8007a48:	f000 fae6 	bl	8008018 <_Balloc>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	b940      	cbnz	r0, 8007a62 <__gethex+0x182>
 8007a50:	4b5d      	ldr	r3, [pc, #372]	; (8007bc8 <__gethex+0x2e8>)
 8007a52:	4602      	mov	r2, r0
 8007a54:	21de      	movs	r1, #222	; 0xde
 8007a56:	485d      	ldr	r0, [pc, #372]	; (8007bcc <__gethex+0x2ec>)
 8007a58:	f001 fbdc 	bl	8009214 <__assert_func>
 8007a5c:	3101      	adds	r1, #1
 8007a5e:	105b      	asrs	r3, r3, #1
 8007a60:	e7ee      	b.n	8007a40 <__gethex+0x160>
 8007a62:	f100 0914 	add.w	r9, r0, #20
 8007a66:	f04f 0b00 	mov.w	fp, #0
 8007a6a:	f1ca 0301 	rsb	r3, sl, #1
 8007a6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a72:	f8cd b000 	str.w	fp, [sp]
 8007a76:	9306      	str	r3, [sp, #24]
 8007a78:	42b7      	cmp	r7, r6
 8007a7a:	d340      	bcc.n	8007afe <__gethex+0x21e>
 8007a7c:	9802      	ldr	r0, [sp, #8]
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	f840 3b04 	str.w	r3, [r0], #4
 8007a84:	eba0 0009 	sub.w	r0, r0, r9
 8007a88:	1080      	asrs	r0, r0, #2
 8007a8a:	0146      	lsls	r6, r0, #5
 8007a8c:	6120      	str	r0, [r4, #16]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fbb4 	bl	80081fc <__hi0bits>
 8007a94:	1a30      	subs	r0, r6, r0
 8007a96:	f8d8 6000 	ldr.w	r6, [r8]
 8007a9a:	42b0      	cmp	r0, r6
 8007a9c:	dd63      	ble.n	8007b66 <__gethex+0x286>
 8007a9e:	1b87      	subs	r7, r0, r6
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 ff58 	bl	8008958 <__any_on>
 8007aa8:	4682      	mov	sl, r0
 8007aaa:	b1a8      	cbz	r0, 8007ad8 <__gethex+0x1f8>
 8007aac:	1e7b      	subs	r3, r7, #1
 8007aae:	1159      	asrs	r1, r3, #5
 8007ab0:	f003 021f 	and.w	r2, r3, #31
 8007ab4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007ab8:	f04f 0a01 	mov.w	sl, #1
 8007abc:	fa0a f202 	lsl.w	r2, sl, r2
 8007ac0:	420a      	tst	r2, r1
 8007ac2:	d009      	beq.n	8007ad8 <__gethex+0x1f8>
 8007ac4:	4553      	cmp	r3, sl
 8007ac6:	dd05      	ble.n	8007ad4 <__gethex+0x1f4>
 8007ac8:	1eb9      	subs	r1, r7, #2
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 ff44 	bl	8008958 <__any_on>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d145      	bne.n	8007b60 <__gethex+0x280>
 8007ad4:	f04f 0a02 	mov.w	sl, #2
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7ff fe99 	bl	8007812 <rshift>
 8007ae0:	443d      	add	r5, r7
 8007ae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ae6:	42ab      	cmp	r3, r5
 8007ae8:	da4c      	bge.n	8007b84 <__gethex+0x2a4>
 8007aea:	ee18 0a10 	vmov	r0, s16
 8007aee:	4621      	mov	r1, r4
 8007af0:	f000 fad2 	bl	8008098 <_Bfree>
 8007af4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007af6:	2300      	movs	r3, #0
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	27a3      	movs	r7, #163	; 0xa3
 8007afc:	e785      	b.n	8007a0a <__gethex+0x12a>
 8007afe:	1e73      	subs	r3, r6, #1
 8007b00:	9a05      	ldr	r2, [sp, #20]
 8007b02:	9303      	str	r3, [sp, #12]
 8007b04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d019      	beq.n	8007b40 <__gethex+0x260>
 8007b0c:	f1bb 0f20 	cmp.w	fp, #32
 8007b10:	d107      	bne.n	8007b22 <__gethex+0x242>
 8007b12:	9b02      	ldr	r3, [sp, #8]
 8007b14:	9a00      	ldr	r2, [sp, #0]
 8007b16:	f843 2b04 	str.w	r2, [r3], #4
 8007b1a:	9302      	str	r3, [sp, #8]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	469b      	mov	fp, r3
 8007b22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007b26:	f7ff fec6 	bl	80078b6 <__hexdig_fun>
 8007b2a:	9b00      	ldr	r3, [sp, #0]
 8007b2c:	f000 000f 	and.w	r0, r0, #15
 8007b30:	fa00 f00b 	lsl.w	r0, r0, fp
 8007b34:	4303      	orrs	r3, r0
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	f10b 0b04 	add.w	fp, fp, #4
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	e00d      	b.n	8007b5c <__gethex+0x27c>
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	9a06      	ldr	r2, [sp, #24]
 8007b44:	4413      	add	r3, r2
 8007b46:	42bb      	cmp	r3, r7
 8007b48:	d3e0      	bcc.n	8007b0c <__gethex+0x22c>
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	9901      	ldr	r1, [sp, #4]
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	4652      	mov	r2, sl
 8007b52:	f001 fb2c 	bl	80091ae <strncmp>
 8007b56:	9b07      	ldr	r3, [sp, #28]
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1d7      	bne.n	8007b0c <__gethex+0x22c>
 8007b5c:	461e      	mov	r6, r3
 8007b5e:	e78b      	b.n	8007a78 <__gethex+0x198>
 8007b60:	f04f 0a03 	mov.w	sl, #3
 8007b64:	e7b8      	b.n	8007ad8 <__gethex+0x1f8>
 8007b66:	da0a      	bge.n	8007b7e <__gethex+0x29e>
 8007b68:	1a37      	subs	r7, r6, r0
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	ee18 0a10 	vmov	r0, s16
 8007b70:	463a      	mov	r2, r7
 8007b72:	f000 fcad 	bl	80084d0 <__lshift>
 8007b76:	1bed      	subs	r5, r5, r7
 8007b78:	4604      	mov	r4, r0
 8007b7a:	f100 0914 	add.w	r9, r0, #20
 8007b7e:	f04f 0a00 	mov.w	sl, #0
 8007b82:	e7ae      	b.n	8007ae2 <__gethex+0x202>
 8007b84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b88:	42a8      	cmp	r0, r5
 8007b8a:	dd72      	ble.n	8007c72 <__gethex+0x392>
 8007b8c:	1b45      	subs	r5, r0, r5
 8007b8e:	42ae      	cmp	r6, r5
 8007b90:	dc36      	bgt.n	8007c00 <__gethex+0x320>
 8007b92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d02a      	beq.n	8007bf0 <__gethex+0x310>
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d02c      	beq.n	8007bf8 <__gethex+0x318>
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d11c      	bne.n	8007bdc <__gethex+0x2fc>
 8007ba2:	42ae      	cmp	r6, r5
 8007ba4:	d11a      	bne.n	8007bdc <__gethex+0x2fc>
 8007ba6:	2e01      	cmp	r6, #1
 8007ba8:	d112      	bne.n	8007bd0 <__gethex+0x2f0>
 8007baa:	9a04      	ldr	r2, [sp, #16]
 8007bac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	f8c9 3000 	str.w	r3, [r9]
 8007bba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bbc:	2762      	movs	r7, #98	; 0x62
 8007bbe:	601c      	str	r4, [r3, #0]
 8007bc0:	e723      	b.n	8007a0a <__gethex+0x12a>
 8007bc2:	bf00      	nop
 8007bc4:	0800988c 	.word	0x0800988c
 8007bc8:	080097b0 	.word	0x080097b0
 8007bcc:	08009824 	.word	0x08009824
 8007bd0:	1e71      	subs	r1, r6, #1
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fec0 	bl	8008958 <__any_on>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d1e6      	bne.n	8007baa <__gethex+0x2ca>
 8007bdc:	ee18 0a10 	vmov	r0, s16
 8007be0:	4621      	mov	r1, r4
 8007be2:	f000 fa59 	bl	8008098 <_Bfree>
 8007be6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007be8:	2300      	movs	r3, #0
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	2750      	movs	r7, #80	; 0x50
 8007bee:	e70c      	b.n	8007a0a <__gethex+0x12a>
 8007bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f2      	bne.n	8007bdc <__gethex+0x2fc>
 8007bf6:	e7d8      	b.n	8007baa <__gethex+0x2ca>
 8007bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1d5      	bne.n	8007baa <__gethex+0x2ca>
 8007bfe:	e7ed      	b.n	8007bdc <__gethex+0x2fc>
 8007c00:	1e6f      	subs	r7, r5, #1
 8007c02:	f1ba 0f00 	cmp.w	sl, #0
 8007c06:	d131      	bne.n	8007c6c <__gethex+0x38c>
 8007c08:	b127      	cbz	r7, 8007c14 <__gethex+0x334>
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fea3 	bl	8008958 <__any_on>
 8007c12:	4682      	mov	sl, r0
 8007c14:	117b      	asrs	r3, r7, #5
 8007c16:	2101      	movs	r1, #1
 8007c18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007c1c:	f007 071f 	and.w	r7, r7, #31
 8007c20:	fa01 f707 	lsl.w	r7, r1, r7
 8007c24:	421f      	tst	r7, r3
 8007c26:	4629      	mov	r1, r5
 8007c28:	4620      	mov	r0, r4
 8007c2a:	bf18      	it	ne
 8007c2c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007c30:	1b76      	subs	r6, r6, r5
 8007c32:	f7ff fdee 	bl	8007812 <rshift>
 8007c36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007c3a:	2702      	movs	r7, #2
 8007c3c:	f1ba 0f00 	cmp.w	sl, #0
 8007c40:	d048      	beq.n	8007cd4 <__gethex+0x3f4>
 8007c42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d015      	beq.n	8007c76 <__gethex+0x396>
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d017      	beq.n	8007c7e <__gethex+0x39e>
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d109      	bne.n	8007c66 <__gethex+0x386>
 8007c52:	f01a 0f02 	tst.w	sl, #2
 8007c56:	d006      	beq.n	8007c66 <__gethex+0x386>
 8007c58:	f8d9 0000 	ldr.w	r0, [r9]
 8007c5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007c60:	f01a 0f01 	tst.w	sl, #1
 8007c64:	d10e      	bne.n	8007c84 <__gethex+0x3a4>
 8007c66:	f047 0710 	orr.w	r7, r7, #16
 8007c6a:	e033      	b.n	8007cd4 <__gethex+0x3f4>
 8007c6c:	f04f 0a01 	mov.w	sl, #1
 8007c70:	e7d0      	b.n	8007c14 <__gethex+0x334>
 8007c72:	2701      	movs	r7, #1
 8007c74:	e7e2      	b.n	8007c3c <__gethex+0x35c>
 8007c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c78:	f1c3 0301 	rsb	r3, r3, #1
 8007c7c:	9315      	str	r3, [sp, #84]	; 0x54
 8007c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0f0      	beq.n	8007c66 <__gethex+0x386>
 8007c84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c88:	f104 0314 	add.w	r3, r4, #20
 8007c8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c94:	f04f 0c00 	mov.w	ip, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ca2:	d01c      	beq.n	8007cde <__gethex+0x3fe>
 8007ca4:	3201      	adds	r2, #1
 8007ca6:	6002      	str	r2, [r0, #0]
 8007ca8:	2f02      	cmp	r7, #2
 8007caa:	f104 0314 	add.w	r3, r4, #20
 8007cae:	d13f      	bne.n	8007d30 <__gethex+0x450>
 8007cb0:	f8d8 2000 	ldr.w	r2, [r8]
 8007cb4:	3a01      	subs	r2, #1
 8007cb6:	42b2      	cmp	r2, r6
 8007cb8:	d10a      	bne.n	8007cd0 <__gethex+0x3f0>
 8007cba:	1171      	asrs	r1, r6, #5
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cc2:	f006 061f 	and.w	r6, r6, #31
 8007cc6:	fa02 f606 	lsl.w	r6, r2, r6
 8007cca:	421e      	tst	r6, r3
 8007ccc:	bf18      	it	ne
 8007cce:	4617      	movne	r7, r2
 8007cd0:	f047 0720 	orr.w	r7, r7, #32
 8007cd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cd6:	601c      	str	r4, [r3, #0]
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	601d      	str	r5, [r3, #0]
 8007cdc:	e695      	b.n	8007a0a <__gethex+0x12a>
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ce4:	d8d8      	bhi.n	8007c98 <__gethex+0x3b8>
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	459b      	cmp	fp, r3
 8007cea:	db19      	blt.n	8007d20 <__gethex+0x440>
 8007cec:	6861      	ldr	r1, [r4, #4]
 8007cee:	ee18 0a10 	vmov	r0, s16
 8007cf2:	3101      	adds	r1, #1
 8007cf4:	f000 f990 	bl	8008018 <_Balloc>
 8007cf8:	4681      	mov	r9, r0
 8007cfa:	b918      	cbnz	r0, 8007d04 <__gethex+0x424>
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <__gethex+0x488>)
 8007cfe:	4602      	mov	r2, r0
 8007d00:	2184      	movs	r1, #132	; 0x84
 8007d02:	e6a8      	b.n	8007a56 <__gethex+0x176>
 8007d04:	6922      	ldr	r2, [r4, #16]
 8007d06:	3202      	adds	r2, #2
 8007d08:	f104 010c 	add.w	r1, r4, #12
 8007d0c:	0092      	lsls	r2, r2, #2
 8007d0e:	300c      	adds	r0, #12
 8007d10:	f000 f974 	bl	8007ffc <memcpy>
 8007d14:	4621      	mov	r1, r4
 8007d16:	ee18 0a10 	vmov	r0, s16
 8007d1a:	f000 f9bd 	bl	8008098 <_Bfree>
 8007d1e:	464c      	mov	r4, r9
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d28:	6122      	str	r2, [r4, #16]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	615a      	str	r2, [r3, #20]
 8007d2e:	e7bb      	b.n	8007ca8 <__gethex+0x3c8>
 8007d30:	6922      	ldr	r2, [r4, #16]
 8007d32:	455a      	cmp	r2, fp
 8007d34:	dd0b      	ble.n	8007d4e <__gethex+0x46e>
 8007d36:	2101      	movs	r1, #1
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7ff fd6a 	bl	8007812 <rshift>
 8007d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d42:	3501      	adds	r5, #1
 8007d44:	42ab      	cmp	r3, r5
 8007d46:	f6ff aed0 	blt.w	8007aea <__gethex+0x20a>
 8007d4a:	2701      	movs	r7, #1
 8007d4c:	e7c0      	b.n	8007cd0 <__gethex+0x3f0>
 8007d4e:	f016 061f 	ands.w	r6, r6, #31
 8007d52:	d0fa      	beq.n	8007d4a <__gethex+0x46a>
 8007d54:	4453      	add	r3, sl
 8007d56:	f1c6 0620 	rsb	r6, r6, #32
 8007d5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d5e:	f000 fa4d 	bl	80081fc <__hi0bits>
 8007d62:	42b0      	cmp	r0, r6
 8007d64:	dbe7      	blt.n	8007d36 <__gethex+0x456>
 8007d66:	e7f0      	b.n	8007d4a <__gethex+0x46a>
 8007d68:	080097b0 	.word	0x080097b0

08007d6c <L_shift>:
 8007d6c:	f1c2 0208 	rsb	r2, r2, #8
 8007d70:	0092      	lsls	r2, r2, #2
 8007d72:	b570      	push	{r4, r5, r6, lr}
 8007d74:	f1c2 0620 	rsb	r6, r2, #32
 8007d78:	6843      	ldr	r3, [r0, #4]
 8007d7a:	6804      	ldr	r4, [r0, #0]
 8007d7c:	fa03 f506 	lsl.w	r5, r3, r6
 8007d80:	432c      	orrs	r4, r5
 8007d82:	40d3      	lsrs	r3, r2
 8007d84:	6004      	str	r4, [r0, #0]
 8007d86:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d8a:	4288      	cmp	r0, r1
 8007d8c:	d3f4      	bcc.n	8007d78 <L_shift+0xc>
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}

08007d90 <__match>:
 8007d90:	b530      	push	{r4, r5, lr}
 8007d92:	6803      	ldr	r3, [r0, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d9a:	b914      	cbnz	r4, 8007da2 <__match+0x12>
 8007d9c:	6003      	str	r3, [r0, #0]
 8007d9e:	2001      	movs	r0, #1
 8007da0:	bd30      	pop	{r4, r5, pc}
 8007da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007daa:	2d19      	cmp	r5, #25
 8007dac:	bf98      	it	ls
 8007dae:	3220      	addls	r2, #32
 8007db0:	42a2      	cmp	r2, r4
 8007db2:	d0f0      	beq.n	8007d96 <__match+0x6>
 8007db4:	2000      	movs	r0, #0
 8007db6:	e7f3      	b.n	8007da0 <__match+0x10>

08007db8 <__hexnan>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	680b      	ldr	r3, [r1, #0]
 8007dbe:	115e      	asrs	r6, r3, #5
 8007dc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007dc4:	f013 031f 	ands.w	r3, r3, #31
 8007dc8:	b087      	sub	sp, #28
 8007dca:	bf18      	it	ne
 8007dcc:	3604      	addne	r6, #4
 8007dce:	2500      	movs	r5, #0
 8007dd0:	1f37      	subs	r7, r6, #4
 8007dd2:	4690      	mov	r8, r2
 8007dd4:	6802      	ldr	r2, [r0, #0]
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	4682      	mov	sl, r0
 8007dda:	f846 5c04 	str.w	r5, [r6, #-4]
 8007dde:	46b9      	mov	r9, r7
 8007de0:	463c      	mov	r4, r7
 8007de2:	9502      	str	r5, [sp, #8]
 8007de4:	46ab      	mov	fp, r5
 8007de6:	7851      	ldrb	r1, [r2, #1]
 8007de8:	1c53      	adds	r3, r2, #1
 8007dea:	9303      	str	r3, [sp, #12]
 8007dec:	b341      	cbz	r1, 8007e40 <__hexnan+0x88>
 8007dee:	4608      	mov	r0, r1
 8007df0:	9205      	str	r2, [sp, #20]
 8007df2:	9104      	str	r1, [sp, #16]
 8007df4:	f7ff fd5f 	bl	80078b6 <__hexdig_fun>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d14f      	bne.n	8007e9c <__hexnan+0xe4>
 8007dfc:	9904      	ldr	r1, [sp, #16]
 8007dfe:	9a05      	ldr	r2, [sp, #20]
 8007e00:	2920      	cmp	r1, #32
 8007e02:	d818      	bhi.n	8007e36 <__hexnan+0x7e>
 8007e04:	9b02      	ldr	r3, [sp, #8]
 8007e06:	459b      	cmp	fp, r3
 8007e08:	dd13      	ble.n	8007e32 <__hexnan+0x7a>
 8007e0a:	454c      	cmp	r4, r9
 8007e0c:	d206      	bcs.n	8007e1c <__hexnan+0x64>
 8007e0e:	2d07      	cmp	r5, #7
 8007e10:	dc04      	bgt.n	8007e1c <__hexnan+0x64>
 8007e12:	462a      	mov	r2, r5
 8007e14:	4649      	mov	r1, r9
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7ff ffa8 	bl	8007d6c <L_shift>
 8007e1c:	4544      	cmp	r4, r8
 8007e1e:	d950      	bls.n	8007ec2 <__hexnan+0x10a>
 8007e20:	2300      	movs	r3, #0
 8007e22:	f1a4 0904 	sub.w	r9, r4, #4
 8007e26:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e2a:	f8cd b008 	str.w	fp, [sp, #8]
 8007e2e:	464c      	mov	r4, r9
 8007e30:	461d      	mov	r5, r3
 8007e32:	9a03      	ldr	r2, [sp, #12]
 8007e34:	e7d7      	b.n	8007de6 <__hexnan+0x2e>
 8007e36:	2929      	cmp	r1, #41	; 0x29
 8007e38:	d156      	bne.n	8007ee8 <__hexnan+0x130>
 8007e3a:	3202      	adds	r2, #2
 8007e3c:	f8ca 2000 	str.w	r2, [sl]
 8007e40:	f1bb 0f00 	cmp.w	fp, #0
 8007e44:	d050      	beq.n	8007ee8 <__hexnan+0x130>
 8007e46:	454c      	cmp	r4, r9
 8007e48:	d206      	bcs.n	8007e58 <__hexnan+0xa0>
 8007e4a:	2d07      	cmp	r5, #7
 8007e4c:	dc04      	bgt.n	8007e58 <__hexnan+0xa0>
 8007e4e:	462a      	mov	r2, r5
 8007e50:	4649      	mov	r1, r9
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff ff8a 	bl	8007d6c <L_shift>
 8007e58:	4544      	cmp	r4, r8
 8007e5a:	d934      	bls.n	8007ec6 <__hexnan+0x10e>
 8007e5c:	f1a8 0204 	sub.w	r2, r8, #4
 8007e60:	4623      	mov	r3, r4
 8007e62:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e66:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e6a:	429f      	cmp	r7, r3
 8007e6c:	d2f9      	bcs.n	8007e62 <__hexnan+0xaa>
 8007e6e:	1b3b      	subs	r3, r7, r4
 8007e70:	f023 0303 	bic.w	r3, r3, #3
 8007e74:	3304      	adds	r3, #4
 8007e76:	3401      	adds	r4, #1
 8007e78:	3e03      	subs	r6, #3
 8007e7a:	42b4      	cmp	r4, r6
 8007e7c:	bf88      	it	hi
 8007e7e:	2304      	movhi	r3, #4
 8007e80:	4443      	add	r3, r8
 8007e82:	2200      	movs	r2, #0
 8007e84:	f843 2b04 	str.w	r2, [r3], #4
 8007e88:	429f      	cmp	r7, r3
 8007e8a:	d2fb      	bcs.n	8007e84 <__hexnan+0xcc>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	b91b      	cbnz	r3, 8007e98 <__hexnan+0xe0>
 8007e90:	4547      	cmp	r7, r8
 8007e92:	d127      	bne.n	8007ee4 <__hexnan+0x12c>
 8007e94:	2301      	movs	r3, #1
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	2005      	movs	r0, #5
 8007e9a:	e026      	b.n	8007eea <__hexnan+0x132>
 8007e9c:	3501      	adds	r5, #1
 8007e9e:	2d08      	cmp	r5, #8
 8007ea0:	f10b 0b01 	add.w	fp, fp, #1
 8007ea4:	dd06      	ble.n	8007eb4 <__hexnan+0xfc>
 8007ea6:	4544      	cmp	r4, r8
 8007ea8:	d9c3      	bls.n	8007e32 <__hexnan+0x7a>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eb0:	2501      	movs	r5, #1
 8007eb2:	3c04      	subs	r4, #4
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	f000 000f 	and.w	r0, r0, #15
 8007eba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007ebe:	6022      	str	r2, [r4, #0]
 8007ec0:	e7b7      	b.n	8007e32 <__hexnan+0x7a>
 8007ec2:	2508      	movs	r5, #8
 8007ec4:	e7b5      	b.n	8007e32 <__hexnan+0x7a>
 8007ec6:	9b01      	ldr	r3, [sp, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0df      	beq.n	8007e8c <__hexnan+0xd4>
 8007ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed0:	f1c3 0320 	rsb	r3, r3, #32
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007edc:	401a      	ands	r2, r3
 8007ede:	f846 2c04 	str.w	r2, [r6, #-4]
 8007ee2:	e7d3      	b.n	8007e8c <__hexnan+0xd4>
 8007ee4:	3f04      	subs	r7, #4
 8007ee6:	e7d1      	b.n	8007e8c <__hexnan+0xd4>
 8007ee8:	2004      	movs	r0, #4
 8007eea:	b007      	add	sp, #28
 8007eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ef0 <_localeconv_r>:
 8007ef0:	4800      	ldr	r0, [pc, #0]	; (8007ef4 <_localeconv_r+0x4>)
 8007ef2:	4770      	bx	lr
 8007ef4:	20000164 	.word	0x20000164

08007ef8 <__retarget_lock_init_recursive>:
 8007ef8:	4770      	bx	lr

08007efa <__retarget_lock_acquire_recursive>:
 8007efa:	4770      	bx	lr

08007efc <__retarget_lock_release_recursive>:
 8007efc:	4770      	bx	lr

08007efe <__swhatbuf_r>:
 8007efe:	b570      	push	{r4, r5, r6, lr}
 8007f00:	460e      	mov	r6, r1
 8007f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f06:	2900      	cmp	r1, #0
 8007f08:	b096      	sub	sp, #88	; 0x58
 8007f0a:	4614      	mov	r4, r2
 8007f0c:	461d      	mov	r5, r3
 8007f0e:	da08      	bge.n	8007f22 <__swhatbuf_r+0x24>
 8007f10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	602a      	str	r2, [r5, #0]
 8007f18:	061a      	lsls	r2, r3, #24
 8007f1a:	d410      	bmi.n	8007f3e <__swhatbuf_r+0x40>
 8007f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f20:	e00e      	b.n	8007f40 <__swhatbuf_r+0x42>
 8007f22:	466a      	mov	r2, sp
 8007f24:	f001 f9b6 	bl	8009294 <_fstat_r>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	dbf1      	blt.n	8007f10 <__swhatbuf_r+0x12>
 8007f2c:	9a01      	ldr	r2, [sp, #4]
 8007f2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f36:	425a      	negs	r2, r3
 8007f38:	415a      	adcs	r2, r3
 8007f3a:	602a      	str	r2, [r5, #0]
 8007f3c:	e7ee      	b.n	8007f1c <__swhatbuf_r+0x1e>
 8007f3e:	2340      	movs	r3, #64	; 0x40
 8007f40:	2000      	movs	r0, #0
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	b016      	add	sp, #88	; 0x58
 8007f46:	bd70      	pop	{r4, r5, r6, pc}

08007f48 <__smakebuf_r>:
 8007f48:	898b      	ldrh	r3, [r1, #12]
 8007f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f4c:	079d      	lsls	r5, r3, #30
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460c      	mov	r4, r1
 8007f52:	d507      	bpl.n	8007f64 <__smakebuf_r+0x1c>
 8007f54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	6123      	str	r3, [r4, #16]
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	6163      	str	r3, [r4, #20]
 8007f60:	b002      	add	sp, #8
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	ab01      	add	r3, sp, #4
 8007f66:	466a      	mov	r2, sp
 8007f68:	f7ff ffc9 	bl	8007efe <__swhatbuf_r>
 8007f6c:	9900      	ldr	r1, [sp, #0]
 8007f6e:	4605      	mov	r5, r0
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 fd95 	bl	8008aa0 <_malloc_r>
 8007f76:	b948      	cbnz	r0, 8007f8c <__smakebuf_r+0x44>
 8007f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f7c:	059a      	lsls	r2, r3, #22
 8007f7e:	d4ef      	bmi.n	8007f60 <__smakebuf_r+0x18>
 8007f80:	f023 0303 	bic.w	r3, r3, #3
 8007f84:	f043 0302 	orr.w	r3, r3, #2
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	e7e3      	b.n	8007f54 <__smakebuf_r+0xc>
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <__smakebuf_r+0x7c>)
 8007f8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	6020      	str	r0, [r4, #0]
 8007f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f98:	81a3      	strh	r3, [r4, #12]
 8007f9a:	9b00      	ldr	r3, [sp, #0]
 8007f9c:	6163      	str	r3, [r4, #20]
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	6120      	str	r0, [r4, #16]
 8007fa2:	b15b      	cbz	r3, 8007fbc <__smakebuf_r+0x74>
 8007fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f001 f985 	bl	80092b8 <_isatty_r>
 8007fae:	b128      	cbz	r0, 8007fbc <__smakebuf_r+0x74>
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	89a0      	ldrh	r0, [r4, #12]
 8007fbe:	4305      	orrs	r5, r0
 8007fc0:	81a5      	strh	r5, [r4, #12]
 8007fc2:	e7cd      	b.n	8007f60 <__smakebuf_r+0x18>
 8007fc4:	08007671 	.word	0x08007671

08007fc8 <malloc>:
 8007fc8:	4b02      	ldr	r3, [pc, #8]	; (8007fd4 <malloc+0xc>)
 8007fca:	4601      	mov	r1, r0
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	f000 bd67 	b.w	8008aa0 <_malloc_r>
 8007fd2:	bf00      	nop
 8007fd4:	2000000c 	.word	0x2000000c

08007fd8 <__ascii_mbtowc>:
 8007fd8:	b082      	sub	sp, #8
 8007fda:	b901      	cbnz	r1, 8007fde <__ascii_mbtowc+0x6>
 8007fdc:	a901      	add	r1, sp, #4
 8007fde:	b142      	cbz	r2, 8007ff2 <__ascii_mbtowc+0x1a>
 8007fe0:	b14b      	cbz	r3, 8007ff6 <__ascii_mbtowc+0x1e>
 8007fe2:	7813      	ldrb	r3, [r2, #0]
 8007fe4:	600b      	str	r3, [r1, #0]
 8007fe6:	7812      	ldrb	r2, [r2, #0]
 8007fe8:	1e10      	subs	r0, r2, #0
 8007fea:	bf18      	it	ne
 8007fec:	2001      	movne	r0, #1
 8007fee:	b002      	add	sp, #8
 8007ff0:	4770      	bx	lr
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	e7fb      	b.n	8007fee <__ascii_mbtowc+0x16>
 8007ff6:	f06f 0001 	mvn.w	r0, #1
 8007ffa:	e7f8      	b.n	8007fee <__ascii_mbtowc+0x16>

08007ffc <memcpy>:
 8007ffc:	440a      	add	r2, r1
 8007ffe:	4291      	cmp	r1, r2
 8008000:	f100 33ff 	add.w	r3, r0, #4294967295
 8008004:	d100      	bne.n	8008008 <memcpy+0xc>
 8008006:	4770      	bx	lr
 8008008:	b510      	push	{r4, lr}
 800800a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008012:	4291      	cmp	r1, r2
 8008014:	d1f9      	bne.n	800800a <memcpy+0xe>
 8008016:	bd10      	pop	{r4, pc}

08008018 <_Balloc>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	b976      	cbnz	r6, 8008040 <_Balloc+0x28>
 8008022:	2010      	movs	r0, #16
 8008024:	f7ff ffd0 	bl	8007fc8 <malloc>
 8008028:	4602      	mov	r2, r0
 800802a:	6260      	str	r0, [r4, #36]	; 0x24
 800802c:	b920      	cbnz	r0, 8008038 <_Balloc+0x20>
 800802e:	4b18      	ldr	r3, [pc, #96]	; (8008090 <_Balloc+0x78>)
 8008030:	4818      	ldr	r0, [pc, #96]	; (8008094 <_Balloc+0x7c>)
 8008032:	2166      	movs	r1, #102	; 0x66
 8008034:	f001 f8ee 	bl	8009214 <__assert_func>
 8008038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800803c:	6006      	str	r6, [r0, #0]
 800803e:	60c6      	str	r6, [r0, #12]
 8008040:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008042:	68f3      	ldr	r3, [r6, #12]
 8008044:	b183      	cbz	r3, 8008068 <_Balloc+0x50>
 8008046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800804e:	b9b8      	cbnz	r0, 8008080 <_Balloc+0x68>
 8008050:	2101      	movs	r1, #1
 8008052:	fa01 f605 	lsl.w	r6, r1, r5
 8008056:	1d72      	adds	r2, r6, #5
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	4620      	mov	r0, r4
 800805c:	f000 fc9d 	bl	800899a <_calloc_r>
 8008060:	b160      	cbz	r0, 800807c <_Balloc+0x64>
 8008062:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008066:	e00e      	b.n	8008086 <_Balloc+0x6e>
 8008068:	2221      	movs	r2, #33	; 0x21
 800806a:	2104      	movs	r1, #4
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fc94 	bl	800899a <_calloc_r>
 8008072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008074:	60f0      	str	r0, [r6, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e4      	bne.n	8008046 <_Balloc+0x2e>
 800807c:	2000      	movs	r0, #0
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	6802      	ldr	r2, [r0, #0]
 8008082:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008086:	2300      	movs	r3, #0
 8008088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800808c:	e7f7      	b.n	800807e <_Balloc+0x66>
 800808e:	bf00      	nop
 8008090:	0800973e 	.word	0x0800973e
 8008094:	080098a0 	.word	0x080098a0

08008098 <_Bfree>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Bfree+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff ff90 	bl	8007fc8 <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	6268      	str	r0, [r5, #36]	; 0x24
 80080ac:	b920      	cbnz	r0, 80080b8 <_Bfree+0x20>
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <_Bfree+0x3c>)
 80080b0:	4809      	ldr	r0, [pc, #36]	; (80080d8 <_Bfree+0x40>)
 80080b2:	218a      	movs	r1, #138	; 0x8a
 80080b4:	f001 f8ae 	bl	8009214 <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	b13c      	cbz	r4, 80080d2 <_Bfree+0x3a>
 80080c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080c4:	6862      	ldr	r2, [r4, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080cc:	6021      	str	r1, [r4, #0]
 80080ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	0800973e 	.word	0x0800973e
 80080d8:	080098a0 	.word	0x080098a0

080080dc <__multadd>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	690d      	ldr	r5, [r1, #16]
 80080e2:	4607      	mov	r7, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	461e      	mov	r6, r3
 80080e8:	f101 0c14 	add.w	ip, r1, #20
 80080ec:	2000      	movs	r0, #0
 80080ee:	f8dc 3000 	ldr.w	r3, [ip]
 80080f2:	b299      	uxth	r1, r3
 80080f4:	fb02 6101 	mla	r1, r2, r1, r6
 80080f8:	0c1e      	lsrs	r6, r3, #16
 80080fa:	0c0b      	lsrs	r3, r1, #16
 80080fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008100:	b289      	uxth	r1, r1
 8008102:	3001      	adds	r0, #1
 8008104:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008108:	4285      	cmp	r5, r0
 800810a:	f84c 1b04 	str.w	r1, [ip], #4
 800810e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008112:	dcec      	bgt.n	80080ee <__multadd+0x12>
 8008114:	b30e      	cbz	r6, 800815a <__multadd+0x7e>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	42ab      	cmp	r3, r5
 800811a:	dc19      	bgt.n	8008150 <__multadd+0x74>
 800811c:	6861      	ldr	r1, [r4, #4]
 800811e:	4638      	mov	r0, r7
 8008120:	3101      	adds	r1, #1
 8008122:	f7ff ff79 	bl	8008018 <_Balloc>
 8008126:	4680      	mov	r8, r0
 8008128:	b928      	cbnz	r0, 8008136 <__multadd+0x5a>
 800812a:	4602      	mov	r2, r0
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <__multadd+0x84>)
 800812e:	480d      	ldr	r0, [pc, #52]	; (8008164 <__multadd+0x88>)
 8008130:	21b5      	movs	r1, #181	; 0xb5
 8008132:	f001 f86f 	bl	8009214 <__assert_func>
 8008136:	6922      	ldr	r2, [r4, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	f104 010c 	add.w	r1, r4, #12
 800813e:	0092      	lsls	r2, r2, #2
 8008140:	300c      	adds	r0, #12
 8008142:	f7ff ff5b 	bl	8007ffc <memcpy>
 8008146:	4621      	mov	r1, r4
 8008148:	4638      	mov	r0, r7
 800814a:	f7ff ffa5 	bl	8008098 <_Bfree>
 800814e:	4644      	mov	r4, r8
 8008150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008154:	3501      	adds	r5, #1
 8008156:	615e      	str	r6, [r3, #20]
 8008158:	6125      	str	r5, [r4, #16]
 800815a:	4620      	mov	r0, r4
 800815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008160:	080097b0 	.word	0x080097b0
 8008164:	080098a0 	.word	0x080098a0

08008168 <__s2b>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	4615      	mov	r5, r2
 8008170:	461f      	mov	r7, r3
 8008172:	2209      	movs	r2, #9
 8008174:	3308      	adds	r3, #8
 8008176:	4606      	mov	r6, r0
 8008178:	fb93 f3f2 	sdiv	r3, r3, r2
 800817c:	2100      	movs	r1, #0
 800817e:	2201      	movs	r2, #1
 8008180:	429a      	cmp	r2, r3
 8008182:	db09      	blt.n	8008198 <__s2b+0x30>
 8008184:	4630      	mov	r0, r6
 8008186:	f7ff ff47 	bl	8008018 <_Balloc>
 800818a:	b940      	cbnz	r0, 800819e <__s2b+0x36>
 800818c:	4602      	mov	r2, r0
 800818e:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <__s2b+0x8c>)
 8008190:	4819      	ldr	r0, [pc, #100]	; (80081f8 <__s2b+0x90>)
 8008192:	21ce      	movs	r1, #206	; 0xce
 8008194:	f001 f83e 	bl	8009214 <__assert_func>
 8008198:	0052      	lsls	r2, r2, #1
 800819a:	3101      	adds	r1, #1
 800819c:	e7f0      	b.n	8008180 <__s2b+0x18>
 800819e:	9b08      	ldr	r3, [sp, #32]
 80081a0:	6143      	str	r3, [r0, #20]
 80081a2:	2d09      	cmp	r5, #9
 80081a4:	f04f 0301 	mov.w	r3, #1
 80081a8:	6103      	str	r3, [r0, #16]
 80081aa:	dd16      	ble.n	80081da <__s2b+0x72>
 80081ac:	f104 0909 	add.w	r9, r4, #9
 80081b0:	46c8      	mov	r8, r9
 80081b2:	442c      	add	r4, r5
 80081b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081b8:	4601      	mov	r1, r0
 80081ba:	3b30      	subs	r3, #48	; 0x30
 80081bc:	220a      	movs	r2, #10
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff ff8c 	bl	80080dc <__multadd>
 80081c4:	45a0      	cmp	r8, r4
 80081c6:	d1f5      	bne.n	80081b4 <__s2b+0x4c>
 80081c8:	f1a5 0408 	sub.w	r4, r5, #8
 80081cc:	444c      	add	r4, r9
 80081ce:	1b2d      	subs	r5, r5, r4
 80081d0:	1963      	adds	r3, r4, r5
 80081d2:	42bb      	cmp	r3, r7
 80081d4:	db04      	blt.n	80081e0 <__s2b+0x78>
 80081d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081da:	340a      	adds	r4, #10
 80081dc:	2509      	movs	r5, #9
 80081de:	e7f6      	b.n	80081ce <__s2b+0x66>
 80081e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081e4:	4601      	mov	r1, r0
 80081e6:	3b30      	subs	r3, #48	; 0x30
 80081e8:	220a      	movs	r2, #10
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff ff76 	bl	80080dc <__multadd>
 80081f0:	e7ee      	b.n	80081d0 <__s2b+0x68>
 80081f2:	bf00      	nop
 80081f4:	080097b0 	.word	0x080097b0
 80081f8:	080098a0 	.word	0x080098a0

080081fc <__hi0bits>:
 80081fc:	0c03      	lsrs	r3, r0, #16
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	b9d3      	cbnz	r3, 8008238 <__hi0bits+0x3c>
 8008202:	0400      	lsls	r0, r0, #16
 8008204:	2310      	movs	r3, #16
 8008206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800820a:	bf04      	itt	eq
 800820c:	0200      	lsleq	r0, r0, #8
 800820e:	3308      	addeq	r3, #8
 8008210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008214:	bf04      	itt	eq
 8008216:	0100      	lsleq	r0, r0, #4
 8008218:	3304      	addeq	r3, #4
 800821a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800821e:	bf04      	itt	eq
 8008220:	0080      	lsleq	r0, r0, #2
 8008222:	3302      	addeq	r3, #2
 8008224:	2800      	cmp	r0, #0
 8008226:	db05      	blt.n	8008234 <__hi0bits+0x38>
 8008228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800822c:	f103 0301 	add.w	r3, r3, #1
 8008230:	bf08      	it	eq
 8008232:	2320      	moveq	r3, #32
 8008234:	4618      	mov	r0, r3
 8008236:	4770      	bx	lr
 8008238:	2300      	movs	r3, #0
 800823a:	e7e4      	b.n	8008206 <__hi0bits+0xa>

0800823c <__lo0bits>:
 800823c:	6803      	ldr	r3, [r0, #0]
 800823e:	f013 0207 	ands.w	r2, r3, #7
 8008242:	4601      	mov	r1, r0
 8008244:	d00b      	beq.n	800825e <__lo0bits+0x22>
 8008246:	07da      	lsls	r2, r3, #31
 8008248:	d423      	bmi.n	8008292 <__lo0bits+0x56>
 800824a:	0798      	lsls	r0, r3, #30
 800824c:	bf49      	itett	mi
 800824e:	085b      	lsrmi	r3, r3, #1
 8008250:	089b      	lsrpl	r3, r3, #2
 8008252:	2001      	movmi	r0, #1
 8008254:	600b      	strmi	r3, [r1, #0]
 8008256:	bf5c      	itt	pl
 8008258:	600b      	strpl	r3, [r1, #0]
 800825a:	2002      	movpl	r0, #2
 800825c:	4770      	bx	lr
 800825e:	b298      	uxth	r0, r3
 8008260:	b9a8      	cbnz	r0, 800828e <__lo0bits+0x52>
 8008262:	0c1b      	lsrs	r3, r3, #16
 8008264:	2010      	movs	r0, #16
 8008266:	b2da      	uxtb	r2, r3
 8008268:	b90a      	cbnz	r2, 800826e <__lo0bits+0x32>
 800826a:	3008      	adds	r0, #8
 800826c:	0a1b      	lsrs	r3, r3, #8
 800826e:	071a      	lsls	r2, r3, #28
 8008270:	bf04      	itt	eq
 8008272:	091b      	lsreq	r3, r3, #4
 8008274:	3004      	addeq	r0, #4
 8008276:	079a      	lsls	r2, r3, #30
 8008278:	bf04      	itt	eq
 800827a:	089b      	lsreq	r3, r3, #2
 800827c:	3002      	addeq	r0, #2
 800827e:	07da      	lsls	r2, r3, #31
 8008280:	d403      	bmi.n	800828a <__lo0bits+0x4e>
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	f100 0001 	add.w	r0, r0, #1
 8008288:	d005      	beq.n	8008296 <__lo0bits+0x5a>
 800828a:	600b      	str	r3, [r1, #0]
 800828c:	4770      	bx	lr
 800828e:	4610      	mov	r0, r2
 8008290:	e7e9      	b.n	8008266 <__lo0bits+0x2a>
 8008292:	2000      	movs	r0, #0
 8008294:	4770      	bx	lr
 8008296:	2020      	movs	r0, #32
 8008298:	4770      	bx	lr
	...

0800829c <__i2b>:
 800829c:	b510      	push	{r4, lr}
 800829e:	460c      	mov	r4, r1
 80082a0:	2101      	movs	r1, #1
 80082a2:	f7ff feb9 	bl	8008018 <_Balloc>
 80082a6:	4602      	mov	r2, r0
 80082a8:	b928      	cbnz	r0, 80082b6 <__i2b+0x1a>
 80082aa:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <__i2b+0x24>)
 80082ac:	4805      	ldr	r0, [pc, #20]	; (80082c4 <__i2b+0x28>)
 80082ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082b2:	f000 ffaf 	bl	8009214 <__assert_func>
 80082b6:	2301      	movs	r3, #1
 80082b8:	6144      	str	r4, [r0, #20]
 80082ba:	6103      	str	r3, [r0, #16]
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	bf00      	nop
 80082c0:	080097b0 	.word	0x080097b0
 80082c4:	080098a0 	.word	0x080098a0

080082c8 <__multiply>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	4691      	mov	r9, r2
 80082ce:	690a      	ldr	r2, [r1, #16]
 80082d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	bfb8      	it	lt
 80082d8:	460b      	movlt	r3, r1
 80082da:	460c      	mov	r4, r1
 80082dc:	bfbc      	itt	lt
 80082de:	464c      	movlt	r4, r9
 80082e0:	4699      	movlt	r9, r3
 80082e2:	6927      	ldr	r7, [r4, #16]
 80082e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082e8:	68a3      	ldr	r3, [r4, #8]
 80082ea:	6861      	ldr	r1, [r4, #4]
 80082ec:	eb07 060a 	add.w	r6, r7, sl
 80082f0:	42b3      	cmp	r3, r6
 80082f2:	b085      	sub	sp, #20
 80082f4:	bfb8      	it	lt
 80082f6:	3101      	addlt	r1, #1
 80082f8:	f7ff fe8e 	bl	8008018 <_Balloc>
 80082fc:	b930      	cbnz	r0, 800830c <__multiply+0x44>
 80082fe:	4602      	mov	r2, r0
 8008300:	4b44      	ldr	r3, [pc, #272]	; (8008414 <__multiply+0x14c>)
 8008302:	4845      	ldr	r0, [pc, #276]	; (8008418 <__multiply+0x150>)
 8008304:	f240 115d 	movw	r1, #349	; 0x15d
 8008308:	f000 ff84 	bl	8009214 <__assert_func>
 800830c:	f100 0514 	add.w	r5, r0, #20
 8008310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008314:	462b      	mov	r3, r5
 8008316:	2200      	movs	r2, #0
 8008318:	4543      	cmp	r3, r8
 800831a:	d321      	bcc.n	8008360 <__multiply+0x98>
 800831c:	f104 0314 	add.w	r3, r4, #20
 8008320:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008324:	f109 0314 	add.w	r3, r9, #20
 8008328:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800832c:	9202      	str	r2, [sp, #8]
 800832e:	1b3a      	subs	r2, r7, r4
 8008330:	3a15      	subs	r2, #21
 8008332:	f022 0203 	bic.w	r2, r2, #3
 8008336:	3204      	adds	r2, #4
 8008338:	f104 0115 	add.w	r1, r4, #21
 800833c:	428f      	cmp	r7, r1
 800833e:	bf38      	it	cc
 8008340:	2204      	movcc	r2, #4
 8008342:	9201      	str	r2, [sp, #4]
 8008344:	9a02      	ldr	r2, [sp, #8]
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	429a      	cmp	r2, r3
 800834a:	d80c      	bhi.n	8008366 <__multiply+0x9e>
 800834c:	2e00      	cmp	r6, #0
 800834e:	dd03      	ble.n	8008358 <__multiply+0x90>
 8008350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008354:	2b00      	cmp	r3, #0
 8008356:	d05a      	beq.n	800840e <__multiply+0x146>
 8008358:	6106      	str	r6, [r0, #16]
 800835a:	b005      	add	sp, #20
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	f843 2b04 	str.w	r2, [r3], #4
 8008364:	e7d8      	b.n	8008318 <__multiply+0x50>
 8008366:	f8b3 a000 	ldrh.w	sl, [r3]
 800836a:	f1ba 0f00 	cmp.w	sl, #0
 800836e:	d024      	beq.n	80083ba <__multiply+0xf2>
 8008370:	f104 0e14 	add.w	lr, r4, #20
 8008374:	46a9      	mov	r9, r5
 8008376:	f04f 0c00 	mov.w	ip, #0
 800837a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800837e:	f8d9 1000 	ldr.w	r1, [r9]
 8008382:	fa1f fb82 	uxth.w	fp, r2
 8008386:	b289      	uxth	r1, r1
 8008388:	fb0a 110b 	mla	r1, sl, fp, r1
 800838c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008390:	f8d9 2000 	ldr.w	r2, [r9]
 8008394:	4461      	add	r1, ip
 8008396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800839a:	fb0a c20b 	mla	r2, sl, fp, ip
 800839e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083a2:	b289      	uxth	r1, r1
 80083a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083a8:	4577      	cmp	r7, lr
 80083aa:	f849 1b04 	str.w	r1, [r9], #4
 80083ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083b2:	d8e2      	bhi.n	800837a <__multiply+0xb2>
 80083b4:	9a01      	ldr	r2, [sp, #4]
 80083b6:	f845 c002 	str.w	ip, [r5, r2]
 80083ba:	9a03      	ldr	r2, [sp, #12]
 80083bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083c0:	3304      	adds	r3, #4
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	d020      	beq.n	800840a <__multiply+0x142>
 80083c8:	6829      	ldr	r1, [r5, #0]
 80083ca:	f104 0c14 	add.w	ip, r4, #20
 80083ce:	46ae      	mov	lr, r5
 80083d0:	f04f 0a00 	mov.w	sl, #0
 80083d4:	f8bc b000 	ldrh.w	fp, [ip]
 80083d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083dc:	fb09 220b 	mla	r2, r9, fp, r2
 80083e0:	4492      	add	sl, r2
 80083e2:	b289      	uxth	r1, r1
 80083e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083e8:	f84e 1b04 	str.w	r1, [lr], #4
 80083ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083f0:	f8be 1000 	ldrh.w	r1, [lr]
 80083f4:	0c12      	lsrs	r2, r2, #16
 80083f6:	fb09 1102 	mla	r1, r9, r2, r1
 80083fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083fe:	4567      	cmp	r7, ip
 8008400:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008404:	d8e6      	bhi.n	80083d4 <__multiply+0x10c>
 8008406:	9a01      	ldr	r2, [sp, #4]
 8008408:	50a9      	str	r1, [r5, r2]
 800840a:	3504      	adds	r5, #4
 800840c:	e79a      	b.n	8008344 <__multiply+0x7c>
 800840e:	3e01      	subs	r6, #1
 8008410:	e79c      	b.n	800834c <__multiply+0x84>
 8008412:	bf00      	nop
 8008414:	080097b0 	.word	0x080097b0
 8008418:	080098a0 	.word	0x080098a0

0800841c <__pow5mult>:
 800841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008420:	4615      	mov	r5, r2
 8008422:	f012 0203 	ands.w	r2, r2, #3
 8008426:	4606      	mov	r6, r0
 8008428:	460f      	mov	r7, r1
 800842a:	d007      	beq.n	800843c <__pow5mult+0x20>
 800842c:	4c25      	ldr	r4, [pc, #148]	; (80084c4 <__pow5mult+0xa8>)
 800842e:	3a01      	subs	r2, #1
 8008430:	2300      	movs	r3, #0
 8008432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008436:	f7ff fe51 	bl	80080dc <__multadd>
 800843a:	4607      	mov	r7, r0
 800843c:	10ad      	asrs	r5, r5, #2
 800843e:	d03d      	beq.n	80084bc <__pow5mult+0xa0>
 8008440:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008442:	b97c      	cbnz	r4, 8008464 <__pow5mult+0x48>
 8008444:	2010      	movs	r0, #16
 8008446:	f7ff fdbf 	bl	8007fc8 <malloc>
 800844a:	4602      	mov	r2, r0
 800844c:	6270      	str	r0, [r6, #36]	; 0x24
 800844e:	b928      	cbnz	r0, 800845c <__pow5mult+0x40>
 8008450:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <__pow5mult+0xac>)
 8008452:	481e      	ldr	r0, [pc, #120]	; (80084cc <__pow5mult+0xb0>)
 8008454:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008458:	f000 fedc 	bl	8009214 <__assert_func>
 800845c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008460:	6004      	str	r4, [r0, #0]
 8008462:	60c4      	str	r4, [r0, #12]
 8008464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800846c:	b94c      	cbnz	r4, 8008482 <__pow5mult+0x66>
 800846e:	f240 2171 	movw	r1, #625	; 0x271
 8008472:	4630      	mov	r0, r6
 8008474:	f7ff ff12 	bl	800829c <__i2b>
 8008478:	2300      	movs	r3, #0
 800847a:	f8c8 0008 	str.w	r0, [r8, #8]
 800847e:	4604      	mov	r4, r0
 8008480:	6003      	str	r3, [r0, #0]
 8008482:	f04f 0900 	mov.w	r9, #0
 8008486:	07eb      	lsls	r3, r5, #31
 8008488:	d50a      	bpl.n	80084a0 <__pow5mult+0x84>
 800848a:	4639      	mov	r1, r7
 800848c:	4622      	mov	r2, r4
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ff1a 	bl	80082c8 <__multiply>
 8008494:	4639      	mov	r1, r7
 8008496:	4680      	mov	r8, r0
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff fdfd 	bl	8008098 <_Bfree>
 800849e:	4647      	mov	r7, r8
 80084a0:	106d      	asrs	r5, r5, #1
 80084a2:	d00b      	beq.n	80084bc <__pow5mult+0xa0>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	b938      	cbnz	r0, 80084b8 <__pow5mult+0x9c>
 80084a8:	4622      	mov	r2, r4
 80084aa:	4621      	mov	r1, r4
 80084ac:	4630      	mov	r0, r6
 80084ae:	f7ff ff0b 	bl	80082c8 <__multiply>
 80084b2:	6020      	str	r0, [r4, #0]
 80084b4:	f8c0 9000 	str.w	r9, [r0]
 80084b8:	4604      	mov	r4, r0
 80084ba:	e7e4      	b.n	8008486 <__pow5mult+0x6a>
 80084bc:	4638      	mov	r0, r7
 80084be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084c2:	bf00      	nop
 80084c4:	080099f0 	.word	0x080099f0
 80084c8:	0800973e 	.word	0x0800973e
 80084cc:	080098a0 	.word	0x080098a0

080084d0 <__lshift>:
 80084d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	460c      	mov	r4, r1
 80084d6:	6849      	ldr	r1, [r1, #4]
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084de:	68a3      	ldr	r3, [r4, #8]
 80084e0:	4607      	mov	r7, r0
 80084e2:	4691      	mov	r9, r2
 80084e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084e8:	f108 0601 	add.w	r6, r8, #1
 80084ec:	42b3      	cmp	r3, r6
 80084ee:	db0b      	blt.n	8008508 <__lshift+0x38>
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff fd91 	bl	8008018 <_Balloc>
 80084f6:	4605      	mov	r5, r0
 80084f8:	b948      	cbnz	r0, 800850e <__lshift+0x3e>
 80084fa:	4602      	mov	r2, r0
 80084fc:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <__lshift+0xd8>)
 80084fe:	482b      	ldr	r0, [pc, #172]	; (80085ac <__lshift+0xdc>)
 8008500:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008504:	f000 fe86 	bl	8009214 <__assert_func>
 8008508:	3101      	adds	r1, #1
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	e7ee      	b.n	80084ec <__lshift+0x1c>
 800850e:	2300      	movs	r3, #0
 8008510:	f100 0114 	add.w	r1, r0, #20
 8008514:	f100 0210 	add.w	r2, r0, #16
 8008518:	4618      	mov	r0, r3
 800851a:	4553      	cmp	r3, sl
 800851c:	db37      	blt.n	800858e <__lshift+0xbe>
 800851e:	6920      	ldr	r0, [r4, #16]
 8008520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008524:	f104 0314 	add.w	r3, r4, #20
 8008528:	f019 091f 	ands.w	r9, r9, #31
 800852c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008530:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008534:	d02f      	beq.n	8008596 <__lshift+0xc6>
 8008536:	f1c9 0e20 	rsb	lr, r9, #32
 800853a:	468a      	mov	sl, r1
 800853c:	f04f 0c00 	mov.w	ip, #0
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	fa02 f209 	lsl.w	r2, r2, r9
 8008546:	ea42 020c 	orr.w	r2, r2, ip
 800854a:	f84a 2b04 	str.w	r2, [sl], #4
 800854e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008552:	4298      	cmp	r0, r3
 8008554:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008558:	d8f2      	bhi.n	8008540 <__lshift+0x70>
 800855a:	1b03      	subs	r3, r0, r4
 800855c:	3b15      	subs	r3, #21
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	3304      	adds	r3, #4
 8008564:	f104 0215 	add.w	r2, r4, #21
 8008568:	4290      	cmp	r0, r2
 800856a:	bf38      	it	cc
 800856c:	2304      	movcc	r3, #4
 800856e:	f841 c003 	str.w	ip, [r1, r3]
 8008572:	f1bc 0f00 	cmp.w	ip, #0
 8008576:	d001      	beq.n	800857c <__lshift+0xac>
 8008578:	f108 0602 	add.w	r6, r8, #2
 800857c:	3e01      	subs	r6, #1
 800857e:	4638      	mov	r0, r7
 8008580:	612e      	str	r6, [r5, #16]
 8008582:	4621      	mov	r1, r4
 8008584:	f7ff fd88 	bl	8008098 <_Bfree>
 8008588:	4628      	mov	r0, r5
 800858a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008592:	3301      	adds	r3, #1
 8008594:	e7c1      	b.n	800851a <__lshift+0x4a>
 8008596:	3904      	subs	r1, #4
 8008598:	f853 2b04 	ldr.w	r2, [r3], #4
 800859c:	f841 2f04 	str.w	r2, [r1, #4]!
 80085a0:	4298      	cmp	r0, r3
 80085a2:	d8f9      	bhi.n	8008598 <__lshift+0xc8>
 80085a4:	e7ea      	b.n	800857c <__lshift+0xac>
 80085a6:	bf00      	nop
 80085a8:	080097b0 	.word	0x080097b0
 80085ac:	080098a0 	.word	0x080098a0

080085b0 <__mcmp>:
 80085b0:	b530      	push	{r4, r5, lr}
 80085b2:	6902      	ldr	r2, [r0, #16]
 80085b4:	690c      	ldr	r4, [r1, #16]
 80085b6:	1b12      	subs	r2, r2, r4
 80085b8:	d10e      	bne.n	80085d8 <__mcmp+0x28>
 80085ba:	f100 0314 	add.w	r3, r0, #20
 80085be:	3114      	adds	r1, #20
 80085c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085d0:	42a5      	cmp	r5, r4
 80085d2:	d003      	beq.n	80085dc <__mcmp+0x2c>
 80085d4:	d305      	bcc.n	80085e2 <__mcmp+0x32>
 80085d6:	2201      	movs	r2, #1
 80085d8:	4610      	mov	r0, r2
 80085da:	bd30      	pop	{r4, r5, pc}
 80085dc:	4283      	cmp	r3, r0
 80085de:	d3f3      	bcc.n	80085c8 <__mcmp+0x18>
 80085e0:	e7fa      	b.n	80085d8 <__mcmp+0x28>
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	e7f7      	b.n	80085d8 <__mcmp+0x28>

080085e8 <__mdiff>:
 80085e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	460c      	mov	r4, r1
 80085ee:	4606      	mov	r6, r0
 80085f0:	4611      	mov	r1, r2
 80085f2:	4620      	mov	r0, r4
 80085f4:	4690      	mov	r8, r2
 80085f6:	f7ff ffdb 	bl	80085b0 <__mcmp>
 80085fa:	1e05      	subs	r5, r0, #0
 80085fc:	d110      	bne.n	8008620 <__mdiff+0x38>
 80085fe:	4629      	mov	r1, r5
 8008600:	4630      	mov	r0, r6
 8008602:	f7ff fd09 	bl	8008018 <_Balloc>
 8008606:	b930      	cbnz	r0, 8008616 <__mdiff+0x2e>
 8008608:	4b3a      	ldr	r3, [pc, #232]	; (80086f4 <__mdiff+0x10c>)
 800860a:	4602      	mov	r2, r0
 800860c:	f240 2132 	movw	r1, #562	; 0x232
 8008610:	4839      	ldr	r0, [pc, #228]	; (80086f8 <__mdiff+0x110>)
 8008612:	f000 fdff 	bl	8009214 <__assert_func>
 8008616:	2301      	movs	r3, #1
 8008618:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800861c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008620:	bfa4      	itt	ge
 8008622:	4643      	movge	r3, r8
 8008624:	46a0      	movge	r8, r4
 8008626:	4630      	mov	r0, r6
 8008628:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800862c:	bfa6      	itte	ge
 800862e:	461c      	movge	r4, r3
 8008630:	2500      	movge	r5, #0
 8008632:	2501      	movlt	r5, #1
 8008634:	f7ff fcf0 	bl	8008018 <_Balloc>
 8008638:	b920      	cbnz	r0, 8008644 <__mdiff+0x5c>
 800863a:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <__mdiff+0x10c>)
 800863c:	4602      	mov	r2, r0
 800863e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008642:	e7e5      	b.n	8008610 <__mdiff+0x28>
 8008644:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008648:	6926      	ldr	r6, [r4, #16]
 800864a:	60c5      	str	r5, [r0, #12]
 800864c:	f104 0914 	add.w	r9, r4, #20
 8008650:	f108 0514 	add.w	r5, r8, #20
 8008654:	f100 0e14 	add.w	lr, r0, #20
 8008658:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800865c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008660:	f108 0210 	add.w	r2, r8, #16
 8008664:	46f2      	mov	sl, lr
 8008666:	2100      	movs	r1, #0
 8008668:	f859 3b04 	ldr.w	r3, [r9], #4
 800866c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008670:	fa1f f883 	uxth.w	r8, r3
 8008674:	fa11 f18b 	uxtah	r1, r1, fp
 8008678:	0c1b      	lsrs	r3, r3, #16
 800867a:	eba1 0808 	sub.w	r8, r1, r8
 800867e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008682:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008686:	fa1f f888 	uxth.w	r8, r8
 800868a:	1419      	asrs	r1, r3, #16
 800868c:	454e      	cmp	r6, r9
 800868e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008692:	f84a 3b04 	str.w	r3, [sl], #4
 8008696:	d8e7      	bhi.n	8008668 <__mdiff+0x80>
 8008698:	1b33      	subs	r3, r6, r4
 800869a:	3b15      	subs	r3, #21
 800869c:	f023 0303 	bic.w	r3, r3, #3
 80086a0:	3304      	adds	r3, #4
 80086a2:	3415      	adds	r4, #21
 80086a4:	42a6      	cmp	r6, r4
 80086a6:	bf38      	it	cc
 80086a8:	2304      	movcc	r3, #4
 80086aa:	441d      	add	r5, r3
 80086ac:	4473      	add	r3, lr
 80086ae:	469e      	mov	lr, r3
 80086b0:	462e      	mov	r6, r5
 80086b2:	4566      	cmp	r6, ip
 80086b4:	d30e      	bcc.n	80086d4 <__mdiff+0xec>
 80086b6:	f10c 0203 	add.w	r2, ip, #3
 80086ba:	1b52      	subs	r2, r2, r5
 80086bc:	f022 0203 	bic.w	r2, r2, #3
 80086c0:	3d03      	subs	r5, #3
 80086c2:	45ac      	cmp	ip, r5
 80086c4:	bf38      	it	cc
 80086c6:	2200      	movcc	r2, #0
 80086c8:	441a      	add	r2, r3
 80086ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086ce:	b17b      	cbz	r3, 80086f0 <__mdiff+0x108>
 80086d0:	6107      	str	r7, [r0, #16]
 80086d2:	e7a3      	b.n	800861c <__mdiff+0x34>
 80086d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80086d8:	fa11 f288 	uxtah	r2, r1, r8
 80086dc:	1414      	asrs	r4, r2, #16
 80086de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086e2:	b292      	uxth	r2, r2
 80086e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086e8:	f84e 2b04 	str.w	r2, [lr], #4
 80086ec:	1421      	asrs	r1, r4, #16
 80086ee:	e7e0      	b.n	80086b2 <__mdiff+0xca>
 80086f0:	3f01      	subs	r7, #1
 80086f2:	e7ea      	b.n	80086ca <__mdiff+0xe2>
 80086f4:	080097b0 	.word	0x080097b0
 80086f8:	080098a0 	.word	0x080098a0

080086fc <__ulp>:
 80086fc:	b082      	sub	sp, #8
 80086fe:	ed8d 0b00 	vstr	d0, [sp]
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	4912      	ldr	r1, [pc, #72]	; (8008750 <__ulp+0x54>)
 8008706:	4019      	ands	r1, r3
 8008708:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800870c:	2900      	cmp	r1, #0
 800870e:	dd05      	ble.n	800871c <__ulp+0x20>
 8008710:	2200      	movs	r2, #0
 8008712:	460b      	mov	r3, r1
 8008714:	ec43 2b10 	vmov	d0, r2, r3
 8008718:	b002      	add	sp, #8
 800871a:	4770      	bx	lr
 800871c:	4249      	negs	r1, r1
 800871e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008722:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	da04      	bge.n	800873a <__ulp+0x3e>
 8008730:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008734:	fa41 f300 	asr.w	r3, r1, r0
 8008738:	e7ec      	b.n	8008714 <__ulp+0x18>
 800873a:	f1a0 0114 	sub.w	r1, r0, #20
 800873e:	291e      	cmp	r1, #30
 8008740:	bfda      	itte	le
 8008742:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008746:	fa20 f101 	lsrle.w	r1, r0, r1
 800874a:	2101      	movgt	r1, #1
 800874c:	460a      	mov	r2, r1
 800874e:	e7e1      	b.n	8008714 <__ulp+0x18>
 8008750:	7ff00000 	.word	0x7ff00000

08008754 <__b2d>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	6905      	ldr	r5, [r0, #16]
 8008758:	f100 0714 	add.w	r7, r0, #20
 800875c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008760:	1f2e      	subs	r6, r5, #4
 8008762:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff fd48 	bl	80081fc <__hi0bits>
 800876c:	f1c0 0320 	rsb	r3, r0, #32
 8008770:	280a      	cmp	r0, #10
 8008772:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80087f0 <__b2d+0x9c>
 8008776:	600b      	str	r3, [r1, #0]
 8008778:	dc14      	bgt.n	80087a4 <__b2d+0x50>
 800877a:	f1c0 0e0b 	rsb	lr, r0, #11
 800877e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008782:	42b7      	cmp	r7, r6
 8008784:	ea41 030c 	orr.w	r3, r1, ip
 8008788:	bf34      	ite	cc
 800878a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800878e:	2100      	movcs	r1, #0
 8008790:	3015      	adds	r0, #21
 8008792:	fa04 f000 	lsl.w	r0, r4, r0
 8008796:	fa21 f10e 	lsr.w	r1, r1, lr
 800879a:	ea40 0201 	orr.w	r2, r0, r1
 800879e:	ec43 2b10 	vmov	d0, r2, r3
 80087a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a4:	42b7      	cmp	r7, r6
 80087a6:	bf3a      	itte	cc
 80087a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80087ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80087b0:	2100      	movcs	r1, #0
 80087b2:	380b      	subs	r0, #11
 80087b4:	d017      	beq.n	80087e6 <__b2d+0x92>
 80087b6:	f1c0 0c20 	rsb	ip, r0, #32
 80087ba:	fa04 f500 	lsl.w	r5, r4, r0
 80087be:	42be      	cmp	r6, r7
 80087c0:	fa21 f40c 	lsr.w	r4, r1, ip
 80087c4:	ea45 0504 	orr.w	r5, r5, r4
 80087c8:	bf8c      	ite	hi
 80087ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80087ce:	2400      	movls	r4, #0
 80087d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80087d4:	fa01 f000 	lsl.w	r0, r1, r0
 80087d8:	fa24 f40c 	lsr.w	r4, r4, ip
 80087dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80087e0:	ea40 0204 	orr.w	r2, r0, r4
 80087e4:	e7db      	b.n	800879e <__b2d+0x4a>
 80087e6:	ea44 030c 	orr.w	r3, r4, ip
 80087ea:	460a      	mov	r2, r1
 80087ec:	e7d7      	b.n	800879e <__b2d+0x4a>
 80087ee:	bf00      	nop
 80087f0:	3ff00000 	.word	0x3ff00000

080087f4 <__d2b>:
 80087f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	4689      	mov	r9, r1
 80087fa:	2101      	movs	r1, #1
 80087fc:	ec57 6b10 	vmov	r6, r7, d0
 8008800:	4690      	mov	r8, r2
 8008802:	f7ff fc09 	bl	8008018 <_Balloc>
 8008806:	4604      	mov	r4, r0
 8008808:	b930      	cbnz	r0, 8008818 <__d2b+0x24>
 800880a:	4602      	mov	r2, r0
 800880c:	4b25      	ldr	r3, [pc, #148]	; (80088a4 <__d2b+0xb0>)
 800880e:	4826      	ldr	r0, [pc, #152]	; (80088a8 <__d2b+0xb4>)
 8008810:	f240 310a 	movw	r1, #778	; 0x30a
 8008814:	f000 fcfe 	bl	8009214 <__assert_func>
 8008818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800881c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008820:	bb35      	cbnz	r5, 8008870 <__d2b+0x7c>
 8008822:	2e00      	cmp	r6, #0
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	d028      	beq.n	800887a <__d2b+0x86>
 8008828:	4668      	mov	r0, sp
 800882a:	9600      	str	r6, [sp, #0]
 800882c:	f7ff fd06 	bl	800823c <__lo0bits>
 8008830:	9900      	ldr	r1, [sp, #0]
 8008832:	b300      	cbz	r0, 8008876 <__d2b+0x82>
 8008834:	9a01      	ldr	r2, [sp, #4]
 8008836:	f1c0 0320 	rsb	r3, r0, #32
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	430b      	orrs	r3, r1
 8008840:	40c2      	lsrs	r2, r0
 8008842:	6163      	str	r3, [r4, #20]
 8008844:	9201      	str	r2, [sp, #4]
 8008846:	9b01      	ldr	r3, [sp, #4]
 8008848:	61a3      	str	r3, [r4, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	bf14      	ite	ne
 800884e:	2202      	movne	r2, #2
 8008850:	2201      	moveq	r2, #1
 8008852:	6122      	str	r2, [r4, #16]
 8008854:	b1d5      	cbz	r5, 800888c <__d2b+0x98>
 8008856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800885a:	4405      	add	r5, r0
 800885c:	f8c9 5000 	str.w	r5, [r9]
 8008860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008864:	f8c8 0000 	str.w	r0, [r8]
 8008868:	4620      	mov	r0, r4
 800886a:	b003      	add	sp, #12
 800886c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008874:	e7d5      	b.n	8008822 <__d2b+0x2e>
 8008876:	6161      	str	r1, [r4, #20]
 8008878:	e7e5      	b.n	8008846 <__d2b+0x52>
 800887a:	a801      	add	r0, sp, #4
 800887c:	f7ff fcde 	bl	800823c <__lo0bits>
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	6163      	str	r3, [r4, #20]
 8008884:	2201      	movs	r2, #1
 8008886:	6122      	str	r2, [r4, #16]
 8008888:	3020      	adds	r0, #32
 800888a:	e7e3      	b.n	8008854 <__d2b+0x60>
 800888c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008894:	f8c9 0000 	str.w	r0, [r9]
 8008898:	6918      	ldr	r0, [r3, #16]
 800889a:	f7ff fcaf 	bl	80081fc <__hi0bits>
 800889e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088a2:	e7df      	b.n	8008864 <__d2b+0x70>
 80088a4:	080097b0 	.word	0x080097b0
 80088a8:	080098a0 	.word	0x080098a0

080088ac <__ratio>:
 80088ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	4688      	mov	r8, r1
 80088b2:	4669      	mov	r1, sp
 80088b4:	4681      	mov	r9, r0
 80088b6:	f7ff ff4d 	bl	8008754 <__b2d>
 80088ba:	a901      	add	r1, sp, #4
 80088bc:	4640      	mov	r0, r8
 80088be:	ec55 4b10 	vmov	r4, r5, d0
 80088c2:	f7ff ff47 	bl	8008754 <__b2d>
 80088c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088ce:	eba3 0c02 	sub.w	ip, r3, r2
 80088d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80088dc:	ec51 0b10 	vmov	r0, r1, d0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bfd6      	itet	le
 80088e4:	460a      	movle	r2, r1
 80088e6:	462a      	movgt	r2, r5
 80088e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088ec:	468b      	mov	fp, r1
 80088ee:	462f      	mov	r7, r5
 80088f0:	bfd4      	ite	le
 80088f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80088f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80088fa:	4620      	mov	r0, r4
 80088fc:	ee10 2a10 	vmov	r2, s0
 8008900:	465b      	mov	r3, fp
 8008902:	4639      	mov	r1, r7
 8008904:	f7f7 ffb2 	bl	800086c <__aeabi_ddiv>
 8008908:	ec41 0b10 	vmov	d0, r0, r1
 800890c:	b003      	add	sp, #12
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008912 <__copybits>:
 8008912:	3901      	subs	r1, #1
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	1149      	asrs	r1, r1, #5
 8008918:	6914      	ldr	r4, [r2, #16]
 800891a:	3101      	adds	r1, #1
 800891c:	f102 0314 	add.w	r3, r2, #20
 8008920:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008928:	1f05      	subs	r5, r0, #4
 800892a:	42a3      	cmp	r3, r4
 800892c:	d30c      	bcc.n	8008948 <__copybits+0x36>
 800892e:	1aa3      	subs	r3, r4, r2
 8008930:	3b11      	subs	r3, #17
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	3211      	adds	r2, #17
 8008938:	42a2      	cmp	r2, r4
 800893a:	bf88      	it	hi
 800893c:	2300      	movhi	r3, #0
 800893e:	4418      	add	r0, r3
 8008940:	2300      	movs	r3, #0
 8008942:	4288      	cmp	r0, r1
 8008944:	d305      	bcc.n	8008952 <__copybits+0x40>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	f853 6b04 	ldr.w	r6, [r3], #4
 800894c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008950:	e7eb      	b.n	800892a <__copybits+0x18>
 8008952:	f840 3b04 	str.w	r3, [r0], #4
 8008956:	e7f4      	b.n	8008942 <__copybits+0x30>

08008958 <__any_on>:
 8008958:	f100 0214 	add.w	r2, r0, #20
 800895c:	6900      	ldr	r0, [r0, #16]
 800895e:	114b      	asrs	r3, r1, #5
 8008960:	4298      	cmp	r0, r3
 8008962:	b510      	push	{r4, lr}
 8008964:	db11      	blt.n	800898a <__any_on+0x32>
 8008966:	dd0a      	ble.n	800897e <__any_on+0x26>
 8008968:	f011 011f 	ands.w	r1, r1, #31
 800896c:	d007      	beq.n	800897e <__any_on+0x26>
 800896e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008972:	fa24 f001 	lsr.w	r0, r4, r1
 8008976:	fa00 f101 	lsl.w	r1, r0, r1
 800897a:	428c      	cmp	r4, r1
 800897c:	d10b      	bne.n	8008996 <__any_on+0x3e>
 800897e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008982:	4293      	cmp	r3, r2
 8008984:	d803      	bhi.n	800898e <__any_on+0x36>
 8008986:	2000      	movs	r0, #0
 8008988:	bd10      	pop	{r4, pc}
 800898a:	4603      	mov	r3, r0
 800898c:	e7f7      	b.n	800897e <__any_on+0x26>
 800898e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008992:	2900      	cmp	r1, #0
 8008994:	d0f5      	beq.n	8008982 <__any_on+0x2a>
 8008996:	2001      	movs	r0, #1
 8008998:	e7f6      	b.n	8008988 <__any_on+0x30>

0800899a <_calloc_r>:
 800899a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899c:	fba1 2402 	umull	r2, r4, r1, r2
 80089a0:	b94c      	cbnz	r4, 80089b6 <_calloc_r+0x1c>
 80089a2:	4611      	mov	r1, r2
 80089a4:	9201      	str	r2, [sp, #4]
 80089a6:	f000 f87b 	bl	8008aa0 <_malloc_r>
 80089aa:	9a01      	ldr	r2, [sp, #4]
 80089ac:	4605      	mov	r5, r0
 80089ae:	b930      	cbnz	r0, 80089be <_calloc_r+0x24>
 80089b0:	4628      	mov	r0, r5
 80089b2:	b003      	add	sp, #12
 80089b4:	bd30      	pop	{r4, r5, pc}
 80089b6:	220c      	movs	r2, #12
 80089b8:	6002      	str	r2, [r0, #0]
 80089ba:	2500      	movs	r5, #0
 80089bc:	e7f8      	b.n	80089b0 <_calloc_r+0x16>
 80089be:	4621      	mov	r1, r4
 80089c0:	f7fc f8ca 	bl	8004b58 <memset>
 80089c4:	e7f4      	b.n	80089b0 <_calloc_r+0x16>
	...

080089c8 <_free_r>:
 80089c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ca:	2900      	cmp	r1, #0
 80089cc:	d044      	beq.n	8008a58 <_free_r+0x90>
 80089ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d2:	9001      	str	r0, [sp, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f1a1 0404 	sub.w	r4, r1, #4
 80089da:	bfb8      	it	lt
 80089dc:	18e4      	addlt	r4, r4, r3
 80089de:	f000 fca7 	bl	8009330 <__malloc_lock>
 80089e2:	4a1e      	ldr	r2, [pc, #120]	; (8008a5c <_free_r+0x94>)
 80089e4:	9801      	ldr	r0, [sp, #4]
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	b933      	cbnz	r3, 80089f8 <_free_r+0x30>
 80089ea:	6063      	str	r3, [r4, #4]
 80089ec:	6014      	str	r4, [r2, #0]
 80089ee:	b003      	add	sp, #12
 80089f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f4:	f000 bca2 	b.w	800933c <__malloc_unlock>
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d908      	bls.n	8008a0e <_free_r+0x46>
 80089fc:	6825      	ldr	r5, [r4, #0]
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	428b      	cmp	r3, r1
 8008a02:	bf01      	itttt	eq
 8008a04:	6819      	ldreq	r1, [r3, #0]
 8008a06:	685b      	ldreq	r3, [r3, #4]
 8008a08:	1949      	addeq	r1, r1, r5
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	e7ed      	b.n	80089ea <_free_r+0x22>
 8008a0e:	461a      	mov	r2, r3
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	b10b      	cbz	r3, 8008a18 <_free_r+0x50>
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d9fa      	bls.n	8008a0e <_free_r+0x46>
 8008a18:	6811      	ldr	r1, [r2, #0]
 8008a1a:	1855      	adds	r5, r2, r1
 8008a1c:	42a5      	cmp	r5, r4
 8008a1e:	d10b      	bne.n	8008a38 <_free_r+0x70>
 8008a20:	6824      	ldr	r4, [r4, #0]
 8008a22:	4421      	add	r1, r4
 8008a24:	1854      	adds	r4, r2, r1
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	6011      	str	r1, [r2, #0]
 8008a2a:	d1e0      	bne.n	80089ee <_free_r+0x26>
 8008a2c:	681c      	ldr	r4, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	6053      	str	r3, [r2, #4]
 8008a32:	4421      	add	r1, r4
 8008a34:	6011      	str	r1, [r2, #0]
 8008a36:	e7da      	b.n	80089ee <_free_r+0x26>
 8008a38:	d902      	bls.n	8008a40 <_free_r+0x78>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	6003      	str	r3, [r0, #0]
 8008a3e:	e7d6      	b.n	80089ee <_free_r+0x26>
 8008a40:	6825      	ldr	r5, [r4, #0]
 8008a42:	1961      	adds	r1, r4, r5
 8008a44:	428b      	cmp	r3, r1
 8008a46:	bf04      	itt	eq
 8008a48:	6819      	ldreq	r1, [r3, #0]
 8008a4a:	685b      	ldreq	r3, [r3, #4]
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	bf04      	itt	eq
 8008a50:	1949      	addeq	r1, r1, r5
 8008a52:	6021      	streq	r1, [r4, #0]
 8008a54:	6054      	str	r4, [r2, #4]
 8008a56:	e7ca      	b.n	80089ee <_free_r+0x26>
 8008a58:	b003      	add	sp, #12
 8008a5a:	bd30      	pop	{r4, r5, pc}
 8008a5c:	2000024c 	.word	0x2000024c

08008a60 <sbrk_aligned>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4e0e      	ldr	r6, [pc, #56]	; (8008a9c <sbrk_aligned+0x3c>)
 8008a64:	460c      	mov	r4, r1
 8008a66:	6831      	ldr	r1, [r6, #0]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	b911      	cbnz	r1, 8008a72 <sbrk_aligned+0x12>
 8008a6c:	f000 fb4c 	bl	8009108 <_sbrk_r>
 8008a70:	6030      	str	r0, [r6, #0]
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 fb47 	bl	8009108 <_sbrk_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d00a      	beq.n	8008a94 <sbrk_aligned+0x34>
 8008a7e:	1cc4      	adds	r4, r0, #3
 8008a80:	f024 0403 	bic.w	r4, r4, #3
 8008a84:	42a0      	cmp	r0, r4
 8008a86:	d007      	beq.n	8008a98 <sbrk_aligned+0x38>
 8008a88:	1a21      	subs	r1, r4, r0
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 fb3c 	bl	8009108 <_sbrk_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	d101      	bne.n	8008a98 <sbrk_aligned+0x38>
 8008a94:	f04f 34ff 	mov.w	r4, #4294967295
 8008a98:	4620      	mov	r0, r4
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	20000250 	.word	0x20000250

08008aa0 <_malloc_r>:
 8008aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa4:	1ccd      	adds	r5, r1, #3
 8008aa6:	f025 0503 	bic.w	r5, r5, #3
 8008aaa:	3508      	adds	r5, #8
 8008aac:	2d0c      	cmp	r5, #12
 8008aae:	bf38      	it	cc
 8008ab0:	250c      	movcc	r5, #12
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	db01      	blt.n	8008abc <_malloc_r+0x1c>
 8008ab8:	42a9      	cmp	r1, r5
 8008aba:	d905      	bls.n	8008ac8 <_malloc_r+0x28>
 8008abc:	230c      	movs	r3, #12
 8008abe:	603b      	str	r3, [r7, #0]
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac8:	4e2e      	ldr	r6, [pc, #184]	; (8008b84 <_malloc_r+0xe4>)
 8008aca:	f000 fc31 	bl	8009330 <__malloc_lock>
 8008ace:	6833      	ldr	r3, [r6, #0]
 8008ad0:	461c      	mov	r4, r3
 8008ad2:	bb34      	cbnz	r4, 8008b22 <_malloc_r+0x82>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f7ff ffc2 	bl	8008a60 <sbrk_aligned>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	4604      	mov	r4, r0
 8008ae0:	d14d      	bne.n	8008b7e <_malloc_r+0xde>
 8008ae2:	6834      	ldr	r4, [r6, #0]
 8008ae4:	4626      	mov	r6, r4
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d140      	bne.n	8008b6c <_malloc_r+0xcc>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	4631      	mov	r1, r6
 8008aee:	4638      	mov	r0, r7
 8008af0:	eb04 0803 	add.w	r8, r4, r3
 8008af4:	f000 fb08 	bl	8009108 <_sbrk_r>
 8008af8:	4580      	cmp	r8, r0
 8008afa:	d13a      	bne.n	8008b72 <_malloc_r+0xd2>
 8008afc:	6821      	ldr	r1, [r4, #0]
 8008afe:	3503      	adds	r5, #3
 8008b00:	1a6d      	subs	r5, r5, r1
 8008b02:	f025 0503 	bic.w	r5, r5, #3
 8008b06:	3508      	adds	r5, #8
 8008b08:	2d0c      	cmp	r5, #12
 8008b0a:	bf38      	it	cc
 8008b0c:	250c      	movcc	r5, #12
 8008b0e:	4629      	mov	r1, r5
 8008b10:	4638      	mov	r0, r7
 8008b12:	f7ff ffa5 	bl	8008a60 <sbrk_aligned>
 8008b16:	3001      	adds	r0, #1
 8008b18:	d02b      	beq.n	8008b72 <_malloc_r+0xd2>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	442b      	add	r3, r5
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	e00e      	b.n	8008b40 <_malloc_r+0xa0>
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	1b52      	subs	r2, r2, r5
 8008b26:	d41e      	bmi.n	8008b66 <_malloc_r+0xc6>
 8008b28:	2a0b      	cmp	r2, #11
 8008b2a:	d916      	bls.n	8008b5a <_malloc_r+0xba>
 8008b2c:	1961      	adds	r1, r4, r5
 8008b2e:	42a3      	cmp	r3, r4
 8008b30:	6025      	str	r5, [r4, #0]
 8008b32:	bf18      	it	ne
 8008b34:	6059      	strne	r1, [r3, #4]
 8008b36:	6863      	ldr	r3, [r4, #4]
 8008b38:	bf08      	it	eq
 8008b3a:	6031      	streq	r1, [r6, #0]
 8008b3c:	5162      	str	r2, [r4, r5]
 8008b3e:	604b      	str	r3, [r1, #4]
 8008b40:	4638      	mov	r0, r7
 8008b42:	f104 060b 	add.w	r6, r4, #11
 8008b46:	f000 fbf9 	bl	800933c <__malloc_unlock>
 8008b4a:	f026 0607 	bic.w	r6, r6, #7
 8008b4e:	1d23      	adds	r3, r4, #4
 8008b50:	1af2      	subs	r2, r6, r3
 8008b52:	d0b6      	beq.n	8008ac2 <_malloc_r+0x22>
 8008b54:	1b9b      	subs	r3, r3, r6
 8008b56:	50a3      	str	r3, [r4, r2]
 8008b58:	e7b3      	b.n	8008ac2 <_malloc_r+0x22>
 8008b5a:	6862      	ldr	r2, [r4, #4]
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	bf0c      	ite	eq
 8008b60:	6032      	streq	r2, [r6, #0]
 8008b62:	605a      	strne	r2, [r3, #4]
 8008b64:	e7ec      	b.n	8008b40 <_malloc_r+0xa0>
 8008b66:	4623      	mov	r3, r4
 8008b68:	6864      	ldr	r4, [r4, #4]
 8008b6a:	e7b2      	b.n	8008ad2 <_malloc_r+0x32>
 8008b6c:	4634      	mov	r4, r6
 8008b6e:	6876      	ldr	r6, [r6, #4]
 8008b70:	e7b9      	b.n	8008ae6 <_malloc_r+0x46>
 8008b72:	230c      	movs	r3, #12
 8008b74:	603b      	str	r3, [r7, #0]
 8008b76:	4638      	mov	r0, r7
 8008b78:	f000 fbe0 	bl	800933c <__malloc_unlock>
 8008b7c:	e7a1      	b.n	8008ac2 <_malloc_r+0x22>
 8008b7e:	6025      	str	r5, [r4, #0]
 8008b80:	e7de      	b.n	8008b40 <_malloc_r+0xa0>
 8008b82:	bf00      	nop
 8008b84:	2000024c 	.word	0x2000024c

08008b88 <__ssputs_r>:
 8008b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	688e      	ldr	r6, [r1, #8]
 8008b8e:	429e      	cmp	r6, r3
 8008b90:	4682      	mov	sl, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	4690      	mov	r8, r2
 8008b96:	461f      	mov	r7, r3
 8008b98:	d838      	bhi.n	8008c0c <__ssputs_r+0x84>
 8008b9a:	898a      	ldrh	r2, [r1, #12]
 8008b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ba0:	d032      	beq.n	8008c08 <__ssputs_r+0x80>
 8008ba2:	6825      	ldr	r5, [r4, #0]
 8008ba4:	6909      	ldr	r1, [r1, #16]
 8008ba6:	eba5 0901 	sub.w	r9, r5, r1
 8008baa:	6965      	ldr	r5, [r4, #20]
 8008bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	444b      	add	r3, r9
 8008bb8:	106d      	asrs	r5, r5, #1
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	bf38      	it	cc
 8008bbe:	461d      	movcc	r5, r3
 8008bc0:	0553      	lsls	r3, r2, #21
 8008bc2:	d531      	bpl.n	8008c28 <__ssputs_r+0xa0>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7ff ff6b 	bl	8008aa0 <_malloc_r>
 8008bca:	4606      	mov	r6, r0
 8008bcc:	b950      	cbnz	r0, 8008be4 <__ssputs_r+0x5c>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	f8ca 3000 	str.w	r3, [sl]
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be4:	6921      	ldr	r1, [r4, #16]
 8008be6:	464a      	mov	r2, r9
 8008be8:	f7ff fa08 	bl	8007ffc <memcpy>
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	6126      	str	r6, [r4, #16]
 8008bfa:	6165      	str	r5, [r4, #20]
 8008bfc:	444e      	add	r6, r9
 8008bfe:	eba5 0509 	sub.w	r5, r5, r9
 8008c02:	6026      	str	r6, [r4, #0]
 8008c04:	60a5      	str	r5, [r4, #8]
 8008c06:	463e      	mov	r6, r7
 8008c08:	42be      	cmp	r6, r7
 8008c0a:	d900      	bls.n	8008c0e <__ssputs_r+0x86>
 8008c0c:	463e      	mov	r6, r7
 8008c0e:	6820      	ldr	r0, [r4, #0]
 8008c10:	4632      	mov	r2, r6
 8008c12:	4641      	mov	r1, r8
 8008c14:	f000 fb72 	bl	80092fc <memmove>
 8008c18:	68a3      	ldr	r3, [r4, #8]
 8008c1a:	1b9b      	subs	r3, r3, r6
 8008c1c:	60a3      	str	r3, [r4, #8]
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	4433      	add	r3, r6
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	2000      	movs	r0, #0
 8008c26:	e7db      	b.n	8008be0 <__ssputs_r+0x58>
 8008c28:	462a      	mov	r2, r5
 8008c2a:	f000 fb8d 	bl	8009348 <_realloc_r>
 8008c2e:	4606      	mov	r6, r0
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1e1      	bne.n	8008bf8 <__ssputs_r+0x70>
 8008c34:	6921      	ldr	r1, [r4, #16]
 8008c36:	4650      	mov	r0, sl
 8008c38:	f7ff fec6 	bl	80089c8 <_free_r>
 8008c3c:	e7c7      	b.n	8008bce <__ssputs_r+0x46>
	...

08008c40 <_svfiprintf_r>:
 8008c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c44:	4698      	mov	r8, r3
 8008c46:	898b      	ldrh	r3, [r1, #12]
 8008c48:	061b      	lsls	r3, r3, #24
 8008c4a:	b09d      	sub	sp, #116	; 0x74
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	4614      	mov	r4, r2
 8008c52:	d50e      	bpl.n	8008c72 <_svfiprintf_r+0x32>
 8008c54:	690b      	ldr	r3, [r1, #16]
 8008c56:	b963      	cbnz	r3, 8008c72 <_svfiprintf_r+0x32>
 8008c58:	2140      	movs	r1, #64	; 0x40
 8008c5a:	f7ff ff21 	bl	8008aa0 <_malloc_r>
 8008c5e:	6028      	str	r0, [r5, #0]
 8008c60:	6128      	str	r0, [r5, #16]
 8008c62:	b920      	cbnz	r0, 8008c6e <_svfiprintf_r+0x2e>
 8008c64:	230c      	movs	r3, #12
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6c:	e0d1      	b.n	8008e12 <_svfiprintf_r+0x1d2>
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	616b      	str	r3, [r5, #20]
 8008c72:	2300      	movs	r3, #0
 8008c74:	9309      	str	r3, [sp, #36]	; 0x24
 8008c76:	2320      	movs	r3, #32
 8008c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c80:	2330      	movs	r3, #48	; 0x30
 8008c82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e2c <_svfiprintf_r+0x1ec>
 8008c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c8a:	f04f 0901 	mov.w	r9, #1
 8008c8e:	4623      	mov	r3, r4
 8008c90:	469a      	mov	sl, r3
 8008c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c96:	b10a      	cbz	r2, 8008c9c <_svfiprintf_r+0x5c>
 8008c98:	2a25      	cmp	r2, #37	; 0x25
 8008c9a:	d1f9      	bne.n	8008c90 <_svfiprintf_r+0x50>
 8008c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca0:	d00b      	beq.n	8008cba <_svfiprintf_r+0x7a>
 8008ca2:	465b      	mov	r3, fp
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f7ff ff6d 	bl	8008b88 <__ssputs_r>
 8008cae:	3001      	adds	r0, #1
 8008cb0:	f000 80aa 	beq.w	8008e08 <_svfiprintf_r+0x1c8>
 8008cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb6:	445a      	add	r2, fp
 8008cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cba:	f89a 3000 	ldrb.w	r3, [sl]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 80a2 	beq.w	8008e08 <_svfiprintf_r+0x1c8>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cce:	f10a 0a01 	add.w	sl, sl, #1
 8008cd2:	9304      	str	r3, [sp, #16]
 8008cd4:	9307      	str	r3, [sp, #28]
 8008cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cda:	931a      	str	r3, [sp, #104]	; 0x68
 8008cdc:	4654      	mov	r4, sl
 8008cde:	2205      	movs	r2, #5
 8008ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce4:	4851      	ldr	r0, [pc, #324]	; (8008e2c <_svfiprintf_r+0x1ec>)
 8008ce6:	f7f7 fa8b 	bl	8000200 <memchr>
 8008cea:	9a04      	ldr	r2, [sp, #16]
 8008cec:	b9d8      	cbnz	r0, 8008d26 <_svfiprintf_r+0xe6>
 8008cee:	06d0      	lsls	r0, r2, #27
 8008cf0:	bf44      	itt	mi
 8008cf2:	2320      	movmi	r3, #32
 8008cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf8:	0711      	lsls	r1, r2, #28
 8008cfa:	bf44      	itt	mi
 8008cfc:	232b      	movmi	r3, #43	; 0x2b
 8008cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d02:	f89a 3000 	ldrb.w	r3, [sl]
 8008d06:	2b2a      	cmp	r3, #42	; 0x2a
 8008d08:	d015      	beq.n	8008d36 <_svfiprintf_r+0xf6>
 8008d0a:	9a07      	ldr	r2, [sp, #28]
 8008d0c:	4654      	mov	r4, sl
 8008d0e:	2000      	movs	r0, #0
 8008d10:	f04f 0c0a 	mov.w	ip, #10
 8008d14:	4621      	mov	r1, r4
 8008d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d1a:	3b30      	subs	r3, #48	; 0x30
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	d94e      	bls.n	8008dbe <_svfiprintf_r+0x17e>
 8008d20:	b1b0      	cbz	r0, 8008d50 <_svfiprintf_r+0x110>
 8008d22:	9207      	str	r2, [sp, #28]
 8008d24:	e014      	b.n	8008d50 <_svfiprintf_r+0x110>
 8008d26:	eba0 0308 	sub.w	r3, r0, r8
 8008d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	46a2      	mov	sl, r4
 8008d34:	e7d2      	b.n	8008cdc <_svfiprintf_r+0x9c>
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	1d19      	adds	r1, r3, #4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	9103      	str	r1, [sp, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	bfbb      	ittet	lt
 8008d42:	425b      	neglt	r3, r3
 8008d44:	f042 0202 	orrlt.w	r2, r2, #2
 8008d48:	9307      	strge	r3, [sp, #28]
 8008d4a:	9307      	strlt	r3, [sp, #28]
 8008d4c:	bfb8      	it	lt
 8008d4e:	9204      	strlt	r2, [sp, #16]
 8008d50:	7823      	ldrb	r3, [r4, #0]
 8008d52:	2b2e      	cmp	r3, #46	; 0x2e
 8008d54:	d10c      	bne.n	8008d70 <_svfiprintf_r+0x130>
 8008d56:	7863      	ldrb	r3, [r4, #1]
 8008d58:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5a:	d135      	bne.n	8008dc8 <_svfiprintf_r+0x188>
 8008d5c:	9b03      	ldr	r3, [sp, #12]
 8008d5e:	1d1a      	adds	r2, r3, #4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	9203      	str	r2, [sp, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bfb8      	it	lt
 8008d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d6c:	3402      	adds	r4, #2
 8008d6e:	9305      	str	r3, [sp, #20]
 8008d70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e3c <_svfiprintf_r+0x1fc>
 8008d74:	7821      	ldrb	r1, [r4, #0]
 8008d76:	2203      	movs	r2, #3
 8008d78:	4650      	mov	r0, sl
 8008d7a:	f7f7 fa41 	bl	8000200 <memchr>
 8008d7e:	b140      	cbz	r0, 8008d92 <_svfiprintf_r+0x152>
 8008d80:	2340      	movs	r3, #64	; 0x40
 8008d82:	eba0 000a 	sub.w	r0, r0, sl
 8008d86:	fa03 f000 	lsl.w	r0, r3, r0
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	4303      	orrs	r3, r0
 8008d8e:	3401      	adds	r4, #1
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d96:	4826      	ldr	r0, [pc, #152]	; (8008e30 <_svfiprintf_r+0x1f0>)
 8008d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d9c:	2206      	movs	r2, #6
 8008d9e:	f7f7 fa2f 	bl	8000200 <memchr>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d038      	beq.n	8008e18 <_svfiprintf_r+0x1d8>
 8008da6:	4b23      	ldr	r3, [pc, #140]	; (8008e34 <_svfiprintf_r+0x1f4>)
 8008da8:	bb1b      	cbnz	r3, 8008df2 <_svfiprintf_r+0x1b2>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	3307      	adds	r3, #7
 8008dae:	f023 0307 	bic.w	r3, r3, #7
 8008db2:	3308      	adds	r3, #8
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	4433      	add	r3, r6
 8008dba:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbc:	e767      	b.n	8008c8e <_svfiprintf_r+0x4e>
 8008dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	2001      	movs	r0, #1
 8008dc6:	e7a5      	b.n	8008d14 <_svfiprintf_r+0xd4>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	3401      	adds	r4, #1
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	f04f 0c0a 	mov.w	ip, #10
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dda:	3a30      	subs	r2, #48	; 0x30
 8008ddc:	2a09      	cmp	r2, #9
 8008dde:	d903      	bls.n	8008de8 <_svfiprintf_r+0x1a8>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0c5      	beq.n	8008d70 <_svfiprintf_r+0x130>
 8008de4:	9105      	str	r1, [sp, #20]
 8008de6:	e7c3      	b.n	8008d70 <_svfiprintf_r+0x130>
 8008de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dec:	4604      	mov	r4, r0
 8008dee:	2301      	movs	r3, #1
 8008df0:	e7f0      	b.n	8008dd4 <_svfiprintf_r+0x194>
 8008df2:	ab03      	add	r3, sp, #12
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	462a      	mov	r2, r5
 8008df8:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <_svfiprintf_r+0x1f8>)
 8008dfa:	a904      	add	r1, sp, #16
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7fb ff53 	bl	8004ca8 <_printf_float>
 8008e02:	1c42      	adds	r2, r0, #1
 8008e04:	4606      	mov	r6, r0
 8008e06:	d1d6      	bne.n	8008db6 <_svfiprintf_r+0x176>
 8008e08:	89ab      	ldrh	r3, [r5, #12]
 8008e0a:	065b      	lsls	r3, r3, #25
 8008e0c:	f53f af2c 	bmi.w	8008c68 <_svfiprintf_r+0x28>
 8008e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e12:	b01d      	add	sp, #116	; 0x74
 8008e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e18:	ab03      	add	r3, sp, #12
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	462a      	mov	r2, r5
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <_svfiprintf_r+0x1f8>)
 8008e20:	a904      	add	r1, sp, #16
 8008e22:	4638      	mov	r0, r7
 8008e24:	f7fc f9e4 	bl	80051f0 <_printf_i>
 8008e28:	e7eb      	b.n	8008e02 <_svfiprintf_r+0x1c2>
 8008e2a:	bf00      	nop
 8008e2c:	080099fc 	.word	0x080099fc
 8008e30:	08009a06 	.word	0x08009a06
 8008e34:	08004ca9 	.word	0x08004ca9
 8008e38:	08008b89 	.word	0x08008b89
 8008e3c:	08009a02 	.word	0x08009a02

08008e40 <__sfputc_r>:
 8008e40:	6893      	ldr	r3, [r2, #8]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	b410      	push	{r4}
 8008e48:	6093      	str	r3, [r2, #8]
 8008e4a:	da08      	bge.n	8008e5e <__sfputc_r+0x1e>
 8008e4c:	6994      	ldr	r4, [r2, #24]
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	db01      	blt.n	8008e56 <__sfputc_r+0x16>
 8008e52:	290a      	cmp	r1, #10
 8008e54:	d103      	bne.n	8008e5e <__sfputc_r+0x1e>
 8008e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5a:	f7fd bbe9 	b.w	8006630 <__swbuf_r>
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	1c58      	adds	r0, r3, #1
 8008e62:	6010      	str	r0, [r2, #0]
 8008e64:	7019      	strb	r1, [r3, #0]
 8008e66:	4608      	mov	r0, r1
 8008e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <__sfputs_r>:
 8008e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e70:	4606      	mov	r6, r0
 8008e72:	460f      	mov	r7, r1
 8008e74:	4614      	mov	r4, r2
 8008e76:	18d5      	adds	r5, r2, r3
 8008e78:	42ac      	cmp	r4, r5
 8008e7a:	d101      	bne.n	8008e80 <__sfputs_r+0x12>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e007      	b.n	8008e90 <__sfputs_r+0x22>
 8008e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e84:	463a      	mov	r2, r7
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ffda 	bl	8008e40 <__sfputc_r>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d1f3      	bne.n	8008e78 <__sfputs_r+0xa>
 8008e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e94 <_vfiprintf_r>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	460d      	mov	r5, r1
 8008e9a:	b09d      	sub	sp, #116	; 0x74
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	4698      	mov	r8, r3
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	b118      	cbz	r0, 8008eac <_vfiprintf_r+0x18>
 8008ea4:	6983      	ldr	r3, [r0, #24]
 8008ea6:	b90b      	cbnz	r3, 8008eac <_vfiprintf_r+0x18>
 8008ea8:	f7fe fc16 	bl	80076d8 <__sinit>
 8008eac:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <_vfiprintf_r+0x240>)
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	d11b      	bne.n	8008eea <_vfiprintf_r+0x56>
 8008eb2:	6875      	ldr	r5, [r6, #4]
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7ff f81a 	bl	8007efa <__retarget_lock_acquire_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	071b      	lsls	r3, r3, #28
 8008eca:	d501      	bpl.n	8008ed0 <_vfiprintf_r+0x3c>
 8008ecc:	692b      	ldr	r3, [r5, #16]
 8008ece:	b9eb      	cbnz	r3, 8008f0c <_vfiprintf_r+0x78>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7fd fbfe 	bl	80066d4 <__swsetup_r>
 8008ed8:	b1c0      	cbz	r0, 8008f0c <_vfiprintf_r+0x78>
 8008eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008edc:	07dc      	lsls	r4, r3, #31
 8008ede:	d50e      	bpl.n	8008efe <_vfiprintf_r+0x6a>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b01d      	add	sp, #116	; 0x74
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	4b7b      	ldr	r3, [pc, #492]	; (80090d8 <_vfiprintf_r+0x244>)
 8008eec:	429d      	cmp	r5, r3
 8008eee:	d101      	bne.n	8008ef4 <_vfiprintf_r+0x60>
 8008ef0:	68b5      	ldr	r5, [r6, #8]
 8008ef2:	e7df      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008ef4:	4b79      	ldr	r3, [pc, #484]	; (80090dc <_vfiprintf_r+0x248>)
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	bf08      	it	eq
 8008efa:	68f5      	ldreq	r5, [r6, #12]
 8008efc:	e7da      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	0598      	lsls	r0, r3, #22
 8008f02:	d4ed      	bmi.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f06:	f7fe fff9 	bl	8007efc <__retarget_lock_release_recursive>
 8008f0a:	e7e9      	b.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f10:	2320      	movs	r3, #32
 8008f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1a:	2330      	movs	r3, #48	; 0x30
 8008f1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090e0 <_vfiprintf_r+0x24c>
 8008f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f24:	f04f 0901 	mov.w	r9, #1
 8008f28:	4623      	mov	r3, r4
 8008f2a:	469a      	mov	sl, r3
 8008f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f30:	b10a      	cbz	r2, 8008f36 <_vfiprintf_r+0xa2>
 8008f32:	2a25      	cmp	r2, #37	; 0x25
 8008f34:	d1f9      	bne.n	8008f2a <_vfiprintf_r+0x96>
 8008f36:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3a:	d00b      	beq.n	8008f54 <_vfiprintf_r+0xc0>
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	4622      	mov	r2, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ff93 	bl	8008e6e <__sfputs_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f000 80aa 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	445a      	add	r2, fp
 8008f52:	9209      	str	r2, [sp, #36]	; 0x24
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80a2 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f74:	931a      	str	r3, [sp, #104]	; 0x68
 8008f76:	4654      	mov	r4, sl
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	4858      	ldr	r0, [pc, #352]	; (80090e0 <_vfiprintf_r+0x24c>)
 8008f80:	f7f7 f93e 	bl	8000200 <memchr>
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	b9d8      	cbnz	r0, 8008fc0 <_vfiprintf_r+0x12c>
 8008f88:	06d1      	lsls	r1, r2, #27
 8008f8a:	bf44      	itt	mi
 8008f8c:	2320      	movmi	r3, #32
 8008f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f92:	0713      	lsls	r3, r2, #28
 8008f94:	bf44      	itt	mi
 8008f96:	232b      	movmi	r3, #43	; 0x2b
 8008f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d015      	beq.n	8008fd0 <_vfiprintf_r+0x13c>
 8008fa4:	9a07      	ldr	r2, [sp, #28]
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f04f 0c0a 	mov.w	ip, #10
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb4:	3b30      	subs	r3, #48	; 0x30
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d94e      	bls.n	8009058 <_vfiprintf_r+0x1c4>
 8008fba:	b1b0      	cbz	r0, 8008fea <_vfiprintf_r+0x156>
 8008fbc:	9207      	str	r2, [sp, #28]
 8008fbe:	e014      	b.n	8008fea <_vfiprintf_r+0x156>
 8008fc0:	eba0 0308 	sub.w	r3, r0, r8
 8008fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	46a2      	mov	sl, r4
 8008fce:	e7d2      	b.n	8008f76 <_vfiprintf_r+0xe2>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	1d19      	adds	r1, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	9103      	str	r1, [sp, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbb      	ittet	lt
 8008fdc:	425b      	neglt	r3, r3
 8008fde:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe2:	9307      	strge	r3, [sp, #28]
 8008fe4:	9307      	strlt	r3, [sp, #28]
 8008fe6:	bfb8      	it	lt
 8008fe8:	9204      	strlt	r2, [sp, #16]
 8008fea:	7823      	ldrb	r3, [r4, #0]
 8008fec:	2b2e      	cmp	r3, #46	; 0x2e
 8008fee:	d10c      	bne.n	800900a <_vfiprintf_r+0x176>
 8008ff0:	7863      	ldrb	r3, [r4, #1]
 8008ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff4:	d135      	bne.n	8009062 <_vfiprintf_r+0x1ce>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d1a      	adds	r2, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9203      	str	r2, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfb8      	it	lt
 8009002:	f04f 33ff 	movlt.w	r3, #4294967295
 8009006:	3402      	adds	r4, #2
 8009008:	9305      	str	r3, [sp, #20]
 800900a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090f0 <_vfiprintf_r+0x25c>
 800900e:	7821      	ldrb	r1, [r4, #0]
 8009010:	2203      	movs	r2, #3
 8009012:	4650      	mov	r0, sl
 8009014:	f7f7 f8f4 	bl	8000200 <memchr>
 8009018:	b140      	cbz	r0, 800902c <_vfiprintf_r+0x198>
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	eba0 000a 	sub.w	r0, r0, sl
 8009020:	fa03 f000 	lsl.w	r0, r3, r0
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	4303      	orrs	r3, r0
 8009028:	3401      	adds	r4, #1
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009030:	482c      	ldr	r0, [pc, #176]	; (80090e4 <_vfiprintf_r+0x250>)
 8009032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009036:	2206      	movs	r2, #6
 8009038:	f7f7 f8e2 	bl	8000200 <memchr>
 800903c:	2800      	cmp	r0, #0
 800903e:	d03f      	beq.n	80090c0 <_vfiprintf_r+0x22c>
 8009040:	4b29      	ldr	r3, [pc, #164]	; (80090e8 <_vfiprintf_r+0x254>)
 8009042:	bb1b      	cbnz	r3, 800908c <_vfiprintf_r+0x1f8>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	3307      	adds	r3, #7
 8009048:	f023 0307 	bic.w	r3, r3, #7
 800904c:	3308      	adds	r3, #8
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	443b      	add	r3, r7
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	e767      	b.n	8008f28 <_vfiprintf_r+0x94>
 8009058:	fb0c 3202 	mla	r2, ip, r2, r3
 800905c:	460c      	mov	r4, r1
 800905e:	2001      	movs	r0, #1
 8009060:	e7a5      	b.n	8008fae <_vfiprintf_r+0x11a>
 8009062:	2300      	movs	r3, #0
 8009064:	3401      	adds	r4, #1
 8009066:	9305      	str	r3, [sp, #20]
 8009068:	4619      	mov	r1, r3
 800906a:	f04f 0c0a 	mov.w	ip, #10
 800906e:	4620      	mov	r0, r4
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	3a30      	subs	r2, #48	; 0x30
 8009076:	2a09      	cmp	r2, #9
 8009078:	d903      	bls.n	8009082 <_vfiprintf_r+0x1ee>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c5      	beq.n	800900a <_vfiprintf_r+0x176>
 800907e:	9105      	str	r1, [sp, #20]
 8009080:	e7c3      	b.n	800900a <_vfiprintf_r+0x176>
 8009082:	fb0c 2101 	mla	r1, ip, r1, r2
 8009086:	4604      	mov	r4, r0
 8009088:	2301      	movs	r3, #1
 800908a:	e7f0      	b.n	800906e <_vfiprintf_r+0x1da>
 800908c:	ab03      	add	r3, sp, #12
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462a      	mov	r2, r5
 8009092:	4b16      	ldr	r3, [pc, #88]	; (80090ec <_vfiprintf_r+0x258>)
 8009094:	a904      	add	r1, sp, #16
 8009096:	4630      	mov	r0, r6
 8009098:	f7fb fe06 	bl	8004ca8 <_printf_float>
 800909c:	4607      	mov	r7, r0
 800909e:	1c78      	adds	r0, r7, #1
 80090a0:	d1d6      	bne.n	8009050 <_vfiprintf_r+0x1bc>
 80090a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a4:	07d9      	lsls	r1, r3, #31
 80090a6:	d405      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090a8:	89ab      	ldrh	r3, [r5, #12]
 80090aa:	059a      	lsls	r2, r3, #22
 80090ac:	d402      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b0:	f7fe ff24 	bl	8007efc <__retarget_lock_release_recursive>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	f53f af12 	bmi.w	8008ee0 <_vfiprintf_r+0x4c>
 80090bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090be:	e711      	b.n	8008ee4 <_vfiprintf_r+0x50>
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <_vfiprintf_r+0x258>)
 80090c8:	a904      	add	r1, sp, #16
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7fc f890 	bl	80051f0 <_printf_i>
 80090d0:	e7e4      	b.n	800909c <_vfiprintf_r+0x208>
 80090d2:	bf00      	nop
 80090d4:	080097e4 	.word	0x080097e4
 80090d8:	08009804 	.word	0x08009804
 80090dc:	080097c4 	.word	0x080097c4
 80090e0:	080099fc 	.word	0x080099fc
 80090e4:	08009a06 	.word	0x08009a06
 80090e8:	08004ca9 	.word	0x08004ca9
 80090ec:	08008e6f 	.word	0x08008e6f
 80090f0:	08009a02 	.word	0x08009a02
 80090f4:	00000000 	.word	0x00000000

080090f8 <nan>:
 80090f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009100 <nan+0x8>
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	00000000 	.word	0x00000000
 8009104:	7ff80000 	.word	0x7ff80000

08009108 <_sbrk_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d06      	ldr	r5, [pc, #24]	; (8009124 <_sbrk_r+0x1c>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	602b      	str	r3, [r5, #0]
 8009114:	f7f8 ffe0 	bl	80020d8 <_sbrk>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_sbrk_r+0x1a>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_sbrk_r+0x1a>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	20000254 	.word	0x20000254

08009128 <__sread>:
 8009128:	b510      	push	{r4, lr}
 800912a:	460c      	mov	r4, r1
 800912c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009130:	f000 f93a 	bl	80093a8 <_read_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	bfab      	itete	ge
 8009138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800913a:	89a3      	ldrhlt	r3, [r4, #12]
 800913c:	181b      	addge	r3, r3, r0
 800913e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009142:	bfac      	ite	ge
 8009144:	6563      	strge	r3, [r4, #84]	; 0x54
 8009146:	81a3      	strhlt	r3, [r4, #12]
 8009148:	bd10      	pop	{r4, pc}

0800914a <__swrite>:
 800914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	461f      	mov	r7, r3
 8009150:	898b      	ldrh	r3, [r1, #12]
 8009152:	05db      	lsls	r3, r3, #23
 8009154:	4605      	mov	r5, r0
 8009156:	460c      	mov	r4, r1
 8009158:	4616      	mov	r6, r2
 800915a:	d505      	bpl.n	8009168 <__swrite+0x1e>
 800915c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009160:	2302      	movs	r3, #2
 8009162:	2200      	movs	r2, #0
 8009164:	f000 f8b8 	bl	80092d8 <_lseek_r>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	4632      	mov	r2, r6
 8009176:	463b      	mov	r3, r7
 8009178:	4628      	mov	r0, r5
 800917a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800917e:	f000 b837 	b.w	80091f0 <_write_r>

08009182 <__sseek>:
 8009182:	b510      	push	{r4, lr}
 8009184:	460c      	mov	r4, r1
 8009186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918a:	f000 f8a5 	bl	80092d8 <_lseek_r>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	bf15      	itete	ne
 8009194:	6560      	strne	r0, [r4, #84]	; 0x54
 8009196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800919a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800919e:	81a3      	strheq	r3, [r4, #12]
 80091a0:	bf18      	it	ne
 80091a2:	81a3      	strhne	r3, [r4, #12]
 80091a4:	bd10      	pop	{r4, pc}

080091a6 <__sclose>:
 80091a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091aa:	f000 b851 	b.w	8009250 <_close_r>

080091ae <strncmp>:
 80091ae:	b510      	push	{r4, lr}
 80091b0:	b17a      	cbz	r2, 80091d2 <strncmp+0x24>
 80091b2:	4603      	mov	r3, r0
 80091b4:	3901      	subs	r1, #1
 80091b6:	1884      	adds	r4, r0, r2
 80091b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80091bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80091c0:	4290      	cmp	r0, r2
 80091c2:	d101      	bne.n	80091c8 <strncmp+0x1a>
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	d101      	bne.n	80091cc <strncmp+0x1e>
 80091c8:	1a80      	subs	r0, r0, r2
 80091ca:	bd10      	pop	{r4, pc}
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d1f3      	bne.n	80091b8 <strncmp+0xa>
 80091d0:	e7fa      	b.n	80091c8 <strncmp+0x1a>
 80091d2:	4610      	mov	r0, r2
 80091d4:	e7f9      	b.n	80091ca <strncmp+0x1c>

080091d6 <__ascii_wctomb>:
 80091d6:	b149      	cbz	r1, 80091ec <__ascii_wctomb+0x16>
 80091d8:	2aff      	cmp	r2, #255	; 0xff
 80091da:	bf85      	ittet	hi
 80091dc:	238a      	movhi	r3, #138	; 0x8a
 80091de:	6003      	strhi	r3, [r0, #0]
 80091e0:	700a      	strbls	r2, [r1, #0]
 80091e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80091e6:	bf98      	it	ls
 80091e8:	2001      	movls	r0, #1
 80091ea:	4770      	bx	lr
 80091ec:	4608      	mov	r0, r1
 80091ee:	4770      	bx	lr

080091f0 <_write_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d07      	ldr	r5, [pc, #28]	; (8009210 <_write_r+0x20>)
 80091f4:	4604      	mov	r4, r0
 80091f6:	4608      	mov	r0, r1
 80091f8:	4611      	mov	r1, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	602a      	str	r2, [r5, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	f7f8 fd02 	bl	8001c08 <_write>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_write_r+0x1e>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_write_r+0x1e>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20000254 	.word	0x20000254

08009214 <__assert_func>:
 8009214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009216:	4614      	mov	r4, r2
 8009218:	461a      	mov	r2, r3
 800921a:	4b09      	ldr	r3, [pc, #36]	; (8009240 <__assert_func+0x2c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4605      	mov	r5, r0
 8009220:	68d8      	ldr	r0, [r3, #12]
 8009222:	b14c      	cbz	r4, 8009238 <__assert_func+0x24>
 8009224:	4b07      	ldr	r3, [pc, #28]	; (8009244 <__assert_func+0x30>)
 8009226:	9100      	str	r1, [sp, #0]
 8009228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800922c:	4906      	ldr	r1, [pc, #24]	; (8009248 <__assert_func+0x34>)
 800922e:	462b      	mov	r3, r5
 8009230:	f000 f81e 	bl	8009270 <fiprintf>
 8009234:	f000 f8ca 	bl	80093cc <abort>
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <__assert_func+0x38>)
 800923a:	461c      	mov	r4, r3
 800923c:	e7f3      	b.n	8009226 <__assert_func+0x12>
 800923e:	bf00      	nop
 8009240:	2000000c 	.word	0x2000000c
 8009244:	08009a0d 	.word	0x08009a0d
 8009248:	08009a1a 	.word	0x08009a1a
 800924c:	08009a48 	.word	0x08009a48

08009250 <_close_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_close_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7f8 ff07 	bl	800206e <_close>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_close_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_close_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20000254 	.word	0x20000254

08009270 <fiprintf>:
 8009270:	b40e      	push	{r1, r2, r3}
 8009272:	b503      	push	{r0, r1, lr}
 8009274:	4601      	mov	r1, r0
 8009276:	ab03      	add	r3, sp, #12
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <fiprintf+0x20>)
 800927a:	f853 2b04 	ldr.w	r2, [r3], #4
 800927e:	6800      	ldr	r0, [r0, #0]
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	f7ff fe07 	bl	8008e94 <_vfiprintf_r>
 8009286:	b002      	add	sp, #8
 8009288:	f85d eb04 	ldr.w	lr, [sp], #4
 800928c:	b003      	add	sp, #12
 800928e:	4770      	bx	lr
 8009290:	2000000c 	.word	0x2000000c

08009294 <_fstat_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4d07      	ldr	r5, [pc, #28]	; (80092b4 <_fstat_r+0x20>)
 8009298:	2300      	movs	r3, #0
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	4611      	mov	r1, r2
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	f7f8 fef0 	bl	8002086 <_fstat>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	d102      	bne.n	80092b0 <_fstat_r+0x1c>
 80092aa:	682b      	ldr	r3, [r5, #0]
 80092ac:	b103      	cbz	r3, 80092b0 <_fstat_r+0x1c>
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	bd38      	pop	{r3, r4, r5, pc}
 80092b2:	bf00      	nop
 80092b4:	20000254 	.word	0x20000254

080092b8 <_isatty_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d06      	ldr	r5, [pc, #24]	; (80092d4 <_isatty_r+0x1c>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7f8 feef 	bl	80020a6 <_isatty>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_isatty_r+0x1a>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_isatty_r+0x1a>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	20000254 	.word	0x20000254

080092d8 <_lseek_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_lseek_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f8 fee8 	bl	80020bc <_lseek>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_lseek_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_lseek_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000254 	.word	0x20000254

080092fc <memmove>:
 80092fc:	4288      	cmp	r0, r1
 80092fe:	b510      	push	{r4, lr}
 8009300:	eb01 0402 	add.w	r4, r1, r2
 8009304:	d902      	bls.n	800930c <memmove+0x10>
 8009306:	4284      	cmp	r4, r0
 8009308:	4623      	mov	r3, r4
 800930a:	d807      	bhi.n	800931c <memmove+0x20>
 800930c:	1e43      	subs	r3, r0, #1
 800930e:	42a1      	cmp	r1, r4
 8009310:	d008      	beq.n	8009324 <memmove+0x28>
 8009312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800931a:	e7f8      	b.n	800930e <memmove+0x12>
 800931c:	4402      	add	r2, r0
 800931e:	4601      	mov	r1, r0
 8009320:	428a      	cmp	r2, r1
 8009322:	d100      	bne.n	8009326 <memmove+0x2a>
 8009324:	bd10      	pop	{r4, pc}
 8009326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800932a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800932e:	e7f7      	b.n	8009320 <memmove+0x24>

08009330 <__malloc_lock>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__malloc_lock+0x8>)
 8009332:	f7fe bde2 	b.w	8007efa <__retarget_lock_acquire_recursive>
 8009336:	bf00      	nop
 8009338:	20000248 	.word	0x20000248

0800933c <__malloc_unlock>:
 800933c:	4801      	ldr	r0, [pc, #4]	; (8009344 <__malloc_unlock+0x8>)
 800933e:	f7fe bddd 	b.w	8007efc <__retarget_lock_release_recursive>
 8009342:	bf00      	nop
 8009344:	20000248 	.word	0x20000248

08009348 <_realloc_r>:
 8009348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800934c:	4680      	mov	r8, r0
 800934e:	4614      	mov	r4, r2
 8009350:	460e      	mov	r6, r1
 8009352:	b921      	cbnz	r1, 800935e <_realloc_r+0x16>
 8009354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009358:	4611      	mov	r1, r2
 800935a:	f7ff bba1 	b.w	8008aa0 <_malloc_r>
 800935e:	b92a      	cbnz	r2, 800936c <_realloc_r+0x24>
 8009360:	f7ff fb32 	bl	80089c8 <_free_r>
 8009364:	4625      	mov	r5, r4
 8009366:	4628      	mov	r0, r5
 8009368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800936c:	f000 f835 	bl	80093da <_malloc_usable_size_r>
 8009370:	4284      	cmp	r4, r0
 8009372:	4607      	mov	r7, r0
 8009374:	d802      	bhi.n	800937c <_realloc_r+0x34>
 8009376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800937a:	d812      	bhi.n	80093a2 <_realloc_r+0x5a>
 800937c:	4621      	mov	r1, r4
 800937e:	4640      	mov	r0, r8
 8009380:	f7ff fb8e 	bl	8008aa0 <_malloc_r>
 8009384:	4605      	mov	r5, r0
 8009386:	2800      	cmp	r0, #0
 8009388:	d0ed      	beq.n	8009366 <_realloc_r+0x1e>
 800938a:	42bc      	cmp	r4, r7
 800938c:	4622      	mov	r2, r4
 800938e:	4631      	mov	r1, r6
 8009390:	bf28      	it	cs
 8009392:	463a      	movcs	r2, r7
 8009394:	f7fe fe32 	bl	8007ffc <memcpy>
 8009398:	4631      	mov	r1, r6
 800939a:	4640      	mov	r0, r8
 800939c:	f7ff fb14 	bl	80089c8 <_free_r>
 80093a0:	e7e1      	b.n	8009366 <_realloc_r+0x1e>
 80093a2:	4635      	mov	r5, r6
 80093a4:	e7df      	b.n	8009366 <_realloc_r+0x1e>
	...

080093a8 <_read_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d07      	ldr	r5, [pc, #28]	; (80093c8 <_read_r+0x20>)
 80093ac:	4604      	mov	r4, r0
 80093ae:	4608      	mov	r0, r1
 80093b0:	4611      	mov	r1, r2
 80093b2:	2200      	movs	r2, #0
 80093b4:	602a      	str	r2, [r5, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f7f8 fe3c 	bl	8002034 <_read>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_read_r+0x1e>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_read_r+0x1e>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000254 	.word	0x20000254

080093cc <abort>:
 80093cc:	b508      	push	{r3, lr}
 80093ce:	2006      	movs	r0, #6
 80093d0:	f000 f834 	bl	800943c <raise>
 80093d4:	2001      	movs	r0, #1
 80093d6:	f7f8 fe23 	bl	8002020 <_exit>

080093da <_malloc_usable_size_r>:
 80093da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093de:	1f18      	subs	r0, r3, #4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bfbc      	itt	lt
 80093e4:	580b      	ldrlt	r3, [r1, r0]
 80093e6:	18c0      	addlt	r0, r0, r3
 80093e8:	4770      	bx	lr

080093ea <_raise_r>:
 80093ea:	291f      	cmp	r1, #31
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4604      	mov	r4, r0
 80093f0:	460d      	mov	r5, r1
 80093f2:	d904      	bls.n	80093fe <_raise_r+0x14>
 80093f4:	2316      	movs	r3, #22
 80093f6:	6003      	str	r3, [r0, #0]
 80093f8:	f04f 30ff 	mov.w	r0, #4294967295
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009400:	b112      	cbz	r2, 8009408 <_raise_r+0x1e>
 8009402:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009406:	b94b      	cbnz	r3, 800941c <_raise_r+0x32>
 8009408:	4620      	mov	r0, r4
 800940a:	f000 f831 	bl	8009470 <_getpid_r>
 800940e:	462a      	mov	r2, r5
 8009410:	4601      	mov	r1, r0
 8009412:	4620      	mov	r0, r4
 8009414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009418:	f000 b818 	b.w	800944c <_kill_r>
 800941c:	2b01      	cmp	r3, #1
 800941e:	d00a      	beq.n	8009436 <_raise_r+0x4c>
 8009420:	1c59      	adds	r1, r3, #1
 8009422:	d103      	bne.n	800942c <_raise_r+0x42>
 8009424:	2316      	movs	r3, #22
 8009426:	6003      	str	r3, [r0, #0]
 8009428:	2001      	movs	r0, #1
 800942a:	e7e7      	b.n	80093fc <_raise_r+0x12>
 800942c:	2400      	movs	r4, #0
 800942e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009432:	4628      	mov	r0, r5
 8009434:	4798      	blx	r3
 8009436:	2000      	movs	r0, #0
 8009438:	e7e0      	b.n	80093fc <_raise_r+0x12>
	...

0800943c <raise>:
 800943c:	4b02      	ldr	r3, [pc, #8]	; (8009448 <raise+0xc>)
 800943e:	4601      	mov	r1, r0
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	f7ff bfd2 	b.w	80093ea <_raise_r>
 8009446:	bf00      	nop
 8009448:	2000000c 	.word	0x2000000c

0800944c <_kill_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d07      	ldr	r5, [pc, #28]	; (800946c <_kill_r+0x20>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	4611      	mov	r1, r2
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	f7f8 fdd1 	bl	8002000 <_kill>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d102      	bne.n	8009468 <_kill_r+0x1c>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	b103      	cbz	r3, 8009468 <_kill_r+0x1c>
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	bf00      	nop
 800946c:	20000254 	.word	0x20000254

08009470 <_getpid_r>:
 8009470:	f7f8 bdbe 	b.w	8001ff0 <_getpid>

08009474 <_init>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr

08009480 <_fini>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr
