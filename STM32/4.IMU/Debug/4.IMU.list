
4.IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800a0c0  0800a0c0  0001a0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a80c  0800a80c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a814  0800a814  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a814  0800a814  0001a814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a818  0800a818  0001a818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a81c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000016c  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f16b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000301f  00000000  00000000  0002f37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  000323a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  00033508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000295aa  00000000  00000000  000344d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010706  00000000  00000000  0005da82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8b62  00000000  00000000  0006e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156cea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cbc  00000000  00000000  00156d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a0a4 	.word	0x0800a0a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800a0a4 	.word	0x0800a0a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Accel_Writebyte>:

#ifndef SRC_ADXL345_C_
#define SRC_ADXL345_C_

void Accel_Writebyte(ADXL345 * adxl345, uint8_t register_address, uint8_t data)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
    uint8_t Trans[2]={register_address, data};
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	733b      	strb	r3, [r7, #12]
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	737b      	strb	r3, [r7, #13]
    I2C_Transmit(&(adxl345->I2C), adxl345->accel_address, Trans, 2);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7a19      	ldrb	r1, [r3, #8]
 8001036:	f107 020c 	add.w	r2, r7, #12
 800103a:	2302      	movs	r3, #2
 800103c:	f001 f97a 	bl	8002334 <I2C_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Accel_Init>:
    return Receive[0];
}


void Accel_Init(ADXL345* adxl345, I2C_TypeDef* i2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	adxl345->I2C.I2C = i2c;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	601a      	str	r2, [r3, #0]

	printf("Accel_Init address  : 0x%X\r\n", adxl345->accel_address);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7a1b      	ldrb	r3, [r3, #8]
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <Accel_Init+0x4c>)
 8001060:	f005 f99e 	bl	80063a0 <iprintf>

	Accel_Writebyte(adxl345, ADXL345_POWER_CTL, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	212d      	movs	r1, #45	; 0x2d
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffd5 	bl	8001018 <Accel_Writebyte>
	Accel_Writebyte(adxl345, ADXL345_POWER_CTL, 16);
 800106e:	2210      	movs	r2, #16
 8001070:	212d      	movs	r1, #45	; 0x2d
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffd0 	bl	8001018 <Accel_Writebyte>
	Accel_Writebyte(adxl345, ADXL345_DATA_FORMAT, 2);
 8001078:	2202      	movs	r2, #2
 800107a:	2131      	movs	r1, #49	; 0x31
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffcb 	bl	8001018 <Accel_Writebyte>
	Accel_Writebyte(adxl345, ADXL345_POWER_CTL, 8);
 8001082:	2208      	movs	r2, #8
 8001084:	212d      	movs	r1, #45	; 0x2d
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffc6 	bl	8001018 <Accel_Writebyte>

}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	0800a0c0 	.word	0x0800a0c0

08001098 <Read_Accel>:



void Read_Accel(ADXL345* adxl345, AccelData* accelData)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]

    uint8_t Trans[1]={ADXL345_DATAX0};
 80010a2:	2332      	movs	r3, #50	; 0x32
 80010a4:	753b      	strb	r3, [r7, #20]
    uint8_t accel_buf[6];

    I2C_Transmit(&(adxl345->I2C), adxl345->accel_address, Trans, 1);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a19      	ldrb	r1, [r3, #8]
 80010ac:	f107 0214 	add.w	r2, r7, #20
 80010b0:	2301      	movs	r3, #1
 80010b2:	f001 f93f 	bl	8002334 <I2C_Transmit>
    I2C_Receive(&(adxl345->I2C), adxl345->accel_address, accel_buf, sizeof(accel_buf));
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7a19      	ldrb	r1, [r3, #8]
 80010bc:	f107 020c 	add.w	r2, r7, #12
 80010c0:	2306      	movs	r3, #6
 80010c2:	f001 f9c0 	bl	8002446 <I2C_Receive>


    accelData->raw_accel_X = (int16_t)((accel_buf[1]) << 8) | accel_buf[0];
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	809a      	strh	r2, [r3, #4]
    accelData->raw_accel_Y = (int16_t)((accel_buf[3]) << 8) | accel_buf[2];
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	80da      	strh	r2, [r3, #6]
    accelData->raw_accel_Z = (int16_t)((accel_buf[5]) << 8) | accel_buf[4];
 80010ea:	7c7b      	ldrb	r3, [r7, #17]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7c3b      	ldrb	r3, [r7, #16]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	811a      	strh	r2, [r3, #8]

    accelData->scaled_accel_X = accelData->raw_accel_X * accelData->gain_X;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa1e 	bl	8000544 <__aeabi_i2d>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800110e:	f7ff fa83 	bl	8000618 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    accelData->scaled_accel_Y = accelData->raw_accel_Y * accelData->gain_Y;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa0e 	bl	8000544 <__aeabi_i2d>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800112e:	f7ff fa73 	bl	8000618 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    accelData->scaled_accel_Z = accelData->raw_accel_Z * accelData->gain_Z;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9fe 	bl	8000544 <__aeabi_i2d>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800114e:	f7ff fa63 	bl	8000618 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38


}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <Magneto_Writebyte>:
#ifndef INC_HMC5883L_H_
#include "HMC5883L.h"
#endif

void Magneto_Writebyte(HMC5883L* hmc5883l, uint8_t register_address, uint8_t data)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
 8001170:	4613      	mov	r3, r2
 8001172:	70bb      	strb	r3, [r7, #2]
    uint8_t Trans[2]={register_address, data};
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	733b      	strb	r3, [r7, #12]
 8001178:	78bb      	ldrb	r3, [r7, #2]
 800117a:	737b      	strb	r3, [r7, #13]
    I2C_Transmit(&(hmc5883l->I2C), hmc5883l->compass_address, Trans,2);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7a19      	ldrb	r1, [r3, #8]
 8001182:	f107 020c 	add.w	r2, r7, #12
 8001186:	2302      	movs	r3, #2
 8001188:	f001 f8d4 	bl	8002334 <I2C_Transmit>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <Magneto_Init>:
}



void Magneto_Init(HMC5883L* hmc5883l, I2C_TypeDef* i2c, double gauss)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	ed87 0b00 	vstr	d0, [r7]
	printf("Magneto_Init -> GET : 0x%X | Gauss : %f\r\n", hmc5883l->compass_address, gauss);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	7a1b      	ldrb	r3, [r3, #8]
 80011a6:	4619      	mov	r1, r3
 80011a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <Magneto_Init+0x6c>)
 80011ae:	f005 f8f7 	bl	80063a0 <iprintf>

	hmc5883l->I2C.I2C = i2c;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	601a      	str	r2, [r3, #0]

	hmc5883l->error_code = SetScale(hmc5883l, gauss);
 80011b8:	ed97 0b00 	vldr	d0, [r7]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 f88b 	bl	80012d8 <SetScale>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	765a      	strb	r2, [r3, #25]
	if(hmc5883l->error_code == 1)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	7e5b      	ldrb	r3, [r3, #25]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d102      	bne.n	80011d8 <Magneto_Init+0x44>
	{
		printf("Set Scale Error.\r\n");
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <Magneto_Init+0x70>)
 80011d4:	f005 f96a 	bl	80064ac <puts>
	}
	hmc5883l->error_code = SetMeasurementMode(hmc5883l, Measurement_Continuous);
 80011d8:	2100      	movs	r1, #0
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f968 	bl	80014b0 <SetMeasurementMode>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	765a      	strb	r2, [r3, #25]
	if(hmc5883l->error_code == 1)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	7e5b      	ldrb	r3, [r3, #25]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <Magneto_Init+0x62>
	{
		printf("Set Mode Error.\r\n");
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <Magneto_Init+0x74>)
 80011f2:	f005 f95b 	bl	80064ac <puts>
	}

}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800a10c 	.word	0x0800a10c
 8001204:	0800a138 	.word	0x0800a138
 8001208:	0800a14c 	.word	0x0800a14c

0800120c <Read_Magneto>:
	compassData->scaled_YAxis = compassData->YAxis * hmc5883l->m_Scale;
	compassData->scaled_ZAxis = compassData->ZAxis * hmc5883l->m_Scale;
}

void Read_Magneto(HMC5883L* hmc5883l, AxisData* compassData)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	uint8_t trans[1] = {DataRegisterBegin};
 8001216:	2303      	movs	r3, #3
 8001218:	753b      	strb	r3, [r7, #20]
	uint8_t buffer[6];

	I2C_Transmit(&(hmc5883l->I2C), hmc5883l->compass_address, trans, 1);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7a19      	ldrb	r1, [r3, #8]
 8001220:	f107 0214 	add.w	r2, r7, #20
 8001224:	2301      	movs	r3, #1
 8001226:	f001 f885 	bl	8002334 <I2C_Transmit>
	I2C_Receive(&(hmc5883l->I2C), hmc5883l->compass_address, buffer, sizeof(buffer));
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7a19      	ldrb	r1, [r3, #8]
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	2306      	movs	r3, #6
 8001236:	f001 f906 	bl	8002446 <I2C_Receive>


	//HAL_I2C_Mem_Read(&(SENSOR->i2c), SENSOR->magneto_address , DataRegisterBegin, I2C_MEMADD_SIZE_8BIT, buffer, sizeof(buffer), 10);
	compassData->XAxis = (int16_t)(buffer[0] << 8) | buffer[1];
 800123a:	7b3b      	ldrb	r3, [r7, #12]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7b7b      	ldrb	r3, [r7, #13]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	801a      	strh	r2, [r3, #0]
	compassData->YAxis = (int16_t)(buffer[2] << 8) | buffer[3];
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	805a      	strh	r2, [r3, #2]
	compassData->ZAxis = (int16_t)(buffer[4] << 8) | buffer[5];
 800125e:	7c3b      	ldrb	r3, [r7, #16]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7c7b      	ldrb	r3, [r7, #17]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	809a      	strh	r2, [r3, #4]

	compassData->scaled_XAxis = compassData->XAxis * hmc5883l->m_Scale;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f964 	bl	8000544 <__aeabi_i2d>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001282:	f7ff f9c9 	bl	8000618 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	compassData->scaled_YAxis = compassData->YAxis * hmc5883l->m_Scale;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f954 	bl	8000544 <__aeabi_i2d>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012a2:	f7ff f9b9 	bl	8000618 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
	compassData->scaled_ZAxis = compassData->ZAxis * hmc5883l->m_Scale;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f944 	bl	8000544 <__aeabi_i2d>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012c2:	f7ff f9a9 	bl	8000618 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <SetScale>:
    compassData->headingDegrees = headingDegrees;
}


uint8_t SetScale(HMC5883L* hmc5883l, double gauss)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	ed87 0b00 	vstr	d0, [r7]
	uint8_t regValue = 0x00;
 80012e4:	2300      	movs	r3, #0
 80012e6:	75fb      	strb	r3, [r7, #23]
//	printf("SetScale gauss: %f | regValue : 0x%X\r\n", gauss, regValue);
//
//	if(gauss == 1.3)printf("float complete\r\n");
//	else printf("float not working\r\n");

	if(gauss == 0.88)
 80012e8:	a365      	add	r3, pc, #404	; (adr r3, 8001480 <SetScale+0x1a8>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012f2:	f7ff fbf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <SetScale+0x36>
	{
		regValue = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 0.73;
 8001300:	68f9      	ldr	r1, [r7, #12]
 8001302:	a361      	add	r3, pc, #388	; (adr r3, 8001488 <SetScale+0x1b0>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800130c:	e086      	b.n	800141c <SetScale+0x144>
	}
	else if(gauss == 1.3)
 800130e:	a360      	add	r3, pc, #384	; (adr r3, 8001490 <SetScale+0x1b8>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001318:	f7ff fbe6 	bl	8000ae8 <__aeabi_dcmpeq>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d008      	beq.n	8001334 <SetScale+0x5c>
	{
		regValue = 0x01;
 8001322:	2301      	movs	r3, #1
 8001324:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 0.92;
 8001326:	68f9      	ldr	r1, [r7, #12]
 8001328:	a35b      	add	r3, pc, #364	; (adr r3, 8001498 <SetScale+0x1c0>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001332:	e073      	b.n	800141c <SetScale+0x144>
		//printf("m_scale = %f \r\n", hmc5883l->m_Scale);
	}
	else if(gauss == 1.9)
 8001334:	a35a      	add	r3, pc, #360	; (adr r3, 80014a0 <SetScale+0x1c8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800133e:	f7ff fbd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <SetScale+0x82>
	{
		regValue = 0x02;
 8001348:	2302      	movs	r3, #2
 800134a:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 1.22;
 800134c:	68f9      	ldr	r1, [r7, #12]
 800134e:	a356      	add	r3, pc, #344	; (adr r3, 80014a8 <SetScale+0x1d0>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001358:	e060      	b.n	800141c <SetScale+0x144>
	}
	else if(gauss == 2.5)
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <SetScale+0x1a0>)
 8001360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001364:	f7ff fbc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <SetScale+0xa8>
	{
		regValue = 0x03;
 800136e:	2303      	movs	r3, #3
 8001370:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 1.52;
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	a330      	add	r3, pc, #192	; (adr r3, 8001438 <SetScale+0x160>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800137e:	e04d      	b.n	800141c <SetScale+0x144>
	}
	else if(gauss == 4.0)
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b3d      	ldr	r3, [pc, #244]	; (800147c <SetScale+0x1a4>)
 8001386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800138a:	f7ff fbad 	bl	8000ae8 <__aeabi_dcmpeq>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <SetScale+0xce>
	{
		regValue = 0x04;
 8001394:	2304      	movs	r3, #4
 8001396:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 2.27;
 8001398:	68f9      	ldr	r1, [r7, #12]
 800139a:	a329      	add	r3, pc, #164	; (adr r3, 8001440 <SetScale+0x168>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013a4:	e03a      	b.n	800141c <SetScale+0x144>
	}
	else if(gauss == 4.7)
 80013a6:	a328      	add	r3, pc, #160	; (adr r3, 8001448 <SetScale+0x170>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b0:	f7ff fb9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <SetScale+0xf4>
	{
		regValue = 0x05;
 80013ba:	2305      	movs	r3, #5
 80013bc:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 2.56;
 80013be:	68f9      	ldr	r1, [r7, #12]
 80013c0:	a323      	add	r3, pc, #140	; (adr r3, 8001450 <SetScale+0x178>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013ca:	e027      	b.n	800141c <SetScale+0x144>
	}
	else if(gauss == 5.6)
 80013cc:	a322      	add	r3, pc, #136	; (adr r3, 8001458 <SetScale+0x180>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d6:	f7ff fb87 	bl	8000ae8 <__aeabi_dcmpeq>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <SetScale+0x11a>
	{
		regValue = 0x06;
 80013e0:	2306      	movs	r3, #6
 80013e2:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 3.03;
 80013e4:	68f9      	ldr	r1, [r7, #12]
 80013e6:	a31e      	add	r3, pc, #120	; (adr r3, 8001460 <SetScale+0x188>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013f0:	e014      	b.n	800141c <SetScale+0x144>
	}
	else if(gauss == 8.1)
 80013f2:	a31d      	add	r3, pc, #116	; (adr r3, 8001468 <SetScale+0x190>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013fc:	f7ff fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <SetScale+0x140>
	{
		regValue = 0x07;
 8001406:	2307      	movs	r3, #7
 8001408:	75fb      	strb	r3, [r7, #23]
		hmc5883l->m_Scale = 4.35;
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	a318      	add	r3, pc, #96	; (adr r3, 8001470 <SetScale+0x198>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001416:	e001      	b.n	800141c <SetScale+0x144>
	}
	else{
		//printf("SetScale Func Error 0x%X\r\n", regValue);
		return ErrorCode_1_Num;
 8001418:	2301      	movs	r3, #1
 800141a:	e009      	b.n	8001430 <SetScale+0x158>
	}

	//printf("set Scale : %d\r\n", regValue);
	regValue = regValue << 5;
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	015b      	lsls	r3, r3, #5
 8001420:	75fb      	strb	r3, [r7, #23]
	Magneto_Writebyte(hmc5883l, ConfigurationRegisterB, regValue);
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	461a      	mov	r2, r3
 8001426:	2101      	movs	r1, #1
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fe9b 	bl	8001164 <Magneto_Writebyte>

	return regValue;
 800142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	851eb852 	.word	0x851eb852
 800143c:	3ff851eb 	.word	0x3ff851eb
 8001440:	c28f5c29 	.word	0xc28f5c29
 8001444:	400228f5 	.word	0x400228f5
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	4012cccc 	.word	0x4012cccc
 8001450:	47ae147b 	.word	0x47ae147b
 8001454:	40047ae1 	.word	0x40047ae1
 8001458:	66666666 	.word	0x66666666
 800145c:	40166666 	.word	0x40166666
 8001460:	a3d70a3d 	.word	0xa3d70a3d
 8001464:	40083d70 	.word	0x40083d70
 8001468:	33333333 	.word	0x33333333
 800146c:	40203333 	.word	0x40203333
 8001470:	66666666 	.word	0x66666666
 8001474:	40116666 	.word	0x40116666
 8001478:	40040000 	.word	0x40040000
 800147c:	40100000 	.word	0x40100000
 8001480:	c28f5c29 	.word	0xc28f5c29
 8001484:	3fec28f5 	.word	0x3fec28f5
 8001488:	f5c28f5c 	.word	0xf5c28f5c
 800148c:	3fe75c28 	.word	0x3fe75c28
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	3ff4cccc 	.word	0x3ff4cccc
 8001498:	d70a3d71 	.word	0xd70a3d71
 800149c:	3fed70a3 	.word	0x3fed70a3
 80014a0:	66666666 	.word	0x66666666
 80014a4:	3ffe6666 	.word	0x3ffe6666
 80014a8:	b851eb85 	.word	0xb851eb85
 80014ac:	3ff3851e 	.word	0x3ff3851e

080014b0 <SetMeasurementMode>:


uint8_t SetMeasurementMode(HMC5883L* hmc5883l , uint8_t mode)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
	Magneto_Writebyte(hmc5883l, ModeRegister, mode);
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	461a      	mov	r2, r3
 80014c0:	2102      	movs	r1, #2
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fe4e 	bl	8001164 <Magneto_Writebyte>
	if((mode == 0x00) | (mode == 0x01) | (mode == 0x03)) return 0;
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SetMeasurementMode+0x4c>
 80014f8:	2300      	movs	r3, #0
 80014fa:	e000      	b.n	80014fe <SetMeasurementMode+0x4e>
	else return ErrorCode_1_Num;
 80014fc:	2301      	movs	r3, #1

}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HW579_Init>:




void HW579_Init(HW579* hw579, I2C_TypeDef* i2c, double gauss)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	ed87 0b00 	vstr	d0, [r7]
	hw579->I2C.I2C = i2c;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	601a      	str	r2, [r3, #0]
	hw579->MAGNETO = &hmc5883l;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <HW579_Init+0x64>)
 8001520:	609a      	str	r2, [r3, #8]
	hw579->ACCEL   = &adxl345;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <HW579_Init+0x68>)
 8001526:	60da      	str	r2, [r3, #12]
	hw579->GYRO    = &itg3205;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <HW579_Init+0x6c>)
 800152c:	611a      	str	r2, [r3, #16]

	getI2C_Address(hw579);
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f822 	bl	8001578 <getI2C_Address>
	LL_mDelay(100);
 8001534:	2064      	movs	r0, #100	; 0x64
 8001536:	f004 f861 	bl	80055fc <LL_mDelay>

	Magneto_Init((hw579->MAGNETO), i2c, gauss);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	ed97 0b00 	vldr	d0, [r7]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe25 	bl	8001194 <Magneto_Init>
	Accel_Init((hw579->ACCEL), i2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fd79 	bl	8001048 <Accel_Init>
	Gyro_Init((hw579->GYRO), i2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f8db 	bl	8001718 <Gyro_Init>


}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000200 	.word	0x20000200
 8001570:	20000220 	.word	0x20000220
 8001574:	2000022c 	.word	0x2000022c

08001578 <getI2C_Address>:


void getI2C_Address(HW579* hw579)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t slave_address;
	uint8_t numSensors = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	75bb      	strb	r3, [r7, #22]
	uint8_t sensors[3] = {0, };
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <getI2C_Address+0x15c>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	81bb      	strh	r3, [r7, #12]
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]


	hw579->MAGNETO->I2C = hw579->I2C;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001598:	e883 0003 	stmia.w	r3, {r0, r1}
	hw579->ACCEL->I2C   = hw579->I2C;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a6:	e883 0003 	stmia.w	r3, {r0, r1}
	hw579->GYRO->I2C    = hw579->I2C;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b4:	e883 0003 	stmia.w	r3, {r0, r1}

	int state=0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
	for(slave_address = 1; slave_address < 128; slave_address++)
 80015bc:	2301      	movs	r3, #1
 80015be:	75fb      	strb	r3, [r7, #23]
 80015c0:	e04f      	b.n	8001662 <getI2C_Address+0xea>
	{
		hw579->I2C.I2C->CR1 |= I2C_CR1_START;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d0:	601a      	str	r2, [r3, #0]
		while(!(hw579->I2C.I2C->SR1 & I2C_SR1_SB));
 80015d2:	bf00      	nop
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f8      	beq.n	80015d4 <getI2C_Address+0x5c>

		hw579->I2C.I2C->DR=(slave_address<<1|0);
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	005a      	lsls	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	611a      	str	r2, [r3, #16]
		while(!(hw579->I2C.I2C->SR1)|!(hw579->I2C.I2C->SR2)){};
 80015ec:	bf00      	nop
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1eb      	bne.n	80015ee <getI2C_Address+0x76>
		hw579->I2C.I2C->CR1 |= I2C_CR1_STOP;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001624:	601a      	str	r2, [r3, #0]

		LL_mDelay(10);	//minium wait time is 40 uS, but for sure, leave it 100 uS
 8001626:	200a      	movs	r0, #10
 8001628:	f003 ffe8 	bl	80055fc <LL_mDelay>

		state=(hw579->I2C.I2C->SR1 & I2C_SR1_ADDR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	613b      	str	r3, [r7, #16]
		if (state==2)	// get NACK after send
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d10e      	bne.n	800165c <getI2C_Address+0xe4>
		{
			printf("Found I2C device at adress 0x%X (hexadecimal), or %3d (decimal) [%d]\r\n",slave_address, slave_address, numSensors);
 800163e:	7df9      	ldrb	r1, [r7, #23]
 8001640:	7dfa      	ldrb	r2, [r7, #23]
 8001642:	7dbb      	ldrb	r3, [r7, #22]
 8001644:	4824      	ldr	r0, [pc, #144]	; (80016d8 <getI2C_Address+0x160>)
 8001646:	f004 feab 	bl	80063a0 <iprintf>
			sensors[numSensors] = slave_address;
 800164a:	7dbb      	ldrb	r3, [r7, #22]
 800164c:	3318      	adds	r3, #24
 800164e:	443b      	add	r3, r7
 8001650:	7dfa      	ldrb	r2, [r7, #23]
 8001652:	f803 2c0c 	strb.w	r2, [r3, #-12]
			numSensors++;
 8001656:	7dbb      	ldrb	r3, [r7, #22]
 8001658:	3301      	adds	r3, #1
 800165a:	75bb      	strb	r3, [r7, #22]
	for(slave_address = 1; slave_address < 128; slave_address++)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	3301      	adds	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
 8001662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001666:	2b00      	cmp	r3, #0
 8001668:	daab      	bge.n	80015c2 <getI2C_Address+0x4a>


	}


	hw579->MAGNETO->compass_address = sensors[0] << 1;
 800166a:	7b3a      	ldrb	r2, [r7, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	0052      	lsls	r2, r2, #1
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	721a      	strb	r2, [r3, #8]
	hw579->ACCEL->accel_address	    = sensors[1] << 1;
 8001676:	7b7a      	ldrb	r2, [r7, #13]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0052      	lsls	r2, r2, #1
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	721a      	strb	r2, [r3, #8]
	hw579->GYRO->gyro_address   	= sensors[2] << 1;
 8001682:	7bba      	ldrb	r2, [r7, #14]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	0052      	lsls	r2, r2, #1
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	721a      	strb	r2, [r3, #8]


	printf("MAGNETO : 0x%X  = 0x%X\r\n", hw579->MAGNETO->compass_address, sensors[0]<< 1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	7a1b      	ldrb	r3, [r3, #8]
 8001694:	4619      	mov	r1, r3
 8001696:	7b3b      	ldrb	r3, [r7, #12]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	461a      	mov	r2, r3
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <getI2C_Address+0x164>)
 800169e:	f004 fe7f 	bl	80063a0 <iprintf>
	printf("ACCEL   : 0x%X  = 0x%X\r\n", hw579->ACCEL->accel_address, sensors[1]<< 1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	7a1b      	ldrb	r3, [r3, #8]
 80016a8:	4619      	mov	r1, r3
 80016aa:	7b7b      	ldrb	r3, [r7, #13]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	461a      	mov	r2, r3
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <getI2C_Address+0x168>)
 80016b2:	f004 fe75 	bl	80063a0 <iprintf>
	printf("GYRO    : 0x%X  = 0x%X\r\n", hw579->GYRO->gyro_address, sensors[2]<< 1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	7a1b      	ldrb	r3, [r3, #8]
 80016bc:	4619      	mov	r1, r3
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	461a      	mov	r2, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <getI2C_Address+0x16c>)
 80016c6:	f004 fe6b 	bl	80063a0 <iprintf>
	printf("ACCEL   : 0x%X\r\n", sensors[1] << 1);
	printf("GYRO    : 0x%X\r\n", sensors[2] << 1);
#endif


}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	0800a25c 	.word	0x0800a25c
 80016d8:	0800a1c0 	.word	0x0800a1c0
 80016dc:	0800a208 	.word	0x0800a208
 80016e0:	0800a224 	.word	0x0800a224
 80016e4:	0800a240 	.word	0x0800a240

080016e8 <Gyro_Writebyte>:

#include "ITG3205.h"



void Gyro_Writebyte(ITG3205* itg3205, uint8_t register_address, uint8_t data){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	4613      	mov	r3, r2
 80016f6:	70bb      	strb	r3, [r7, #2]
	/////////////////////////////////////////////////////////
	// |Start bit|AD+W|   |Register Address|   |DATA|   |P|//
	// |		 |	  |ACK|				   |ACK|	|ACK| |//
	/////////////////////////////////////////////////////////
	uint8_t Trans[2] = {register_address, data};
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	733b      	strb	r3, [r7, #12]
 80016fc:	78bb      	ldrb	r3, [r7, #2]
 80016fe:	737b      	strb	r3, [r7, #13]

	I2C_Transmit(&(itg3205->I2C), itg3205->gyro_address, Trans, 2);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7a19      	ldrb	r1, [r3, #8]
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	2302      	movs	r3, #2
 800170c:	f000 fe12 	bl	8002334 <I2C_Transmit>

}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <Gyro_Init>:
	return Receive[0];
}



void Gyro_Init(ITG3205* itg3205, I2C_TypeDef* i2c){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]

	itg3205->I2C.I2C = i2c;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	601a      	str	r2, [r3, #0]
	itg3205->I2C.i2c_busy = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	711a      	strb	r2, [r3, #4]
	itg3205->I2C.i2c_IsRx = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	715a      	strb	r2, [r3, #5]

	printf("Gyro_Init -> GET    : 0x%X\r\n", itg3205->gyro_address);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7a1b      	ldrb	r3, [r3, #8]
 8001738:	4619      	mov	r1, r3
 800173a:	481a      	ldr	r0, [pc, #104]	; (80017a4 <Gyro_Init+0x8c>)
 800173c:	f004 fe30 	bl	80063a0 <iprintf>

    Gyro_Writebyte(itg3205,PWR_MGM,0x00);
 8001740:	2200      	movs	r2, #0
 8001742:	213e      	movs	r1, #62	; 0x3e
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffcf 	bl	80016e8 <Gyro_Writebyte>

    LL_mDelay(10);
 800174a:	200a      	movs	r0, #10
 800174c:	f003 ff56 	bl	80055fc <LL_mDelay>
    Gyro_Writebyte(itg3205, PWR_MGM,0x01);
 8001750:	2201      	movs	r2, #1
 8001752:	213e      	movs	r1, #62	; 0x3e
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffc7 	bl	80016e8 <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, SMPLRT_DIV,0X00);
 800175a:	2200      	movs	r2, #0
 800175c:	2115      	movs	r1, #21
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffc2 	bl	80016e8 <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, DLPFFS_FS_SEL, RANGE2000 << 3);
 8001764:	2218      	movs	r2, #24
 8001766:	2118      	movs	r1, #24
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ffbd 	bl	80016e8 <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, DLPFFS_DLPF_CFG, BW256_SR8);
 800176e:	2200      	movs	r2, #0
 8001770:	2107      	movs	r1, #7
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffb8 	bl	80016e8 <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, PWRMGM_CLK_SEL, PLL_ZGYRO_REF);
 8001778:	2203      	movs	r2, #3
 800177a:	2107      	movs	r1, #7
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffb3 	bl	80016e8 <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, INTCFG_ITG_RDY_EN, INTSTATUS_ITG_RDY);
 8001782:	2204      	movs	r2, #4
 8001784:	2104      	movs	r1, #4
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffae 	bl	80016e8 <Gyro_Writebyte>

    Gyro_Writebyte(itg3205, INTCFG_RAW_RDY_EN, INTSTATUS_RAW_DATA_RDY);
 800178c:	2201      	movs	r2, #1
 800178e:	2101      	movs	r1, #1
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffa9 	bl	80016e8 <Gyro_Writebyte>

    LL_mDelay(GYROSTART_UP_DELAY);
 8001796:	2046      	movs	r0, #70	; 0x46
 8001798:	f003 ff30 	bl	80055fc <LL_mDelay>

}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	0800a260 	.word	0x0800a260

080017a8 <Read_Gyro>:


void Read_Gyro(ITG3205* itg3205, GyroData* gyroData){
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	uint8_t Trans[1] = {GYRO_XOUT};
 80017b2:	231d      	movs	r3, #29
 80017b4:	743b      	strb	r3, [r7, #16]
    uint8_t gyro_buf[6];
    int16_t raw_X,raw_Y,raw_Z;

	I2C_Transmit(&(itg3205->I2C), itg3205->gyro_address, Trans, 1);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7a19      	ldrb	r1, [r3, #8]
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	2301      	movs	r3, #1
 80017c2:	f000 fdb7 	bl	8002334 <I2C_Transmit>
	I2C_Receive(&(itg3205->I2C), itg3205->gyro_address, gyro_buf, sizeof(gyro_buf));
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7a19      	ldrb	r1, [r3, #8]
 80017cc:	f107 0208 	add.w	r2, r7, #8
 80017d0:	2306      	movs	r3, #6
 80017d2:	f000 fe38 	bl	8002446 <I2C_Receive>

    raw_X = ((gyro_buf[0]<<8)|gyro_buf[1]);
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	82fb      	strh	r3, [r7, #22]
    raw_Y = ((gyro_buf[2]<<8)|gyro_buf[3]);
 80017e4:	7abb      	ldrb	r3, [r7, #10]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	82bb      	strh	r3, [r7, #20]
    raw_Z = ((gyro_buf[4]<<8)|gyro_buf[5]);
 80017f2:	7b3b      	ldrb	r3, [r7, #12]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	827b      	strh	r3, [r7, #18]

    gyroData->raw_gyro_X = raw_X;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	8afa      	ldrh	r2, [r7, #22]
 8001804:	801a      	strh	r2, [r3, #0]
    gyroData->raw_gyro_Y = raw_Y;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	8aba      	ldrh	r2, [r7, #20]
 800180a:	805a      	strh	r2, [r3, #2]
    gyroData->raw_gyro_Z = raw_Z;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	8a7a      	ldrh	r2, [r7, #18]
 8001810:	809a      	strh	r2, [r3, #4]


    gyroData->gyro_X = ((float)(raw_X))/16.4 + gyroData->offset_X;
 8001812:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe fea1 	bl	8000568 <__aeabi_f2d>
 8001826:	a332      	add	r3, pc, #200	; (adr r3, 80018f0 <Read_Gyro+0x148>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7ff f81e 	bl	800086c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe81 	bl	8000544 <__aeabi_i2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe fd2f 	bl	80002ac <__adddf3>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    gyroData->gyro_Y = ((float)(raw_Y))/16.4 + gyroData->offset_Y;
 8001858:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	ee17 0a90 	vmov	r0, s15
 8001868:	f7fe fe7e 	bl	8000568 <__aeabi_f2d>
 800186c:	a320      	add	r3, pc, #128	; (adr r3, 80018f0 <Read_Gyro+0x148>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fffb 	bl	800086c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe5e 	bl	8000544 <__aeabi_i2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fd0c 	bl	80002ac <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    gyroData->gyro_Z = ((float)(raw_Z))/16.4 + gyroData->offset_Z;
 800189e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018aa:	ee17 0a90 	vmov	r0, s15
 80018ae:	f7fe fe5b 	bl	8000568 <__aeabi_f2d>
 80018b2:	a30f      	add	r3, pc, #60	; (adr r3, 80018f0 <Read_Gyro+0x148>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe ffd8 	bl	800086c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe3b 	bl	8000544 <__aeabi_i2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fce9 	bl	80002ac <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}
 80018ec:	f3af 8000 	nop.w
 80018f0:	66666666 	.word	0x66666666
 80018f4:	40306666 	.word	0x40306666

080018f8 <Calibrate_Gyro>:

void Calibrate_Gyro(ITG3205* itg3205, GyroData* gyroData, uint16_t totSamples, uint16_t sampleDelayMS)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	460b      	mov	r3, r1
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	80bb      	strh	r3, [r7, #4]
	printf("=Start Gyro Calibration=\r\n");
 800190e:	4854      	ldr	r0, [pc, #336]	; (8001a60 <Calibrate_Gyro+0x168>)
 8001910:	f004 fdcc 	bl	80064ac <puts>
	int temp_X = 0, temp_Y = 0, temp_Z = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]


	for(uint32_t i=0; i<totSamples; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	e01f      	b.n	8001966 <Calibrate_Gyro+0x6e>
	{
		//printf("calibrate : %ld\r\n", i);
		LL_mDelay(sampleDelayMS);
 8001926:	88bb      	ldrh	r3, [r7, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fe67 	bl	80055fc <LL_mDelay>

		Read_Gyro(itg3205, gyroData);
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff ff39 	bl	80017a8 <Read_Gyro>

		temp_X += gyroData->raw_gyro_X;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	461a      	mov	r2, r3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	61fb      	str	r3, [r7, #28]
		temp_Y += gyroData->raw_gyro_Y;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800194a:	461a      	mov	r2, r3
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4413      	add	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
		temp_Z += gyroData->raw_gyro_Z;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001958:	461a      	mov	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<totSamples; i++)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	3301      	adds	r3, #1
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3db      	bcc.n	8001926 <Calibrate_Gyro+0x2e>
	}

	temp_X /= totSamples;
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	fb92 f3f3 	sdiv	r3, r2, r3
 8001976:	61fb      	str	r3, [r7, #28]
	temp_Y /= totSamples;
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001980:	61bb      	str	r3, [r7, #24]
	temp_Z /= totSamples;
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	fb92 f3f3 	sdiv	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]

	gyroData->base_gyro_X = temp_X;
 800198c:	69f8      	ldr	r0, [r7, #28]
 800198e:	f7fe fdd9 	bl	8000544 <__aeabi_i2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gyroData->base_gyro_Y = temp_Y;
 800199c:	69b8      	ldr	r0, [r7, #24]
 800199e:	f7fe fdd1 	bl	8000544 <__aeabi_i2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gyroData->base_gyro_Z = temp_Z;
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	f7fe fdc9 	bl	8000544 <__aeabi_i2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	gyroData->scaled_gyro_X = (gyroData->raw_gyro_X - gyroData->base_gyro_X)/DLPFFS_FS_SEL;	// FULL_SCALE
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdbe 	bl	8000544 <__aeabi_i2d>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019ce:	f7fe fc6b 	bl	80002a8 <__aeabi_dsub>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <Calibrate_Gyro+0x16c>)
 80019e0:	f7fe ff44 	bl	800086c <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	gyroData->scaled_gyro_Y = (gyroData->raw_gyro_Y - gyroData->base_gyro_Y)/DLPFFS_FS_SEL;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fda5 	bl	8000544 <__aeabi_i2d>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a00:	f7fe fc52 	bl	80002a8 <__aeabi_dsub>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <Calibrate_Gyro+0x16c>)
 8001a12:	f7fe ff2b 	bl	800086c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	gyroData->scaled_gyro_Z = (gyroData->raw_gyro_Z - gyroData->base_gyro_Z)/DLPFFS_FS_SEL;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd8c 	bl	8000544 <__aeabi_i2d>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a32:	f7fe fc39 	bl	80002a8 <__aeabi_dsub>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <Calibrate_Gyro+0x16c>)
 8001a44:	f7fe ff12 	bl	800086c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	printf("=End Gyro Calibration=\r\n");
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <Calibrate_Gyro+0x170>)
 8001a54:	f004 fd2a 	bl	80064ac <puts>
}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	0800a280 	.word	0x0800a280
 8001a64:	40380000 	.word	0x40380000
 8001a68:	0800a29c 	.word	0x0800a29c

08001a6c <Read_Gyro_Temperature>:




void Read_Gyro_Temperature(ITG3205* itg3205, GyroData* gyroData)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]

	uint16_t raw_Temp;
	uint8_t temperature_offset = 31;
 8001a76:	231f      	movs	r3, #31
 8001a78:	75fb      	strb	r3, [r7, #23]

	uint8_t Trans[1] = {TEMP_OUT};
 8001a7a:	231b      	movs	r3, #27
 8001a7c:	743b      	strb	r3, [r7, #16]
    uint8_t temp_buf[2];

	I2C_Transmit(&(itg3205->I2C), itg3205->gyro_address, Trans, 1);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7a19      	ldrb	r1, [r3, #8]
 8001a84:	f107 0210 	add.w	r2, r7, #16
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f000 fc53 	bl	8002334 <I2C_Transmit>
	I2C_Receive(&(itg3205->I2C), itg3205->gyro_address, temp_buf, sizeof(temp_buf));
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7a19      	ldrb	r1, [r3, #8]
 8001a94:	f107 020c 	add.w	r2, r7, #12
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f000 fcd4 	bl	8002446 <I2C_Receive>

	raw_Temp = ((temp_buf[0]<<8)|temp_buf[1]);
 8001a9e:	7b3b      	ldrb	r3, [r7, #12]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	7b7b      	ldrb	r3, [r7, #13]
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	82bb      	strh	r3, [r7, #20]

	gyroData->gyro_Temp = ((raw_Temp -13200) / 280.0 -32 ) *5 /9 - temperature_offset;
 8001aae:	8abb      	ldrh	r3, [r7, #20]
 8001ab0:	f5a3 534e 	sub.w	r3, r3, #13184	; 0x3380
 8001ab4:	3b10      	subs	r3, #16
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd44 	bl	8000544 <__aeabi_i2d>
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <Read_Gyro_Temperature+0xc8>)
 8001ac2:	f7fe fed3 	bl	800086c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <Read_Gyro_Temperature+0xcc>)
 8001ad4:	f7fe fbe8 	bl	80002a8 <__aeabi_dsub>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <Read_Gyro_Temperature+0xd0>)
 8001ae6:	f7fe fd97 	bl	8000618 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <Read_Gyro_Temperature+0xd4>)
 8001af8:	f7fe feb8 	bl	800086c <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4614      	mov	r4, r2
 8001b02:	461d      	mov	r5, r3
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd1c 	bl	8000544 <__aeabi_i2d>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fbc8 	bl	80002a8 <__aeabi_dsub>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7ff f872 	bl	8000c08 <__aeabi_d2f>
 8001b24:	4602      	mov	r2, r0
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	651a      	str	r2, [r3, #80]	; 0x50
	//itg3205->gyro_Temp = raw_Temp;
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bdb0      	pop	{r4, r5, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40718000 	.word	0x40718000
 8001b38:	40400000 	.word	0x40400000
 8001b3c:	40140000 	.word	0x40140000
 8001b40:	40220000 	.word	0x40220000

08001b44 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <LL_SYSCFG_SetEXTISource+0x58>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	ea02 0103 	and.w	r1, r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	0c1b      	lsrs	r3, r3, #16
 8001b68:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	fa03 f202 	lsl.w	r2, r3, r2
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <LL_SYSCFG_SetEXTISource+0x58>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40013800 	.word	0x40013800

08001ba0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	613b      	str	r3, [r7, #16]
  return result;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	61bb      	str	r3, [r7, #24]
  return result;
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b089      	sub	sp, #36	; 0x24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	613b      	str	r3, [r7, #16]
  return result;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2103      	movs	r1, #3
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	61bb      	str	r3, [r7, #24]
  return result;
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	60da      	str	r2, [r3, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3724      	adds	r7, #36	; 0x24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	041a      	lsls	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40023800 	.word	0x40023800

08001cac <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ccc:	2004      	movs	r0, #4
 8001cce:	f7ff ffd5 	bl	8001c7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001cd2:	2080      	movs	r0, #128	; 0x80
 8001cd4:	f7ff ffd2 	bl	8001c7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f7ff ffcf 	bl	8001c7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f7ff ffcc 	bl	8001c7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f7ff ffc9 	bl	8001c7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8001cea:	2040      	movs	r0, #64	; 0x40
 8001cec:	f7ff ffc6 	bl	8001c7c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8001cf0:	f244 0181 	movw	r1, #16513	; 0x4081
 8001cf4:	4861      	ldr	r0, [pc, #388]	; (8001e7c <MX_GPIO_Init+0x1d0>)
 8001cf6:	f7ff ffb1 	bl	8001c5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin);
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	4860      	ldr	r0, [pc, #384]	; (8001e80 <MX_GPIO_Init+0x1d4>)
 8001cfe:	f7ff ffad 	bl	8001c5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001d02:	4960      	ldr	r1, [pc, #384]	; (8001e84 <MX_GPIO_Init+0x1d8>)
 8001d04:	2002      	movs	r0, #2
 8001d06:	f7ff ff1d 	bl	8001b44 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fa07 	bl	8004134 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_PULL_NO);
 8001d26:	2200      	movs	r2, #0
 8001d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2c:	4856      	ldr	r0, [pc, #344]	; (8001e88 <MX_GPIO_Init+0x1dc>)
 8001d2e:	f7ff ff66 	bl	8001bfe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_MODE_INPUT);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d38:	4853      	ldr	r0, [pc, #332]	; (8001e88 <MX_GPIO_Init+0x1dc>)
 8001d3a:	f7ff ff31 	bl	8001ba0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d3e:	2332      	movs	r3, #50	; 0x32
 8001d40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d42:	2302      	movs	r3, #2
 8001d44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001d52:	230b      	movs	r3, #11
 8001d54:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	484b      	ldr	r0, [pc, #300]	; (8001e88 <MX_GPIO_Init+0x1dc>)
 8001d5c:	f002 fb70 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d60:	2386      	movs	r3, #134	; 0x86
 8001d62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d64:	2302      	movs	r3, #2
 8001d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001d74:	230b      	movs	r3, #11
 8001d76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4843      	ldr	r0, [pc, #268]	; (8001e8c <MX_GPIO_Init+0x1e0>)
 8001d7e:	f002 fb5f 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001d82:	f244 0381 	movw	r3, #16513	; 0x4081
 8001d86:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4837      	ldr	r0, [pc, #220]	; (8001e7c <MX_GPIO_Init+0x1d0>)
 8001d9e:	f002 fb4f 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4831      	ldr	r0, [pc, #196]	; (8001e7c <MX_GPIO_Init+0x1d0>)
 8001db6:	f002 fb43 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4828      	ldr	r0, [pc, #160]	; (8001e7c <MX_GPIO_Init+0x1d0>)
 8001dda:	f002 fb31 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001de2:	2301      	movs	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001df2:	463b      	mov	r3, r7
 8001df4:	4619      	mov	r1, r3
 8001df6:	4822      	ldr	r0, [pc, #136]	; (8001e80 <MX_GPIO_Init+0x1d4>)
 8001df8:	f002 fb22 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e00:	2300      	movs	r3, #0
 8001e02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	481c      	ldr	r0, [pc, #112]	; (8001e80 <MX_GPIO_Init+0x1d4>)
 8001e0e:	f002 fb17 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4816      	ldr	r0, [pc, #88]	; (8001e8c <MX_GPIO_Init+0x1e0>)
 8001e32:	f002 fb05 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	4810      	ldr	r0, [pc, #64]	; (8001e8c <MX_GPIO_Init+0x1e0>)
 8001e4a:	f002 faf9 	bl	8004440 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e54:	2302      	movs	r3, #2
 8001e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001e64:	230b      	movs	r3, #11
 8001e66:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <MX_GPIO_Init+0x1d4>)
 8001e6e:	f002 fae7 	bl	8004440 <LL_GPIO_Init>

}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40021800 	.word	0x40021800
 8001e84:	00f00003 	.word	0x00f00003
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020000 	.word	0x40020000

08001e90 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_I2C_IsEnabled>:
  * @rmtoll CR1          PE            LL_I2C_IsEnabled
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->CR1, I2C_CR1_PE) == (I2C_CR1_PE));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f023 0201 	bic.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_I2C_DisableIT_TX>:
  *         CR2          ITBUFEN       LL_I2C_DisableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_I2C_DisableIT_RX>:
  *         CR2          ITBUFEN       LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	605a      	str	r2, [r3, #4]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2301      	moveq	r3, #1
 8001fd8:	2300      	movne	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b40      	cmp	r3, #64	; 0x40
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b02      	cmp	r3, #2
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800208e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002096:	68fb      	ldr	r3, [r7, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	b2db      	uxtb	r3, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_AHB1_GRP1_EnableClock>:
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40023800 	.word	0x40023800

0800219c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40023800 	.word	0x40023800

080021cc <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	; 0x38
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	2220      	movs	r2, #32
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fa5e 	bl	800569c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	463b      	mov	r3, r7
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80021f0:	2002      	movs	r0, #2
 80021f2:	f7ff ffbb 	bl	800216c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80021f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021fc:	2302      	movs	r3, #2
 80021fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002204:	2301      	movs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800220c:	2304      	movs	r3, #4
 800220e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	4817      	ldr	r0, [pc, #92]	; (8002274 <MX_I2C1_Init+0xa8>)
 8002216:	f002 f913 	bl	8004440 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800221a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800221e:	f7ff ffbd 	bl	800219c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8002222:	4815      	ldr	r0, [pc, #84]	; (8002278 <MX_I2C1_Init+0xac>)
 8002224:	f7ff fe8a 	bl	8001f3c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002228:	4813      	ldr	r0, [pc, #76]	; (8002278 <MX_I2C1_Init+0xac>)
 800222a:	f7ff fe64 	bl	8001ef6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800222e:	4812      	ldr	r0, [pc, #72]	; (8002278 <MX_I2C1_Init+0xac>)
 8002230:	f7ff fe51 	bl	8001ed6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <MX_I2C1_Init+0xb0>)
 800223a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002258:	f107 0318 	add.w	r3, r7, #24
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	; (8002278 <MX_I2C1_Init+0xac>)
 8002260:	f002 fa6e 	bl	8004740 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8002264:	2100      	movs	r1, #0
 8002266:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_I2C1_Init+0xac>)
 8002268:	f7ff fe55 	bl	8001f16 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	3738      	adds	r7, #56	; 0x38
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40020400 	.word	0x40020400
 8002278:	40005400 	.word	0x40005400
 800227c:	000186a0 	.word	0x000186a0

08002280 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	2220      	movs	r2, #32
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fa04 	bl	800569c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]
 80022a2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7ff ff61 	bl	800216c <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80022aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022b0:	2302      	movs	r3, #2
 80022b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80022c0:	2304      	movs	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c4:	463b      	mov	r3, r7
 80022c6:	4619      	mov	r1, r3
 80022c8:	4817      	ldr	r0, [pc, #92]	; (8002328 <MX_I2C2_Init+0xa8>)
 80022ca:	f002 f8b9 	bl	8004440 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80022ce:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80022d2:	f7ff ff63 	bl	800219c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 80022d6:	4815      	ldr	r0, [pc, #84]	; (800232c <MX_I2C2_Init+0xac>)
 80022d8:	f7ff fe30 	bl	8001f3c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <MX_I2C2_Init+0xac>)
 80022de:	f7ff fe0a 	bl	8001ef6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <MX_I2C2_Init+0xac>)
 80022e4:	f7ff fdf7 	bl	8001ed6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_I2C2_Init+0xb0>)
 80022ee:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800230c:	f107 0318 	add.w	r3, r7, #24
 8002310:	4619      	mov	r1, r3
 8002312:	4806      	ldr	r0, [pc, #24]	; (800232c <MX_I2C2_Init+0xac>)
 8002314:	f002 fa14 	bl	8004740 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8002318:	2100      	movs	r1, #0
 800231a:	4804      	ldr	r0, [pc, #16]	; (800232c <MX_I2C2_Init+0xac>)
 800231c:	f7ff fdfb 	bl	8001f16 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3738      	adds	r7, #56	; 0x38
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40020400 	.word	0x40020400
 800232c:	40005800 	.word	0x40005800
 8002330:	000186a0 	.word	0x000186a0

08002334 <I2C_Transmit>:

/* USER CODE BEGIN 1 */
void I2C_Transmit(I2C_struct* I2C, uint8_t address, uint8_t* data, uint16_t size){
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	461a      	mov	r2, r3
 8002340:	460b      	mov	r3, r1
 8002342:	72fb      	strb	r3, [r7, #11]
 8002344:	4613      	mov	r3, r2
 8002346:	813b      	strh	r3, [r7, #8]
	if(I2C->i2c_busy==1) return;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	791b      	ldrb	r3, [r3, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d076      	beq.n	800243e <I2C_Transmit+0x10a>
	I2C->i2c_busy = 1;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	711a      	strb	r2, [r3, #4]
	I2C->i2c_IsRx = 0;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	715a      	strb	r2, [r3, #5]

	LL_I2C_DisableIT_TX(I2C->I2C);				// Disable Interrupt
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fdfb 	bl	8001f5c <LL_I2C_DisableIT_TX>

	if(!LL_I2C_IsEnabled(I2C->I2C)){				// Enable I2C
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fda0 	bl	8001eb0 <LL_I2C_IsEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <I2C_Transmit+0x4c>
		LL_I2C_Enable(I2C->I2C);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd88 	bl	8001e90 <LL_I2C_Enable>
	}
	LL_I2C_DisableBitPOS(I2C->I2C);				// Disable bit Position
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fec0 	bl	800210a <LL_I2C_DisableBitPOS>

	while(LL_I2C_IsActiveFlag_BUSY(I2C->I2C));	// wait for Ready
 800238a:	bf00      	nop
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fe62 	bl	800205a <LL_I2C_IsActiveFlag_BUSY>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f7      	bne.n	800238c <I2C_Transmit+0x58>

	LL_I2C_GenerateStartCondition(I2C->I2C);		// Start bit
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fe92 	bl	80020ca <LL_I2C_GenerateStartCondition>

	while(!LL_I2C_IsActiveFlag_SB(I2C->I2C));	// wait start bit
 80023a6:	bf00      	nop
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe2e 	bl	800200e <LL_I2C_IsActiveFlag_SB>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f7      	beq.n	80023a8 <I2C_Transmit+0x74>
	LL_I2C_TransmitData8(I2C->I2C, address);		// transmit address
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	7afa      	ldrb	r2, [r7, #11]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff febf 	bl	8002144 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_ADDR(I2C->I2C));	// wait for transmitting address
 80023c6:	bf00      	nop
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fe31 	bl	8002034 <LL_I2C_IsActiveFlag_ADDR>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f7      	beq.n	80023c8 <I2C_Transmit+0x94>
	LL_I2C_ClearFlag_ADDR(I2C->I2C);				// clear address flag
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fe4f 	bl	8002080 <LL_I2C_ClearFlag_ADDR>

	for(uint16_t i=0; i<size; i++){
 80023e2:	2300      	movs	r3, #0
 80023e4:	82fb      	strh	r3, [r7, #22]
 80023e6:	e014      	b.n	8002412 <I2C_Transmit+0xde>
		LL_I2C_TransmitData8(I2C->I2C, data[i]);	// transmit data array
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	8afb      	ldrh	r3, [r7, #22]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7ff fea5 	bl	8002144 <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_TXE(I2C->I2C));	// wait to complete transmitting data
 80023fa:	bf00      	nop
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fdcb 	bl	8001f9c <LL_I2C_IsActiveFlag_TXE>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f7      	beq.n	80023fc <I2C_Transmit+0xc8>
	for(uint16_t i=0; i<size; i++){
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	3301      	adds	r3, #1
 8002410:	82fb      	strh	r3, [r7, #22]
 8002412:	8afa      	ldrh	r2, [r7, #22]
 8002414:	893b      	ldrh	r3, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	d3e6      	bcc.n	80023e8 <I2C_Transmit+0xb4>
	}
	while(!LL_I2C_IsActiveFlag_BTF(I2C->I2C));	// wait Byte Transfer Finished flag.
 800241a:	bf00      	nop
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fdce 	bl	8001fc2 <LL_I2C_IsActiveFlag_BTF>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f7      	beq.n	800241c <I2C_Transmit+0xe8>

	LL_I2C_GenerateStopCondition(I2C->I2C);		// Stop bit (ready last data and NACK)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fe5a 	bl	80020ea <LL_I2C_GenerateStopCondition>

	I2C->i2c_busy = 0;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	711a      	strb	r2, [r3, #4]
 800243c:	e000      	b.n	8002440 <I2C_Transmit+0x10c>
	if(I2C->i2c_busy==1) return;
 800243e:	bf00      	nop
}
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <I2C_Receive>:


void I2C_Receive(I2C_struct* I2C, uint8_t address, uint8_t* outputdata, uint16_t size){
 8002446:	b590      	push	{r4, r7, lr}
 8002448:	b087      	sub	sp, #28
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	461a      	mov	r2, r3
 8002452:	460b      	mov	r3, r1
 8002454:	72fb      	strb	r3, [r7, #11]
 8002456:	4613      	mov	r3, r2
 8002458:	813b      	strh	r3, [r7, #8]
	if(I2C->i2c_busy==1) return;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	791b      	ldrb	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	f000 808f 	beq.w	8002582 <I2C_Receive+0x13c>
	I2C->i2c_busy = 1;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	711a      	strb	r2, [r3, #4]
	I2C->i2c_IsRx = 1;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	715a      	strb	r2, [r3, #5]


	address |= (0x01);	// LSB Set 1 for address_register_Read (Write => 0)
 8002470:	7afb      	ldrb	r3, [r7, #11]
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	72fb      	strb	r3, [r7, #11]

	LL_I2C_DisableIT_RX(I2C->I2C);							//Disable Interrupt
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fd7d 	bl	8001f7c <LL_I2C_DisableIT_RX>

	if(!LL_I2C_IsEnabled(I2C->I2C)){						// Enable I2C
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd12 	bl	8001eb0 <LL_I2C_IsEnabled>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <I2C_Receive+0x56>
		LL_I2C_Enable(I2C->I2C);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fcfa 	bl	8001e90 <LL_I2C_Enable>
	}
	LL_I2C_DisableBitPOS(I2C->I2C);							// Disable bit Position
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe32 	bl	800210a <LL_I2C_DisableBitPOS>

	while(LL_I2C_IsActiveFlag_BUSY(I2C->I2C));				// wait for Ready
 80024a6:	bf00      	nop
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fdd4 	bl	800205a <LL_I2C_IsActiveFlag_BUSY>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f7      	bne.n	80024a8 <I2C_Receive+0x62>

	if(size==1){											// when data size == 1
 80024b8:	893b      	ldrh	r3, [r7, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d106      	bne.n	80024cc <I2C_Receive+0x86>
		LL_I2C_AcknowledgeNextData(I2C->I2C, LL_I2C_NACK);	// prepare to generate Non ACKnowledge after data receive
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fded 	bl	80020a4 <LL_I2C_AcknowledgeNextData>
 80024ca:	e006      	b.n	80024da <I2C_Receive+0x94>
	}else{													// when data size > 1
		LL_I2C_AcknowledgeNextData(I2C->I2C, LL_I2C_ACK);	// ACKnowledge
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fde5 	bl	80020a4 <LL_I2C_AcknowledgeNextData>
	}

	LL_I2C_GenerateStartCondition(I2C->I2C);				// Start bit
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fdf3 	bl	80020ca <LL_I2C_GenerateStartCondition>

	while(!LL_I2C_IsActiveFlag_SB(I2C->I2C));				// wait start bit
 80024e4:	bf00      	nop
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd8f 	bl	800200e <LL_I2C_IsActiveFlag_SB>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f7      	beq.n	80024e6 <I2C_Receive+0xa0>
	LL_I2C_TransmitData8(I2C->I2C, address);				// transmit address
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	7afa      	ldrb	r2, [r7, #11]
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fe20 	bl	8002144 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_ADDR(I2C->I2C));				// wait for transmitting address
 8002504:	bf00      	nop
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fd92 	bl	8002034 <LL_I2C_IsActiveFlag_ADDR>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f7      	beq.n	8002506 <I2C_Receive+0xc0>
	LL_I2C_ClearFlag_ADDR(I2C->I2C);						// clear address flag
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fdb0 	bl	8002080 <LL_I2C_ClearFlag_ADDR>

	for(uint16_t i=0; i<size; i++){
 8002520:	2300      	movs	r3, #0
 8002522:	82fb      	strh	r3, [r7, #22]
 8002524:	e020      	b.n	8002568 <I2C_Receive+0x122>
		if(i==(size - 1)){									// after receiving last data, prepare to generate Non ACKnowledge
 8002526:	8afa      	ldrh	r2, [r7, #22]
 8002528:	893b      	ldrh	r3, [r7, #8]
 800252a:	3b01      	subs	r3, #1
 800252c:	429a      	cmp	r2, r3
 800252e:	d105      	bne.n	800253c <I2C_Receive+0xf6>
			LL_I2C_AcknowledgeNextData(I2C->I2C, LL_I2C_NACK);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fdb4 	bl	80020a4 <LL_I2C_AcknowledgeNextData>
		}
		while(!LL_I2C_IsActiveFlag_RXNE(I2C->I2C));			// wait to complete receiving data
 800253c:	bf00      	nop
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fd50 	bl	8001fe8 <LL_I2C_IsActiveFlag_RXNE>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f7      	beq.n	800253e <I2C_Receive+0xf8>
		outputdata[i] = LL_I2C_ReceiveData8(I2C->I2C);		// save data in array
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	8afb      	ldrh	r3, [r7, #22]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	18d4      	adds	r4, r2, r3
 8002558:	4608      	mov	r0, r1
 800255a:	f7ff fde6 	bl	800212a <LL_I2C_ReceiveData8>
 800255e:	4603      	mov	r3, r0
 8002560:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<size; i++){
 8002562:	8afb      	ldrh	r3, [r7, #22]
 8002564:	3301      	adds	r3, #1
 8002566:	82fb      	strh	r3, [r7, #22]
 8002568:	8afa      	ldrh	r2, [r7, #22]
 800256a:	893b      	ldrh	r3, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d3da      	bcc.n	8002526 <I2C_Receive+0xe0>
	}
	LL_I2C_GenerateStopCondition(I2C->I2C);					// Stop bit
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fdb8 	bl	80020ea <LL_I2C_GenerateStopCondition>

	I2C->i2c_busy = 0;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	711a      	strb	r2, [r3, #4]
 8002580:	e000      	b.n	8002584 <I2C_Receive+0x13e>
	if(I2C->i2c_busy==1) return;
 8002582:	bf00      	nop
}
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd90      	pop	{r4, r7, pc}

0800258a <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	621a      	str	r2, [r3, #32]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	330c      	adds	r3, #12
 80025fc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	60bb      	str	r3, [r7, #8]
   return(result);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f043 0320 	orr.w	r3, r3, #32
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	330c      	adds	r3, #12
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	61ba      	str	r2, [r7, #24]
 8002616:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	e841 2300 	strex	r3, r2, [r1]
 8002620:	613b      	str	r3, [r7, #16]
   return(result);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e7      	bne.n	80025f8 <LL_USART_EnableIT_RXNE+0x8>
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	605a      	str	r2, [r3, #4]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	4013      	ands	r3, r2
 800266a:	041a      	lsls	r2, r3, #16
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43d9      	mvns	r1, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	400b      	ands	r3, r1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(uint32_t file, uint8_t* ptr, uint32_t len )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]

	for(int i = 0; i < len; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e00d      	b.n	80026b6 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART3, *(ptr+i));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	4808      	ldr	r0, [pc, #32]	; (80026c8 <_write+0x40>)
 80026a6:	f7ff ffc6 	bl	8002636 <LL_USART_TransmitData8>
		HAL_Delay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f000 feec 	bl	8003488 <HAL_Delay>
	for(int i = 0; i < len; i++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d8ed      	bhi.n	800269a <_write+0x12>
	}

	return len;
 80026be:	687b      	ldr	r3, [r7, #4]

	//if(HAL_UART_Transmit(&huart3, ptr, len, len) == HAL_OK) return len;
	//else return 0;
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40004800 	.word	0x40004800
 80026cc:	00000000 	.word	0x00000000

080026d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026d4:	b0d1      	sub	sp, #324	; 0x144
 80026d6:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026d8:	f000 fe64 	bl	80033a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026dc:	f000 f90e 	bl	80028fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026e0:	f7ff fae4 	bl	8001cac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80026e4:	f000 fdd2 	bl	800328c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80026e8:	f000 fc6c 	bl	8002fc4 <MX_TIM3_Init>
  MX_I2C1_Init();
 80026ec:	f7ff fd6e 	bl	80021cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80026f0:	f7ff fdc6 	bl	8002280 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HW579_Init(&hw579, I2C1, 1.3);
 80026f4:	ed9f 0b70 	vldr	d0, [pc, #448]	; 80028b8 <main+0x1e8>
 80026f8:	4971      	ldr	r1, [pc, #452]	; (80028c0 <main+0x1f0>)
 80026fa:	4872      	ldr	r0, [pc, #456]	; (80028c4 <main+0x1f4>)
 80026fc:	f7fe ff04 	bl	8001508 <HW579_Init>

  LL_TIM_EnableCounter(TIM3);
 8002700:	4871      	ldr	r0, [pc, #452]	; (80028c8 <main+0x1f8>)
 8002702:	f7ff ff42 	bl	800258a <LL_TIM_EnableCounter>
  LL_USART_EnableIT_RXNE(USART3);	// Receive Complete Interrupt -> IRQ Handler
 8002706:	4871      	ldr	r0, [pc, #452]	; (80028cc <main+0x1fc>)
 8002708:	f7ff ff72 	bl	80025f0 <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800270c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002710:	486d      	ldr	r0, [pc, #436]	; (80028c8 <main+0x1f8>)
 8002712:	f7ff ff4a 	bl	80025aa <LL_TIM_CC_EnableChannel>
  for(int i=0; i< 4; i++)
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800271c:	e016      	b.n	800274c <main+0x7c>
   	  {
   		  TIM3->PSC = 3000 - 500*i;
 800271e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002722:	4a6b      	ldr	r2, [pc, #428]	; (80028d0 <main+0x200>)
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <main+0x1f8>)
 800272e:	629a      	str	r2, [r3, #40]	; 0x28
   		  printf("TIM3->PSC : %ld\r\n", TIM3->PSC);
 8002730:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <main+0x1f8>)
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	4619      	mov	r1, r3
 8002736:	4867      	ldr	r0, [pc, #412]	; (80028d4 <main+0x204>)
 8002738:	f003 fe32 	bl	80063a0 <iprintf>
   		  HAL_Delay(100);
 800273c:	2064      	movs	r0, #100	; 0x64
 800273e:	f000 fea3 	bl	8003488 <HAL_Delay>
  for(int i=0; i< 4; i++)
 8002742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002746:	3301      	adds	r3, #1
 8002748:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002750:	2b03      	cmp	r3, #3
 8002752:	dde4      	ble.n	800271e <main+0x4e>

   	  }
   LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002758:	485b      	ldr	r0, [pc, #364]	; (80028c8 <main+0x1f8>)
 800275a:	f7ff ff37 	bl	80025cc <LL_TIM_CC_DisableChannel>

//  float a = 1.3f;
//  if(a==1.3f)printf("a float\r\n");
//  else printf("a float not working\r\n");

  Calibrate_Gyro(hw579.GYRO, &gyroData, 2500, 2);
 800275e:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <main+0x1f4>)
 8002760:	6918      	ldr	r0, [r3, #16]
 8002762:	2302      	movs	r3, #2
 8002764:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002768:	495b      	ldr	r1, [pc, #364]	; (80028d8 <main+0x208>)
 800276a:	f7ff f8c5 	bl	80018f8 <Calibrate_Gyro>

  printf("%f %f %f\r\n", gyroData.base_gyro_X, gyroData.base_gyro_Y, gyroData.base_gyro_Z);
 800276e:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <main+0x208>)
 8002770:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002774:	4b58      	ldr	r3, [pc, #352]	; (80028d8 <main+0x208>)
 8002776:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800277a:	4957      	ldr	r1, [pc, #348]	; (80028d8 <main+0x208>)
 800277c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8002780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002784:	e9cd 2300 	strd	r2, r3, [sp]
 8002788:	4622      	mov	r2, r4
 800278a:	462b      	mov	r3, r5
 800278c:	4853      	ldr	r0, [pc, #332]	; (80028dc <main+0x20c>)
 800278e:	f003 fe07 	bl	80063a0 <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Read_Magneto((hw579.MAGNETO), &compassData);
 8002792:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <main+0x1f4>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4952      	ldr	r1, [pc, #328]	; (80028e0 <main+0x210>)
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fd37 	bl	800120c <Read_Magneto>
	  Read_Accel(hw579.ACCEL, &accelData);
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <main+0x1f4>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4950      	ldr	r1, [pc, #320]	; (80028e4 <main+0x214>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fc77 	bl	8001098 <Read_Accel>
	  Read_Gyro(hw579.GYRO, &gyroData);
 80027aa:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <main+0x1f4>)
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	494a      	ldr	r1, [pc, #296]	; (80028d8 <main+0x208>)
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fff9 	bl	80017a8 <Read_Gyro>
	  Read_Gyro_Temperature(hw579.GYRO, &gyroData);
 80027b6:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <main+0x1f4>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	4947      	ldr	r1, [pc, #284]	; (80028d8 <main+0x208>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff f955 	bl	8001a6c <Read_Gyro_Temperature>
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
			  compassData.XAxis, compassData.YAxis, compassData.ZAxis,
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <main+0x210>)
 80027c4:	f9b3 3000 	ldrsh.w	r3, [r3]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 80027c8:	4698      	mov	r8, r3
			  compassData.XAxis, compassData.YAxis, compassData.ZAxis,
 80027ca:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <main+0x210>)
 80027cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 80027d0:	4699      	mov	r9, r3
			  compassData.XAxis, compassData.YAxis, compassData.ZAxis,
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <main+0x210>)
 80027d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 80027d8:	461c      	mov	r4, r3
			  accelData.raw_accel_X, accelData.raw_accel_Y, accelData.raw_accel_Z,
 80027da:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <main+0x214>)
 80027dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 80027e0:	461d      	mov	r5, r3
			  accelData.raw_accel_X, accelData.raw_accel_Y, accelData.raw_accel_Z,
 80027e2:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <main+0x214>)
 80027e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 80027e8:	461e      	mov	r6, r3
			  accelData.raw_accel_X, accelData.raw_accel_Y, accelData.raw_accel_Z,
 80027ea:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <main+0x214>)
 80027ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 80027f0:	60fb      	str	r3, [r7, #12]
			  gyroData.raw_gyro_X, gyroData.raw_gyro_Y, gyroData.raw_gyro_Z, gyroData.gyro_Temp);
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <main+0x208>)
 80027f4:	f9b3 3000 	ldrsh.w	r3, [r3]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 80027f8:	60bb      	str	r3, [r7, #8]
			  gyroData.raw_gyro_X, gyroData.raw_gyro_Y, gyroData.raw_gyro_Z, gyroData.gyro_Temp);
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <main+0x208>)
 80027fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 8002800:	607b      	str	r3, [r7, #4]
			  gyroData.raw_gyro_X, gyroData.raw_gyro_Y, gyroData.raw_gyro_Z, gyroData.gyro_Temp);
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <main+0x208>)
 8002804:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 8002808:	603b      	str	r3, [r7, #0]
			  gyroData.raw_gyro_X, gyroData.raw_gyro_Y, gyroData.raw_gyro_Z, gyroData.gyro_Temp);
 800280a:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <main+0x208>)
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	  sprintf((char*)debug_buffer, "MAGNETO_RAW : %5d %5d %5d | ACCEL_RAW   : %5d %5d %5d | GYRO_RAW    : %5d %5d %5d | %4.2f",
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd feaa 	bl	8000568 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	f107 0014 	add.w	r0, r7, #20
 800281c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	9206      	str	r2, [sp, #24]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	9205      	str	r2, [sp, #20]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	9204      	str	r2, [sp, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	9303      	str	r3, [sp, #12]
 8002830:	9602      	str	r6, [sp, #8]
 8002832:	9501      	str	r5, [sp, #4]
 8002834:	9400      	str	r4, [sp, #0]
 8002836:	464b      	mov	r3, r9
 8002838:	4642      	mov	r2, r8
 800283a:	492b      	ldr	r1, [pc, #172]	; (80028e8 <main+0x218>)
 800283c:	f003 fe44 	bl	80064c8 <siprintf>
	  printf("%s\r\n", debug_buffer);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4829      	ldr	r0, [pc, #164]	; (80028ec <main+0x21c>)
 8002848:	f003 fdaa 	bl	80063a0 <iprintf>



	  //printf("%lf\r\n", (double)fToInt/1000);
	  //fToInt += 1;
	  HAL_Delay(500);
 800284c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002850:	f000 fe1a 	bl	8003488 <HAL_Delay>


	  if(uart3_rx_flag == 1)
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <main+0x220>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d129      	bne.n	80028b0 <main+0x1e0>
	  {
		  uart3_rx_flag = 0;
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <main+0x220>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART3, uart3_rx_data);	// Transmit received data
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <main+0x224>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	4818      	ldr	r0, [pc, #96]	; (80028cc <main+0x1fc>)
 800286a:	f7ff fee4 	bl	8002636 <LL_USART_TransmitData8>
		  switch(uart3_rx_data)
 800286e:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <main+0x224>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b32      	cmp	r3, #50	; 0x32
 8002874:	d016      	beq.n	80028a4 <main+0x1d4>
 8002876:	2b32      	cmp	r3, #50	; 0x32
 8002878:	dc8b      	bgt.n	8002792 <main+0xc2>
 800287a:	2b30      	cmp	r3, #48	; 0x30
 800287c:	d002      	beq.n	8002884 <main+0x1b4>
 800287e:	2b31      	cmp	r3, #49	; 0x31
 8002880:	d00a      	beq.n	8002898 <main+0x1c8>
 8002882:	e016      	b.n	80028b2 <main+0x1e2>
		  {
		  	  case '0':
		  		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0| LL_GPIO_PIN_7|LL_GPIO_PIN_14);
 8002884:	f244 0181 	movw	r1, #16513	; 0x4081
 8002888:	481b      	ldr	r0, [pc, #108]	; (80028f8 <main+0x228>)
 800288a:	f7ff fee3 	bl	8002654 <LL_GPIO_TogglePin>
		  		  HAL_Delay(500);
 800288e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002892:	f000 fdf9 	bl	8003488 <HAL_Delay>
		  		  break;
 8002896:	e00c      	b.n	80028b2 <main+0x1e2>

		  	  case '1': LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); break;
 8002898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289c:	480a      	ldr	r0, [pc, #40]	; (80028c8 <main+0x1f8>)
 800289e:	f7ff fe84 	bl	80025aa <LL_TIM_CC_EnableChannel>
 80028a2:	e006      	b.n	80028b2 <main+0x1e2>
		  	  case '2': LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4); break;
 80028a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a8:	4807      	ldr	r0, [pc, #28]	; (80028c8 <main+0x1f8>)
 80028aa:	f7ff fe8f 	bl	80025cc <LL_TIM_CC_DisableChannel>
 80028ae:	e000      	b.n	80028b2 <main+0x1e2>
		  }
	  }
 80028b0:	bf00      	nop
	  Read_Magneto((hw579.MAGNETO), &compassData);
 80028b2:	e76e      	b.n	8002792 <main+0xc2>
 80028b4:	f3af 8000 	nop.w
 80028b8:	cccccccd 	.word	0xcccccccd
 80028bc:	3ff4cccc 	.word	0x3ff4cccc
 80028c0:	40005400 	.word	0x40005400
 80028c4:	20000238 	.word	0x20000238
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40004800 	.word	0x40004800
 80028d0:	fffffe0c 	.word	0xfffffe0c
 80028d4:	0800a2b4 	.word	0x0800a2b4
 80028d8:	200002c0 	.word	0x200002c0
 80028dc:	0800a2c8 	.word	0x0800a2c8
 80028e0:	20000250 	.word	0x20000250
 80028e4:	20000280 	.word	0x20000280
 80028e8:	0800a2d4 	.word	0x0800a2d4
 80028ec:	0800a330 	.word	0x0800a330
 80028f0:	20000330 	.word	0x20000330
 80028f4:	20000331 	.word	0x20000331
 80028f8:	40020400 	.word	0x40020400

080028fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b094      	sub	sp, #80	; 0x50
 8002900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002902:	f107 0320 	add.w	r3, r7, #32
 8002906:	2230      	movs	r2, #48	; 0x30
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fec6 	bl	800569c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <SystemClock_Config+0xd8>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <SystemClock_Config+0xd8>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <SystemClock_Config+0xd8>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800293c:	2300      	movs	r3, #0
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <SystemClock_Config+0xdc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <SystemClock_Config+0xdc>)
 8002946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <SystemClock_Config+0xdc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002958:	2301      	movs	r3, #1
 800295a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800295c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002962:	2302      	movs	r3, #2
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800296c:	2304      	movs	r3, #4
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002970:	23b4      	movs	r3, #180	; 0xb4
 8002972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002974:	2302      	movs	r3, #2
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002978:	2304      	movs	r3, #4
 800297a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297c:	f107 0320 	add.w	r3, r7, #32
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fedb 	bl	800373c <HAL_RCC_OscConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800298c:	f000 f826 	bl	80029dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002990:	f000 fe84 	bl	800369c <HAL_PWREx_EnableOverDrive>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800299a:	f000 f81f 	bl	80029dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299e:	230f      	movs	r3, #15
 80029a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a2:	2302      	movs	r3, #2
 80029a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	2105      	movs	r1, #5
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 f935 	bl	8003c2c <HAL_RCC_ClockConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80029c8:	f000 f808 	bl	80029dc <Error_Handler>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3750      	adds	r7, #80	; 0x50
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029e0:	b672      	cpsid	i
}
 80029e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <Error_Handler+0x8>
	...

080029e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_MspInit+0x4c>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <HAL_MspInit+0x4c>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_MspInit+0x4c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_MspInit+0x4c>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <HAL_MspInit+0x4c>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_MspInit+0x4c>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800

08002a38 <LL_USART_IsActiveFlag_RXNE>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_USART_ClearFlag_RXNE>:
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f06f 0220 	mvn.w	r2, #32
 8002a6c:	601a      	str	r2, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_USART_ReceiveData8>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	b2db      	uxtb	r3, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <NMI_Handler+0x4>

08002a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <BusFault_Handler+0x4>

08002aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <UsageFault_Handler+0x4>

08002ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae0:	f000 fcb2 	bl	8003448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3))
 8002afc:	480a      	ldr	r0, [pc, #40]	; (8002b28 <USART3_IRQHandler+0x30>)
 8002afe:	f7ff ff9b 	bl	8002a38 <LL_USART_IsActiveFlag_RXNE>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <USART3_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 8002b08:	4807      	ldr	r0, [pc, #28]	; (8002b28 <USART3_IRQHandler+0x30>)
 8002b0a:	f7ff ffa8 	bl	8002a5e <LL_USART_ClearFlag_RXNE>
		uart3_rx_data = LL_USART_ReceiveData8(USART3);
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <USART3_IRQHandler+0x30>)
 8002b10:	f7ff ffb3 	bl	8002a7a <LL_USART_ReceiveData8>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <USART3_IRQHandler+0x34>)
 8002b1a:	701a      	strb	r2, [r3, #0]
		uart3_rx_flag = 1;
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <USART3_IRQHandler+0x38>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40004800 	.word	0x40004800
 8002b2c:	20000331 	.word	0x20000331
 8002b30:	20000330 	.word	0x20000330

08002b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
	return 1;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_kill>:

int _kill(int pid, int sig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b4e:	f002 fd7b 	bl	8005648 <__errno>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2216      	movs	r2, #22
 8002b56:	601a      	str	r2, [r3, #0]
	return -1;
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_exit>:

void _exit (int status)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ffe7 	bl	8002b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b76:	e7fe      	b.n	8002b76 <_exit+0x12>

08002b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e00a      	b.n	8002ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b8a:	f3af 8000 	nop.w
 8002b8e:	4601      	mov	r1, r0
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	60ba      	str	r2, [r7, #8]
 8002b96:	b2ca      	uxtb	r2, r1
 8002b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	dbf0      	blt.n	8002b8a <_read+0x12>
	}

return len;
 8002ba8:	687b      	ldr	r3, [r7, #4]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bda:	605a      	str	r2, [r3, #4]
	return 0;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <_isatty>:

int _isatty(int file)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <_sbrk+0x5c>)
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_sbrk+0x60>)
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <_sbrk+0x64>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <_sbrk+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c4c:	f002 fcfc 	bl	8005648 <__errno>
 8002c50:	4603      	mov	r3, r0
 8002c52:	220c      	movs	r2, #12
 8002c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e009      	b.n	8002c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <_sbrk+0x64>)
 8002c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20030000 	.word	0x20030000
 8002c7c:	00000400 	.word	0x00000400
 8002c80:	20000334 	.word	0x20000334
 8002c84:	20000350 	.word	0x20000350

08002c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <SystemInit+0x20>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <SystemInit+0x20>)
 8002c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <__NVIC_EnableIRQ+0x38>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_TIM_EnableARRPreload>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	601a      	str	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d01c      	beq.n	8002e2a <LL_TIM_OC_DisableFast+0x4a>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d017      	beq.n	8002e26 <LL_TIM_OC_DisableFast+0x46>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d012      	beq.n	8002e22 <LL_TIM_OC_DisableFast+0x42>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d00d      	beq.n	8002e1e <LL_TIM_OC_DisableFast+0x3e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d007      	beq.n	8002e1a <LL_TIM_OC_DisableFast+0x3a>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e10:	d101      	bne.n	8002e16 <LL_TIM_OC_DisableFast+0x36>
 8002e12:	2305      	movs	r3, #5
 8002e14:	e00a      	b.n	8002e2c <LL_TIM_OC_DisableFast+0x4c>
 8002e16:	2306      	movs	r3, #6
 8002e18:	e008      	b.n	8002e2c <LL_TIM_OC_DisableFast+0x4c>
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	e006      	b.n	8002e2c <LL_TIM_OC_DisableFast+0x4c>
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e004      	b.n	8002e2c <LL_TIM_OC_DisableFast+0x4c>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e002      	b.n	8002e2c <LL_TIM_OC_DisableFast+0x4c>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_TIM_OC_DisableFast+0x4c>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3318      	adds	r3, #24
 8002e32:	4619      	mov	r1, r3
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LL_TIM_OC_DisableFast+0x84>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	440b      	add	r3, r1
 8002e3c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	4908      	ldr	r1, [pc, #32]	; (8002e68 <LL_TIM_OC_DisableFast+0x88>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	408b      	lsls	r3, r1
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	401a      	ands	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	601a      	str	r2, [r3, #0]

}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	0800a350 	.word	0x0800a350
 8002e68:	0800a358 	.word	0x0800a358

08002e6c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d01c      	beq.n	8002eb6 <LL_TIM_OC_EnablePreload+0x4a>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d017      	beq.n	8002eb2 <LL_TIM_OC_EnablePreload+0x46>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d012      	beq.n	8002eae <LL_TIM_OC_EnablePreload+0x42>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d00d      	beq.n	8002eaa <LL_TIM_OC_EnablePreload+0x3e>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d007      	beq.n	8002ea6 <LL_TIM_OC_EnablePreload+0x3a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9c:	d101      	bne.n	8002ea2 <LL_TIM_OC_EnablePreload+0x36>
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	e00a      	b.n	8002eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	e008      	b.n	8002eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e006      	b.n	8002eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e004      	b.n	8002eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e002      	b.n	8002eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_TIM_OC_EnablePreload+0x4c>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <LL_TIM_OC_EnablePreload+0x80>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	440b      	add	r3, r1
 8002ec8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <LL_TIM_OC_EnablePreload+0x84>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	408b      	lsls	r3, r1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	601a      	str	r2, [r3, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	0800a350 	.word	0x0800a350
 8002ef0:	0800a358 	.word	0x0800a358

08002ef4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f06:	f023 0307 	bic.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	609a      	str	r2, [r3, #8]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	605a      	str	r2, [r3, #4]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_AHB1_GRP1_EnableClock>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f70:	4907      	ldr	r1, [pc, #28]	; (8002f90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	40023800 	.word	0x40023800

08002f94 <LL_APB1_GRP1_EnableClock>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa0:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b094      	sub	sp, #80	; 0x50
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002fca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	2220      	movs	r2, #32
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fb5a 	bl	800569c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	60da      	str	r2, [r3, #12]
 8002ff4:	611a      	str	r2, [r3, #16]
 8002ff6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f7ff ffcb 	bl	8002f94 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ffe:	f7ff fe55 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8003002:	4603      	mov	r3, r0
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fea5 	bl	8002d58 <NVIC_EncodePriority>
 800300e:	4603      	mov	r3, r0
 8003010:	4619      	mov	r1, r3
 8003012:	201d      	movs	r0, #29
 8003014:	f7ff fe76 	bl	8002d04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8003018:	201d      	movs	r0, #29
 800301a:	f7ff fe55 	bl	8002cc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800301e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003022:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003024:	2300      	movs	r3, #0
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 30-LL_TIM_IC_FILTER_FDIV1_N2;
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <MX_TIM3_Init+0xfc>)
 800302a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800302c:	2300      	movs	r3, #0
 800302e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003030:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003034:	4619      	mov	r1, r3
 8003036:	4823      	ldr	r0, [pc, #140]	; (80030c4 <MX_TIM3_Init+0x100>)
 8003038:	f001 fd68 	bl	8004b0c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800303c:	4821      	ldr	r0, [pc, #132]	; (80030c4 <MX_TIM3_Init+0x100>)
 800303e:	f7ff febe 	bl	8002dbe <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003042:	2100      	movs	r1, #0
 8003044:	481f      	ldr	r0, [pc, #124]	; (80030c4 <MX_TIM3_Init+0x100>)
 8003046:	f7ff ff55 	bl	8002ef4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800304a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800304e:	481d      	ldr	r0, [pc, #116]	; (80030c4 <MX_TIM3_Init+0x100>)
 8003050:	f7ff ff0c 	bl	8002e6c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003054:	2360      	movs	r3, #96	; 0x60
 8003056:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 14;
 8003060:	230e      	movs	r3, #14
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003064:	2300      	movs	r3, #0
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	461a      	mov	r2, r3
 800306e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003072:	4814      	ldr	r0, [pc, #80]	; (80030c4 <MX_TIM3_Init+0x100>)
 8003074:	f001 fde4 	bl	8004c40 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800307c:	4811      	ldr	r0, [pc, #68]	; (80030c4 <MX_TIM3_Init+0x100>)
 800307e:	f7ff feaf 	bl	8002de0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003082:	2100      	movs	r1, #0
 8003084:	480f      	ldr	r0, [pc, #60]	; (80030c4 <MX_TIM3_Init+0x100>)
 8003086:	f7ff ff4a 	bl	8002f1e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800308a:	480e      	ldr	r0, [pc, #56]	; (80030c4 <MX_TIM3_Init+0x100>)
 800308c:	f7ff ff5a 	bl	8002f44 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003090:	2002      	movs	r0, #2
 8003092:	f7ff ff67 	bl	8002f64 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8003096:	2302      	movs	r3, #2
 8003098:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800309a:	2302      	movs	r3, #2
 800309c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80030aa:	2302      	movs	r3, #2
 80030ac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <MX_TIM3_Init+0x104>)
 80030b4:	f001 f9c4 	bl	8004440 <LL_GPIO_Init>

}
 80030b8:	bf00      	nop
 80030ba:	3750      	adds	r7, #80	; 0x50
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	fff0001e 	.word	0xfff0001e
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40020400 	.word	0x40020400

080030cc <__NVIC_GetPriorityGrouping>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <__NVIC_EnableIRQ+0x38>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_USART_Enable>:
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60da      	str	r2, [r3, #12]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_USART_ConfigAsyncMode>:
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	615a      	str	r2, [r3, #20]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <LL_AHB1_GRP1_EnableClock>:
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4313      	orrs	r3, r2
 800323e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4013      	ands	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40023800 	.word	0x40023800

0800325c <LL_APB1_GRP1_EnableClock>:
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003268:	4907      	ldr	r1, [pc, #28]	; (8003288 <LL_APB1_GRP1_EnableClock+0x2c>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4013      	ands	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40023800 	.word	0x40023800

0800328c <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08e      	sub	sp, #56	; 0x38
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	611a      	str	r2, [r3, #16]
 80032a2:	615a      	str	r2, [r3, #20]
 80032a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
 80032b4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80032b6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80032ba:	f7ff ffcf 	bl	800325c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80032be:	2008      	movs	r0, #8
 80032c0:	f7ff ffb4 	bl	800322c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80032c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032ca:	2302      	movs	r3, #2
 80032cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80032da:	2307      	movs	r3, #7
 80032dc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4819      	ldr	r0, [pc, #100]	; (8003348 <MX_USART3_UART_Init+0xbc>)
 80032e4:	f001 f8ac 	bl	8004440 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80032e8:	f7ff fef0 	bl	80030cc <__NVIC_GetPriorityGrouping>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff40 	bl	8003178 <NVIC_EncodePriority>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4619      	mov	r1, r3
 80032fc:	2027      	movs	r0, #39	; 0x27
 80032fe:	f7ff ff11 	bl	8003124 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8003302:	2027      	movs	r0, #39	; 0x27
 8003304:	f7ff fef0 	bl	80030e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8003308:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800330c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003316:	2300      	movs	r3, #0
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800331a:	230c      	movs	r3, #12
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4619      	mov	r1, r3
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <MX_USART3_UART_Init+0xc0>)
 800332e:	f002 f8d3 	bl	80054d8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003332:	4806      	ldr	r0, [pc, #24]	; (800334c <MX_USART3_UART_Init+0xc0>)
 8003334:	f7ff ff63 	bl	80031fe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003338:	4804      	ldr	r0, [pc, #16]	; (800334c <MX_USART3_UART_Init+0xc0>)
 800333a:	f7ff ff50 	bl	80031de <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800333e:	bf00      	nop
 8003340:	3738      	adds	r7, #56	; 0x38
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40020c00 	.word	0x40020c00
 800334c:	40004800 	.word	0x40004800

08003350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003388 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003356:	490e      	ldr	r1, [pc, #56]	; (8003390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003358:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800335c:	e002      	b.n	8003364 <LoopCopyDataInit>

0800335e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003362:	3304      	adds	r3, #4

08003364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003368:	d3f9      	bcc.n	800335e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800336a:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800336c:	4c0b      	ldr	r4, [pc, #44]	; (800339c <LoopFillZerobss+0x26>)
  movs r3, #0
 800336e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003370:	e001      	b.n	8003376 <LoopFillZerobss>

08003372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003374:	3204      	adds	r2, #4

08003376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003378:	d3fb      	bcc.n	8003372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800337a:	f7ff fc85 	bl	8002c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800337e:	f002 f969 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003382:	f7ff f9a5 	bl	80026d0 <main>
  bx  lr    
 8003386:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003388:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800338c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003390:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003394:	0800a81c 	.word	0x0800a81c
  ldr r2, =_sbss
 8003398:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800339c:	2000034c 	.word	0x2000034c

080033a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033a0:	e7fe      	b.n	80033a0 <ADC_IRQHandler>
	...

080033a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_Init+0x40>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <HAL_Init+0x40>)
 80033ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_Init+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_Init+0x40>)
 80033ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_Init+0x40>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <HAL_Init+0x40>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033cc:	2003      	movs	r0, #3
 80033ce:	f000 f931 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f000 f808 	bl	80033e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d8:	f7ff fb06 	bl	80029e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023c00 	.word	0x40023c00

080033e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_InitTick+0x54>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_InitTick+0x58>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	4619      	mov	r1, r3
 80033fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f93b 	bl	8003682 <HAL_SYSTICK_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e00e      	b.n	8003434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d80a      	bhi.n	8003432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800341c:	2200      	movs	r2, #0
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	f000 f911 	bl	800364a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <HAL_InitTick+0x5c>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000000 	.word	0x20000000
 8003440:	20000008 	.word	0x20000008
 8003444:	20000004 	.word	0x20000004

08003448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_IncTick+0x20>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_IncTick+0x24>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4413      	add	r3, r2
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_IncTick+0x24>)
 800345a:	6013      	str	r3, [r2, #0]
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000008 	.word	0x20000008
 800346c:	20000338 	.word	0x20000338

08003470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return uwTick;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_GetTick+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000338 	.word	0x20000338

08003488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff ffee 	bl	8003470 <HAL_GetTick>
 8003494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d005      	beq.n	80034ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_Delay+0x44>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034ae:	bf00      	nop
 80034b0:	f7ff ffde 	bl	8003470 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d8f7      	bhi.n	80034b0 <HAL_Delay+0x28>
  {
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000008 	.word	0x20000008

080034d0 <__NVIC_SetPriorityGrouping>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003502:	4a04      	ldr	r2, [pc, #16]	; (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	60d3      	str	r3, [r2, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_GetPriorityGrouping>:
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <__NVIC_GetPriorityGrouping+0x18>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0307 	and.w	r3, r3, #7
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_SetPriority>:
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f7ff ff8e 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff47 	bl	80034d0 <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff5c 	bl	8003518 <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff8e 	bl	8003588 <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5d 	bl	8003534 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffb0 	bl	80035f0 <SysTick_Config>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_PWREx_EnableOverDrive+0x90>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <HAL_PWREx_EnableOverDrive+0x90>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	; 0x40
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_PWREx_EnableOverDrive+0x90>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036c2:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_PWREx_EnableOverDrive+0x94>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036c8:	f7ff fed2 	bl	8003470 <HAL_GetTick>
 80036cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036ce:	e009      	b.n	80036e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036d0:	f7ff fece 	bl	8003470 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036de:	d901      	bls.n	80036e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e01f      	b.n	8003724 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_PWREx_EnableOverDrive+0x98>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f0:	d1ee      	bne.n	80036d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036f8:	f7ff feba 	bl	8003470 <HAL_GetTick>
 80036fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036fe:	e009      	b.n	8003714 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003700:	f7ff feb6 	bl	8003470 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370e:	d901      	bls.n	8003714 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e007      	b.n	8003724 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <HAL_PWREx_EnableOverDrive+0x98>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003720:	d1ee      	bne.n	8003700 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40023800 	.word	0x40023800
 8003730:	420e0040 	.word	0x420e0040
 8003734:	40007000 	.word	0x40007000
 8003738:	420e0044 	.word	0x420e0044

0800373c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e267      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d075      	beq.n	8003846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00c      	beq.n	8003780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003766:	4b85      	ldr	r3, [pc, #532]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d112      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05b      	beq.n	8003844 <HAL_RCC_OscConfig+0x108>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d157      	bne.n	8003844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e242      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x74>
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e01d      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x98>
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6f      	ldr	r2, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b6d      	ldr	r3, [pc, #436]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6c      	ldr	r2, [pc, #432]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037d4:	4b69      	ldr	r3, [pc, #420]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a68      	ldr	r2, [pc, #416]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b66      	ldr	r3, [pc, #408]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a65      	ldr	r2, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7ff fe3c 	bl	8003470 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7ff fe38 	bl	8003470 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e207      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b5b      	ldr	r3, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0xc0>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7ff fe28 	bl	8003470 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003824:	f7ff fe24 	bl	8003470 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1f3      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0xe8>
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003866:	2b08      	cmp	r3, #8
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b44      	ldr	r3, [pc, #272]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1c7      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	e03a      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7ff fddd 	bl	8003470 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7ff fdd9 	bl	8003470 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1a8      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4925      	ldr	r1, [pc, #148]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7ff fdbc 	bl	8003470 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fc:	f7ff fdb8 	bl	8003470 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e187      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d036      	beq.n	8003994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7ff fd9c 	bl	8003470 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393c:	f7ff fd98 	bl	8003470 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e167      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x200>
 800395a:	e01b      	b.n	8003994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7ff fd85 	bl	8003470 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	e00e      	b.n	8003988 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396a:	f7ff fd81 	bl	8003470 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d907      	bls.n	8003988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e150      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	42470000 	.word	0x42470000
 8003984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 800398a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ea      	bne.n	800396a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8097 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b7d      	ldr	r3, [pc, #500]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a7c      	ldr	r2, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039de:	4b74      	ldr	r3, [pc, #464]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a73      	ldr	r2, [pc, #460]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7ff fd41 	bl	8003470 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7ff fd3d 	bl	8003470 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e10c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2ea>
 8003a18:	4b64      	ldr	r3, [pc, #400]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a63      	ldr	r2, [pc, #396]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	e01c      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x30c>
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a5e      	ldr	r2, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a5b      	ldr	r2, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	4a57      	ldr	r2, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70
 8003a54:	4b55      	ldr	r3, [pc, #340]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f023 0304 	bic.w	r3, r3, #4
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7ff fd02 	bl	8003470 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7ff fcfe 	bl	8003470 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0cb      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ee      	beq.n	8003a70 <HAL_RCC_OscConfig+0x334>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7ff fcec 	bl	8003470 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7ff fce8 	bl	8003470 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0b5      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ee      	bne.n	8003a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	4a38      	ldr	r2, [pc, #224]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a1 	beq.w	8003c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d05c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d141      	bne.n	8003b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7ff fcbc 	bl	8003470 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7ff fcb8 	bl	8003470 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e087      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	019b      	lsls	r3, r3, #6
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	491b      	ldr	r1, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7ff fc91 	bl	8003470 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b52:	f7ff fc8d 	bl	8003470 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e05c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x416>
 8003b70:	e054      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7ff fc7a 	bl	8003470 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7ff fc76 	bl	8003470 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e045      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x444>
 8003b9e:	e03d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e038      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x4ec>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d028      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d121      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d11a      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	3b01      	subs	r3, #1
 8003c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cc      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d90c      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0b8      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d044      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e067      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d1c:	f7ff fba8 	bl	8003470 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7ff fba4 	bl	8003470 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e04f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d20c      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e032      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4916      	ldr	r1, [pc, #88]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db2:	f000 f821 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fb08 	bl	80033e8 <HAL_InitTick>

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00
 8003de8:	40023800 	.word	0x40023800
 8003dec:	0800a338 	.word	0x0800a338
 8003df0:	20000000 	.word	0x20000000
 8003df4:	20000004 	.word	0x20000004

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b094      	sub	sp, #80	; 0x50
 8003dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	647b      	str	r3, [r7, #68]	; 0x44
 8003e04:	2300      	movs	r3, #0
 8003e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e08:	2300      	movs	r3, #0
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e10:	4b79      	ldr	r3, [pc, #484]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d00d      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x40>
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	f200 80e1 	bhi.w	8003fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x34>
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e2a:	e0db      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b73      	ldr	r3, [pc, #460]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e30:	e0db      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e32:	4b73      	ldr	r3, [pc, #460]	; (8004000 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e36:	e0d8      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e38:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	2200      	movs	r2, #0
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e60:	633b      	str	r3, [r7, #48]	; 0x30
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
 8003e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	f04f 0000 	mov.w	r0, #0
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	0159      	lsls	r1, r3, #5
 8003e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e7c:	0150      	lsls	r0, r2, #5
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4621      	mov	r1, r4
 8003e84:	1a51      	subs	r1, r2, r1
 8003e86:	6139      	str	r1, [r7, #16]
 8003e88:	4629      	mov	r1, r5
 8003e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	018b      	lsls	r3, r1, #6
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	018a      	lsls	r2, r1, #6
 8003eaa:	4651      	mov	r1, sl
 8003eac:	ebb2 0801 	subs.w	r8, r2, r1
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eca:	4690      	mov	r8, r2
 8003ecc:	4699      	mov	r9, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	eb18 0303 	adds.w	r3, r8, r3
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	eb49 0303 	adc.w	r3, r9, r3
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eea:	4629      	mov	r1, r5
 8003eec:	024b      	lsls	r3, r1, #9
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	024a      	lsls	r2, r1, #9
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f08:	f7fc fece 	bl	8000ca8 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	e058      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f16:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	4611      	mov	r1, r2
 8003f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	0159      	lsls	r1, r3, #5
 8003f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f42:	0150      	lsls	r0, r2, #5
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4641      	mov	r1, r8
 8003f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f4e:	4649      	mov	r1, r9
 8003f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f68:	ebb2 040a 	subs.w	r4, r2, sl
 8003f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	00eb      	lsls	r3, r5, #3
 8003f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7e:	00e2      	lsls	r2, r4, #3
 8003f80:	4614      	mov	r4, r2
 8003f82:	461d      	mov	r5, r3
 8003f84:	4643      	mov	r3, r8
 8003f86:	18e3      	adds	r3, r4, r3
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	eb45 0303 	adc.w	r3, r5, r3
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	028b      	lsls	r3, r1, #10
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa8:	4621      	mov	r1, r4
 8003faa:	028a      	lsls	r2, r1, #10
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	61fa      	str	r2, [r7, #28]
 8003fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fbc:	f7fc fe74 	bl	8000ca8 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe2:	e002      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3750      	adds	r7, #80	; 0x50
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	007a1200 	.word	0x007a1200

08004004 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <LL_EXTI_EnableIT_0_31+0x20>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4904      	ldr	r1, [pc, #16]	; (8004024 <LL_EXTI_EnableIT_0_31+0x20>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40013c00 	.word	0x40013c00

08004028 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <LL_EXTI_DisableIT_0_31+0x24>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	43db      	mvns	r3, r3
 8004038:	4904      	ldr	r1, [pc, #16]	; (800404c <LL_EXTI_DisableIT_0_31+0x24>)
 800403a:	4013      	ands	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40013c00 	.word	0x40013c00

08004050 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <LL_EXTI_EnableEvent_0_31+0x20>)
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4904      	ldr	r1, [pc, #16]	; (8004070 <LL_EXTI_EnableEvent_0_31+0x20>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]

}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40013c00 	.word	0x40013c00

08004074 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <LL_EXTI_DisableEvent_0_31+0x24>)
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	43db      	mvns	r3, r3
 8004084:	4904      	ldr	r1, [pc, #16]	; (8004098 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004086:	4013      	ands	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40013c00 	.word	0x40013c00

0800409c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40013c00 	.word	0x40013c00

080040c0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	4904      	ldr	r1, [pc, #16]	; (80040e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]

}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40013c00 	.word	0x40013c00

080040e8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	4904      	ldr	r1, [pc, #16]	; (8004108 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60cb      	str	r3, [r1, #12]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40013c00 	.word	0x40013c00

0800410c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	43db      	mvns	r3, r3
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800411e:	4013      	ands	r3, r2
 8004120:	60cb      	str	r3, [r1, #12]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40013c00 	.word	0x40013c00

08004134 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	791b      	ldrb	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d065      	beq.n	8004214 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d06c      	beq.n	800422a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	795b      	ldrb	r3, [r3, #5]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d01c      	beq.n	8004192 <LL_EXTI_Init+0x5e>
 8004158:	2b02      	cmp	r3, #2
 800415a:	dc25      	bgt.n	80041a8 <LL_EXTI_Init+0x74>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <LL_EXTI_Init+0x32>
 8004160:	2b01      	cmp	r3, #1
 8004162:	d00b      	beq.n	800417c <LL_EXTI_Init+0x48>
 8004164:	e020      	b.n	80041a8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff ff82 	bl	8004074 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff45 	bl	8004004 <LL_EXTI_EnableIT_0_31>
          break;
 800417a:	e018      	b.n	80041ae <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff51 	bl	8004028 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ff60 	bl	8004050 <LL_EXTI_EnableEvent_0_31>
          break;
 8004190:	e00d      	b.n	80041ae <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ff34 	bl	8004004 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ff55 	bl	8004050 <LL_EXTI_EnableEvent_0_31>
          break;
 80041a6:	e002      	b.n	80041ae <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
          break;
 80041ac:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	799b      	ldrb	r3, [r3, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d039      	beq.n	800422a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	799b      	ldrb	r3, [r3, #6]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d01c      	beq.n	80041f8 <LL_EXTI_Init+0xc4>
 80041be:	2b03      	cmp	r3, #3
 80041c0:	dc25      	bgt.n	800420e <LL_EXTI_Init+0xda>
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d002      	beq.n	80041cc <LL_EXTI_Init+0x98>
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d00b      	beq.n	80041e2 <LL_EXTI_Init+0xae>
 80041ca:	e020      	b.n	800420e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff9b 	bl	800410c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff5e 	bl	800409c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80041e0:	e024      	b.n	800422c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff6a 	bl	80040c0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff ff79 	bl	80040e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80041f6:	e019      	b.n	800422c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff4d 	bl	800409c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff ff6e 	bl	80040e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800420c:	e00e      	b.n	800422c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
            break;
 8004212:	e00b      	b.n	800422c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff05 	bl	8004028 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff ff26 	bl	8004074 <LL_EXTI_DisableEvent_0_31>
 8004228:	e000      	b.n	800422c <LL_EXTI_Init+0xf8>
      }
 800422a:	bf00      	nop
  }
  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <LL_GPIO_SetPinMode>:
{
 8004236:	b480      	push	{r7}
 8004238:	b089      	sub	sp, #36	; 0x24
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	613b      	str	r3, [r7, #16]
  return result;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	2103      	movs	r1, #3
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	401a      	ands	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	61bb      	str	r3, [r7, #24]
  return result;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]
}
 8004288:	bf00      	nop
 800428a:	3724      	adds	r7, #36	; 0x24
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_GPIO_SetPinOutputType>:
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	401a      	ands	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	431a      	orrs	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	605a      	str	r2, [r3, #4]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_GPIO_SetPinSpeed>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	613b      	str	r3, [r7, #16]
  return result;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2103      	movs	r1, #3
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	609a      	str	r2, [r3, #8]
}
 8004316:	bf00      	nop
 8004318:	3724      	adds	r7, #36	; 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_GPIO_SetPinPull>:
{
 8004322:	b480      	push	{r7}
 8004324:	b089      	sub	sp, #36	; 0x24
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	613b      	str	r3, [r7, #16]
  return result;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2103      	movs	r1, #3
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	401a      	ands	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	61bb      	str	r3, [r7, #24]
  return result;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	60da      	str	r2, [r3, #12]
}
 8004374:	bf00      	nop
 8004376:	3724      	adds	r7, #36	; 0x24
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_GPIO_SetAFPin_0_7>:
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	613b      	str	r3, [r7, #16]
  return result;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	210f      	movs	r1, #15
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	61bb      	str	r3, [r7, #24]
  return result;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_GPIO_SetAFPin_8_15>:
{
 80043de:	b480      	push	{r7}
 80043e0:	b089      	sub	sp, #36	; 0x24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	613b      	str	r3, [r7, #16]
  return result;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	210f      	movs	r1, #15
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	61bb      	str	r3, [r7, #24]
  return result;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	fab3 f383 	clz	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	431a      	orrs	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004434:	bf00      	nop
 8004436:	3724      	adds	r7, #36	; 0x24
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	613b      	str	r3, [r7, #16]
  return result;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800446a:	e050      	b.n	800450e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2101      	movs	r1, #1
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d042      	beq.n	8004508 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d003      	beq.n	8004492 <LL_GPIO_Init+0x52>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d10d      	bne.n	80044ae <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	461a      	mov	r2, r3
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff ff12 	bl	80042c4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	461a      	mov	r2, r3
 80044a6:	69b9      	ldr	r1, [r7, #24]
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fef3 	bl	8004294 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	461a      	mov	r2, r3
 80044b4:	69b9      	ldr	r1, [r7, #24]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ff33 	bl	8004322 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d11a      	bne.n	80044fa <LL_GPIO_Init+0xba>
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	fa93 f3a3 	rbit	r3, r3
 80044ce:	60bb      	str	r3, [r7, #8]
  return result;
 80044d0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b07      	cmp	r3, #7
 80044da:	d807      	bhi.n	80044ec <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	461a      	mov	r2, r3
 80044e2:	69b9      	ldr	r1, [r7, #24]
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff4b 	bl	8004380 <LL_GPIO_SetAFPin_0_7>
 80044ea:	e006      	b.n	80044fa <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	461a      	mov	r2, r3
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff ff72 	bl	80043de <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	461a      	mov	r2, r3
 8004500:	69b9      	ldr	r1, [r7, #24]
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fe97 	bl	8004236 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1a7      	bne.n	800446c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <LL_I2C_Enable>:
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_I2C_Disable>:
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <LL_I2C_ConfigFilters>:
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f023 021f 	bic.w	r2, r3, #31
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	430b      	orrs	r3, r1
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_I2C_SetOwnAddress1>:
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	609a      	str	r2, [r3, #8]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <LL_I2C_ConfigSpeed>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <LL_I2C_ConfigSpeed+0x124>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0c9b      	lsrs	r3, r3, #18
 80045e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	493a      	ldr	r1, [pc, #232]	; (80046ec <LL_I2C_ConfigSpeed+0x128>)
 8004602:	428b      	cmp	r3, r1
 8004604:	d802      	bhi.n	800460c <LL_I2C_ConfigSpeed+0x48>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3301      	adds	r3, #1
 800460a:	e009      	b.n	8004620 <LL_I2C_ConfigSpeed+0x5c>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	4936      	ldr	r1, [pc, #216]	; (80046f0 <LL_I2C_ConfigSpeed+0x12c>)
 8004618:	fba1 1303 	umull	r1, r3, r1, r3
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	3301      	adds	r3, #1
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a30      	ldr	r2, [pc, #192]	; (80046ec <LL_I2C_ConfigSpeed+0x128>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d939      	bls.n	80046a2 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d117      	bne.n	8004664 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465c:	e01d      	b.n	800469a <LL_I2C_ConfigSpeed+0xd6>
 800465e:	f248 0301 	movw	r3, #32769	; 0x8001
 8004662:	e01a      	b.n	800469a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009a      	lsls	r2, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009a      	lsls	r2, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004694:	e001      	b.n	800469a <LL_I2C_ConfigSpeed+0xd6>
 8004696:	f248 0301 	movw	r3, #32769	; 0x8001
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e011      	b.n	80046c6 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046b0:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	e000      	b.n	80046c4 <LL_I2C_ConfigSpeed+0x100>
 80046c2:	2304      	movs	r3, #4
 80046c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80046ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	61da      	str	r2, [r3, #28]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	431bde83 	.word	0x431bde83
 80046ec:	000186a0 	.word	0x000186a0
 80046f0:	10624dd3 	.word	0x10624dd3

080046f4 <LL_I2C_SetMode>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 021a 	bic.w	r2, r3, #26
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <LL_I2C_AcknowledgeNextData>:
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fefb 	bl	8004546 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004750:	f107 0308 	add.w	r3, r7, #8
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f89d 	bl	8004894 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68d9      	ldr	r1, [r3, #12]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	461a      	mov	r2, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fefe 	bl	8004566 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800476a:	6939      	ldr	r1, [r7, #16]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ff25 	bl	80045c4 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6959      	ldr	r1, [r3, #20]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	461a      	mov	r2, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff04 	bl	8004592 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ffaf 	bl	80046f4 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff fec5 	bl	8004526 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ffb9 	bl	800471a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <LL_RCC_GetSysClkSource+0x18>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <LL_RCC_GetAHBPrescaler+0x18>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800

080047ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <LL_RCC_GetAPB1Prescaler+0x18>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <LL_RCC_GetAPB2Prescaler+0x18>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800

08004824 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <LL_RCC_PLL_GetMainSource+0x18>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800

08004840 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <LL_RCC_PLL_GetN+0x18>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800484e:	4618      	mov	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40023800 	.word	0x40023800

0800485c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <LL_RCC_PLL_GetP+0x18>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800

08004878 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <LL_RCC_PLL_GetDivider+0x18>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800

08004894 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800489c:	f000 f820 	bl	80048e0 <RCC_GetSystemClockFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f840 	bl	8004930 <RCC_GetHCLKClockFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f84e 	bl	800495c <RCC_GetPCLK1ClockFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f85a 	bl	8004984 <RCC_GetPCLK2ClockFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60da      	str	r2, [r3, #12]
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80048ea:	f7ff ff63 	bl	80047b4 <LL_RCC_GetSysClkSource>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d00c      	beq.n	800490e <RCC_GetSystemClockFreq+0x2e>
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d80f      	bhi.n	8004918 <RCC_GetSystemClockFreq+0x38>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <RCC_GetSystemClockFreq+0x22>
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d003      	beq.n	8004908 <RCC_GetSystemClockFreq+0x28>
 8004900:	e00a      	b.n	8004918 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <RCC_GetSystemClockFreq+0x48>)
 8004904:	607b      	str	r3, [r7, #4]
      break;
 8004906:	e00a      	b.n	800491e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <RCC_GetSystemClockFreq+0x4c>)
 800490a:	607b      	str	r3, [r7, #4]
      break;
 800490c:	e007      	b.n	800491e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800490e:	2008      	movs	r0, #8
 8004910:	f000 f84c 	bl	80049ac <RCC_PLL_GetFreqDomain_SYS>
 8004914:	6078      	str	r0, [r7, #4]
      break;
 8004916:	e002      	b.n	800491e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <RCC_GetSystemClockFreq+0x48>)
 800491a:	607b      	str	r3, [r7, #4]
      break;
 800491c:	bf00      	nop
  }

  return frequency;
 800491e:	687b      	ldr	r3, [r7, #4]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	00f42400 	.word	0x00f42400
 800492c:	007a1200 	.word	0x007a1200

08004930 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004938:	f7ff ff4a 	bl	80047d0 <LL_RCC_GetAHBPrescaler>
 800493c:	4603      	mov	r3, r0
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <RCC_GetHCLKClockFreq+0x28>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	40d3      	lsrs	r3, r2
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	0800a338 	.word	0x0800a338

0800495c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004964:	f7ff ff42 	bl	80047ec <LL_RCC_GetAPB1Prescaler>
 8004968:	4603      	mov	r3, r0
 800496a:	0a9b      	lsrs	r3, r3, #10
 800496c:	4a04      	ldr	r2, [pc, #16]	; (8004980 <RCC_GetPCLK1ClockFreq+0x24>)
 800496e:	5cd3      	ldrb	r3, [r2, r3]
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	40d3      	lsrs	r3, r2
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	0800a348 	.word	0x0800a348

08004984 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800498c:	f7ff ff3c 	bl	8004808 <LL_RCC_GetAPB2Prescaler>
 8004990:	4603      	mov	r3, r0
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	40d3      	lsrs	r3, r2
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	0800a348 	.word	0x0800a348

080049ac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80049c0:	f7ff ff30 	bl	8004824 <LL_RCC_PLL_GetMainSource>
 80049c4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d2:	d003      	beq.n	80049dc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80049d4:	e005      	b.n	80049e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80049d8:	617b      	str	r3, [r7, #20]
      break;
 80049da:	e005      	b.n	80049e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80049de:	617b      	str	r3, [r7, #20]
      break;
 80049e0:	e002      	b.n	80049e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80049e4:	617b      	str	r3, [r7, #20]
      break;
 80049e6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d113      	bne.n	8004a16 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80049ee:	f7ff ff43 	bl	8004878 <LL_RCC_PLL_GetDivider>
 80049f2:	4602      	mov	r2, r0
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	fbb3 f4f2 	udiv	r4, r3, r2
 80049fa:	f7ff ff21 	bl	8004840 <LL_RCC_PLL_GetN>
 80049fe:	4603      	mov	r3, r0
 8004a00:	fb03 f404 	mul.w	r4, r3, r4
 8004a04:	f7ff ff2a 	bl	800485c <LL_RCC_PLL_GetP>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fbb4 f3f3 	udiv	r3, r4, r3
 8004a14:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004a16:	693b      	ldr	r3, [r7, #16]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	007a1200 	.word	0x007a1200

08004a28 <LL_TIM_SetPrescaler>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_TIM_SetAutoReload>:
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_TIM_SetRepetitionCounter>:
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <LL_TIM_OC_SetCompareCH1>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_TIM_OC_SetCompareCH2>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_TIM_OC_SetCompareCH3>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_TIM_OC_SetCompareCH4>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f043 0201 	orr.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	615a      	str	r2, [r3, #20]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3d      	ldr	r2, [pc, #244]	; (8004c14 <LL_TIM_Init+0x108>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <LL_TIM_Init+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d00f      	beq.n	8004b4c <LL_TIM_Init+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3a      	ldr	r2, [pc, #232]	; (8004c18 <LL_TIM_Init+0x10c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <LL_TIM_Init+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a39      	ldr	r2, [pc, #228]	; (8004c1c <LL_TIM_Init+0x110>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <LL_TIM_Init+0x40>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a38      	ldr	r2, [pc, #224]	; (8004c20 <LL_TIM_Init+0x114>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <LL_TIM_Init+0x40>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a37      	ldr	r2, [pc, #220]	; (8004c24 <LL_TIM_Init+0x118>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d106      	bne.n	8004b5a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2d      	ldr	r2, [pc, #180]	; (8004c14 <LL_TIM_Init+0x108>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d02b      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b68:	d027      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <LL_TIM_Init+0x10c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d023      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <LL_TIM_Init+0x110>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01f      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a28      	ldr	r2, [pc, #160]	; (8004c20 <LL_TIM_Init+0x114>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01b      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <LL_TIM_Init+0x118>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d017      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <LL_TIM_Init+0x11c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <LL_TIM_Init+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00f      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <LL_TIM_Init+0x124>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <LL_TIM_Init+0x128>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <LL_TIM_Init+0x12c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <LL_TIM_Init+0xae>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <LL_TIM_Init+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d106      	bne.n	8004bc8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ff35 	bl	8004a44 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff21 	bl	8004a28 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <LL_TIM_Init+0x108>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <LL_TIM_Init+0xea>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a0c      	ldr	r2, [pc, #48]	; (8004c24 <LL_TIM_Init+0x118>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d105      	bne.n	8004c02 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ff2f 	bl	8004a60 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ff72 	bl	8004aec <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40010400 	.word	0x40010400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800
 8004c34:	40001800 	.word	0x40001800
 8004c38:	40001c00 	.word	0x40001c00
 8004c3c:	40002000 	.word	0x40002000

08004c40 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	d027      	beq.n	8004ca8 <LL_TIM_OC_Init+0x68>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5e:	d82a      	bhi.n	8004cb6 <LL_TIM_OC_Init+0x76>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c66:	d018      	beq.n	8004c9a <LL_TIM_OC_Init+0x5a>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6e:	d822      	bhi.n	8004cb6 <LL_TIM_OC_Init+0x76>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d003      	beq.n	8004c7e <LL_TIM_OC_Init+0x3e>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d007      	beq.n	8004c8c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004c7c:	e01b      	b.n	8004cb6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f81f 	bl	8004cc4 <OC1Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8a:	e015      	b.n	8004cb8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f884 	bl	8004d9c <OC2Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]
      break;
 8004c98:	e00e      	b.n	8004cb8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f8ed 	bl	8004e7c <OC3Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca6:	e007      	b.n	8004cb8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f956 	bl	8004f5c <OC4Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb4:	e000      	b.n	8004cb8 <LL_TIM_OC_Init+0x78>
      break;
 8004cb6:	bf00      	nop
  }

  return result;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0201 	bic.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0202 	bic.w	r2, r3, #2
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a1c      	ldr	r2, [pc, #112]	; (8004d94 <OC1Config+0xd0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <OC1Config+0x6a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <OC1Config+0xd4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d11e      	bne.n	8004d6c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 0208 	bic.w	r2, r3, #8
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 0204 	bic.w	r2, r3, #4
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fe7c 	bl	8004a7c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010400 	.word	0x40010400

08004d9c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0220 	bic.w	r2, r3, #32
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0210 	bic.w	r2, r3, #16
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <OC2Config+0xd8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <OC2Config+0x70>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <OC2Config+0xdc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d11f      	bne.n	8004e4c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	019b      	lsls	r3, r3, #6
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	019b      	lsls	r3, r3, #6
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fe1a 	bl	8004a98 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400

08004e7c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <OC3Config+0xd8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <OC3Config+0x6e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <OC3Config+0xdc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d11f      	bne.n	8004f2a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	029b      	lsls	r3, r3, #10
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	015b      	lsls	r3, r3, #5
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fdb9 	bl	8004ab4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	031b      	lsls	r3, r3, #12
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	031b      	lsls	r3, r3, #12
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a11      	ldr	r2, [pc, #68]	; (8005004 <OC4Config+0xa8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <OC4Config+0x70>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a10      	ldr	r2, [pc, #64]	; (8005008 <OC4Config+0xac>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d107      	bne.n	8004fdc <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	019b      	lsls	r3, r3, #6
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fd6e 	bl	8004ad0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40010000 	.word	0x40010000
 8005008:	40010400 	.word	0x40010400

0800500c <LL_USART_IsEnabled>:
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_USART_SetStopBitsLength>:
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_USART_SetHWFlowCtrl>:
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	615a      	str	r2, [r3, #20]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <LL_USART_SetBaudRate>:
{
 8005080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005084:	b0c0      	sub	sp, #256	; 0x100
 8005086:	af00      	add	r7, sp, #0
 8005088:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800508c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005090:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005094:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a0:	f040 810c 	bne.w	80052bc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80050a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	6639      	str	r1, [r7, #96]	; 0x60
 80050be:	415b      	adcs	r3, r3
 80050c0:	667b      	str	r3, [r7, #100]	; 0x64
 80050c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80050c6:	4621      	mov	r1, r4
 80050c8:	eb12 0801 	adds.w	r8, r2, r1
 80050cc:	4629      	mov	r1, r5
 80050ce:	eb43 0901 	adc.w	r9, r3, r1
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e6:	4690      	mov	r8, r2
 80050e8:	4699      	mov	r9, r3
 80050ea:	4623      	mov	r3, r4
 80050ec:	eb18 0303 	adds.w	r3, r8, r3
 80050f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050f4:	462b      	mov	r3, r5
 80050f6:	eb49 0303 	adc.w	r3, r9, r3
 80050fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005102:	2200      	movs	r2, #0
 8005104:	469a      	mov	sl, r3
 8005106:	4693      	mov	fp, r2
 8005108:	eb1a 030a 	adds.w	r3, sl, sl
 800510c:	65bb      	str	r3, [r7, #88]	; 0x58
 800510e:	eb4b 030b 	adc.w	r3, fp, fp
 8005112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005114:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800511c:	f7fb fdc4 	bl	8000ca8 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <LL_USART_SetBaudRate+0x238>)
 8005126:	fba3 2302 	umull	r2, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	b29b      	uxth	r3, r3
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	b29c      	uxth	r4, r3
 8005132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800513c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005140:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	6539      	str	r1, [r7, #80]	; 0x50
 800514c:	415b      	adcs	r3, r3
 800514e:	657b      	str	r3, [r7, #84]	; 0x54
 8005150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	64b9      	str	r1, [r7, #72]	; 0x48
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005194:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005198:	2200      	movs	r2, #0
 800519a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800519e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80051a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80051a6:	460b      	mov	r3, r1
 80051a8:	18db      	adds	r3, r3, r3
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40
 80051ac:	4613      	mov	r3, r2
 80051ae:	eb42 0303 	adc.w	r3, r2, r3
 80051b2:	647b      	str	r3, [r7, #68]	; 0x44
 80051b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051b8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80051bc:	f7fb fd74 	bl	8000ca8 <__aeabi_uldivmod>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	4b3c      	ldr	r3, [pc, #240]	; (80052b8 <LL_USART_SetBaudRate+0x238>)
 80051c8:	fba3 2301 	umull	r2, r3, r3, r1
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	2264      	movs	r2, #100	; 0x64
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	1acb      	subs	r3, r1, r3
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051dc:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <LL_USART_SetBaudRate+0x238>)
 80051de:	fba3 2302 	umull	r2, r3, r3, r2
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4423      	add	r3, r4
 80051f2:	b29c      	uxth	r4, r3
 80051f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005202:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005206:	4642      	mov	r2, r8
 8005208:	464b      	mov	r3, r9
 800520a:	1891      	adds	r1, r2, r2
 800520c:	63b9      	str	r1, [r7, #56]	; 0x38
 800520e:	415b      	adcs	r3, r3
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005212:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005216:	4641      	mov	r1, r8
 8005218:	1851      	adds	r1, r2, r1
 800521a:	6339      	str	r1, [r7, #48]	; 0x30
 800521c:	4649      	mov	r1, r9
 800521e:	414b      	adcs	r3, r1
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800522e:	4659      	mov	r1, fp
 8005230:	00cb      	lsls	r3, r1, #3
 8005232:	4651      	mov	r1, sl
 8005234:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005238:	4651      	mov	r1, sl
 800523a:	00ca      	lsls	r2, r1, #3
 800523c:	4610      	mov	r0, r2
 800523e:	4619      	mov	r1, r3
 8005240:	4603      	mov	r3, r0
 8005242:	4642      	mov	r2, r8
 8005244:	189b      	adds	r3, r3, r2
 8005246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800524a:	464b      	mov	r3, r9
 800524c:	460a      	mov	r2, r1
 800524e:	eb42 0303 	adc.w	r3, r2, r3
 8005252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005256:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800525a:	2200      	movs	r2, #0
 800525c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005260:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005264:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005268:	460b      	mov	r3, r1
 800526a:	18db      	adds	r3, r3, r3
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
 800526e:	4613      	mov	r3, r2
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800527a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800527e:	f7fb fd13 	bl	8000ca8 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <LL_USART_SetBaudRate+0x238>)
 8005288:	fba3 1302 	umull	r1, r3, r3, r2
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	2164      	movs	r1, #100	; 0x64
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	3332      	adds	r3, #50	; 0x32
 800529a:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <LL_USART_SetBaudRate+0x238>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	4423      	add	r3, r4
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b4:	609a      	str	r2, [r3, #8]
}
 80052b6:	e107      	b.n	80054c8 <LL_USART_SetBaudRate+0x448>
 80052b8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80052bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052c6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052ca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80052ce:	4642      	mov	r2, r8
 80052d0:	464b      	mov	r3, r9
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	6239      	str	r1, [r7, #32]
 80052d6:	415b      	adcs	r3, r3
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052de:	4641      	mov	r1, r8
 80052e0:	1854      	adds	r4, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb43 0501 	adc.w	r5, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	00eb      	lsls	r3, r5, #3
 80052f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f6:	00e2      	lsls	r2, r4, #3
 80052f8:	4614      	mov	r4, r2
 80052fa:	461d      	mov	r5, r3
 80052fc:	4643      	mov	r3, r8
 80052fe:	18e3      	adds	r3, r4, r3
 8005300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005304:	464b      	mov	r3, r9
 8005306:	eb45 0303 	adc.w	r3, r5, r3
 800530a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800530e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005312:	2200      	movs	r2, #0
 8005314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005318:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005328:	4629      	mov	r1, r5
 800532a:	008b      	lsls	r3, r1, #2
 800532c:	4621      	mov	r1, r4
 800532e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005332:	4621      	mov	r1, r4
 8005334:	008a      	lsls	r2, r1, #2
 8005336:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800533a:	f7fb fcb5 	bl	8000ca8 <__aeabi_uldivmod>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4b64      	ldr	r3, [pc, #400]	; (80054d4 <LL_USART_SetBaudRate+0x454>)
 8005344:	fba3 2302 	umull	r2, r3, r3, r2
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	b29b      	uxth	r3, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	b29c      	uxth	r4, r3
 8005350:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005354:	2200      	movs	r2, #0
 8005356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800535a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800535e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005362:	4642      	mov	r2, r8
 8005364:	464b      	mov	r3, r9
 8005366:	1891      	adds	r1, r2, r2
 8005368:	61b9      	str	r1, [r7, #24]
 800536a:	415b      	adcs	r3, r3
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005372:	4641      	mov	r1, r8
 8005374:	1851      	adds	r1, r2, r1
 8005376:	6139      	str	r1, [r7, #16]
 8005378:	4649      	mov	r1, r9
 800537a:	414b      	adcs	r3, r1
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800538a:	4659      	mov	r1, fp
 800538c:	00cb      	lsls	r3, r1, #3
 800538e:	4651      	mov	r1, sl
 8005390:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005394:	4651      	mov	r1, sl
 8005396:	00ca      	lsls	r2, r1, #3
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	4603      	mov	r3, r0
 800539e:	4642      	mov	r2, r8
 80053a0:	189b      	adds	r3, r3, r2
 80053a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053a6:	464b      	mov	r3, r9
 80053a8:	460a      	mov	r2, r1
 80053aa:	eb42 0303 	adc.w	r3, r2, r3
 80053ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80053b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80053cc:	4649      	mov	r1, r9
 80053ce:	008b      	lsls	r3, r1, #2
 80053d0:	4641      	mov	r1, r8
 80053d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d6:	4641      	mov	r1, r8
 80053d8:	008a      	lsls	r2, r1, #2
 80053da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80053de:	f7fb fc63 	bl	8000ca8 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <LL_USART_SetBaudRate+0x454>)
 80053e8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	2164      	movs	r1, #100	; 0x64
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	3332      	adds	r3, #50	; 0x32
 80053fa:	4a36      	ldr	r2, [pc, #216]	; (80054d4 <LL_USART_SetBaudRate+0x454>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	b29b      	uxth	r3, r3
 8005404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005408:	b29b      	uxth	r3, r3
 800540a:	4423      	add	r3, r4
 800540c:	b29c      	uxth	r4, r3
 800540e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005412:	2200      	movs	r2, #0
 8005414:	67bb      	str	r3, [r7, #120]	; 0x78
 8005416:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	1891      	adds	r1, r2, r2
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	415b      	adcs	r3, r3
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542c:	4641      	mov	r1, r8
 800542e:	1851      	adds	r1, r2, r1
 8005430:	6039      	str	r1, [r7, #0]
 8005432:	4649      	mov	r1, r9
 8005434:	414b      	adcs	r3, r1
 8005436:	607b      	str	r3, [r7, #4]
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005444:	4659      	mov	r1, fp
 8005446:	00cb      	lsls	r3, r1, #3
 8005448:	4651      	mov	r1, sl
 800544a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544e:	4651      	mov	r1, sl
 8005450:	00ca      	lsls	r2, r1, #3
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	4603      	mov	r3, r0
 8005458:	4642      	mov	r2, r8
 800545a:	189b      	adds	r3, r3, r2
 800545c:	673b      	str	r3, [r7, #112]	; 0x70
 800545e:	464b      	mov	r3, r9
 8005460:	460a      	mov	r2, r1
 8005462:	eb42 0303 	adc.w	r3, r2, r3
 8005466:	677b      	str	r3, [r7, #116]	; 0x74
 8005468:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800546c:	2200      	movs	r2, #0
 800546e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005470:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800547e:	4649      	mov	r1, r9
 8005480:	008b      	lsls	r3, r1, #2
 8005482:	4641      	mov	r1, r8
 8005484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005488:	4641      	mov	r1, r8
 800548a:	008a      	lsls	r2, r1, #2
 800548c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005490:	f7fb fc0a 	bl	8000ca8 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <LL_USART_SetBaudRate+0x454>)
 800549a:	fba3 1302 	umull	r1, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2164      	movs	r1, #100	; 0x64
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	3332      	adds	r3, #50	; 0x32
 80054ac:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <LL_USART_SetBaudRate+0x454>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	4423      	add	r3, r4
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c6:	609a      	str	r2, [r3, #8]
}
 80054c8:	bf00      	nop
 80054ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054ce:	46bd      	mov	sp, r7
 80054d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff fd8e 	bl	800500c <LL_USART_IsEnabled>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d16c      	bne.n	80055d0 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80054fe:	f023 030c 	bic.w	r3, r3, #12
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6851      	ldr	r1, [r2, #4]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	68d2      	ldr	r2, [r2, #12]
 800550a:	4311      	orrs	r1, r2
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	6912      	ldr	r2, [r2, #16]
 8005510:	4311      	orrs	r1, r2
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	6992      	ldr	r2, [r2, #24]
 8005516:	430a      	orrs	r2, r1
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fd85 	bl	8005034 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fd92 	bl	800505a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff f9aa 	bl	8004894 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a26      	ldr	r2, [pc, #152]	; (80055dc <LL_USART_Init+0x104>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d102      	bne.n	800554e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e02f      	b.n	80055ae <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <LL_USART_Init+0x108>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d102      	bne.n	800555c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e028      	b.n	80055ae <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <LL_USART_Init+0x10c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d102      	bne.n	800556a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	e021      	b.n	80055ae <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <LL_USART_Init+0x110>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d102      	bne.n	8005578 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e01a      	b.n	80055ae <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <LL_USART_Init+0x114>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d102      	bne.n	8005586 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	e013      	b.n	80055ae <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <LL_USART_Init+0x118>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d102      	bne.n	8005594 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e00c      	b.n	80055ae <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <LL_USART_Init+0x11c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d102      	bne.n	80055a2 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	e005      	b.n	80055ae <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <LL_USART_Init+0x120>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d009      	beq.n	80055d0 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 80055bc:	2300      	movs	r3, #0
 80055be:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fd58 	bl	8005080 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80055d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40004400 	.word	0x40004400
 80055e4:	40004800 	.word	0x40004800
 80055e8:	40011400 	.word	0x40011400
 80055ec:	40004c00 	.word	0x40004c00
 80055f0:	40005000 	.word	0x40005000
 80055f4:	40007800 	.word	0x40007800
 80055f8:	40007c00 	.word	0x40007c00

080055fc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <LL_mDelay+0x48>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800560a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d00c      	beq.n	800562e <LL_mDelay+0x32>
  {
    Delay++;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3301      	adds	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800561a:	e008      	b.n	800562e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <LL_mDelay+0x48>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <LL_mDelay+0x32>
    {
      Delay--;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f3      	bne.n	800561c <LL_mDelay+0x20>
    }
  }
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	e000e010 	.word	0xe000e010

08005648 <__errno>:
 8005648:	4b01      	ldr	r3, [pc, #4]	; (8005650 <__errno+0x8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	2000000c 	.word	0x2000000c

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4d0d      	ldr	r5, [pc, #52]	; (800568c <__libc_init_array+0x38>)
 8005658:	4c0d      	ldr	r4, [pc, #52]	; (8005690 <__libc_init_array+0x3c>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	2600      	movs	r6, #0
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	4d0b      	ldr	r5, [pc, #44]	; (8005694 <__libc_init_array+0x40>)
 8005666:	4c0c      	ldr	r4, [pc, #48]	; (8005698 <__libc_init_array+0x44>)
 8005668:	f004 fd1c 	bl	800a0a4 <_init>
 800566c:	1b64      	subs	r4, r4, r5
 800566e:	10a4      	asrs	r4, r4, #2
 8005670:	2600      	movs	r6, #0
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f855 3b04 	ldr.w	r3, [r5], #4
 800567c:	4798      	blx	r3
 800567e:	3601      	adds	r6, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f855 3b04 	ldr.w	r3, [r5], #4
 8005686:	4798      	blx	r3
 8005688:	3601      	adds	r6, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	0800a814 	.word	0x0800a814
 8005690:	0800a814 	.word	0x0800a814
 8005694:	0800a814 	.word	0x0800a814
 8005698:	0800a818 	.word	0x0800a818

0800569c <memset>:
 800569c:	4402      	add	r2, r0
 800569e:	4603      	mov	r3, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <__cvt>:
 80056ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	ec55 4b10 	vmov	r4, r5, d0
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	460e      	mov	r6, r1
 80056b8:	4619      	mov	r1, r3
 80056ba:	462b      	mov	r3, r5
 80056bc:	bfbb      	ittet	lt
 80056be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056c2:	461d      	movlt	r5, r3
 80056c4:	2300      	movge	r3, #0
 80056c6:	232d      	movlt	r3, #45	; 0x2d
 80056c8:	700b      	strb	r3, [r1, #0]
 80056ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056d0:	4691      	mov	r9, r2
 80056d2:	f023 0820 	bic.w	r8, r3, #32
 80056d6:	bfbc      	itt	lt
 80056d8:	4622      	movlt	r2, r4
 80056da:	4614      	movlt	r4, r2
 80056dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056e0:	d005      	beq.n	80056ee <__cvt+0x42>
 80056e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056e6:	d100      	bne.n	80056ea <__cvt+0x3e>
 80056e8:	3601      	adds	r6, #1
 80056ea:	2102      	movs	r1, #2
 80056ec:	e000      	b.n	80056f0 <__cvt+0x44>
 80056ee:	2103      	movs	r1, #3
 80056f0:	ab03      	add	r3, sp, #12
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	ab02      	add	r3, sp, #8
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	ec45 4b10 	vmov	d0, r4, r5
 80056fc:	4653      	mov	r3, sl
 80056fe:	4632      	mov	r2, r6
 8005700:	f001 fefa 	bl	80074f8 <_dtoa_r>
 8005704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005708:	4607      	mov	r7, r0
 800570a:	d102      	bne.n	8005712 <__cvt+0x66>
 800570c:	f019 0f01 	tst.w	r9, #1
 8005710:	d022      	beq.n	8005758 <__cvt+0xac>
 8005712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005716:	eb07 0906 	add.w	r9, r7, r6
 800571a:	d110      	bne.n	800573e <__cvt+0x92>
 800571c:	783b      	ldrb	r3, [r7, #0]
 800571e:	2b30      	cmp	r3, #48	; 0x30
 8005720:	d10a      	bne.n	8005738 <__cvt+0x8c>
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fb f9dd 	bl	8000ae8 <__aeabi_dcmpeq>
 800572e:	b918      	cbnz	r0, 8005738 <__cvt+0x8c>
 8005730:	f1c6 0601 	rsb	r6, r6, #1
 8005734:	f8ca 6000 	str.w	r6, [sl]
 8005738:	f8da 3000 	ldr.w	r3, [sl]
 800573c:	4499      	add	r9, r3
 800573e:	2200      	movs	r2, #0
 8005740:	2300      	movs	r3, #0
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f7fb f9cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800574a:	b108      	cbz	r0, 8005750 <__cvt+0xa4>
 800574c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005750:	2230      	movs	r2, #48	; 0x30
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	454b      	cmp	r3, r9
 8005756:	d307      	bcc.n	8005768 <__cvt+0xbc>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800575c:	1bdb      	subs	r3, r3, r7
 800575e:	4638      	mov	r0, r7
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	b004      	add	sp, #16
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	9103      	str	r1, [sp, #12]
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e7f0      	b.n	8005752 <__cvt+0xa6>

08005770 <__exponent>:
 8005770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005772:	4603      	mov	r3, r0
 8005774:	2900      	cmp	r1, #0
 8005776:	bfb8      	it	lt
 8005778:	4249      	neglt	r1, r1
 800577a:	f803 2b02 	strb.w	r2, [r3], #2
 800577e:	bfb4      	ite	lt
 8005780:	222d      	movlt	r2, #45	; 0x2d
 8005782:	222b      	movge	r2, #43	; 0x2b
 8005784:	2909      	cmp	r1, #9
 8005786:	7042      	strb	r2, [r0, #1]
 8005788:	dd2a      	ble.n	80057e0 <__exponent+0x70>
 800578a:	f10d 0407 	add.w	r4, sp, #7
 800578e:	46a4      	mov	ip, r4
 8005790:	270a      	movs	r7, #10
 8005792:	46a6      	mov	lr, r4
 8005794:	460a      	mov	r2, r1
 8005796:	fb91 f6f7 	sdiv	r6, r1, r7
 800579a:	fb07 1516 	mls	r5, r7, r6, r1
 800579e:	3530      	adds	r5, #48	; 0x30
 80057a0:	2a63      	cmp	r2, #99	; 0x63
 80057a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80057a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057aa:	4631      	mov	r1, r6
 80057ac:	dcf1      	bgt.n	8005792 <__exponent+0x22>
 80057ae:	3130      	adds	r1, #48	; 0x30
 80057b0:	f1ae 0502 	sub.w	r5, lr, #2
 80057b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057b8:	1c44      	adds	r4, r0, #1
 80057ba:	4629      	mov	r1, r5
 80057bc:	4561      	cmp	r1, ip
 80057be:	d30a      	bcc.n	80057d6 <__exponent+0x66>
 80057c0:	f10d 0209 	add.w	r2, sp, #9
 80057c4:	eba2 020e 	sub.w	r2, r2, lr
 80057c8:	4565      	cmp	r5, ip
 80057ca:	bf88      	it	hi
 80057cc:	2200      	movhi	r2, #0
 80057ce:	4413      	add	r3, r2
 80057d0:	1a18      	subs	r0, r3, r0
 80057d2:	b003      	add	sp, #12
 80057d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057de:	e7ed      	b.n	80057bc <__exponent+0x4c>
 80057e0:	2330      	movs	r3, #48	; 0x30
 80057e2:	3130      	adds	r1, #48	; 0x30
 80057e4:	7083      	strb	r3, [r0, #2]
 80057e6:	70c1      	strb	r1, [r0, #3]
 80057e8:	1d03      	adds	r3, r0, #4
 80057ea:	e7f1      	b.n	80057d0 <__exponent+0x60>

080057ec <_printf_float>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	ed2d 8b02 	vpush	{d8}
 80057f4:	b08d      	sub	sp, #52	; 0x34
 80057f6:	460c      	mov	r4, r1
 80057f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057fc:	4616      	mov	r6, r2
 80057fe:	461f      	mov	r7, r3
 8005800:	4605      	mov	r5, r0
 8005802:	f003 f98d 	bl	8008b20 <_localeconv_r>
 8005806:	f8d0 a000 	ldr.w	sl, [r0]
 800580a:	4650      	mov	r0, sl
 800580c:	f7fa fcf0 	bl	80001f0 <strlen>
 8005810:	2300      	movs	r3, #0
 8005812:	930a      	str	r3, [sp, #40]	; 0x28
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	9305      	str	r3, [sp, #20]
 8005818:	f8d8 3000 	ldr.w	r3, [r8]
 800581c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005820:	3307      	adds	r3, #7
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	f103 0208 	add.w	r2, r3, #8
 800582a:	f8c8 2000 	str.w	r2, [r8]
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005836:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800583a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800583e:	9307      	str	r3, [sp, #28]
 8005840:	f8cd 8018 	str.w	r8, [sp, #24]
 8005844:	ee08 0a10 	vmov	s16, r0
 8005848:	4b9f      	ldr	r3, [pc, #636]	; (8005ac8 <_printf_float+0x2dc>)
 800584a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800584e:	f04f 32ff 	mov.w	r2, #4294967295
 8005852:	f7fb f97b 	bl	8000b4c <__aeabi_dcmpun>
 8005856:	bb88      	cbnz	r0, 80058bc <_printf_float+0xd0>
 8005858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585c:	4b9a      	ldr	r3, [pc, #616]	; (8005ac8 <_printf_float+0x2dc>)
 800585e:	f04f 32ff 	mov.w	r2, #4294967295
 8005862:	f7fb f955 	bl	8000b10 <__aeabi_dcmple>
 8005866:	bb48      	cbnz	r0, 80058bc <_printf_float+0xd0>
 8005868:	2200      	movs	r2, #0
 800586a:	2300      	movs	r3, #0
 800586c:	4640      	mov	r0, r8
 800586e:	4649      	mov	r1, r9
 8005870:	f7fb f944 	bl	8000afc <__aeabi_dcmplt>
 8005874:	b110      	cbz	r0, 800587c <_printf_float+0x90>
 8005876:	232d      	movs	r3, #45	; 0x2d
 8005878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587c:	4b93      	ldr	r3, [pc, #588]	; (8005acc <_printf_float+0x2e0>)
 800587e:	4894      	ldr	r0, [pc, #592]	; (8005ad0 <_printf_float+0x2e4>)
 8005880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005884:	bf94      	ite	ls
 8005886:	4698      	movls	r8, r3
 8005888:	4680      	movhi	r8, r0
 800588a:	2303      	movs	r3, #3
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	9b05      	ldr	r3, [sp, #20]
 8005890:	f023 0204 	bic.w	r2, r3, #4
 8005894:	6022      	str	r2, [r4, #0]
 8005896:	f04f 0900 	mov.w	r9, #0
 800589a:	9700      	str	r7, [sp, #0]
 800589c:	4633      	mov	r3, r6
 800589e:	aa0b      	add	r2, sp, #44	; 0x2c
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 f9d8 	bl	8005c58 <_printf_common>
 80058a8:	3001      	adds	r0, #1
 80058aa:	f040 8090 	bne.w	80059ce <_printf_float+0x1e2>
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	b00d      	add	sp, #52	; 0x34
 80058b4:	ecbd 8b02 	vpop	{d8}
 80058b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058bc:	4642      	mov	r2, r8
 80058be:	464b      	mov	r3, r9
 80058c0:	4640      	mov	r0, r8
 80058c2:	4649      	mov	r1, r9
 80058c4:	f7fb f942 	bl	8000b4c <__aeabi_dcmpun>
 80058c8:	b140      	cbz	r0, 80058dc <_printf_float+0xf0>
 80058ca:	464b      	mov	r3, r9
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bfbc      	itt	lt
 80058d0:	232d      	movlt	r3, #45	; 0x2d
 80058d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058d6:	487f      	ldr	r0, [pc, #508]	; (8005ad4 <_printf_float+0x2e8>)
 80058d8:	4b7f      	ldr	r3, [pc, #508]	; (8005ad8 <_printf_float+0x2ec>)
 80058da:	e7d1      	b.n	8005880 <_printf_float+0x94>
 80058dc:	6863      	ldr	r3, [r4, #4]
 80058de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058e2:	9206      	str	r2, [sp, #24]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	d13f      	bne.n	8005968 <_printf_float+0x17c>
 80058e8:	2306      	movs	r3, #6
 80058ea:	6063      	str	r3, [r4, #4]
 80058ec:	9b05      	ldr	r3, [sp, #20]
 80058ee:	6861      	ldr	r1, [r4, #4]
 80058f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058f4:	2300      	movs	r3, #0
 80058f6:	9303      	str	r3, [sp, #12]
 80058f8:	ab0a      	add	r3, sp, #40	; 0x28
 80058fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058fe:	ab09      	add	r3, sp, #36	; 0x24
 8005900:	ec49 8b10 	vmov	d0, r8, r9
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800590c:	4628      	mov	r0, r5
 800590e:	f7ff fecd 	bl	80056ac <__cvt>
 8005912:	9b06      	ldr	r3, [sp, #24]
 8005914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005916:	2b47      	cmp	r3, #71	; 0x47
 8005918:	4680      	mov	r8, r0
 800591a:	d108      	bne.n	800592e <_printf_float+0x142>
 800591c:	1cc8      	adds	r0, r1, #3
 800591e:	db02      	blt.n	8005926 <_printf_float+0x13a>
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	4299      	cmp	r1, r3
 8005924:	dd41      	ble.n	80059aa <_printf_float+0x1be>
 8005926:	f1ab 0b02 	sub.w	fp, fp, #2
 800592a:	fa5f fb8b 	uxtb.w	fp, fp
 800592e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005932:	d820      	bhi.n	8005976 <_printf_float+0x18a>
 8005934:	3901      	subs	r1, #1
 8005936:	465a      	mov	r2, fp
 8005938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800593c:	9109      	str	r1, [sp, #36]	; 0x24
 800593e:	f7ff ff17 	bl	8005770 <__exponent>
 8005942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005944:	1813      	adds	r3, r2, r0
 8005946:	2a01      	cmp	r2, #1
 8005948:	4681      	mov	r9, r0
 800594a:	6123      	str	r3, [r4, #16]
 800594c:	dc02      	bgt.n	8005954 <_printf_float+0x168>
 800594e:	6822      	ldr	r2, [r4, #0]
 8005950:	07d2      	lsls	r2, r2, #31
 8005952:	d501      	bpl.n	8005958 <_printf_float+0x16c>
 8005954:	3301      	adds	r3, #1
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800595c:	2b00      	cmp	r3, #0
 800595e:	d09c      	beq.n	800589a <_printf_float+0xae>
 8005960:	232d      	movs	r3, #45	; 0x2d
 8005962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005966:	e798      	b.n	800589a <_printf_float+0xae>
 8005968:	9a06      	ldr	r2, [sp, #24]
 800596a:	2a47      	cmp	r2, #71	; 0x47
 800596c:	d1be      	bne.n	80058ec <_printf_float+0x100>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1bc      	bne.n	80058ec <_printf_float+0x100>
 8005972:	2301      	movs	r3, #1
 8005974:	e7b9      	b.n	80058ea <_printf_float+0xfe>
 8005976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800597a:	d118      	bne.n	80059ae <_printf_float+0x1c2>
 800597c:	2900      	cmp	r1, #0
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	dd0b      	ble.n	800599a <_printf_float+0x1ae>
 8005982:	6121      	str	r1, [r4, #16]
 8005984:	b913      	cbnz	r3, 800598c <_printf_float+0x1a0>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	07d0      	lsls	r0, r2, #31
 800598a:	d502      	bpl.n	8005992 <_printf_float+0x1a6>
 800598c:	3301      	adds	r3, #1
 800598e:	440b      	add	r3, r1
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	65a1      	str	r1, [r4, #88]	; 0x58
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	e7de      	b.n	8005958 <_printf_float+0x16c>
 800599a:	b913      	cbnz	r3, 80059a2 <_printf_float+0x1b6>
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	07d2      	lsls	r2, r2, #31
 80059a0:	d501      	bpl.n	80059a6 <_printf_float+0x1ba>
 80059a2:	3302      	adds	r3, #2
 80059a4:	e7f4      	b.n	8005990 <_printf_float+0x1a4>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e7f2      	b.n	8005990 <_printf_float+0x1a4>
 80059aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b0:	4299      	cmp	r1, r3
 80059b2:	db05      	blt.n	80059c0 <_printf_float+0x1d4>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	6121      	str	r1, [r4, #16]
 80059b8:	07d8      	lsls	r0, r3, #31
 80059ba:	d5ea      	bpl.n	8005992 <_printf_float+0x1a6>
 80059bc:	1c4b      	adds	r3, r1, #1
 80059be:	e7e7      	b.n	8005990 <_printf_float+0x1a4>
 80059c0:	2900      	cmp	r1, #0
 80059c2:	bfd4      	ite	le
 80059c4:	f1c1 0202 	rsble	r2, r1, #2
 80059c8:	2201      	movgt	r2, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	e7e0      	b.n	8005990 <_printf_float+0x1a4>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	055a      	lsls	r2, r3, #21
 80059d2:	d407      	bmi.n	80059e4 <_printf_float+0x1f8>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	4642      	mov	r2, r8
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	d12c      	bne.n	8005a3c <_printf_float+0x250>
 80059e2:	e764      	b.n	80058ae <_printf_float+0xc2>
 80059e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059e8:	f240 80e0 	bls.w	8005bac <_printf_float+0x3c0>
 80059ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	f7fb f878 	bl	8000ae8 <__aeabi_dcmpeq>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d034      	beq.n	8005a66 <_printf_float+0x27a>
 80059fc:	4a37      	ldr	r2, [pc, #220]	; (8005adc <_printf_float+0x2f0>)
 80059fe:	2301      	movs	r3, #1
 8005a00:	4631      	mov	r1, r6
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b8      	blx	r7
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f af51 	beq.w	80058ae <_printf_float+0xc2>
 8005a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a10:	429a      	cmp	r2, r3
 8005a12:	db02      	blt.n	8005a1a <_printf_float+0x22e>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07d8      	lsls	r0, r3, #31
 8005a18:	d510      	bpl.n	8005a3c <_printf_float+0x250>
 8005a1a:	ee18 3a10 	vmov	r3, s16
 8005a1e:	4652      	mov	r2, sl
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f af41 	beq.w	80058ae <_printf_float+0xc2>
 8005a2c:	f04f 0800 	mov.w	r8, #0
 8005a30:	f104 091a 	add.w	r9, r4, #26
 8005a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a36:	3b01      	subs	r3, #1
 8005a38:	4543      	cmp	r3, r8
 8005a3a:	dc09      	bgt.n	8005a50 <_printf_float+0x264>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	079b      	lsls	r3, r3, #30
 8005a40:	f100 8105 	bmi.w	8005c4e <_printf_float+0x462>
 8005a44:	68e0      	ldr	r0, [r4, #12]
 8005a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a48:	4298      	cmp	r0, r3
 8005a4a:	bfb8      	it	lt
 8005a4c:	4618      	movlt	r0, r3
 8005a4e:	e730      	b.n	80058b2 <_printf_float+0xc6>
 8005a50:	2301      	movs	r3, #1
 8005a52:	464a      	mov	r2, r9
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f af27 	beq.w	80058ae <_printf_float+0xc2>
 8005a60:	f108 0801 	add.w	r8, r8, #1
 8005a64:	e7e6      	b.n	8005a34 <_printf_float+0x248>
 8005a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	dc39      	bgt.n	8005ae0 <_printf_float+0x2f4>
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <_printf_float+0x2f0>)
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4631      	mov	r1, r6
 8005a72:	4628      	mov	r0, r5
 8005a74:	47b8      	blx	r7
 8005a76:	3001      	adds	r0, #1
 8005a78:	f43f af19 	beq.w	80058ae <_printf_float+0xc2>
 8005a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a80:	4313      	orrs	r3, r2
 8005a82:	d102      	bne.n	8005a8a <_printf_float+0x29e>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	07d9      	lsls	r1, r3, #31
 8005a88:	d5d8      	bpl.n	8005a3c <_printf_float+0x250>
 8005a8a:	ee18 3a10 	vmov	r3, s16
 8005a8e:	4652      	mov	r2, sl
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f af09 	beq.w	80058ae <_printf_float+0xc2>
 8005a9c:	f04f 0900 	mov.w	r9, #0
 8005aa0:	f104 0a1a 	add.w	sl, r4, #26
 8005aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa6:	425b      	negs	r3, r3
 8005aa8:	454b      	cmp	r3, r9
 8005aaa:	dc01      	bgt.n	8005ab0 <_printf_float+0x2c4>
 8005aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aae:	e792      	b.n	80059d6 <_printf_float+0x1ea>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f aef7 	beq.w	80058ae <_printf_float+0xc2>
 8005ac0:	f109 0901 	add.w	r9, r9, #1
 8005ac4:	e7ee      	b.n	8005aa4 <_printf_float+0x2b8>
 8005ac6:	bf00      	nop
 8005ac8:	7fefffff 	.word	0x7fefffff
 8005acc:	0800a364 	.word	0x0800a364
 8005ad0:	0800a368 	.word	0x0800a368
 8005ad4:	0800a370 	.word	0x0800a370
 8005ad8:	0800a36c 	.word	0x0800a36c
 8005adc:	0800a374 	.word	0x0800a374
 8005ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	bfa8      	it	ge
 8005ae8:	461a      	movge	r2, r3
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	4691      	mov	r9, r2
 8005aee:	dc37      	bgt.n	8005b60 <_printf_float+0x374>
 8005af0:	f04f 0b00 	mov.w	fp, #0
 8005af4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005af8:	f104 021a 	add.w	r2, r4, #26
 8005afc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005afe:	9305      	str	r3, [sp, #20]
 8005b00:	eba3 0309 	sub.w	r3, r3, r9
 8005b04:	455b      	cmp	r3, fp
 8005b06:	dc33      	bgt.n	8005b70 <_printf_float+0x384>
 8005b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	db3b      	blt.n	8005b88 <_printf_float+0x39c>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	07da      	lsls	r2, r3, #31
 8005b14:	d438      	bmi.n	8005b88 <_printf_float+0x39c>
 8005b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b18:	9a05      	ldr	r2, [sp, #20]
 8005b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b1c:	1a9a      	subs	r2, r3, r2
 8005b1e:	eba3 0901 	sub.w	r9, r3, r1
 8005b22:	4591      	cmp	r9, r2
 8005b24:	bfa8      	it	ge
 8005b26:	4691      	movge	r9, r2
 8005b28:	f1b9 0f00 	cmp.w	r9, #0
 8005b2c:	dc35      	bgt.n	8005b9a <_printf_float+0x3ae>
 8005b2e:	f04f 0800 	mov.w	r8, #0
 8005b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b36:	f104 0a1a 	add.w	sl, r4, #26
 8005b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	eba3 0309 	sub.w	r3, r3, r9
 8005b44:	4543      	cmp	r3, r8
 8005b46:	f77f af79 	ble.w	8005a3c <_printf_float+0x250>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	f43f aeaa 	beq.w	80058ae <_printf_float+0xc2>
 8005b5a:	f108 0801 	add.w	r8, r8, #1
 8005b5e:	e7ec      	b.n	8005b3a <_printf_float+0x34e>
 8005b60:	4613      	mov	r3, r2
 8005b62:	4631      	mov	r1, r6
 8005b64:	4642      	mov	r2, r8
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d1c0      	bne.n	8005af0 <_printf_float+0x304>
 8005b6e:	e69e      	b.n	80058ae <_printf_float+0xc2>
 8005b70:	2301      	movs	r3, #1
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	9205      	str	r2, [sp, #20]
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f ae97 	beq.w	80058ae <_printf_float+0xc2>
 8005b80:	9a05      	ldr	r2, [sp, #20]
 8005b82:	f10b 0b01 	add.w	fp, fp, #1
 8005b86:	e7b9      	b.n	8005afc <_printf_float+0x310>
 8005b88:	ee18 3a10 	vmov	r3, s16
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	d1be      	bne.n	8005b16 <_printf_float+0x32a>
 8005b98:	e689      	b.n	80058ae <_printf_float+0xc2>
 8005b9a:	9a05      	ldr	r2, [sp, #20]
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	4442      	add	r2, r8
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d1c1      	bne.n	8005b2e <_printf_float+0x342>
 8005baa:	e680      	b.n	80058ae <_printf_float+0xc2>
 8005bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bae:	2a01      	cmp	r2, #1
 8005bb0:	dc01      	bgt.n	8005bb6 <_printf_float+0x3ca>
 8005bb2:	07db      	lsls	r3, r3, #31
 8005bb4:	d538      	bpl.n	8005c28 <_printf_float+0x43c>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4642      	mov	r2, r8
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f43f ae74 	beq.w	80058ae <_printf_float+0xc2>
 8005bc6:	ee18 3a10 	vmov	r3, s16
 8005bca:	4652      	mov	r2, sl
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f ae6b 	beq.w	80058ae <_printf_float+0xc2>
 8005bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	f7fa ff82 	bl	8000ae8 <__aeabi_dcmpeq>
 8005be4:	b9d8      	cbnz	r0, 8005c1e <_printf_float+0x432>
 8005be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be8:	f108 0201 	add.w	r2, r8, #1
 8005bec:	3b01      	subs	r3, #1
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d10e      	bne.n	8005c16 <_printf_float+0x42a>
 8005bf8:	e659      	b.n	80058ae <_printf_float+0xc2>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f ae52 	beq.w	80058ae <_printf_float+0xc2>
 8005c0a:	f108 0801 	add.w	r8, r8, #1
 8005c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c10:	3b01      	subs	r3, #1
 8005c12:	4543      	cmp	r3, r8
 8005c14:	dcf1      	bgt.n	8005bfa <_printf_float+0x40e>
 8005c16:	464b      	mov	r3, r9
 8005c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c1c:	e6dc      	b.n	80059d8 <_printf_float+0x1ec>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	f104 0a1a 	add.w	sl, r4, #26
 8005c26:	e7f2      	b.n	8005c0e <_printf_float+0x422>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	e7df      	b.n	8005bee <_printf_float+0x402>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	464a      	mov	r2, r9
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f43f ae38 	beq.w	80058ae <_printf_float+0xc2>
 8005c3e:	f108 0801 	add.w	r8, r8, #1
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c46:	1a5b      	subs	r3, r3, r1
 8005c48:	4543      	cmp	r3, r8
 8005c4a:	dcf0      	bgt.n	8005c2e <_printf_float+0x442>
 8005c4c:	e6fa      	b.n	8005a44 <_printf_float+0x258>
 8005c4e:	f04f 0800 	mov.w	r8, #0
 8005c52:	f104 0919 	add.w	r9, r4, #25
 8005c56:	e7f4      	b.n	8005c42 <_printf_float+0x456>

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4616      	mov	r6, r2
 8005c5e:	4699      	mov	r9, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	bfb8      	it	lt
 8005c6c:	4613      	movlt	r3, r2
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c74:	4607      	mov	r7, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	b10a      	cbz	r2, 8005c7e <_printf_common+0x26>
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	0699      	lsls	r1, r3, #26
 8005c82:	bf42      	ittt	mi
 8005c84:	6833      	ldrmi	r3, [r6, #0]
 8005c86:	3302      	addmi	r3, #2
 8005c88:	6033      	strmi	r3, [r6, #0]
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	f015 0506 	ands.w	r5, r5, #6
 8005c90:	d106      	bne.n	8005ca0 <_printf_common+0x48>
 8005c92:	f104 0a19 	add.w	sl, r4, #25
 8005c96:	68e3      	ldr	r3, [r4, #12]
 8005c98:	6832      	ldr	r2, [r6, #0]
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	42ab      	cmp	r3, r5
 8005c9e:	dc26      	bgt.n	8005cee <_printf_common+0x96>
 8005ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ca4:	1e13      	subs	r3, r2, #0
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	0692      	lsls	r2, r2, #26
 8005cae:	d42b      	bmi.n	8005d08 <_printf_common+0xb0>
 8005cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	47c0      	blx	r8
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d01e      	beq.n	8005cfc <_printf_common+0xa4>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	68e5      	ldr	r5, [r4, #12]
 8005cc2:	6832      	ldr	r2, [r6, #0]
 8005cc4:	f003 0306 	and.w	r3, r3, #6
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	bf08      	it	eq
 8005ccc:	1aad      	subeq	r5, r5, r2
 8005cce:	68a3      	ldr	r3, [r4, #8]
 8005cd0:	6922      	ldr	r2, [r4, #16]
 8005cd2:	bf0c      	ite	eq
 8005cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cd8:	2500      	movne	r5, #0
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bfc4      	itt	gt
 8005cde:	1a9b      	subgt	r3, r3, r2
 8005ce0:	18ed      	addgt	r5, r5, r3
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	341a      	adds	r4, #26
 8005ce6:	42b5      	cmp	r5, r6
 8005ce8:	d11a      	bne.n	8005d20 <_printf_common+0xc8>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e008      	b.n	8005d00 <_printf_common+0xa8>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	47c0      	blx	r8
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d103      	bne.n	8005d04 <_printf_common+0xac>
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d04:	3501      	adds	r5, #1
 8005d06:	e7c6      	b.n	8005c96 <_printf_common+0x3e>
 8005d08:	18e1      	adds	r1, r4, r3
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	2030      	movs	r0, #48	; 0x30
 8005d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d12:	4422      	add	r2, r4
 8005d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	e7c7      	b.n	8005cb0 <_printf_common+0x58>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4622      	mov	r2, r4
 8005d24:	4649      	mov	r1, r9
 8005d26:	4638      	mov	r0, r7
 8005d28:	47c0      	blx	r8
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d0e6      	beq.n	8005cfc <_printf_common+0xa4>
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7d9      	b.n	8005ce6 <_printf_common+0x8e>
	...

08005d34 <_printf_i>:
 8005d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d38:	7e0f      	ldrb	r7, [r1, #24]
 8005d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d3c:	2f78      	cmp	r7, #120	; 0x78
 8005d3e:	4691      	mov	r9, r2
 8005d40:	4680      	mov	r8, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	469a      	mov	sl, r3
 8005d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d4a:	d807      	bhi.n	8005d5c <_printf_i+0x28>
 8005d4c:	2f62      	cmp	r7, #98	; 0x62
 8005d4e:	d80a      	bhi.n	8005d66 <_printf_i+0x32>
 8005d50:	2f00      	cmp	r7, #0
 8005d52:	f000 80d8 	beq.w	8005f06 <_printf_i+0x1d2>
 8005d56:	2f58      	cmp	r7, #88	; 0x58
 8005d58:	f000 80a3 	beq.w	8005ea2 <_printf_i+0x16e>
 8005d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d64:	e03a      	b.n	8005ddc <_printf_i+0xa8>
 8005d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d6a:	2b15      	cmp	r3, #21
 8005d6c:	d8f6      	bhi.n	8005d5c <_printf_i+0x28>
 8005d6e:	a101      	add	r1, pc, #4	; (adr r1, 8005d74 <_printf_i+0x40>)
 8005d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d74:	08005dcd 	.word	0x08005dcd
 8005d78:	08005de1 	.word	0x08005de1
 8005d7c:	08005d5d 	.word	0x08005d5d
 8005d80:	08005d5d 	.word	0x08005d5d
 8005d84:	08005d5d 	.word	0x08005d5d
 8005d88:	08005d5d 	.word	0x08005d5d
 8005d8c:	08005de1 	.word	0x08005de1
 8005d90:	08005d5d 	.word	0x08005d5d
 8005d94:	08005d5d 	.word	0x08005d5d
 8005d98:	08005d5d 	.word	0x08005d5d
 8005d9c:	08005d5d 	.word	0x08005d5d
 8005da0:	08005eed 	.word	0x08005eed
 8005da4:	08005e11 	.word	0x08005e11
 8005da8:	08005ecf 	.word	0x08005ecf
 8005dac:	08005d5d 	.word	0x08005d5d
 8005db0:	08005d5d 	.word	0x08005d5d
 8005db4:	08005f0f 	.word	0x08005f0f
 8005db8:	08005d5d 	.word	0x08005d5d
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005d5d 	.word	0x08005d5d
 8005dc4:	08005d5d 	.word	0x08005d5d
 8005dc8:	08005ed7 	.word	0x08005ed7
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0a3      	b.n	8005f28 <_printf_i+0x1f4>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	6829      	ldr	r1, [r5, #0]
 8005de4:	0606      	lsls	r6, r0, #24
 8005de6:	f101 0304 	add.w	r3, r1, #4
 8005dea:	d50a      	bpl.n	8005e02 <_printf_i+0xce>
 8005dec:	680e      	ldr	r6, [r1, #0]
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	da03      	bge.n	8005dfc <_printf_i+0xc8>
 8005df4:	232d      	movs	r3, #45	; 0x2d
 8005df6:	4276      	negs	r6, r6
 8005df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dfc:	485e      	ldr	r0, [pc, #376]	; (8005f78 <_printf_i+0x244>)
 8005dfe:	230a      	movs	r3, #10
 8005e00:	e019      	b.n	8005e36 <_printf_i+0x102>
 8005e02:	680e      	ldr	r6, [r1, #0]
 8005e04:	602b      	str	r3, [r5, #0]
 8005e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e0a:	bf18      	it	ne
 8005e0c:	b236      	sxthne	r6, r6
 8005e0e:	e7ef      	b.n	8005df0 <_printf_i+0xbc>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	1d19      	adds	r1, r3, #4
 8005e16:	6029      	str	r1, [r5, #0]
 8005e18:	0601      	lsls	r1, r0, #24
 8005e1a:	d501      	bpl.n	8005e20 <_printf_i+0xec>
 8005e1c:	681e      	ldr	r6, [r3, #0]
 8005e1e:	e002      	b.n	8005e26 <_printf_i+0xf2>
 8005e20:	0646      	lsls	r6, r0, #25
 8005e22:	d5fb      	bpl.n	8005e1c <_printf_i+0xe8>
 8005e24:	881e      	ldrh	r6, [r3, #0]
 8005e26:	4854      	ldr	r0, [pc, #336]	; (8005f78 <_printf_i+0x244>)
 8005e28:	2f6f      	cmp	r7, #111	; 0x6f
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2308      	moveq	r3, #8
 8005e2e:	230a      	movne	r3, #10
 8005e30:	2100      	movs	r1, #0
 8005e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e36:	6865      	ldr	r5, [r4, #4]
 8005e38:	60a5      	str	r5, [r4, #8]
 8005e3a:	2d00      	cmp	r5, #0
 8005e3c:	bfa2      	ittt	ge
 8005e3e:	6821      	ldrge	r1, [r4, #0]
 8005e40:	f021 0104 	bicge.w	r1, r1, #4
 8005e44:	6021      	strge	r1, [r4, #0]
 8005e46:	b90e      	cbnz	r6, 8005e4c <_printf_i+0x118>
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	d04d      	beq.n	8005ee8 <_printf_i+0x1b4>
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e52:	fb03 6711 	mls	r7, r3, r1, r6
 8005e56:	5dc7      	ldrb	r7, [r0, r7]
 8005e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e5c:	4637      	mov	r7, r6
 8005e5e:	42bb      	cmp	r3, r7
 8005e60:	460e      	mov	r6, r1
 8005e62:	d9f4      	bls.n	8005e4e <_printf_i+0x11a>
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d10b      	bne.n	8005e80 <_printf_i+0x14c>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	07de      	lsls	r6, r3, #31
 8005e6c:	d508      	bpl.n	8005e80 <_printf_i+0x14c>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	4299      	cmp	r1, r3
 8005e74:	bfde      	ittt	le
 8005e76:	2330      	movle	r3, #48	; 0x30
 8005e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e80:	1b52      	subs	r2, r2, r5
 8005e82:	6122      	str	r2, [r4, #16]
 8005e84:	f8cd a000 	str.w	sl, [sp]
 8005e88:	464b      	mov	r3, r9
 8005e8a:	aa03      	add	r2, sp, #12
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f7ff fee2 	bl	8005c58 <_printf_common>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d14c      	bne.n	8005f32 <_printf_i+0x1fe>
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	b004      	add	sp, #16
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea2:	4835      	ldr	r0, [pc, #212]	; (8005f78 <_printf_i+0x244>)
 8005ea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ea8:	6829      	ldr	r1, [r5, #0]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eb0:	6029      	str	r1, [r5, #0]
 8005eb2:	061d      	lsls	r5, r3, #24
 8005eb4:	d514      	bpl.n	8005ee0 <_printf_i+0x1ac>
 8005eb6:	07df      	lsls	r7, r3, #31
 8005eb8:	bf44      	itt	mi
 8005eba:	f043 0320 	orrmi.w	r3, r3, #32
 8005ebe:	6023      	strmi	r3, [r4, #0]
 8005ec0:	b91e      	cbnz	r6, 8005eca <_printf_i+0x196>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f023 0320 	bic.w	r3, r3, #32
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	2310      	movs	r3, #16
 8005ecc:	e7b0      	b.n	8005e30 <_printf_i+0xfc>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f043 0320 	orr.w	r3, r3, #32
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	2378      	movs	r3, #120	; 0x78
 8005ed8:	4828      	ldr	r0, [pc, #160]	; (8005f7c <_printf_i+0x248>)
 8005eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ede:	e7e3      	b.n	8005ea8 <_printf_i+0x174>
 8005ee0:	0659      	lsls	r1, r3, #25
 8005ee2:	bf48      	it	mi
 8005ee4:	b2b6      	uxthmi	r6, r6
 8005ee6:	e7e6      	b.n	8005eb6 <_printf_i+0x182>
 8005ee8:	4615      	mov	r5, r2
 8005eea:	e7bb      	b.n	8005e64 <_printf_i+0x130>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	6826      	ldr	r6, [r4, #0]
 8005ef0:	6961      	ldr	r1, [r4, #20]
 8005ef2:	1d18      	adds	r0, r3, #4
 8005ef4:	6028      	str	r0, [r5, #0]
 8005ef6:	0635      	lsls	r5, r6, #24
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	d501      	bpl.n	8005f00 <_printf_i+0x1cc>
 8005efc:	6019      	str	r1, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <_printf_i+0x1d2>
 8005f00:	0670      	lsls	r0, r6, #25
 8005f02:	d5fb      	bpl.n	8005efc <_printf_i+0x1c8>
 8005f04:	8019      	strh	r1, [r3, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	6123      	str	r3, [r4, #16]
 8005f0a:	4615      	mov	r5, r2
 8005f0c:	e7ba      	b.n	8005e84 <_printf_i+0x150>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	602a      	str	r2, [r5, #0]
 8005f14:	681d      	ldr	r5, [r3, #0]
 8005f16:	6862      	ldr	r2, [r4, #4]
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f7fa f970 	bl	8000200 <memchr>
 8005f20:	b108      	cbz	r0, 8005f26 <_printf_i+0x1f2>
 8005f22:	1b40      	subs	r0, r0, r5
 8005f24:	6060      	str	r0, [r4, #4]
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f30:	e7a8      	b.n	8005e84 <_printf_i+0x150>
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	462a      	mov	r2, r5
 8005f36:	4649      	mov	r1, r9
 8005f38:	4640      	mov	r0, r8
 8005f3a:	47d0      	blx	sl
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d0ab      	beq.n	8005e98 <_printf_i+0x164>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	079b      	lsls	r3, r3, #30
 8005f44:	d413      	bmi.n	8005f6e <_printf_i+0x23a>
 8005f46:	68e0      	ldr	r0, [r4, #12]
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	4298      	cmp	r0, r3
 8005f4c:	bfb8      	it	lt
 8005f4e:	4618      	movlt	r0, r3
 8005f50:	e7a4      	b.n	8005e9c <_printf_i+0x168>
 8005f52:	2301      	movs	r3, #1
 8005f54:	4632      	mov	r2, r6
 8005f56:	4649      	mov	r1, r9
 8005f58:	4640      	mov	r0, r8
 8005f5a:	47d0      	blx	sl
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d09b      	beq.n	8005e98 <_printf_i+0x164>
 8005f60:	3501      	adds	r5, #1
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	9903      	ldr	r1, [sp, #12]
 8005f66:	1a5b      	subs	r3, r3, r1
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	dcf2      	bgt.n	8005f52 <_printf_i+0x21e>
 8005f6c:	e7eb      	b.n	8005f46 <_printf_i+0x212>
 8005f6e:	2500      	movs	r5, #0
 8005f70:	f104 0619 	add.w	r6, r4, #25
 8005f74:	e7f5      	b.n	8005f62 <_printf_i+0x22e>
 8005f76:	bf00      	nop
 8005f78:	0800a376 	.word	0x0800a376
 8005f7c:	0800a387 	.word	0x0800a387

08005f80 <_scanf_float>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	b087      	sub	sp, #28
 8005f86:	4617      	mov	r7, r2
 8005f88:	9303      	str	r3, [sp, #12]
 8005f8a:	688b      	ldr	r3, [r1, #8]
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f92:	bf83      	ittte	hi
 8005f94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f98:	195b      	addhi	r3, r3, r5
 8005f9a:	9302      	strhi	r3, [sp, #8]
 8005f9c:	2300      	movls	r3, #0
 8005f9e:	bf86      	itte	hi
 8005fa0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005fa4:	608b      	strhi	r3, [r1, #8]
 8005fa6:	9302      	strls	r3, [sp, #8]
 8005fa8:	680b      	ldr	r3, [r1, #0]
 8005faa:	468b      	mov	fp, r1
 8005fac:	2500      	movs	r5, #0
 8005fae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005fb2:	f84b 3b1c 	str.w	r3, [fp], #28
 8005fb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fba:	4680      	mov	r8, r0
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	465e      	mov	r6, fp
 8005fc0:	46aa      	mov	sl, r5
 8005fc2:	46a9      	mov	r9, r5
 8005fc4:	9501      	str	r5, [sp, #4]
 8005fc6:	68a2      	ldr	r2, [r4, #8]
 8005fc8:	b152      	cbz	r2, 8005fe0 <_scanf_float+0x60>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b4e      	cmp	r3, #78	; 0x4e
 8005fd0:	d864      	bhi.n	800609c <_scanf_float+0x11c>
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d83c      	bhi.n	8006050 <_scanf_float+0xd0>
 8005fd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005fda:	b2c8      	uxtb	r0, r1
 8005fdc:	280e      	cmp	r0, #14
 8005fde:	d93a      	bls.n	8006056 <_scanf_float+0xd6>
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	d003      	beq.n	8005fee <_scanf_float+0x6e>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ff2:	f1ba 0f01 	cmp.w	sl, #1
 8005ff6:	f200 8113 	bhi.w	8006220 <_scanf_float+0x2a0>
 8005ffa:	455e      	cmp	r6, fp
 8005ffc:	f200 8105 	bhi.w	800620a <_scanf_float+0x28a>
 8006000:	2501      	movs	r5, #1
 8006002:	4628      	mov	r0, r5
 8006004:	b007      	add	sp, #28
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800600e:	2a0d      	cmp	r2, #13
 8006010:	d8e6      	bhi.n	8005fe0 <_scanf_float+0x60>
 8006012:	a101      	add	r1, pc, #4	; (adr r1, 8006018 <_scanf_float+0x98>)
 8006014:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006018:	08006157 	.word	0x08006157
 800601c:	08005fe1 	.word	0x08005fe1
 8006020:	08005fe1 	.word	0x08005fe1
 8006024:	08005fe1 	.word	0x08005fe1
 8006028:	080061b7 	.word	0x080061b7
 800602c:	0800618f 	.word	0x0800618f
 8006030:	08005fe1 	.word	0x08005fe1
 8006034:	08005fe1 	.word	0x08005fe1
 8006038:	08006165 	.word	0x08006165
 800603c:	08005fe1 	.word	0x08005fe1
 8006040:	08005fe1 	.word	0x08005fe1
 8006044:	08005fe1 	.word	0x08005fe1
 8006048:	08005fe1 	.word	0x08005fe1
 800604c:	0800611d 	.word	0x0800611d
 8006050:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006054:	e7db      	b.n	800600e <_scanf_float+0x8e>
 8006056:	290e      	cmp	r1, #14
 8006058:	d8c2      	bhi.n	8005fe0 <_scanf_float+0x60>
 800605a:	a001      	add	r0, pc, #4	; (adr r0, 8006060 <_scanf_float+0xe0>)
 800605c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006060:	0800610f 	.word	0x0800610f
 8006064:	08005fe1 	.word	0x08005fe1
 8006068:	0800610f 	.word	0x0800610f
 800606c:	080061a3 	.word	0x080061a3
 8006070:	08005fe1 	.word	0x08005fe1
 8006074:	080060bd 	.word	0x080060bd
 8006078:	080060f9 	.word	0x080060f9
 800607c:	080060f9 	.word	0x080060f9
 8006080:	080060f9 	.word	0x080060f9
 8006084:	080060f9 	.word	0x080060f9
 8006088:	080060f9 	.word	0x080060f9
 800608c:	080060f9 	.word	0x080060f9
 8006090:	080060f9 	.word	0x080060f9
 8006094:	080060f9 	.word	0x080060f9
 8006098:	080060f9 	.word	0x080060f9
 800609c:	2b6e      	cmp	r3, #110	; 0x6e
 800609e:	d809      	bhi.n	80060b4 <_scanf_float+0x134>
 80060a0:	2b60      	cmp	r3, #96	; 0x60
 80060a2:	d8b2      	bhi.n	800600a <_scanf_float+0x8a>
 80060a4:	2b54      	cmp	r3, #84	; 0x54
 80060a6:	d077      	beq.n	8006198 <_scanf_float+0x218>
 80060a8:	2b59      	cmp	r3, #89	; 0x59
 80060aa:	d199      	bne.n	8005fe0 <_scanf_float+0x60>
 80060ac:	2d07      	cmp	r5, #7
 80060ae:	d197      	bne.n	8005fe0 <_scanf_float+0x60>
 80060b0:	2508      	movs	r5, #8
 80060b2:	e029      	b.n	8006108 <_scanf_float+0x188>
 80060b4:	2b74      	cmp	r3, #116	; 0x74
 80060b6:	d06f      	beq.n	8006198 <_scanf_float+0x218>
 80060b8:	2b79      	cmp	r3, #121	; 0x79
 80060ba:	e7f6      	b.n	80060aa <_scanf_float+0x12a>
 80060bc:	6821      	ldr	r1, [r4, #0]
 80060be:	05c8      	lsls	r0, r1, #23
 80060c0:	d51a      	bpl.n	80060f8 <_scanf_float+0x178>
 80060c2:	9b02      	ldr	r3, [sp, #8]
 80060c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80060c8:	6021      	str	r1, [r4, #0]
 80060ca:	f109 0901 	add.w	r9, r9, #1
 80060ce:	b11b      	cbz	r3, 80060d8 <_scanf_float+0x158>
 80060d0:	3b01      	subs	r3, #1
 80060d2:	3201      	adds	r2, #1
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	60a2      	str	r2, [r4, #8]
 80060d8:	68a3      	ldr	r3, [r4, #8]
 80060da:	3b01      	subs	r3, #1
 80060dc:	60a3      	str	r3, [r4, #8]
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	3301      	adds	r3, #1
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	f340 8084 	ble.w	80061f8 <_scanf_float+0x278>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	e766      	b.n	8005fc6 <_scanf_float+0x46>
 80060f8:	eb1a 0f05 	cmn.w	sl, r5
 80060fc:	f47f af70 	bne.w	8005fe0 <_scanf_float+0x60>
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006106:	6022      	str	r2, [r4, #0]
 8006108:	f806 3b01 	strb.w	r3, [r6], #1
 800610c:	e7e4      	b.n	80060d8 <_scanf_float+0x158>
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	0610      	lsls	r0, r2, #24
 8006112:	f57f af65 	bpl.w	8005fe0 <_scanf_float+0x60>
 8006116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800611a:	e7f4      	b.n	8006106 <_scanf_float+0x186>
 800611c:	f1ba 0f00 	cmp.w	sl, #0
 8006120:	d10e      	bne.n	8006140 <_scanf_float+0x1c0>
 8006122:	f1b9 0f00 	cmp.w	r9, #0
 8006126:	d10e      	bne.n	8006146 <_scanf_float+0x1c6>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800612e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006132:	d108      	bne.n	8006146 <_scanf_float+0x1c6>
 8006134:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006138:	6022      	str	r2, [r4, #0]
 800613a:	f04f 0a01 	mov.w	sl, #1
 800613e:	e7e3      	b.n	8006108 <_scanf_float+0x188>
 8006140:	f1ba 0f02 	cmp.w	sl, #2
 8006144:	d055      	beq.n	80061f2 <_scanf_float+0x272>
 8006146:	2d01      	cmp	r5, #1
 8006148:	d002      	beq.n	8006150 <_scanf_float+0x1d0>
 800614a:	2d04      	cmp	r5, #4
 800614c:	f47f af48 	bne.w	8005fe0 <_scanf_float+0x60>
 8006150:	3501      	adds	r5, #1
 8006152:	b2ed      	uxtb	r5, r5
 8006154:	e7d8      	b.n	8006108 <_scanf_float+0x188>
 8006156:	f1ba 0f01 	cmp.w	sl, #1
 800615a:	f47f af41 	bne.w	8005fe0 <_scanf_float+0x60>
 800615e:	f04f 0a02 	mov.w	sl, #2
 8006162:	e7d1      	b.n	8006108 <_scanf_float+0x188>
 8006164:	b97d      	cbnz	r5, 8006186 <_scanf_float+0x206>
 8006166:	f1b9 0f00 	cmp.w	r9, #0
 800616a:	f47f af3c 	bne.w	8005fe6 <_scanf_float+0x66>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006174:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006178:	f47f af39 	bne.w	8005fee <_scanf_float+0x6e>
 800617c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006180:	6022      	str	r2, [r4, #0]
 8006182:	2501      	movs	r5, #1
 8006184:	e7c0      	b.n	8006108 <_scanf_float+0x188>
 8006186:	2d03      	cmp	r5, #3
 8006188:	d0e2      	beq.n	8006150 <_scanf_float+0x1d0>
 800618a:	2d05      	cmp	r5, #5
 800618c:	e7de      	b.n	800614c <_scanf_float+0x1cc>
 800618e:	2d02      	cmp	r5, #2
 8006190:	f47f af26 	bne.w	8005fe0 <_scanf_float+0x60>
 8006194:	2503      	movs	r5, #3
 8006196:	e7b7      	b.n	8006108 <_scanf_float+0x188>
 8006198:	2d06      	cmp	r5, #6
 800619a:	f47f af21 	bne.w	8005fe0 <_scanf_float+0x60>
 800619e:	2507      	movs	r5, #7
 80061a0:	e7b2      	b.n	8006108 <_scanf_float+0x188>
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	0591      	lsls	r1, r2, #22
 80061a6:	f57f af1b 	bpl.w	8005fe0 <_scanf_float+0x60>
 80061aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80061ae:	6022      	str	r2, [r4, #0]
 80061b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80061b4:	e7a8      	b.n	8006108 <_scanf_float+0x188>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80061bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80061c0:	d006      	beq.n	80061d0 <_scanf_float+0x250>
 80061c2:	0550      	lsls	r0, r2, #21
 80061c4:	f57f af0c 	bpl.w	8005fe0 <_scanf_float+0x60>
 80061c8:	f1b9 0f00 	cmp.w	r9, #0
 80061cc:	f43f af0f 	beq.w	8005fee <_scanf_float+0x6e>
 80061d0:	0591      	lsls	r1, r2, #22
 80061d2:	bf58      	it	pl
 80061d4:	9901      	ldrpl	r1, [sp, #4]
 80061d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061da:	bf58      	it	pl
 80061dc:	eba9 0101 	subpl.w	r1, r9, r1
 80061e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80061e4:	bf58      	it	pl
 80061e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061ea:	6022      	str	r2, [r4, #0]
 80061ec:	f04f 0900 	mov.w	r9, #0
 80061f0:	e78a      	b.n	8006108 <_scanf_float+0x188>
 80061f2:	f04f 0a03 	mov.w	sl, #3
 80061f6:	e787      	b.n	8006108 <_scanf_float+0x188>
 80061f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061fc:	4639      	mov	r1, r7
 80061fe:	4640      	mov	r0, r8
 8006200:	4798      	blx	r3
 8006202:	2800      	cmp	r0, #0
 8006204:	f43f aedf 	beq.w	8005fc6 <_scanf_float+0x46>
 8006208:	e6ea      	b.n	8005fe0 <_scanf_float+0x60>
 800620a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800620e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006212:	463a      	mov	r2, r7
 8006214:	4640      	mov	r0, r8
 8006216:	4798      	blx	r3
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	3b01      	subs	r3, #1
 800621c:	6123      	str	r3, [r4, #16]
 800621e:	e6ec      	b.n	8005ffa <_scanf_float+0x7a>
 8006220:	1e6b      	subs	r3, r5, #1
 8006222:	2b06      	cmp	r3, #6
 8006224:	d825      	bhi.n	8006272 <_scanf_float+0x2f2>
 8006226:	2d02      	cmp	r5, #2
 8006228:	d836      	bhi.n	8006298 <_scanf_float+0x318>
 800622a:	455e      	cmp	r6, fp
 800622c:	f67f aee8 	bls.w	8006000 <_scanf_float+0x80>
 8006230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006234:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006238:	463a      	mov	r2, r7
 800623a:	4640      	mov	r0, r8
 800623c:	4798      	blx	r3
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	3b01      	subs	r3, #1
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	e7f1      	b.n	800622a <_scanf_float+0x2aa>
 8006246:	9802      	ldr	r0, [sp, #8]
 8006248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800624c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006250:	9002      	str	r0, [sp, #8]
 8006252:	463a      	mov	r2, r7
 8006254:	4640      	mov	r0, r8
 8006256:	4798      	blx	r3
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	3b01      	subs	r3, #1
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006262:	fa5f fa8a 	uxtb.w	sl, sl
 8006266:	f1ba 0f02 	cmp.w	sl, #2
 800626a:	d1ec      	bne.n	8006246 <_scanf_float+0x2c6>
 800626c:	3d03      	subs	r5, #3
 800626e:	b2ed      	uxtb	r5, r5
 8006270:	1b76      	subs	r6, r6, r5
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	05da      	lsls	r2, r3, #23
 8006276:	d52f      	bpl.n	80062d8 <_scanf_float+0x358>
 8006278:	055b      	lsls	r3, r3, #21
 800627a:	d510      	bpl.n	800629e <_scanf_float+0x31e>
 800627c:	455e      	cmp	r6, fp
 800627e:	f67f aebf 	bls.w	8006000 <_scanf_float+0x80>
 8006282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800628a:	463a      	mov	r2, r7
 800628c:	4640      	mov	r0, r8
 800628e:	4798      	blx	r3
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	3b01      	subs	r3, #1
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	e7f1      	b.n	800627c <_scanf_float+0x2fc>
 8006298:	46aa      	mov	sl, r5
 800629a:	9602      	str	r6, [sp, #8]
 800629c:	e7df      	b.n	800625e <_scanf_float+0x2de>
 800629e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	2965      	cmp	r1, #101	; 0x65
 80062a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80062aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	d00c      	beq.n	80062cc <_scanf_float+0x34c>
 80062b2:	2945      	cmp	r1, #69	; 0x45
 80062b4:	d00a      	beq.n	80062cc <_scanf_float+0x34c>
 80062b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062ba:	463a      	mov	r2, r7
 80062bc:	4640      	mov	r0, r8
 80062be:	4798      	blx	r3
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	1eb5      	subs	r5, r6, #2
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062d0:	463a      	mov	r2, r7
 80062d2:	4640      	mov	r0, r8
 80062d4:	4798      	blx	r3
 80062d6:	462e      	mov	r6, r5
 80062d8:	6825      	ldr	r5, [r4, #0]
 80062da:	f015 0510 	ands.w	r5, r5, #16
 80062de:	d159      	bne.n	8006394 <_scanf_float+0x414>
 80062e0:	7035      	strb	r5, [r6, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ec:	d11b      	bne.n	8006326 <_scanf_float+0x3a6>
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	454b      	cmp	r3, r9
 80062f2:	eba3 0209 	sub.w	r2, r3, r9
 80062f6:	d123      	bne.n	8006340 <_scanf_float+0x3c0>
 80062f8:	2200      	movs	r2, #0
 80062fa:	4659      	mov	r1, fp
 80062fc:	4640      	mov	r0, r8
 80062fe:	f000 ff25 	bl	800714c <_strtod_r>
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	f012 0f02 	tst.w	r2, #2
 800630a:	ec57 6b10 	vmov	r6, r7, d0
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	d021      	beq.n	8006356 <_scanf_float+0x3d6>
 8006312:	9903      	ldr	r1, [sp, #12]
 8006314:	1d1a      	adds	r2, r3, #4
 8006316:	600a      	str	r2, [r1, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	e9c3 6700 	strd	r6, r7, [r3]
 800631e:	68e3      	ldr	r3, [r4, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	60e3      	str	r3, [r4, #12]
 8006324:	e66d      	b.n	8006002 <_scanf_float+0x82>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0e5      	beq.n	80062f8 <_scanf_float+0x378>
 800632c:	9905      	ldr	r1, [sp, #20]
 800632e:	230a      	movs	r3, #10
 8006330:	462a      	mov	r2, r5
 8006332:	3101      	adds	r1, #1
 8006334:	4640      	mov	r0, r8
 8006336:	f000 ff91 	bl	800725c <_strtol_r>
 800633a:	9b04      	ldr	r3, [sp, #16]
 800633c:	9e05      	ldr	r6, [sp, #20]
 800633e:	1ac2      	subs	r2, r0, r3
 8006340:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006344:	429e      	cmp	r6, r3
 8006346:	bf28      	it	cs
 8006348:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800634c:	4912      	ldr	r1, [pc, #72]	; (8006398 <_scanf_float+0x418>)
 800634e:	4630      	mov	r0, r6
 8006350:	f000 f8ba 	bl	80064c8 <siprintf>
 8006354:	e7d0      	b.n	80062f8 <_scanf_float+0x378>
 8006356:	9903      	ldr	r1, [sp, #12]
 8006358:	f012 0f04 	tst.w	r2, #4
 800635c:	f103 0204 	add.w	r2, r3, #4
 8006360:	600a      	str	r2, [r1, #0]
 8006362:	d1d9      	bne.n	8006318 <_scanf_float+0x398>
 8006364:	f8d3 8000 	ldr.w	r8, [r3]
 8006368:	ee10 2a10 	vmov	r2, s0
 800636c:	ee10 0a10 	vmov	r0, s0
 8006370:	463b      	mov	r3, r7
 8006372:	4639      	mov	r1, r7
 8006374:	f7fa fbea 	bl	8000b4c <__aeabi_dcmpun>
 8006378:	b128      	cbz	r0, 8006386 <_scanf_float+0x406>
 800637a:	4808      	ldr	r0, [pc, #32]	; (800639c <_scanf_float+0x41c>)
 800637c:	f000 f89e 	bl	80064bc <nanf>
 8006380:	ed88 0a00 	vstr	s0, [r8]
 8006384:	e7cb      	b.n	800631e <_scanf_float+0x39e>
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7fa fc3d 	bl	8000c08 <__aeabi_d2f>
 800638e:	f8c8 0000 	str.w	r0, [r8]
 8006392:	e7c4      	b.n	800631e <_scanf_float+0x39e>
 8006394:	2500      	movs	r5, #0
 8006396:	e634      	b.n	8006002 <_scanf_float+0x82>
 8006398:	0800a398 	.word	0x0800a398
 800639c:	0800a808 	.word	0x0800a808

080063a0 <iprintf>:
 80063a0:	b40f      	push	{r0, r1, r2, r3}
 80063a2:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <iprintf+0x2c>)
 80063a4:	b513      	push	{r0, r1, r4, lr}
 80063a6:	681c      	ldr	r4, [r3, #0]
 80063a8:	b124      	cbz	r4, 80063b4 <iprintf+0x14>
 80063aa:	69a3      	ldr	r3, [r4, #24]
 80063ac:	b913      	cbnz	r3, 80063b4 <iprintf+0x14>
 80063ae:	4620      	mov	r0, r4
 80063b0:	f001 ffaa 	bl	8008308 <__sinit>
 80063b4:	ab05      	add	r3, sp, #20
 80063b6:	9a04      	ldr	r2, [sp, #16]
 80063b8:	68a1      	ldr	r1, [r4, #8]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	4620      	mov	r0, r4
 80063be:	f003 fb81 	bl	8009ac4 <_vfiprintf_r>
 80063c2:	b002      	add	sp, #8
 80063c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c8:	b004      	add	sp, #16
 80063ca:	4770      	bx	lr
 80063cc:	2000000c 	.word	0x2000000c

080063d0 <_puts_r>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	460e      	mov	r6, r1
 80063d4:	4605      	mov	r5, r0
 80063d6:	b118      	cbz	r0, 80063e0 <_puts_r+0x10>
 80063d8:	6983      	ldr	r3, [r0, #24]
 80063da:	b90b      	cbnz	r3, 80063e0 <_puts_r+0x10>
 80063dc:	f001 ff94 	bl	8008308 <__sinit>
 80063e0:	69ab      	ldr	r3, [r5, #24]
 80063e2:	68ac      	ldr	r4, [r5, #8]
 80063e4:	b913      	cbnz	r3, 80063ec <_puts_r+0x1c>
 80063e6:	4628      	mov	r0, r5
 80063e8:	f001 ff8e 	bl	8008308 <__sinit>
 80063ec:	4b2c      	ldr	r3, [pc, #176]	; (80064a0 <_puts_r+0xd0>)
 80063ee:	429c      	cmp	r4, r3
 80063f0:	d120      	bne.n	8006434 <_puts_r+0x64>
 80063f2:	686c      	ldr	r4, [r5, #4]
 80063f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063f6:	07db      	lsls	r3, r3, #31
 80063f8:	d405      	bmi.n	8006406 <_puts_r+0x36>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	0598      	lsls	r0, r3, #22
 80063fe:	d402      	bmi.n	8006406 <_puts_r+0x36>
 8006400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006402:	f002 fb92 	bl	8008b2a <__retarget_lock_acquire_recursive>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	0719      	lsls	r1, r3, #28
 800640a:	d51d      	bpl.n	8006448 <_puts_r+0x78>
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	b1db      	cbz	r3, 8006448 <_puts_r+0x78>
 8006410:	3e01      	subs	r6, #1
 8006412:	68a3      	ldr	r3, [r4, #8]
 8006414:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006418:	3b01      	subs	r3, #1
 800641a:	60a3      	str	r3, [r4, #8]
 800641c:	bb39      	cbnz	r1, 800646e <_puts_r+0x9e>
 800641e:	2b00      	cmp	r3, #0
 8006420:	da38      	bge.n	8006494 <_puts_r+0xc4>
 8006422:	4622      	mov	r2, r4
 8006424:	210a      	movs	r1, #10
 8006426:	4628      	mov	r0, r5
 8006428:	f000 ff1a 	bl	8007260 <__swbuf_r>
 800642c:	3001      	adds	r0, #1
 800642e:	d011      	beq.n	8006454 <_puts_r+0x84>
 8006430:	250a      	movs	r5, #10
 8006432:	e011      	b.n	8006458 <_puts_r+0x88>
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <_puts_r+0xd4>)
 8006436:	429c      	cmp	r4, r3
 8006438:	d101      	bne.n	800643e <_puts_r+0x6e>
 800643a:	68ac      	ldr	r4, [r5, #8]
 800643c:	e7da      	b.n	80063f4 <_puts_r+0x24>
 800643e:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <_puts_r+0xd8>)
 8006440:	429c      	cmp	r4, r3
 8006442:	bf08      	it	eq
 8006444:	68ec      	ldreq	r4, [r5, #12]
 8006446:	e7d5      	b.n	80063f4 <_puts_r+0x24>
 8006448:	4621      	mov	r1, r4
 800644a:	4628      	mov	r0, r5
 800644c:	f000 ff5a 	bl	8007304 <__swsetup_r>
 8006450:	2800      	cmp	r0, #0
 8006452:	d0dd      	beq.n	8006410 <_puts_r+0x40>
 8006454:	f04f 35ff 	mov.w	r5, #4294967295
 8006458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800645a:	07da      	lsls	r2, r3, #31
 800645c:	d405      	bmi.n	800646a <_puts_r+0x9a>
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	059b      	lsls	r3, r3, #22
 8006462:	d402      	bmi.n	800646a <_puts_r+0x9a>
 8006464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006466:	f002 fb61 	bl	8008b2c <__retarget_lock_release_recursive>
 800646a:	4628      	mov	r0, r5
 800646c:	bd70      	pop	{r4, r5, r6, pc}
 800646e:	2b00      	cmp	r3, #0
 8006470:	da04      	bge.n	800647c <_puts_r+0xac>
 8006472:	69a2      	ldr	r2, [r4, #24]
 8006474:	429a      	cmp	r2, r3
 8006476:	dc06      	bgt.n	8006486 <_puts_r+0xb6>
 8006478:	290a      	cmp	r1, #10
 800647a:	d004      	beq.n	8006486 <_puts_r+0xb6>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	7019      	strb	r1, [r3, #0]
 8006484:	e7c5      	b.n	8006412 <_puts_r+0x42>
 8006486:	4622      	mov	r2, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f000 fee9 	bl	8007260 <__swbuf_r>
 800648e:	3001      	adds	r0, #1
 8006490:	d1bf      	bne.n	8006412 <_puts_r+0x42>
 8006492:	e7df      	b.n	8006454 <_puts_r+0x84>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	250a      	movs	r5, #10
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	6022      	str	r2, [r4, #0]
 800649c:	701d      	strb	r5, [r3, #0]
 800649e:	e7db      	b.n	8006458 <_puts_r+0x88>
 80064a0:	0800a5a4 	.word	0x0800a5a4
 80064a4:	0800a5c4 	.word	0x0800a5c4
 80064a8:	0800a584 	.word	0x0800a584

080064ac <puts>:
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <puts+0xc>)
 80064ae:	4601      	mov	r1, r0
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	f7ff bf8d 	b.w	80063d0 <_puts_r>
 80064b6:	bf00      	nop
 80064b8:	2000000c 	.word	0x2000000c

080064bc <nanf>:
 80064bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80064c4 <nanf+0x8>
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	7fc00000 	.word	0x7fc00000

080064c8 <siprintf>:
 80064c8:	b40e      	push	{r1, r2, r3}
 80064ca:	b500      	push	{lr}
 80064cc:	b09c      	sub	sp, #112	; 0x70
 80064ce:	ab1d      	add	r3, sp, #116	; 0x74
 80064d0:	9002      	str	r0, [sp, #8]
 80064d2:	9006      	str	r0, [sp, #24]
 80064d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064d8:	4809      	ldr	r0, [pc, #36]	; (8006500 <siprintf+0x38>)
 80064da:	9107      	str	r1, [sp, #28]
 80064dc:	9104      	str	r1, [sp, #16]
 80064de:	4909      	ldr	r1, [pc, #36]	; (8006504 <siprintf+0x3c>)
 80064e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e4:	9105      	str	r1, [sp, #20]
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	a902      	add	r1, sp, #8
 80064ec:	f003 f9c0 	bl	8009870 <_svfiprintf_r>
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	b01c      	add	sp, #112	; 0x70
 80064f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064fc:	b003      	add	sp, #12
 80064fe:	4770      	bx	lr
 8006500:	2000000c 	.word	0x2000000c
 8006504:	ffff0208 	.word	0xffff0208

08006508 <sulp>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4604      	mov	r4, r0
 800650c:	460d      	mov	r5, r1
 800650e:	ec45 4b10 	vmov	d0, r4, r5
 8006512:	4616      	mov	r6, r2
 8006514:	f002 ff0a 	bl	800932c <__ulp>
 8006518:	ec51 0b10 	vmov	r0, r1, d0
 800651c:	b17e      	cbz	r6, 800653e <sulp+0x36>
 800651e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006522:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006526:	2b00      	cmp	r3, #0
 8006528:	dd09      	ble.n	800653e <sulp+0x36>
 800652a:	051b      	lsls	r3, r3, #20
 800652c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006530:	2400      	movs	r4, #0
 8006532:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006536:	4622      	mov	r2, r4
 8006538:	462b      	mov	r3, r5
 800653a:	f7fa f86d 	bl	8000618 <__aeabi_dmul>
 800653e:	bd70      	pop	{r4, r5, r6, pc}

08006540 <_strtod_l>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	ed2d 8b02 	vpush	{d8}
 8006548:	b09d      	sub	sp, #116	; 0x74
 800654a:	461f      	mov	r7, r3
 800654c:	2300      	movs	r3, #0
 800654e:	9318      	str	r3, [sp, #96]	; 0x60
 8006550:	4ba2      	ldr	r3, [pc, #648]	; (80067dc <_strtod_l+0x29c>)
 8006552:	9213      	str	r2, [sp, #76]	; 0x4c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	4604      	mov	r4, r0
 800655a:	4618      	mov	r0, r3
 800655c:	4688      	mov	r8, r1
 800655e:	f7f9 fe47 	bl	80001f0 <strlen>
 8006562:	f04f 0a00 	mov.w	sl, #0
 8006566:	4605      	mov	r5, r0
 8006568:	f04f 0b00 	mov.w	fp, #0
 800656c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	2a2b      	cmp	r2, #43	; 0x2b
 8006576:	d04e      	beq.n	8006616 <_strtod_l+0xd6>
 8006578:	d83b      	bhi.n	80065f2 <_strtod_l+0xb2>
 800657a:	2a0d      	cmp	r2, #13
 800657c:	d834      	bhi.n	80065e8 <_strtod_l+0xa8>
 800657e:	2a08      	cmp	r2, #8
 8006580:	d834      	bhi.n	80065ec <_strtod_l+0xac>
 8006582:	2a00      	cmp	r2, #0
 8006584:	d03e      	beq.n	8006604 <_strtod_l+0xc4>
 8006586:	2300      	movs	r3, #0
 8006588:	930a      	str	r3, [sp, #40]	; 0x28
 800658a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800658c:	7833      	ldrb	r3, [r6, #0]
 800658e:	2b30      	cmp	r3, #48	; 0x30
 8006590:	f040 80b0 	bne.w	80066f4 <_strtod_l+0x1b4>
 8006594:	7873      	ldrb	r3, [r6, #1]
 8006596:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800659a:	2b58      	cmp	r3, #88	; 0x58
 800659c:	d168      	bne.n	8006670 <_strtod_l+0x130>
 800659e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	ab18      	add	r3, sp, #96	; 0x60
 80065a4:	9702      	str	r7, [sp, #8]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4a8d      	ldr	r2, [pc, #564]	; (80067e0 <_strtod_l+0x2a0>)
 80065aa:	ab19      	add	r3, sp, #100	; 0x64
 80065ac:	a917      	add	r1, sp, #92	; 0x5c
 80065ae:	4620      	mov	r0, r4
 80065b0:	f001 ffae 	bl	8008510 <__gethex>
 80065b4:	f010 0707 	ands.w	r7, r0, #7
 80065b8:	4605      	mov	r5, r0
 80065ba:	d005      	beq.n	80065c8 <_strtod_l+0x88>
 80065bc:	2f06      	cmp	r7, #6
 80065be:	d12c      	bne.n	800661a <_strtod_l+0xda>
 80065c0:	3601      	adds	r6, #1
 80065c2:	2300      	movs	r3, #0
 80065c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80065c6:	930a      	str	r3, [sp, #40]	; 0x28
 80065c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 8590 	bne.w	80070f0 <_strtod_l+0xbb0>
 80065d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d2:	b1eb      	cbz	r3, 8006610 <_strtod_l+0xd0>
 80065d4:	4652      	mov	r2, sl
 80065d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80065da:	ec43 2b10 	vmov	d0, r2, r3
 80065de:	b01d      	add	sp, #116	; 0x74
 80065e0:	ecbd 8b02 	vpop	{d8}
 80065e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e8:	2a20      	cmp	r2, #32
 80065ea:	d1cc      	bne.n	8006586 <_strtod_l+0x46>
 80065ec:	3301      	adds	r3, #1
 80065ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80065f0:	e7be      	b.n	8006570 <_strtod_l+0x30>
 80065f2:	2a2d      	cmp	r2, #45	; 0x2d
 80065f4:	d1c7      	bne.n	8006586 <_strtod_l+0x46>
 80065f6:	2201      	movs	r2, #1
 80065f8:	920a      	str	r2, [sp, #40]	; 0x28
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1c2      	bne.n	800658a <_strtod_l+0x4a>
 8006604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006606:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800660a:	2b00      	cmp	r3, #0
 800660c:	f040 856e 	bne.w	80070ec <_strtod_l+0xbac>
 8006610:	4652      	mov	r2, sl
 8006612:	465b      	mov	r3, fp
 8006614:	e7e1      	b.n	80065da <_strtod_l+0x9a>
 8006616:	2200      	movs	r2, #0
 8006618:	e7ee      	b.n	80065f8 <_strtod_l+0xb8>
 800661a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800661c:	b13a      	cbz	r2, 800662e <_strtod_l+0xee>
 800661e:	2135      	movs	r1, #53	; 0x35
 8006620:	a81a      	add	r0, sp, #104	; 0x68
 8006622:	f002 ff8e 	bl	8009542 <__copybits>
 8006626:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006628:	4620      	mov	r0, r4
 800662a:	f002 fb4d 	bl	8008cc8 <_Bfree>
 800662e:	3f01      	subs	r7, #1
 8006630:	2f04      	cmp	r7, #4
 8006632:	d806      	bhi.n	8006642 <_strtod_l+0x102>
 8006634:	e8df f007 	tbb	[pc, r7]
 8006638:	1714030a 	.word	0x1714030a
 800663c:	0a          	.byte	0x0a
 800663d:	00          	.byte	0x00
 800663e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006642:	0728      	lsls	r0, r5, #28
 8006644:	d5c0      	bpl.n	80065c8 <_strtod_l+0x88>
 8006646:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800664a:	e7bd      	b.n	80065c8 <_strtod_l+0x88>
 800664c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006650:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006652:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006656:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800665a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800665e:	e7f0      	b.n	8006642 <_strtod_l+0x102>
 8006660:	f8df b180 	ldr.w	fp, [pc, #384]	; 80067e4 <_strtod_l+0x2a4>
 8006664:	e7ed      	b.n	8006642 <_strtod_l+0x102>
 8006666:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800666a:	f04f 3aff 	mov.w	sl, #4294967295
 800666e:	e7e8      	b.n	8006642 <_strtod_l+0x102>
 8006670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	9217      	str	r2, [sp, #92]	; 0x5c
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d0f9      	beq.n	8006670 <_strtod_l+0x130>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0a3      	beq.n	80065c8 <_strtod_l+0x88>
 8006680:	2301      	movs	r3, #1
 8006682:	f04f 0900 	mov.w	r9, #0
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800668a:	9308      	str	r3, [sp, #32]
 800668c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006690:	464f      	mov	r7, r9
 8006692:	220a      	movs	r2, #10
 8006694:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006696:	7806      	ldrb	r6, [r0, #0]
 8006698:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800669c:	b2d9      	uxtb	r1, r3
 800669e:	2909      	cmp	r1, #9
 80066a0:	d92a      	bls.n	80066f8 <_strtod_l+0x1b8>
 80066a2:	9905      	ldr	r1, [sp, #20]
 80066a4:	462a      	mov	r2, r5
 80066a6:	f003 fb9a 	bl	8009dde <strncmp>
 80066aa:	b398      	cbz	r0, 8006714 <_strtod_l+0x1d4>
 80066ac:	2000      	movs	r0, #0
 80066ae:	4632      	mov	r2, r6
 80066b0:	463d      	mov	r5, r7
 80066b2:	9005      	str	r0, [sp, #20]
 80066b4:	4603      	mov	r3, r0
 80066b6:	2a65      	cmp	r2, #101	; 0x65
 80066b8:	d001      	beq.n	80066be <_strtod_l+0x17e>
 80066ba:	2a45      	cmp	r2, #69	; 0x45
 80066bc:	d118      	bne.n	80066f0 <_strtod_l+0x1b0>
 80066be:	b91d      	cbnz	r5, 80066c8 <_strtod_l+0x188>
 80066c0:	9a04      	ldr	r2, [sp, #16]
 80066c2:	4302      	orrs	r2, r0
 80066c4:	d09e      	beq.n	8006604 <_strtod_l+0xc4>
 80066c6:	2500      	movs	r5, #0
 80066c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80066cc:	f108 0201 	add.w	r2, r8, #1
 80066d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80066d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80066d6:	2a2b      	cmp	r2, #43	; 0x2b
 80066d8:	d075      	beq.n	80067c6 <_strtod_l+0x286>
 80066da:	2a2d      	cmp	r2, #45	; 0x2d
 80066dc:	d07b      	beq.n	80067d6 <_strtod_l+0x296>
 80066de:	f04f 0c00 	mov.w	ip, #0
 80066e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80066e6:	2909      	cmp	r1, #9
 80066e8:	f240 8082 	bls.w	80067f0 <_strtod_l+0x2b0>
 80066ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066f0:	2600      	movs	r6, #0
 80066f2:	e09d      	b.n	8006830 <_strtod_l+0x2f0>
 80066f4:	2300      	movs	r3, #0
 80066f6:	e7c4      	b.n	8006682 <_strtod_l+0x142>
 80066f8:	2f08      	cmp	r7, #8
 80066fa:	bfd8      	it	le
 80066fc:	9907      	ldrle	r1, [sp, #28]
 80066fe:	f100 0001 	add.w	r0, r0, #1
 8006702:	bfda      	itte	le
 8006704:	fb02 3301 	mlale	r3, r2, r1, r3
 8006708:	9307      	strle	r3, [sp, #28]
 800670a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800670e:	3701      	adds	r7, #1
 8006710:	9017      	str	r0, [sp, #92]	; 0x5c
 8006712:	e7bf      	b.n	8006694 <_strtod_l+0x154>
 8006714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006716:	195a      	adds	r2, r3, r5
 8006718:	9217      	str	r2, [sp, #92]	; 0x5c
 800671a:	5d5a      	ldrb	r2, [r3, r5]
 800671c:	2f00      	cmp	r7, #0
 800671e:	d037      	beq.n	8006790 <_strtod_l+0x250>
 8006720:	9005      	str	r0, [sp, #20]
 8006722:	463d      	mov	r5, r7
 8006724:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006728:	2b09      	cmp	r3, #9
 800672a:	d912      	bls.n	8006752 <_strtod_l+0x212>
 800672c:	2301      	movs	r3, #1
 800672e:	e7c2      	b.n	80066b6 <_strtod_l+0x176>
 8006730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	9217      	str	r2, [sp, #92]	; 0x5c
 8006736:	785a      	ldrb	r2, [r3, #1]
 8006738:	3001      	adds	r0, #1
 800673a:	2a30      	cmp	r2, #48	; 0x30
 800673c:	d0f8      	beq.n	8006730 <_strtod_l+0x1f0>
 800673e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006742:	2b08      	cmp	r3, #8
 8006744:	f200 84d9 	bhi.w	80070fa <_strtod_l+0xbba>
 8006748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800674a:	9005      	str	r0, [sp, #20]
 800674c:	2000      	movs	r0, #0
 800674e:	9308      	str	r3, [sp, #32]
 8006750:	4605      	mov	r5, r0
 8006752:	3a30      	subs	r2, #48	; 0x30
 8006754:	f100 0301 	add.w	r3, r0, #1
 8006758:	d014      	beq.n	8006784 <_strtod_l+0x244>
 800675a:	9905      	ldr	r1, [sp, #20]
 800675c:	4419      	add	r1, r3
 800675e:	9105      	str	r1, [sp, #20]
 8006760:	462b      	mov	r3, r5
 8006762:	eb00 0e05 	add.w	lr, r0, r5
 8006766:	210a      	movs	r1, #10
 8006768:	4573      	cmp	r3, lr
 800676a:	d113      	bne.n	8006794 <_strtod_l+0x254>
 800676c:	182b      	adds	r3, r5, r0
 800676e:	2b08      	cmp	r3, #8
 8006770:	f105 0501 	add.w	r5, r5, #1
 8006774:	4405      	add	r5, r0
 8006776:	dc1c      	bgt.n	80067b2 <_strtod_l+0x272>
 8006778:	9907      	ldr	r1, [sp, #28]
 800677a:	230a      	movs	r3, #10
 800677c:	fb03 2301 	mla	r3, r3, r1, r2
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	2300      	movs	r3, #0
 8006784:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006786:	1c51      	adds	r1, r2, #1
 8006788:	9117      	str	r1, [sp, #92]	; 0x5c
 800678a:	7852      	ldrb	r2, [r2, #1]
 800678c:	4618      	mov	r0, r3
 800678e:	e7c9      	b.n	8006724 <_strtod_l+0x1e4>
 8006790:	4638      	mov	r0, r7
 8006792:	e7d2      	b.n	800673a <_strtod_l+0x1fa>
 8006794:	2b08      	cmp	r3, #8
 8006796:	dc04      	bgt.n	80067a2 <_strtod_l+0x262>
 8006798:	9e07      	ldr	r6, [sp, #28]
 800679a:	434e      	muls	r6, r1
 800679c:	9607      	str	r6, [sp, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	e7e2      	b.n	8006768 <_strtod_l+0x228>
 80067a2:	f103 0c01 	add.w	ip, r3, #1
 80067a6:	f1bc 0f10 	cmp.w	ip, #16
 80067aa:	bfd8      	it	le
 80067ac:	fb01 f909 	mulle.w	r9, r1, r9
 80067b0:	e7f5      	b.n	800679e <_strtod_l+0x25e>
 80067b2:	2d10      	cmp	r5, #16
 80067b4:	bfdc      	itt	le
 80067b6:	230a      	movle	r3, #10
 80067b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80067bc:	e7e1      	b.n	8006782 <_strtod_l+0x242>
 80067be:	2300      	movs	r3, #0
 80067c0:	9305      	str	r3, [sp, #20]
 80067c2:	2301      	movs	r3, #1
 80067c4:	e77c      	b.n	80066c0 <_strtod_l+0x180>
 80067c6:	f04f 0c00 	mov.w	ip, #0
 80067ca:	f108 0202 	add.w	r2, r8, #2
 80067ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80067d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80067d4:	e785      	b.n	80066e2 <_strtod_l+0x1a2>
 80067d6:	f04f 0c01 	mov.w	ip, #1
 80067da:	e7f6      	b.n	80067ca <_strtod_l+0x28a>
 80067dc:	0800a64c 	.word	0x0800a64c
 80067e0:	0800a3a0 	.word	0x0800a3a0
 80067e4:	7ff00000 	.word	0x7ff00000
 80067e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067ea:	1c51      	adds	r1, r2, #1
 80067ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80067ee:	7852      	ldrb	r2, [r2, #1]
 80067f0:	2a30      	cmp	r2, #48	; 0x30
 80067f2:	d0f9      	beq.n	80067e8 <_strtod_l+0x2a8>
 80067f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80067f8:	2908      	cmp	r1, #8
 80067fa:	f63f af79 	bhi.w	80066f0 <_strtod_l+0x1b0>
 80067fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006804:	9206      	str	r2, [sp, #24]
 8006806:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006808:	1c51      	adds	r1, r2, #1
 800680a:	9117      	str	r1, [sp, #92]	; 0x5c
 800680c:	7852      	ldrb	r2, [r2, #1]
 800680e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006812:	2e09      	cmp	r6, #9
 8006814:	d937      	bls.n	8006886 <_strtod_l+0x346>
 8006816:	9e06      	ldr	r6, [sp, #24]
 8006818:	1b89      	subs	r1, r1, r6
 800681a:	2908      	cmp	r1, #8
 800681c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006820:	dc02      	bgt.n	8006828 <_strtod_l+0x2e8>
 8006822:	4576      	cmp	r6, lr
 8006824:	bfa8      	it	ge
 8006826:	4676      	movge	r6, lr
 8006828:	f1bc 0f00 	cmp.w	ip, #0
 800682c:	d000      	beq.n	8006830 <_strtod_l+0x2f0>
 800682e:	4276      	negs	r6, r6
 8006830:	2d00      	cmp	r5, #0
 8006832:	d14d      	bne.n	80068d0 <_strtod_l+0x390>
 8006834:	9904      	ldr	r1, [sp, #16]
 8006836:	4301      	orrs	r1, r0
 8006838:	f47f aec6 	bne.w	80065c8 <_strtod_l+0x88>
 800683c:	2b00      	cmp	r3, #0
 800683e:	f47f aee1 	bne.w	8006604 <_strtod_l+0xc4>
 8006842:	2a69      	cmp	r2, #105	; 0x69
 8006844:	d027      	beq.n	8006896 <_strtod_l+0x356>
 8006846:	dc24      	bgt.n	8006892 <_strtod_l+0x352>
 8006848:	2a49      	cmp	r2, #73	; 0x49
 800684a:	d024      	beq.n	8006896 <_strtod_l+0x356>
 800684c:	2a4e      	cmp	r2, #78	; 0x4e
 800684e:	f47f aed9 	bne.w	8006604 <_strtod_l+0xc4>
 8006852:	499f      	ldr	r1, [pc, #636]	; (8006ad0 <_strtod_l+0x590>)
 8006854:	a817      	add	r0, sp, #92	; 0x5c
 8006856:	f002 f8b3 	bl	80089c0 <__match>
 800685a:	2800      	cmp	r0, #0
 800685c:	f43f aed2 	beq.w	8006604 <_strtod_l+0xc4>
 8006860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b28      	cmp	r3, #40	; 0x28
 8006866:	d12d      	bne.n	80068c4 <_strtod_l+0x384>
 8006868:	499a      	ldr	r1, [pc, #616]	; (8006ad4 <_strtod_l+0x594>)
 800686a:	aa1a      	add	r2, sp, #104	; 0x68
 800686c:	a817      	add	r0, sp, #92	; 0x5c
 800686e:	f002 f8bb 	bl	80089e8 <__hexnan>
 8006872:	2805      	cmp	r0, #5
 8006874:	d126      	bne.n	80068c4 <_strtod_l+0x384>
 8006876:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006878:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800687c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006880:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006884:	e6a0      	b.n	80065c8 <_strtod_l+0x88>
 8006886:	210a      	movs	r1, #10
 8006888:	fb01 2e0e 	mla	lr, r1, lr, r2
 800688c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006890:	e7b9      	b.n	8006806 <_strtod_l+0x2c6>
 8006892:	2a6e      	cmp	r2, #110	; 0x6e
 8006894:	e7db      	b.n	800684e <_strtod_l+0x30e>
 8006896:	4990      	ldr	r1, [pc, #576]	; (8006ad8 <_strtod_l+0x598>)
 8006898:	a817      	add	r0, sp, #92	; 0x5c
 800689a:	f002 f891 	bl	80089c0 <__match>
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f aeb0 	beq.w	8006604 <_strtod_l+0xc4>
 80068a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068a6:	498d      	ldr	r1, [pc, #564]	; (8006adc <_strtod_l+0x59c>)
 80068a8:	3b01      	subs	r3, #1
 80068aa:	a817      	add	r0, sp, #92	; 0x5c
 80068ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80068ae:	f002 f887 	bl	80089c0 <__match>
 80068b2:	b910      	cbnz	r0, 80068ba <_strtod_l+0x37a>
 80068b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068b6:	3301      	adds	r3, #1
 80068b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80068ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006aec <_strtod_l+0x5ac>
 80068be:	f04f 0a00 	mov.w	sl, #0
 80068c2:	e681      	b.n	80065c8 <_strtod_l+0x88>
 80068c4:	4886      	ldr	r0, [pc, #536]	; (8006ae0 <_strtod_l+0x5a0>)
 80068c6:	f003 fa2f 	bl	8009d28 <nan>
 80068ca:	ec5b ab10 	vmov	sl, fp, d0
 80068ce:	e67b      	b.n	80065c8 <_strtod_l+0x88>
 80068d0:	9b05      	ldr	r3, [sp, #20]
 80068d2:	9807      	ldr	r0, [sp, #28]
 80068d4:	1af3      	subs	r3, r6, r3
 80068d6:	2f00      	cmp	r7, #0
 80068d8:	bf08      	it	eq
 80068da:	462f      	moveq	r7, r5
 80068dc:	2d10      	cmp	r5, #16
 80068de:	9306      	str	r3, [sp, #24]
 80068e0:	46a8      	mov	r8, r5
 80068e2:	bfa8      	it	ge
 80068e4:	f04f 0810 	movge.w	r8, #16
 80068e8:	f7f9 fe1c 	bl	8000524 <__aeabi_ui2d>
 80068ec:	2d09      	cmp	r5, #9
 80068ee:	4682      	mov	sl, r0
 80068f0:	468b      	mov	fp, r1
 80068f2:	dd13      	ble.n	800691c <_strtod_l+0x3dc>
 80068f4:	4b7b      	ldr	r3, [pc, #492]	; (8006ae4 <_strtod_l+0x5a4>)
 80068f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80068fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068fe:	f7f9 fe8b 	bl	8000618 <__aeabi_dmul>
 8006902:	4682      	mov	sl, r0
 8006904:	4648      	mov	r0, r9
 8006906:	468b      	mov	fp, r1
 8006908:	f7f9 fe0c 	bl	8000524 <__aeabi_ui2d>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4650      	mov	r0, sl
 8006912:	4659      	mov	r1, fp
 8006914:	f7f9 fcca 	bl	80002ac <__adddf3>
 8006918:	4682      	mov	sl, r0
 800691a:	468b      	mov	fp, r1
 800691c:	2d0f      	cmp	r5, #15
 800691e:	dc38      	bgt.n	8006992 <_strtod_l+0x452>
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f43f ae50 	beq.w	80065c8 <_strtod_l+0x88>
 8006928:	dd24      	ble.n	8006974 <_strtod_l+0x434>
 800692a:	2b16      	cmp	r3, #22
 800692c:	dc0b      	bgt.n	8006946 <_strtod_l+0x406>
 800692e:	496d      	ldr	r1, [pc, #436]	; (8006ae4 <_strtod_l+0x5a4>)
 8006930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006938:	4652      	mov	r2, sl
 800693a:	465b      	mov	r3, fp
 800693c:	f7f9 fe6c 	bl	8000618 <__aeabi_dmul>
 8006940:	4682      	mov	sl, r0
 8006942:	468b      	mov	fp, r1
 8006944:	e640      	b.n	80065c8 <_strtod_l+0x88>
 8006946:	9a06      	ldr	r2, [sp, #24]
 8006948:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800694c:	4293      	cmp	r3, r2
 800694e:	db20      	blt.n	8006992 <_strtod_l+0x452>
 8006950:	4c64      	ldr	r4, [pc, #400]	; (8006ae4 <_strtod_l+0x5a4>)
 8006952:	f1c5 050f 	rsb	r5, r5, #15
 8006956:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800695a:	4652      	mov	r2, sl
 800695c:	465b      	mov	r3, fp
 800695e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006962:	f7f9 fe59 	bl	8000618 <__aeabi_dmul>
 8006966:	9b06      	ldr	r3, [sp, #24]
 8006968:	1b5d      	subs	r5, r3, r5
 800696a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800696e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006972:	e7e3      	b.n	800693c <_strtod_l+0x3fc>
 8006974:	9b06      	ldr	r3, [sp, #24]
 8006976:	3316      	adds	r3, #22
 8006978:	db0b      	blt.n	8006992 <_strtod_l+0x452>
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	1b9e      	subs	r6, r3, r6
 800697e:	4b59      	ldr	r3, [pc, #356]	; (8006ae4 <_strtod_l+0x5a4>)
 8006980:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006988:	4650      	mov	r0, sl
 800698a:	4659      	mov	r1, fp
 800698c:	f7f9 ff6e 	bl	800086c <__aeabi_ddiv>
 8006990:	e7d6      	b.n	8006940 <_strtod_l+0x400>
 8006992:	9b06      	ldr	r3, [sp, #24]
 8006994:	eba5 0808 	sub.w	r8, r5, r8
 8006998:	4498      	add	r8, r3
 800699a:	f1b8 0f00 	cmp.w	r8, #0
 800699e:	dd74      	ble.n	8006a8a <_strtod_l+0x54a>
 80069a0:	f018 030f 	ands.w	r3, r8, #15
 80069a4:	d00a      	beq.n	80069bc <_strtod_l+0x47c>
 80069a6:	494f      	ldr	r1, [pc, #316]	; (8006ae4 <_strtod_l+0x5a4>)
 80069a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069ac:	4652      	mov	r2, sl
 80069ae:	465b      	mov	r3, fp
 80069b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b4:	f7f9 fe30 	bl	8000618 <__aeabi_dmul>
 80069b8:	4682      	mov	sl, r0
 80069ba:	468b      	mov	fp, r1
 80069bc:	f038 080f 	bics.w	r8, r8, #15
 80069c0:	d04f      	beq.n	8006a62 <_strtod_l+0x522>
 80069c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80069c6:	dd22      	ble.n	8006a0e <_strtod_l+0x4ce>
 80069c8:	2500      	movs	r5, #0
 80069ca:	462e      	mov	r6, r5
 80069cc:	9507      	str	r5, [sp, #28]
 80069ce:	9505      	str	r5, [sp, #20]
 80069d0:	2322      	movs	r3, #34	; 0x22
 80069d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006aec <_strtod_l+0x5ac>
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	f04f 0a00 	mov.w	sl, #0
 80069dc:	9b07      	ldr	r3, [sp, #28]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f43f adf2 	beq.w	80065c8 <_strtod_l+0x88>
 80069e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069e6:	4620      	mov	r0, r4
 80069e8:	f002 f96e 	bl	8008cc8 <_Bfree>
 80069ec:	9905      	ldr	r1, [sp, #20]
 80069ee:	4620      	mov	r0, r4
 80069f0:	f002 f96a 	bl	8008cc8 <_Bfree>
 80069f4:	4631      	mov	r1, r6
 80069f6:	4620      	mov	r0, r4
 80069f8:	f002 f966 	bl	8008cc8 <_Bfree>
 80069fc:	9907      	ldr	r1, [sp, #28]
 80069fe:	4620      	mov	r0, r4
 8006a00:	f002 f962 	bl	8008cc8 <_Bfree>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4620      	mov	r0, r4
 8006a08:	f002 f95e 	bl	8008cc8 <_Bfree>
 8006a0c:	e5dc      	b.n	80065c8 <_strtod_l+0x88>
 8006a0e:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <_strtod_l+0x5a8>)
 8006a10:	9304      	str	r3, [sp, #16]
 8006a12:	2300      	movs	r3, #0
 8006a14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	4699      	mov	r9, r3
 8006a1e:	f1b8 0f01 	cmp.w	r8, #1
 8006a22:	dc21      	bgt.n	8006a68 <_strtod_l+0x528>
 8006a24:	b10b      	cbz	r3, 8006a2a <_strtod_l+0x4ea>
 8006a26:	4682      	mov	sl, r0
 8006a28:	468b      	mov	fp, r1
 8006a2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ae8 <_strtod_l+0x5a8>)
 8006a2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006a30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006a34:	4652      	mov	r2, sl
 8006a36:	465b      	mov	r3, fp
 8006a38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006a3c:	f7f9 fdec 	bl	8000618 <__aeabi_dmul>
 8006a40:	4b2a      	ldr	r3, [pc, #168]	; (8006aec <_strtod_l+0x5ac>)
 8006a42:	460a      	mov	r2, r1
 8006a44:	400b      	ands	r3, r1
 8006a46:	492a      	ldr	r1, [pc, #168]	; (8006af0 <_strtod_l+0x5b0>)
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	4682      	mov	sl, r0
 8006a4c:	d8bc      	bhi.n	80069c8 <_strtod_l+0x488>
 8006a4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a52:	428b      	cmp	r3, r1
 8006a54:	bf86      	itte	hi
 8006a56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006af4 <_strtod_l+0x5b4>
 8006a5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006a62:	2300      	movs	r3, #0
 8006a64:	9304      	str	r3, [sp, #16]
 8006a66:	e084      	b.n	8006b72 <_strtod_l+0x632>
 8006a68:	f018 0f01 	tst.w	r8, #1
 8006a6c:	d005      	beq.n	8006a7a <_strtod_l+0x53a>
 8006a6e:	9b04      	ldr	r3, [sp, #16]
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fdd0 	bl	8000618 <__aeabi_dmul>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	9a04      	ldr	r2, [sp, #16]
 8006a7c:	3208      	adds	r2, #8
 8006a7e:	f109 0901 	add.w	r9, r9, #1
 8006a82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a86:	9204      	str	r2, [sp, #16]
 8006a88:	e7c9      	b.n	8006a1e <_strtod_l+0x4de>
 8006a8a:	d0ea      	beq.n	8006a62 <_strtod_l+0x522>
 8006a8c:	f1c8 0800 	rsb	r8, r8, #0
 8006a90:	f018 020f 	ands.w	r2, r8, #15
 8006a94:	d00a      	beq.n	8006aac <_strtod_l+0x56c>
 8006a96:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <_strtod_l+0x5a4>)
 8006a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	4659      	mov	r1, fp
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fee2 	bl	800086c <__aeabi_ddiv>
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	468b      	mov	fp, r1
 8006aac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ab0:	d0d7      	beq.n	8006a62 <_strtod_l+0x522>
 8006ab2:	f1b8 0f1f 	cmp.w	r8, #31
 8006ab6:	dd1f      	ble.n	8006af8 <_strtod_l+0x5b8>
 8006ab8:	2500      	movs	r5, #0
 8006aba:	462e      	mov	r6, r5
 8006abc:	9507      	str	r5, [sp, #28]
 8006abe:	9505      	str	r5, [sp, #20]
 8006ac0:	2322      	movs	r3, #34	; 0x22
 8006ac2:	f04f 0a00 	mov.w	sl, #0
 8006ac6:	f04f 0b00 	mov.w	fp, #0
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	e786      	b.n	80069dc <_strtod_l+0x49c>
 8006ace:	bf00      	nop
 8006ad0:	0800a371 	.word	0x0800a371
 8006ad4:	0800a3b4 	.word	0x0800a3b4
 8006ad8:	0800a369 	.word	0x0800a369
 8006adc:	0800a4f4 	.word	0x0800a4f4
 8006ae0:	0800a808 	.word	0x0800a808
 8006ae4:	0800a6e8 	.word	0x0800a6e8
 8006ae8:	0800a6c0 	.word	0x0800a6c0
 8006aec:	7ff00000 	.word	0x7ff00000
 8006af0:	7ca00000 	.word	0x7ca00000
 8006af4:	7fefffff 	.word	0x7fefffff
 8006af8:	f018 0310 	ands.w	r3, r8, #16
 8006afc:	bf18      	it	ne
 8006afe:	236a      	movne	r3, #106	; 0x6a
 8006b00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006eb0 <_strtod_l+0x970>
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	4650      	mov	r0, sl
 8006b08:	4659      	mov	r1, fp
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f018 0f01 	tst.w	r8, #1
 8006b10:	d004      	beq.n	8006b1c <_strtod_l+0x5dc>
 8006b12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b16:	f7f9 fd7f 	bl	8000618 <__aeabi_dmul>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006b20:	f109 0908 	add.w	r9, r9, #8
 8006b24:	d1f2      	bne.n	8006b0c <_strtod_l+0x5cc>
 8006b26:	b10b      	cbz	r3, 8006b2c <_strtod_l+0x5ec>
 8006b28:	4682      	mov	sl, r0
 8006b2a:	468b      	mov	fp, r1
 8006b2c:	9b04      	ldr	r3, [sp, #16]
 8006b2e:	b1c3      	cbz	r3, 8006b62 <_strtod_l+0x622>
 8006b30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	4659      	mov	r1, fp
 8006b3c:	dd11      	ble.n	8006b62 <_strtod_l+0x622>
 8006b3e:	2b1f      	cmp	r3, #31
 8006b40:	f340 8124 	ble.w	8006d8c <_strtod_l+0x84c>
 8006b44:	2b34      	cmp	r3, #52	; 0x34
 8006b46:	bfde      	ittt	le
 8006b48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b4c:	f04f 33ff 	movle.w	r3, #4294967295
 8006b50:	fa03 f202 	lslle.w	r2, r3, r2
 8006b54:	f04f 0a00 	mov.w	sl, #0
 8006b58:	bfcc      	ite	gt
 8006b5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006b5e:	ea02 0b01 	andle.w	fp, r2, r1
 8006b62:	2200      	movs	r2, #0
 8006b64:	2300      	movs	r3, #0
 8006b66:	4650      	mov	r0, sl
 8006b68:	4659      	mov	r1, fp
 8006b6a:	f7f9 ffbd 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1a2      	bne.n	8006ab8 <_strtod_l+0x578>
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	9908      	ldr	r1, [sp, #32]
 8006b78:	462b      	mov	r3, r5
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f002 f90b 	bl	8008d98 <__s2b>
 8006b82:	9007      	str	r0, [sp, #28]
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f43f af1f 	beq.w	80069c8 <_strtod_l+0x488>
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	1b9e      	subs	r6, r3, r6
 8006b8e:	9b06      	ldr	r3, [sp, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bfb4      	ite	lt
 8006b94:	4633      	movlt	r3, r6
 8006b96:	2300      	movge	r3, #0
 8006b98:	930c      	str	r3, [sp, #48]	; 0x30
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ba2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ba4:	462e      	mov	r6, r5
 8006ba6:	9b07      	ldr	r3, [sp, #28]
 8006ba8:	4620      	mov	r0, r4
 8006baa:	6859      	ldr	r1, [r3, #4]
 8006bac:	f002 f84c 	bl	8008c48 <_Balloc>
 8006bb0:	9005      	str	r0, [sp, #20]
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f af0c 	beq.w	80069d0 <_strtod_l+0x490>
 8006bb8:	9b07      	ldr	r3, [sp, #28]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	3202      	adds	r2, #2
 8006bbe:	f103 010c 	add.w	r1, r3, #12
 8006bc2:	0092      	lsls	r2, r2, #2
 8006bc4:	300c      	adds	r0, #12
 8006bc6:	f002 f831 	bl	8008c2c <memcpy>
 8006bca:	ec4b ab10 	vmov	d0, sl, fp
 8006bce:	aa1a      	add	r2, sp, #104	; 0x68
 8006bd0:	a919      	add	r1, sp, #100	; 0x64
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f002 fc26 	bl	8009424 <__d2b>
 8006bd8:	ec4b ab18 	vmov	d8, sl, fp
 8006bdc:	9018      	str	r0, [sp, #96]	; 0x60
 8006bde:	2800      	cmp	r0, #0
 8006be0:	f43f aef6 	beq.w	80069d0 <_strtod_l+0x490>
 8006be4:	2101      	movs	r1, #1
 8006be6:	4620      	mov	r0, r4
 8006be8:	f002 f970 	bl	8008ecc <__i2b>
 8006bec:	4606      	mov	r6, r0
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f aeee 	beq.w	80069d0 <_strtod_l+0x490>
 8006bf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bf6:	9904      	ldr	r1, [sp, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bfab      	itete	ge
 8006bfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006bfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006c00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006c02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006c06:	bfac      	ite	ge
 8006c08:	eb03 0902 	addge.w	r9, r3, r2
 8006c0c:	1ad7      	sublt	r7, r2, r3
 8006c0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c10:	eba3 0801 	sub.w	r8, r3, r1
 8006c14:	4490      	add	r8, r2
 8006c16:	4ba1      	ldr	r3, [pc, #644]	; (8006e9c <_strtod_l+0x95c>)
 8006c18:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c1c:	4598      	cmp	r8, r3
 8006c1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c22:	f280 80c7 	bge.w	8006db4 <_strtod_l+0x874>
 8006c26:	eba3 0308 	sub.w	r3, r3, r8
 8006c2a:	2b1f      	cmp	r3, #31
 8006c2c:	eba2 0203 	sub.w	r2, r2, r3
 8006c30:	f04f 0101 	mov.w	r1, #1
 8006c34:	f300 80b1 	bgt.w	8006d9a <_strtod_l+0x85a>
 8006c38:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9308      	str	r3, [sp, #32]
 8006c42:	eb09 0802 	add.w	r8, r9, r2
 8006c46:	9b04      	ldr	r3, [sp, #16]
 8006c48:	45c1      	cmp	r9, r8
 8006c4a:	4417      	add	r7, r2
 8006c4c:	441f      	add	r7, r3
 8006c4e:	464b      	mov	r3, r9
 8006c50:	bfa8      	it	ge
 8006c52:	4643      	movge	r3, r8
 8006c54:	42bb      	cmp	r3, r7
 8006c56:	bfa8      	it	ge
 8006c58:	463b      	movge	r3, r7
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bfc2      	ittt	gt
 8006c5e:	eba8 0803 	subgt.w	r8, r8, r3
 8006c62:	1aff      	subgt	r7, r7, r3
 8006c64:	eba9 0903 	subgt.w	r9, r9, r3
 8006c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dd17      	ble.n	8006c9e <_strtod_l+0x75e>
 8006c6e:	4631      	mov	r1, r6
 8006c70:	461a      	mov	r2, r3
 8006c72:	4620      	mov	r0, r4
 8006c74:	f002 f9ea 	bl	800904c <__pow5mult>
 8006c78:	4606      	mov	r6, r0
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f43f aea8 	beq.w	80069d0 <_strtod_l+0x490>
 8006c80:	4601      	mov	r1, r0
 8006c82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c84:	4620      	mov	r0, r4
 8006c86:	f002 f937 	bl	8008ef8 <__multiply>
 8006c8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f43f ae9f 	beq.w	80069d0 <_strtod_l+0x490>
 8006c92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c94:	4620      	mov	r0, r4
 8006c96:	f002 f817 	bl	8008cc8 <_Bfree>
 8006c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9c:	9318      	str	r3, [sp, #96]	; 0x60
 8006c9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ca2:	f300 808c 	bgt.w	8006dbe <_strtod_l+0x87e>
 8006ca6:	9b06      	ldr	r3, [sp, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dd08      	ble.n	8006cbe <_strtod_l+0x77e>
 8006cac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cae:	9905      	ldr	r1, [sp, #20]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f002 f9cb 	bl	800904c <__pow5mult>
 8006cb6:	9005      	str	r0, [sp, #20]
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f43f ae89 	beq.w	80069d0 <_strtod_l+0x490>
 8006cbe:	2f00      	cmp	r7, #0
 8006cc0:	dd08      	ble.n	8006cd4 <_strtod_l+0x794>
 8006cc2:	9905      	ldr	r1, [sp, #20]
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f002 fa1a 	bl	8009100 <__lshift>
 8006ccc:	9005      	str	r0, [sp, #20]
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f ae7e 	beq.w	80069d0 <_strtod_l+0x490>
 8006cd4:	f1b9 0f00 	cmp.w	r9, #0
 8006cd8:	dd08      	ble.n	8006cec <_strtod_l+0x7ac>
 8006cda:	4631      	mov	r1, r6
 8006cdc:	464a      	mov	r2, r9
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f002 fa0e 	bl	8009100 <__lshift>
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f43f ae72 	beq.w	80069d0 <_strtod_l+0x490>
 8006cec:	9a05      	ldr	r2, [sp, #20]
 8006cee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f002 fa91 	bl	8009218 <__mdiff>
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f43f ae69 	beq.w	80069d0 <_strtod_l+0x490>
 8006cfe:	68c3      	ldr	r3, [r0, #12]
 8006d00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d02:	2300      	movs	r3, #0
 8006d04:	60c3      	str	r3, [r0, #12]
 8006d06:	4631      	mov	r1, r6
 8006d08:	f002 fa6a 	bl	80091e0 <__mcmp>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	da60      	bge.n	8006dd2 <_strtod_l+0x892>
 8006d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d12:	ea53 030a 	orrs.w	r3, r3, sl
 8006d16:	f040 8082 	bne.w	8006e1e <_strtod_l+0x8de>
 8006d1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d17d      	bne.n	8006e1e <_strtod_l+0x8de>
 8006d22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d26:	0d1b      	lsrs	r3, r3, #20
 8006d28:	051b      	lsls	r3, r3, #20
 8006d2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d2e:	d976      	bls.n	8006e1e <_strtod_l+0x8de>
 8006d30:	696b      	ldr	r3, [r5, #20]
 8006d32:	b913      	cbnz	r3, 8006d3a <_strtod_l+0x7fa>
 8006d34:	692b      	ldr	r3, [r5, #16]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	dd71      	ble.n	8006e1e <_strtod_l+0x8de>
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f002 f9de 	bl	8009100 <__lshift>
 8006d44:	4631      	mov	r1, r6
 8006d46:	4605      	mov	r5, r0
 8006d48:	f002 fa4a 	bl	80091e0 <__mcmp>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	dd66      	ble.n	8006e1e <_strtod_l+0x8de>
 8006d50:	9904      	ldr	r1, [sp, #16]
 8006d52:	4a53      	ldr	r2, [pc, #332]	; (8006ea0 <_strtod_l+0x960>)
 8006d54:	465b      	mov	r3, fp
 8006d56:	2900      	cmp	r1, #0
 8006d58:	f000 8081 	beq.w	8006e5e <_strtod_l+0x91e>
 8006d5c:	ea02 010b 	and.w	r1, r2, fp
 8006d60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d64:	dc7b      	bgt.n	8006e5e <_strtod_l+0x91e>
 8006d66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d6a:	f77f aea9 	ble.w	8006ac0 <_strtod_l+0x580>
 8006d6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <_strtod_l+0x964>)
 8006d70:	4650      	mov	r0, sl
 8006d72:	4659      	mov	r1, fp
 8006d74:	2200      	movs	r2, #0
 8006d76:	f7f9 fc4f 	bl	8000618 <__aeabi_dmul>
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4303      	orrs	r3, r0
 8006d7e:	bf08      	it	eq
 8006d80:	2322      	moveq	r3, #34	; 0x22
 8006d82:	4682      	mov	sl, r0
 8006d84:	468b      	mov	fp, r1
 8006d86:	bf08      	it	eq
 8006d88:	6023      	streq	r3, [r4, #0]
 8006d8a:	e62b      	b.n	80069e4 <_strtod_l+0x4a4>
 8006d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	ea03 0a0a 	and.w	sl, r3, sl
 8006d98:	e6e3      	b.n	8006b62 <_strtod_l+0x622>
 8006d9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006d9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006da2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006da6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006daa:	fa01 f308 	lsl.w	r3, r1, r8
 8006dae:	9308      	str	r3, [sp, #32]
 8006db0:	910d      	str	r1, [sp, #52]	; 0x34
 8006db2:	e746      	b.n	8006c42 <_strtod_l+0x702>
 8006db4:	2300      	movs	r3, #0
 8006db6:	9308      	str	r3, [sp, #32]
 8006db8:	2301      	movs	r3, #1
 8006dba:	930d      	str	r3, [sp, #52]	; 0x34
 8006dbc:	e741      	b.n	8006c42 <_strtod_l+0x702>
 8006dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f002 f99c 	bl	8009100 <__lshift>
 8006dc8:	9018      	str	r0, [sp, #96]	; 0x60
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f47f af6b 	bne.w	8006ca6 <_strtod_l+0x766>
 8006dd0:	e5fe      	b.n	80069d0 <_strtod_l+0x490>
 8006dd2:	465f      	mov	r7, fp
 8006dd4:	d16e      	bne.n	8006eb4 <_strtod_l+0x974>
 8006dd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ddc:	b342      	cbz	r2, 8006e30 <_strtod_l+0x8f0>
 8006dde:	4a32      	ldr	r2, [pc, #200]	; (8006ea8 <_strtod_l+0x968>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d128      	bne.n	8006e36 <_strtod_l+0x8f6>
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	4651      	mov	r1, sl
 8006de8:	b1eb      	cbz	r3, 8006e26 <_strtod_l+0x8e6>
 8006dea:	4b2d      	ldr	r3, [pc, #180]	; (8006ea0 <_strtod_l+0x960>)
 8006dec:	403b      	ands	r3, r7
 8006dee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006df2:	f04f 32ff 	mov.w	r2, #4294967295
 8006df6:	d819      	bhi.n	8006e2c <_strtod_l+0x8ec>
 8006df8:	0d1b      	lsrs	r3, r3, #20
 8006dfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	4299      	cmp	r1, r3
 8006e04:	d117      	bne.n	8006e36 <_strtod_l+0x8f6>
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <_strtod_l+0x96c>)
 8006e08:	429f      	cmp	r7, r3
 8006e0a:	d102      	bne.n	8006e12 <_strtod_l+0x8d2>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	f43f addf 	beq.w	80069d0 <_strtod_l+0x490>
 8006e12:	4b23      	ldr	r3, [pc, #140]	; (8006ea0 <_strtod_l+0x960>)
 8006e14:	403b      	ands	r3, r7
 8006e16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006e1a:	f04f 0a00 	mov.w	sl, #0
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1a4      	bne.n	8006d6e <_strtod_l+0x82e>
 8006e24:	e5de      	b.n	80069e4 <_strtod_l+0x4a4>
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	e7ea      	b.n	8006e02 <_strtod_l+0x8c2>
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	e7e8      	b.n	8006e02 <_strtod_l+0x8c2>
 8006e30:	ea53 030a 	orrs.w	r3, r3, sl
 8006e34:	d08c      	beq.n	8006d50 <_strtod_l+0x810>
 8006e36:	9b08      	ldr	r3, [sp, #32]
 8006e38:	b1db      	cbz	r3, 8006e72 <_strtod_l+0x932>
 8006e3a:	423b      	tst	r3, r7
 8006e3c:	d0ef      	beq.n	8006e1e <_strtod_l+0x8de>
 8006e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e40:	9a04      	ldr	r2, [sp, #16]
 8006e42:	4650      	mov	r0, sl
 8006e44:	4659      	mov	r1, fp
 8006e46:	b1c3      	cbz	r3, 8006e7a <_strtod_l+0x93a>
 8006e48:	f7ff fb5e 	bl	8006508 <sulp>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	ec51 0b18 	vmov	r0, r1, d8
 8006e54:	f7f9 fa2a 	bl	80002ac <__adddf3>
 8006e58:	4682      	mov	sl, r0
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	e7df      	b.n	8006e1e <_strtod_l+0x8de>
 8006e5e:	4013      	ands	r3, r2
 8006e60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e6c:	f04f 3aff 	mov.w	sl, #4294967295
 8006e70:	e7d5      	b.n	8006e1e <_strtod_l+0x8de>
 8006e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e74:	ea13 0f0a 	tst.w	r3, sl
 8006e78:	e7e0      	b.n	8006e3c <_strtod_l+0x8fc>
 8006e7a:	f7ff fb45 	bl	8006508 <sulp>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	ec51 0b18 	vmov	r0, r1, d8
 8006e86:	f7f9 fa0f 	bl	80002a8 <__aeabi_dsub>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4682      	mov	sl, r0
 8006e90:	468b      	mov	fp, r1
 8006e92:	f7f9 fe29 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d0c1      	beq.n	8006e1e <_strtod_l+0x8de>
 8006e9a:	e611      	b.n	8006ac0 <_strtod_l+0x580>
 8006e9c:	fffffc02 	.word	0xfffffc02
 8006ea0:	7ff00000 	.word	0x7ff00000
 8006ea4:	39500000 	.word	0x39500000
 8006ea8:	000fffff 	.word	0x000fffff
 8006eac:	7fefffff 	.word	0x7fefffff
 8006eb0:	0800a3c8 	.word	0x0800a3c8
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f002 fb10 	bl	80094dc <__ratio>
 8006ebc:	ec59 8b10 	vmov	r8, r9, d0
 8006ec0:	ee10 0a10 	vmov	r0, s0
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fe20 	bl	8000b10 <__aeabi_dcmple>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d07a      	beq.n	8006fca <_strtod_l+0xa8a>
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d04a      	beq.n	8006f70 <_strtod_l+0xa30>
 8006eda:	4b95      	ldr	r3, [pc, #596]	; (8007130 <_strtod_l+0xbf0>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ee2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007130 <_strtod_l+0xbf0>
 8006ee6:	f04f 0800 	mov.w	r8, #0
 8006eea:	4b92      	ldr	r3, [pc, #584]	; (8007134 <_strtod_l+0xbf4>)
 8006eec:	403b      	ands	r3, r7
 8006eee:	930d      	str	r3, [sp, #52]	; 0x34
 8006ef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef2:	4b91      	ldr	r3, [pc, #580]	; (8007138 <_strtod_l+0xbf8>)
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	f040 80b0 	bne.w	800705a <_strtod_l+0xb1a>
 8006efa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006efe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006f02:	ec4b ab10 	vmov	d0, sl, fp
 8006f06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f0a:	f002 fa0f 	bl	800932c <__ulp>
 8006f0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f12:	ec53 2b10 	vmov	r2, r3, d0
 8006f16:	f7f9 fb7f 	bl	8000618 <__aeabi_dmul>
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	465b      	mov	r3, fp
 8006f1e:	f7f9 f9c5 	bl	80002ac <__adddf3>
 8006f22:	460b      	mov	r3, r1
 8006f24:	4983      	ldr	r1, [pc, #524]	; (8007134 <_strtod_l+0xbf4>)
 8006f26:	4a85      	ldr	r2, [pc, #532]	; (800713c <_strtod_l+0xbfc>)
 8006f28:	4019      	ands	r1, r3
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	4682      	mov	sl, r0
 8006f2e:	d960      	bls.n	8006ff2 <_strtod_l+0xab2>
 8006f30:	ee18 3a90 	vmov	r3, s17
 8006f34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d104      	bne.n	8006f46 <_strtod_l+0xa06>
 8006f3c:	ee18 3a10 	vmov	r3, s16
 8006f40:	3301      	adds	r3, #1
 8006f42:	f43f ad45 	beq.w	80069d0 <_strtod_l+0x490>
 8006f46:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007148 <_strtod_l+0xc08>
 8006f4a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f50:	4620      	mov	r0, r4
 8006f52:	f001 feb9 	bl	8008cc8 <_Bfree>
 8006f56:	9905      	ldr	r1, [sp, #20]
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f001 feb5 	bl	8008cc8 <_Bfree>
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4620      	mov	r0, r4
 8006f62:	f001 feb1 	bl	8008cc8 <_Bfree>
 8006f66:	4629      	mov	r1, r5
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f001 fead 	bl	8008cc8 <_Bfree>
 8006f6e:	e61a      	b.n	8006ba6 <_strtod_l+0x666>
 8006f70:	f1ba 0f00 	cmp.w	sl, #0
 8006f74:	d11b      	bne.n	8006fae <_strtod_l+0xa6e>
 8006f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f7a:	b9f3      	cbnz	r3, 8006fba <_strtod_l+0xa7a>
 8006f7c:	4b6c      	ldr	r3, [pc, #432]	; (8007130 <_strtod_l+0xbf0>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4640      	mov	r0, r8
 8006f82:	4649      	mov	r1, r9
 8006f84:	f7f9 fdba 	bl	8000afc <__aeabi_dcmplt>
 8006f88:	b9d0      	cbnz	r0, 8006fc0 <_strtod_l+0xa80>
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	4b6c      	ldr	r3, [pc, #432]	; (8007140 <_strtod_l+0xc00>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	f7f9 fb41 	bl	8000618 <__aeabi_dmul>
 8006f96:	4680      	mov	r8, r0
 8006f98:	4689      	mov	r9, r1
 8006f9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006fa2:	9315      	str	r3, [sp, #84]	; 0x54
 8006fa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006fa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fac:	e79d      	b.n	8006eea <_strtod_l+0x9aa>
 8006fae:	f1ba 0f01 	cmp.w	sl, #1
 8006fb2:	d102      	bne.n	8006fba <_strtod_l+0xa7a>
 8006fb4:	2f00      	cmp	r7, #0
 8006fb6:	f43f ad83 	beq.w	8006ac0 <_strtod_l+0x580>
 8006fba:	4b62      	ldr	r3, [pc, #392]	; (8007144 <_strtod_l+0xc04>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	e78e      	b.n	8006ede <_strtod_l+0x99e>
 8006fc0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007140 <_strtod_l+0xc00>
 8006fc4:	f04f 0800 	mov.w	r8, #0
 8006fc8:	e7e7      	b.n	8006f9a <_strtod_l+0xa5a>
 8006fca:	4b5d      	ldr	r3, [pc, #372]	; (8007140 <_strtod_l+0xc00>)
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f7f9 fb21 	bl	8000618 <__aeabi_dmul>
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd8:	4680      	mov	r8, r0
 8006fda:	4689      	mov	r9, r1
 8006fdc:	b933      	cbnz	r3, 8006fec <_strtod_l+0xaac>
 8006fde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fe2:	900e      	str	r0, [sp, #56]	; 0x38
 8006fe4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006fea:	e7dd      	b.n	8006fa8 <_strtod_l+0xa68>
 8006fec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006ff0:	e7f9      	b.n	8006fe6 <_strtod_l+0xaa6>
 8006ff2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006ff6:	9b04      	ldr	r3, [sp, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1a8      	bne.n	8006f4e <_strtod_l+0xa0e>
 8006ffc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007002:	0d1b      	lsrs	r3, r3, #20
 8007004:	051b      	lsls	r3, r3, #20
 8007006:	429a      	cmp	r2, r3
 8007008:	d1a1      	bne.n	8006f4e <_strtod_l+0xa0e>
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 fe63 	bl	8000cd8 <__aeabi_d2lz>
 8007012:	f7f9 fad3 	bl	80005bc <__aeabi_l2d>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 f943 	bl	80002a8 <__aeabi_dsub>
 8007022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007028:	ea43 030a 	orr.w	r3, r3, sl
 800702c:	4313      	orrs	r3, r2
 800702e:	4680      	mov	r8, r0
 8007030:	4689      	mov	r9, r1
 8007032:	d055      	beq.n	80070e0 <_strtod_l+0xba0>
 8007034:	a336      	add	r3, pc, #216	; (adr r3, 8007110 <_strtod_l+0xbd0>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 fd5f 	bl	8000afc <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f47f acd0 	bne.w	80069e4 <_strtod_l+0x4a4>
 8007044:	a334      	add	r3, pc, #208	; (adr r3, 8007118 <_strtod_l+0xbd8>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 fd73 	bl	8000b38 <__aeabi_dcmpgt>
 8007052:	2800      	cmp	r0, #0
 8007054:	f43f af7b 	beq.w	8006f4e <_strtod_l+0xa0e>
 8007058:	e4c4      	b.n	80069e4 <_strtod_l+0x4a4>
 800705a:	9b04      	ldr	r3, [sp, #16]
 800705c:	b333      	cbz	r3, 80070ac <_strtod_l+0xb6c>
 800705e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007060:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007064:	d822      	bhi.n	80070ac <_strtod_l+0xb6c>
 8007066:	a32e      	add	r3, pc, #184	; (adr r3, 8007120 <_strtod_l+0xbe0>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 fd4e 	bl	8000b10 <__aeabi_dcmple>
 8007074:	b1a0      	cbz	r0, 80070a0 <_strtod_l+0xb60>
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	f7f9 fda5 	bl	8000bc8 <__aeabi_d2uiz>
 800707e:	2801      	cmp	r0, #1
 8007080:	bf38      	it	cc
 8007082:	2001      	movcc	r0, #1
 8007084:	f7f9 fa4e 	bl	8000524 <__aeabi_ui2d>
 8007088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800708a:	4680      	mov	r8, r0
 800708c:	4689      	mov	r9, r1
 800708e:	bb23      	cbnz	r3, 80070da <_strtod_l+0xb9a>
 8007090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007094:	9010      	str	r0, [sp, #64]	; 0x40
 8007096:	9311      	str	r3, [sp, #68]	; 0x44
 8007098:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800709c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	9309      	str	r3, [sp, #36]	; 0x24
 80070ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070b0:	eeb0 0a48 	vmov.f32	s0, s16
 80070b4:	eef0 0a68 	vmov.f32	s1, s17
 80070b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070bc:	f002 f936 	bl	800932c <__ulp>
 80070c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070c4:	ec53 2b10 	vmov	r2, r3, d0
 80070c8:	f7f9 faa6 	bl	8000618 <__aeabi_dmul>
 80070cc:	ec53 2b18 	vmov	r2, r3, d8
 80070d0:	f7f9 f8ec 	bl	80002ac <__adddf3>
 80070d4:	4682      	mov	sl, r0
 80070d6:	468b      	mov	fp, r1
 80070d8:	e78d      	b.n	8006ff6 <_strtod_l+0xab6>
 80070da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80070de:	e7db      	b.n	8007098 <_strtod_l+0xb58>
 80070e0:	a311      	add	r3, pc, #68	; (adr r3, 8007128 <_strtod_l+0xbe8>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 fd09 	bl	8000afc <__aeabi_dcmplt>
 80070ea:	e7b2      	b.n	8007052 <_strtod_l+0xb12>
 80070ec:	2300      	movs	r3, #0
 80070ee:	930a      	str	r3, [sp, #40]	; 0x28
 80070f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	f7ff ba6b 	b.w	80065d0 <_strtod_l+0x90>
 80070fa:	2a65      	cmp	r2, #101	; 0x65
 80070fc:	f43f ab5f 	beq.w	80067be <_strtod_l+0x27e>
 8007100:	2a45      	cmp	r2, #69	; 0x45
 8007102:	f43f ab5c 	beq.w	80067be <_strtod_l+0x27e>
 8007106:	2301      	movs	r3, #1
 8007108:	f7ff bb94 	b.w	8006834 <_strtod_l+0x2f4>
 800710c:	f3af 8000 	nop.w
 8007110:	94a03595 	.word	0x94a03595
 8007114:	3fdfffff 	.word	0x3fdfffff
 8007118:	35afe535 	.word	0x35afe535
 800711c:	3fe00000 	.word	0x3fe00000
 8007120:	ffc00000 	.word	0xffc00000
 8007124:	41dfffff 	.word	0x41dfffff
 8007128:	94a03595 	.word	0x94a03595
 800712c:	3fcfffff 	.word	0x3fcfffff
 8007130:	3ff00000 	.word	0x3ff00000
 8007134:	7ff00000 	.word	0x7ff00000
 8007138:	7fe00000 	.word	0x7fe00000
 800713c:	7c9fffff 	.word	0x7c9fffff
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	bff00000 	.word	0xbff00000
 8007148:	7fefffff 	.word	0x7fefffff

0800714c <_strtod_r>:
 800714c:	4b01      	ldr	r3, [pc, #4]	; (8007154 <_strtod_r+0x8>)
 800714e:	f7ff b9f7 	b.w	8006540 <_strtod_l>
 8007152:	bf00      	nop
 8007154:	20000074 	.word	0x20000074

08007158 <_strtol_l.constprop.0>:
 8007158:	2b01      	cmp	r3, #1
 800715a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715e:	d001      	beq.n	8007164 <_strtol_l.constprop.0+0xc>
 8007160:	2b24      	cmp	r3, #36	; 0x24
 8007162:	d906      	bls.n	8007172 <_strtol_l.constprop.0+0x1a>
 8007164:	f7fe fa70 	bl	8005648 <__errno>
 8007168:	2316      	movs	r3, #22
 800716a:	6003      	str	r3, [r0, #0]
 800716c:	2000      	movs	r0, #0
 800716e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007172:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007258 <_strtol_l.constprop.0+0x100>
 8007176:	460d      	mov	r5, r1
 8007178:	462e      	mov	r6, r5
 800717a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800717e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007182:	f017 0708 	ands.w	r7, r7, #8
 8007186:	d1f7      	bne.n	8007178 <_strtol_l.constprop.0+0x20>
 8007188:	2c2d      	cmp	r4, #45	; 0x2d
 800718a:	d132      	bne.n	80071f2 <_strtol_l.constprop.0+0x9a>
 800718c:	782c      	ldrb	r4, [r5, #0]
 800718e:	2701      	movs	r7, #1
 8007190:	1cb5      	adds	r5, r6, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d05b      	beq.n	800724e <_strtol_l.constprop.0+0xf6>
 8007196:	2b10      	cmp	r3, #16
 8007198:	d109      	bne.n	80071ae <_strtol_l.constprop.0+0x56>
 800719a:	2c30      	cmp	r4, #48	; 0x30
 800719c:	d107      	bne.n	80071ae <_strtol_l.constprop.0+0x56>
 800719e:	782c      	ldrb	r4, [r5, #0]
 80071a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071a4:	2c58      	cmp	r4, #88	; 0x58
 80071a6:	d14d      	bne.n	8007244 <_strtol_l.constprop.0+0xec>
 80071a8:	786c      	ldrb	r4, [r5, #1]
 80071aa:	2310      	movs	r3, #16
 80071ac:	3502      	adds	r5, #2
 80071ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80071b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071b6:	f04f 0c00 	mov.w	ip, #0
 80071ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80071be:	4666      	mov	r6, ip
 80071c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80071c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80071c8:	f1be 0f09 	cmp.w	lr, #9
 80071cc:	d816      	bhi.n	80071fc <_strtol_l.constprop.0+0xa4>
 80071ce:	4674      	mov	r4, lr
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	dd24      	ble.n	800721e <_strtol_l.constprop.0+0xc6>
 80071d4:	f1bc 0f00 	cmp.w	ip, #0
 80071d8:	db1e      	blt.n	8007218 <_strtol_l.constprop.0+0xc0>
 80071da:	45b1      	cmp	r9, r6
 80071dc:	d31c      	bcc.n	8007218 <_strtol_l.constprop.0+0xc0>
 80071de:	d101      	bne.n	80071e4 <_strtol_l.constprop.0+0x8c>
 80071e0:	45a2      	cmp	sl, r4
 80071e2:	db19      	blt.n	8007218 <_strtol_l.constprop.0+0xc0>
 80071e4:	fb06 4603 	mla	r6, r6, r3, r4
 80071e8:	f04f 0c01 	mov.w	ip, #1
 80071ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071f0:	e7e8      	b.n	80071c4 <_strtol_l.constprop.0+0x6c>
 80071f2:	2c2b      	cmp	r4, #43	; 0x2b
 80071f4:	bf04      	itt	eq
 80071f6:	782c      	ldrbeq	r4, [r5, #0]
 80071f8:	1cb5      	addeq	r5, r6, #2
 80071fa:	e7ca      	b.n	8007192 <_strtol_l.constprop.0+0x3a>
 80071fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007200:	f1be 0f19 	cmp.w	lr, #25
 8007204:	d801      	bhi.n	800720a <_strtol_l.constprop.0+0xb2>
 8007206:	3c37      	subs	r4, #55	; 0x37
 8007208:	e7e2      	b.n	80071d0 <_strtol_l.constprop.0+0x78>
 800720a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800720e:	f1be 0f19 	cmp.w	lr, #25
 8007212:	d804      	bhi.n	800721e <_strtol_l.constprop.0+0xc6>
 8007214:	3c57      	subs	r4, #87	; 0x57
 8007216:	e7db      	b.n	80071d0 <_strtol_l.constprop.0+0x78>
 8007218:	f04f 3cff 	mov.w	ip, #4294967295
 800721c:	e7e6      	b.n	80071ec <_strtol_l.constprop.0+0x94>
 800721e:	f1bc 0f00 	cmp.w	ip, #0
 8007222:	da05      	bge.n	8007230 <_strtol_l.constprop.0+0xd8>
 8007224:	2322      	movs	r3, #34	; 0x22
 8007226:	6003      	str	r3, [r0, #0]
 8007228:	4646      	mov	r6, r8
 800722a:	b942      	cbnz	r2, 800723e <_strtol_l.constprop.0+0xe6>
 800722c:	4630      	mov	r0, r6
 800722e:	e79e      	b.n	800716e <_strtol_l.constprop.0+0x16>
 8007230:	b107      	cbz	r7, 8007234 <_strtol_l.constprop.0+0xdc>
 8007232:	4276      	negs	r6, r6
 8007234:	2a00      	cmp	r2, #0
 8007236:	d0f9      	beq.n	800722c <_strtol_l.constprop.0+0xd4>
 8007238:	f1bc 0f00 	cmp.w	ip, #0
 800723c:	d000      	beq.n	8007240 <_strtol_l.constprop.0+0xe8>
 800723e:	1e69      	subs	r1, r5, #1
 8007240:	6011      	str	r1, [r2, #0]
 8007242:	e7f3      	b.n	800722c <_strtol_l.constprop.0+0xd4>
 8007244:	2430      	movs	r4, #48	; 0x30
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1b1      	bne.n	80071ae <_strtol_l.constprop.0+0x56>
 800724a:	2308      	movs	r3, #8
 800724c:	e7af      	b.n	80071ae <_strtol_l.constprop.0+0x56>
 800724e:	2c30      	cmp	r4, #48	; 0x30
 8007250:	d0a5      	beq.n	800719e <_strtol_l.constprop.0+0x46>
 8007252:	230a      	movs	r3, #10
 8007254:	e7ab      	b.n	80071ae <_strtol_l.constprop.0+0x56>
 8007256:	bf00      	nop
 8007258:	0800a3f1 	.word	0x0800a3f1

0800725c <_strtol_r>:
 800725c:	f7ff bf7c 	b.w	8007158 <_strtol_l.constprop.0>

08007260 <__swbuf_r>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	460e      	mov	r6, r1
 8007264:	4614      	mov	r4, r2
 8007266:	4605      	mov	r5, r0
 8007268:	b118      	cbz	r0, 8007272 <__swbuf_r+0x12>
 800726a:	6983      	ldr	r3, [r0, #24]
 800726c:	b90b      	cbnz	r3, 8007272 <__swbuf_r+0x12>
 800726e:	f001 f84b 	bl	8008308 <__sinit>
 8007272:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <__swbuf_r+0x98>)
 8007274:	429c      	cmp	r4, r3
 8007276:	d12b      	bne.n	80072d0 <__swbuf_r+0x70>
 8007278:	686c      	ldr	r4, [r5, #4]
 800727a:	69a3      	ldr	r3, [r4, #24]
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	071a      	lsls	r2, r3, #28
 8007282:	d52f      	bpl.n	80072e4 <__swbuf_r+0x84>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	b36b      	cbz	r3, 80072e4 <__swbuf_r+0x84>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	6820      	ldr	r0, [r4, #0]
 800728c:	1ac0      	subs	r0, r0, r3
 800728e:	6963      	ldr	r3, [r4, #20]
 8007290:	b2f6      	uxtb	r6, r6
 8007292:	4283      	cmp	r3, r0
 8007294:	4637      	mov	r7, r6
 8007296:	dc04      	bgt.n	80072a2 <__swbuf_r+0x42>
 8007298:	4621      	mov	r1, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 ffa0 	bl	80081e0 <_fflush_r>
 80072a0:	bb30      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	701e      	strb	r6, [r3, #0]
 80072b0:	6963      	ldr	r3, [r4, #20]
 80072b2:	3001      	adds	r0, #1
 80072b4:	4283      	cmp	r3, r0
 80072b6:	d004      	beq.n	80072c2 <__swbuf_r+0x62>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	07db      	lsls	r3, r3, #31
 80072bc:	d506      	bpl.n	80072cc <__swbuf_r+0x6c>
 80072be:	2e0a      	cmp	r6, #10
 80072c0:	d104      	bne.n	80072cc <__swbuf_r+0x6c>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 ff8b 	bl	80081e0 <_fflush_r>
 80072ca:	b988      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072cc:	4638      	mov	r0, r7
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <__swbuf_r+0x9c>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <__swbuf_r+0x7a>
 80072d6:	68ac      	ldr	r4, [r5, #8]
 80072d8:	e7cf      	b.n	800727a <__swbuf_r+0x1a>
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <__swbuf_r+0xa0>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68ec      	ldreq	r4, [r5, #12]
 80072e2:	e7ca      	b.n	800727a <__swbuf_r+0x1a>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 f80c 	bl	8007304 <__swsetup_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0cb      	beq.n	8007288 <__swbuf_r+0x28>
 80072f0:	f04f 37ff 	mov.w	r7, #4294967295
 80072f4:	e7ea      	b.n	80072cc <__swbuf_r+0x6c>
 80072f6:	bf00      	nop
 80072f8:	0800a5a4 	.word	0x0800a5a4
 80072fc:	0800a5c4 	.word	0x0800a5c4
 8007300:	0800a584 	.word	0x0800a584

08007304 <__swsetup_r>:
 8007304:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <__swsetup_r+0xcc>)
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	681d      	ldr	r5, [r3, #0]
 800730a:	4606      	mov	r6, r0
 800730c:	460c      	mov	r4, r1
 800730e:	b125      	cbz	r5, 800731a <__swsetup_r+0x16>
 8007310:	69ab      	ldr	r3, [r5, #24]
 8007312:	b913      	cbnz	r3, 800731a <__swsetup_r+0x16>
 8007314:	4628      	mov	r0, r5
 8007316:	f000 fff7 	bl	8008308 <__sinit>
 800731a:	4b2e      	ldr	r3, [pc, #184]	; (80073d4 <__swsetup_r+0xd0>)
 800731c:	429c      	cmp	r4, r3
 800731e:	d10f      	bne.n	8007340 <__swsetup_r+0x3c>
 8007320:	686c      	ldr	r4, [r5, #4]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007328:	0719      	lsls	r1, r3, #28
 800732a:	d42c      	bmi.n	8007386 <__swsetup_r+0x82>
 800732c:	06dd      	lsls	r5, r3, #27
 800732e:	d411      	bmi.n	8007354 <__swsetup_r+0x50>
 8007330:	2309      	movs	r3, #9
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	e03e      	b.n	80073be <__swsetup_r+0xba>
 8007340:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <__swsetup_r+0xd4>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d101      	bne.n	800734a <__swsetup_r+0x46>
 8007346:	68ac      	ldr	r4, [r5, #8]
 8007348:	e7eb      	b.n	8007322 <__swsetup_r+0x1e>
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <__swsetup_r+0xd8>)
 800734c:	429c      	cmp	r4, r3
 800734e:	bf08      	it	eq
 8007350:	68ec      	ldreq	r4, [r5, #12]
 8007352:	e7e6      	b.n	8007322 <__swsetup_r+0x1e>
 8007354:	0758      	lsls	r0, r3, #29
 8007356:	d512      	bpl.n	800737e <__swsetup_r+0x7a>
 8007358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800735a:	b141      	cbz	r1, 800736e <__swsetup_r+0x6a>
 800735c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007360:	4299      	cmp	r1, r3
 8007362:	d002      	beq.n	800736a <__swsetup_r+0x66>
 8007364:	4630      	mov	r0, r6
 8007366:	f002 f947 	bl	80095f8 <_free_r>
 800736a:	2300      	movs	r3, #0
 800736c:	6363      	str	r3, [r4, #52]	; 0x34
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	2300      	movs	r3, #0
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f043 0308 	orr.w	r3, r3, #8
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	b94b      	cbnz	r3, 800739e <__swsetup_r+0x9a>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007394:	d003      	beq.n	800739e <__swsetup_r+0x9a>
 8007396:	4621      	mov	r1, r4
 8007398:	4630      	mov	r0, r6
 800739a:	f001 fbed 	bl	8008b78 <__smakebuf_r>
 800739e:	89a0      	ldrh	r0, [r4, #12]
 80073a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073a4:	f010 0301 	ands.w	r3, r0, #1
 80073a8:	d00a      	beq.n	80073c0 <__swsetup_r+0xbc>
 80073aa:	2300      	movs	r3, #0
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	6963      	ldr	r3, [r4, #20]
 80073b0:	425b      	negs	r3, r3
 80073b2:	61a3      	str	r3, [r4, #24]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	b943      	cbnz	r3, 80073ca <__swsetup_r+0xc6>
 80073b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073bc:	d1ba      	bne.n	8007334 <__swsetup_r+0x30>
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	0781      	lsls	r1, r0, #30
 80073c2:	bf58      	it	pl
 80073c4:	6963      	ldrpl	r3, [r4, #20]
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	e7f4      	b.n	80073b4 <__swsetup_r+0xb0>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e7f7      	b.n	80073be <__swsetup_r+0xba>
 80073ce:	bf00      	nop
 80073d0:	2000000c 	.word	0x2000000c
 80073d4:	0800a5a4 	.word	0x0800a5a4
 80073d8:	0800a5c4 	.word	0x0800a5c4
 80073dc:	0800a584 	.word	0x0800a584

080073e0 <quorem>:
 80073e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	6903      	ldr	r3, [r0, #16]
 80073e6:	690c      	ldr	r4, [r1, #16]
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	4607      	mov	r7, r0
 80073ec:	f2c0 8081 	blt.w	80074f2 <quorem+0x112>
 80073f0:	3c01      	subs	r4, #1
 80073f2:	f101 0814 	add.w	r8, r1, #20
 80073f6:	f100 0514 	add.w	r5, r0, #20
 80073fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007404:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007408:	3301      	adds	r3, #1
 800740a:	429a      	cmp	r2, r3
 800740c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007414:	fbb2 f6f3 	udiv	r6, r2, r3
 8007418:	d331      	bcc.n	800747e <quorem+0x9e>
 800741a:	f04f 0e00 	mov.w	lr, #0
 800741e:	4640      	mov	r0, r8
 8007420:	46ac      	mov	ip, r5
 8007422:	46f2      	mov	sl, lr
 8007424:	f850 2b04 	ldr.w	r2, [r0], #4
 8007428:	b293      	uxth	r3, r2
 800742a:	fb06 e303 	mla	r3, r6, r3, lr
 800742e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007432:	b29b      	uxth	r3, r3
 8007434:	ebaa 0303 	sub.w	r3, sl, r3
 8007438:	f8dc a000 	ldr.w	sl, [ip]
 800743c:	0c12      	lsrs	r2, r2, #16
 800743e:	fa13 f38a 	uxtah	r3, r3, sl
 8007442:	fb06 e202 	mla	r2, r6, r2, lr
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	9b00      	ldr	r3, [sp, #0]
 800744a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800744e:	b292      	uxth	r2, r2
 8007450:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007458:	f8bd 3000 	ldrh.w	r3, [sp]
 800745c:	4581      	cmp	r9, r0
 800745e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007462:	f84c 3b04 	str.w	r3, [ip], #4
 8007466:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800746a:	d2db      	bcs.n	8007424 <quorem+0x44>
 800746c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007470:	b92b      	cbnz	r3, 800747e <quorem+0x9e>
 8007472:	9b01      	ldr	r3, [sp, #4]
 8007474:	3b04      	subs	r3, #4
 8007476:	429d      	cmp	r5, r3
 8007478:	461a      	mov	r2, r3
 800747a:	d32e      	bcc.n	80074da <quorem+0xfa>
 800747c:	613c      	str	r4, [r7, #16]
 800747e:	4638      	mov	r0, r7
 8007480:	f001 feae 	bl	80091e0 <__mcmp>
 8007484:	2800      	cmp	r0, #0
 8007486:	db24      	blt.n	80074d2 <quorem+0xf2>
 8007488:	3601      	adds	r6, #1
 800748a:	4628      	mov	r0, r5
 800748c:	f04f 0c00 	mov.w	ip, #0
 8007490:	f858 2b04 	ldr.w	r2, [r8], #4
 8007494:	f8d0 e000 	ldr.w	lr, [r0]
 8007498:	b293      	uxth	r3, r2
 800749a:	ebac 0303 	sub.w	r3, ip, r3
 800749e:	0c12      	lsrs	r2, r2, #16
 80074a0:	fa13 f38e 	uxtah	r3, r3, lr
 80074a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074b2:	45c1      	cmp	r9, r8
 80074b4:	f840 3b04 	str.w	r3, [r0], #4
 80074b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074bc:	d2e8      	bcs.n	8007490 <quorem+0xb0>
 80074be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074c6:	b922      	cbnz	r2, 80074d2 <quorem+0xf2>
 80074c8:	3b04      	subs	r3, #4
 80074ca:	429d      	cmp	r5, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	d30a      	bcc.n	80074e6 <quorem+0x106>
 80074d0:	613c      	str	r4, [r7, #16]
 80074d2:	4630      	mov	r0, r6
 80074d4:	b003      	add	sp, #12
 80074d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	3b04      	subs	r3, #4
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d1cc      	bne.n	800747c <quorem+0x9c>
 80074e2:	3c01      	subs	r4, #1
 80074e4:	e7c7      	b.n	8007476 <quorem+0x96>
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d1f0      	bne.n	80074d0 <quorem+0xf0>
 80074ee:	3c01      	subs	r4, #1
 80074f0:	e7eb      	b.n	80074ca <quorem+0xea>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e7ee      	b.n	80074d4 <quorem+0xf4>
	...

080074f8 <_dtoa_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	ed2d 8b04 	vpush	{d8-d9}
 8007500:	ec57 6b10 	vmov	r6, r7, d0
 8007504:	b093      	sub	sp, #76	; 0x4c
 8007506:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007508:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800750c:	9106      	str	r1, [sp, #24]
 800750e:	ee10 aa10 	vmov	sl, s0
 8007512:	4604      	mov	r4, r0
 8007514:	9209      	str	r2, [sp, #36]	; 0x24
 8007516:	930c      	str	r3, [sp, #48]	; 0x30
 8007518:	46bb      	mov	fp, r7
 800751a:	b975      	cbnz	r5, 800753a <_dtoa_r+0x42>
 800751c:	2010      	movs	r0, #16
 800751e:	f001 fb6b 	bl	8008bf8 <malloc>
 8007522:	4602      	mov	r2, r0
 8007524:	6260      	str	r0, [r4, #36]	; 0x24
 8007526:	b920      	cbnz	r0, 8007532 <_dtoa_r+0x3a>
 8007528:	4ba7      	ldr	r3, [pc, #668]	; (80077c8 <_dtoa_r+0x2d0>)
 800752a:	21ea      	movs	r1, #234	; 0xea
 800752c:	48a7      	ldr	r0, [pc, #668]	; (80077cc <_dtoa_r+0x2d4>)
 800752e:	f002 fc89 	bl	8009e44 <__assert_func>
 8007532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007536:	6005      	str	r5, [r0, #0]
 8007538:	60c5      	str	r5, [r0, #12]
 800753a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800753c:	6819      	ldr	r1, [r3, #0]
 800753e:	b151      	cbz	r1, 8007556 <_dtoa_r+0x5e>
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	604a      	str	r2, [r1, #4]
 8007544:	2301      	movs	r3, #1
 8007546:	4093      	lsls	r3, r2
 8007548:	608b      	str	r3, [r1, #8]
 800754a:	4620      	mov	r0, r4
 800754c:	f001 fbbc 	bl	8008cc8 <_Bfree>
 8007550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	1e3b      	subs	r3, r7, #0
 8007558:	bfaa      	itet	ge
 800755a:	2300      	movge	r3, #0
 800755c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007560:	f8c8 3000 	strge.w	r3, [r8]
 8007564:	4b9a      	ldr	r3, [pc, #616]	; (80077d0 <_dtoa_r+0x2d8>)
 8007566:	bfbc      	itt	lt
 8007568:	2201      	movlt	r2, #1
 800756a:	f8c8 2000 	strlt.w	r2, [r8]
 800756e:	ea33 030b 	bics.w	r3, r3, fp
 8007572:	d11b      	bne.n	80075ac <_dtoa_r+0xb4>
 8007574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007576:	f242 730f 	movw	r3, #9999	; 0x270f
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007580:	4333      	orrs	r3, r6
 8007582:	f000 8592 	beq.w	80080aa <_dtoa_r+0xbb2>
 8007586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007588:	b963      	cbnz	r3, 80075a4 <_dtoa_r+0xac>
 800758a:	4b92      	ldr	r3, [pc, #584]	; (80077d4 <_dtoa_r+0x2dc>)
 800758c:	e022      	b.n	80075d4 <_dtoa_r+0xdc>
 800758e:	4b92      	ldr	r3, [pc, #584]	; (80077d8 <_dtoa_r+0x2e0>)
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	3308      	adds	r3, #8
 8007594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	9801      	ldr	r0, [sp, #4]
 800759a:	b013      	add	sp, #76	; 0x4c
 800759c:	ecbd 8b04 	vpop	{d8-d9}
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	4b8b      	ldr	r3, [pc, #556]	; (80077d4 <_dtoa_r+0x2dc>)
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	3303      	adds	r3, #3
 80075aa:	e7f3      	b.n	8007594 <_dtoa_r+0x9c>
 80075ac:	2200      	movs	r2, #0
 80075ae:	2300      	movs	r3, #0
 80075b0:	4650      	mov	r0, sl
 80075b2:	4659      	mov	r1, fp
 80075b4:	f7f9 fa98 	bl	8000ae8 <__aeabi_dcmpeq>
 80075b8:	ec4b ab19 	vmov	d9, sl, fp
 80075bc:	4680      	mov	r8, r0
 80075be:	b158      	cbz	r0, 80075d8 <_dtoa_r+0xe0>
 80075c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075c2:	2301      	movs	r3, #1
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 856b 	beq.w	80080a4 <_dtoa_r+0xbac>
 80075ce:	4883      	ldr	r0, [pc, #524]	; (80077dc <_dtoa_r+0x2e4>)
 80075d0:	6018      	str	r0, [r3, #0]
 80075d2:	1e43      	subs	r3, r0, #1
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	e7df      	b.n	8007598 <_dtoa_r+0xa0>
 80075d8:	ec4b ab10 	vmov	d0, sl, fp
 80075dc:	aa10      	add	r2, sp, #64	; 0x40
 80075de:	a911      	add	r1, sp, #68	; 0x44
 80075e0:	4620      	mov	r0, r4
 80075e2:	f001 ff1f 	bl	8009424 <__d2b>
 80075e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80075ea:	ee08 0a10 	vmov	s16, r0
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	f000 8084 	beq.w	80076fc <_dtoa_r+0x204>
 80075f4:	ee19 3a90 	vmov	r3, s19
 80075f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007600:	4656      	mov	r6, sl
 8007602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800760a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800760e:	4b74      	ldr	r3, [pc, #464]	; (80077e0 <_dtoa_r+0x2e8>)
 8007610:	2200      	movs	r2, #0
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f8 fe47 	bl	80002a8 <__aeabi_dsub>
 800761a:	a365      	add	r3, pc, #404	; (adr r3, 80077b0 <_dtoa_r+0x2b8>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f7f8 fffa 	bl	8000618 <__aeabi_dmul>
 8007624:	a364      	add	r3, pc, #400	; (adr r3, 80077b8 <_dtoa_r+0x2c0>)
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 fe3f 	bl	80002ac <__adddf3>
 800762e:	4606      	mov	r6, r0
 8007630:	4628      	mov	r0, r5
 8007632:	460f      	mov	r7, r1
 8007634:	f7f8 ff86 	bl	8000544 <__aeabi_i2d>
 8007638:	a361      	add	r3, pc, #388	; (adr r3, 80077c0 <_dtoa_r+0x2c8>)
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f7f8 ffeb 	bl	8000618 <__aeabi_dmul>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f8 fe2f 	bl	80002ac <__adddf3>
 800764e:	4606      	mov	r6, r0
 8007650:	460f      	mov	r7, r1
 8007652:	f7f9 fa91 	bl	8000b78 <__aeabi_d2iz>
 8007656:	2200      	movs	r2, #0
 8007658:	9000      	str	r0, [sp, #0]
 800765a:	2300      	movs	r3, #0
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f9 fa4c 	bl	8000afc <__aeabi_dcmplt>
 8007664:	b150      	cbz	r0, 800767c <_dtoa_r+0x184>
 8007666:	9800      	ldr	r0, [sp, #0]
 8007668:	f7f8 ff6c 	bl	8000544 <__aeabi_i2d>
 800766c:	4632      	mov	r2, r6
 800766e:	463b      	mov	r3, r7
 8007670:	f7f9 fa3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007674:	b910      	cbnz	r0, 800767c <_dtoa_r+0x184>
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	3b01      	subs	r3, #1
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	9b00      	ldr	r3, [sp, #0]
 800767e:	2b16      	cmp	r3, #22
 8007680:	d85a      	bhi.n	8007738 <_dtoa_r+0x240>
 8007682:	9a00      	ldr	r2, [sp, #0]
 8007684:	4b57      	ldr	r3, [pc, #348]	; (80077e4 <_dtoa_r+0x2ec>)
 8007686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	ec51 0b19 	vmov	r0, r1, d9
 8007692:	f7f9 fa33 	bl	8000afc <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	d050      	beq.n	800773c <_dtoa_r+0x244>
 800769a:	9b00      	ldr	r3, [sp, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076a6:	1b5d      	subs	r5, r3, r5
 80076a8:	1e6b      	subs	r3, r5, #1
 80076aa:	9305      	str	r3, [sp, #20]
 80076ac:	bf45      	ittet	mi
 80076ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80076b2:	9304      	strmi	r3, [sp, #16]
 80076b4:	2300      	movpl	r3, #0
 80076b6:	2300      	movmi	r3, #0
 80076b8:	bf4c      	ite	mi
 80076ba:	9305      	strmi	r3, [sp, #20]
 80076bc:	9304      	strpl	r3, [sp, #16]
 80076be:	9b00      	ldr	r3, [sp, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db3d      	blt.n	8007740 <_dtoa_r+0x248>
 80076c4:	9b05      	ldr	r3, [sp, #20]
 80076c6:	9a00      	ldr	r2, [sp, #0]
 80076c8:	920a      	str	r2, [sp, #40]	; 0x28
 80076ca:	4413      	add	r3, r2
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	2300      	movs	r3, #0
 80076d0:	9307      	str	r3, [sp, #28]
 80076d2:	9b06      	ldr	r3, [sp, #24]
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	f200 8089 	bhi.w	80077ec <_dtoa_r+0x2f4>
 80076da:	2b05      	cmp	r3, #5
 80076dc:	bfc4      	itt	gt
 80076de:	3b04      	subgt	r3, #4
 80076e0:	9306      	strgt	r3, [sp, #24]
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	f1a3 0302 	sub.w	r3, r3, #2
 80076e8:	bfcc      	ite	gt
 80076ea:	2500      	movgt	r5, #0
 80076ec:	2501      	movle	r5, #1
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	f200 8087 	bhi.w	8007802 <_dtoa_r+0x30a>
 80076f4:	e8df f003 	tbb	[pc, r3]
 80076f8:	59383a2d 	.word	0x59383a2d
 80076fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007700:	441d      	add	r5, r3
 8007702:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007706:	2b20      	cmp	r3, #32
 8007708:	bfc1      	itttt	gt
 800770a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800770e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007712:	fa0b f303 	lslgt.w	r3, fp, r3
 8007716:	fa26 f000 	lsrgt.w	r0, r6, r0
 800771a:	bfda      	itte	le
 800771c:	f1c3 0320 	rsble	r3, r3, #32
 8007720:	fa06 f003 	lslle.w	r0, r6, r3
 8007724:	4318      	orrgt	r0, r3
 8007726:	f7f8 fefd 	bl	8000524 <__aeabi_ui2d>
 800772a:	2301      	movs	r3, #1
 800772c:	4606      	mov	r6, r0
 800772e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007732:	3d01      	subs	r5, #1
 8007734:	930e      	str	r3, [sp, #56]	; 0x38
 8007736:	e76a      	b.n	800760e <_dtoa_r+0x116>
 8007738:	2301      	movs	r3, #1
 800773a:	e7b2      	b.n	80076a2 <_dtoa_r+0x1aa>
 800773c:	900b      	str	r0, [sp, #44]	; 0x2c
 800773e:	e7b1      	b.n	80076a4 <_dtoa_r+0x1ac>
 8007740:	9b04      	ldr	r3, [sp, #16]
 8007742:	9a00      	ldr	r2, [sp, #0]
 8007744:	1a9b      	subs	r3, r3, r2
 8007746:	9304      	str	r3, [sp, #16]
 8007748:	4253      	negs	r3, r2
 800774a:	9307      	str	r3, [sp, #28]
 800774c:	2300      	movs	r3, #0
 800774e:	930a      	str	r3, [sp, #40]	; 0x28
 8007750:	e7bf      	b.n	80076d2 <_dtoa_r+0x1da>
 8007752:	2300      	movs	r3, #0
 8007754:	9308      	str	r3, [sp, #32]
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	dc55      	bgt.n	8007808 <_dtoa_r+0x310>
 800775c:	2301      	movs	r3, #1
 800775e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007762:	461a      	mov	r2, r3
 8007764:	9209      	str	r2, [sp, #36]	; 0x24
 8007766:	e00c      	b.n	8007782 <_dtoa_r+0x28a>
 8007768:	2301      	movs	r3, #1
 800776a:	e7f3      	b.n	8007754 <_dtoa_r+0x25c>
 800776c:	2300      	movs	r3, #0
 800776e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007770:	9308      	str	r3, [sp, #32]
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	4413      	add	r3, r2
 8007776:	9302      	str	r3, [sp, #8]
 8007778:	3301      	adds	r3, #1
 800777a:	2b01      	cmp	r3, #1
 800777c:	9303      	str	r3, [sp, #12]
 800777e:	bfb8      	it	lt
 8007780:	2301      	movlt	r3, #1
 8007782:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007784:	2200      	movs	r2, #0
 8007786:	6042      	str	r2, [r0, #4]
 8007788:	2204      	movs	r2, #4
 800778a:	f102 0614 	add.w	r6, r2, #20
 800778e:	429e      	cmp	r6, r3
 8007790:	6841      	ldr	r1, [r0, #4]
 8007792:	d93d      	bls.n	8007810 <_dtoa_r+0x318>
 8007794:	4620      	mov	r0, r4
 8007796:	f001 fa57 	bl	8008c48 <_Balloc>
 800779a:	9001      	str	r0, [sp, #4]
 800779c:	2800      	cmp	r0, #0
 800779e:	d13b      	bne.n	8007818 <_dtoa_r+0x320>
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <_dtoa_r+0x2f0>)
 80077a2:	4602      	mov	r2, r0
 80077a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077a8:	e6c0      	b.n	800752c <_dtoa_r+0x34>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e7df      	b.n	800776e <_dtoa_r+0x276>
 80077ae:	bf00      	nop
 80077b0:	636f4361 	.word	0x636f4361
 80077b4:	3fd287a7 	.word	0x3fd287a7
 80077b8:	8b60c8b3 	.word	0x8b60c8b3
 80077bc:	3fc68a28 	.word	0x3fc68a28
 80077c0:	509f79fb 	.word	0x509f79fb
 80077c4:	3fd34413 	.word	0x3fd34413
 80077c8:	0800a4fe 	.word	0x0800a4fe
 80077cc:	0800a515 	.word	0x0800a515
 80077d0:	7ff00000 	.word	0x7ff00000
 80077d4:	0800a4fa 	.word	0x0800a4fa
 80077d8:	0800a4f1 	.word	0x0800a4f1
 80077dc:	0800a375 	.word	0x0800a375
 80077e0:	3ff80000 	.word	0x3ff80000
 80077e4:	0800a6e8 	.word	0x0800a6e8
 80077e8:	0800a570 	.word	0x0800a570
 80077ec:	2501      	movs	r5, #1
 80077ee:	2300      	movs	r3, #0
 80077f0:	9306      	str	r3, [sp, #24]
 80077f2:	9508      	str	r5, [sp, #32]
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295
 80077f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	2312      	movs	r3, #18
 8007800:	e7b0      	b.n	8007764 <_dtoa_r+0x26c>
 8007802:	2301      	movs	r3, #1
 8007804:	9308      	str	r3, [sp, #32]
 8007806:	e7f5      	b.n	80077f4 <_dtoa_r+0x2fc>
 8007808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800780e:	e7b8      	b.n	8007782 <_dtoa_r+0x28a>
 8007810:	3101      	adds	r1, #1
 8007812:	6041      	str	r1, [r0, #4]
 8007814:	0052      	lsls	r2, r2, #1
 8007816:	e7b8      	b.n	800778a <_dtoa_r+0x292>
 8007818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800781a:	9a01      	ldr	r2, [sp, #4]
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	2b0e      	cmp	r3, #14
 8007822:	f200 809d 	bhi.w	8007960 <_dtoa_r+0x468>
 8007826:	2d00      	cmp	r5, #0
 8007828:	f000 809a 	beq.w	8007960 <_dtoa_r+0x468>
 800782c:	9b00      	ldr	r3, [sp, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	dd32      	ble.n	8007898 <_dtoa_r+0x3a0>
 8007832:	4ab7      	ldr	r2, [pc, #732]	; (8007b10 <_dtoa_r+0x618>)
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800783c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007840:	9b00      	ldr	r3, [sp, #0]
 8007842:	05d8      	lsls	r0, r3, #23
 8007844:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007848:	d516      	bpl.n	8007878 <_dtoa_r+0x380>
 800784a:	4bb2      	ldr	r3, [pc, #712]	; (8007b14 <_dtoa_r+0x61c>)
 800784c:	ec51 0b19 	vmov	r0, r1, d9
 8007850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007854:	f7f9 f80a 	bl	800086c <__aeabi_ddiv>
 8007858:	f007 070f 	and.w	r7, r7, #15
 800785c:	4682      	mov	sl, r0
 800785e:	468b      	mov	fp, r1
 8007860:	2503      	movs	r5, #3
 8007862:	4eac      	ldr	r6, [pc, #688]	; (8007b14 <_dtoa_r+0x61c>)
 8007864:	b957      	cbnz	r7, 800787c <_dtoa_r+0x384>
 8007866:	4642      	mov	r2, r8
 8007868:	464b      	mov	r3, r9
 800786a:	4650      	mov	r0, sl
 800786c:	4659      	mov	r1, fp
 800786e:	f7f8 fffd 	bl	800086c <__aeabi_ddiv>
 8007872:	4682      	mov	sl, r0
 8007874:	468b      	mov	fp, r1
 8007876:	e028      	b.n	80078ca <_dtoa_r+0x3d2>
 8007878:	2502      	movs	r5, #2
 800787a:	e7f2      	b.n	8007862 <_dtoa_r+0x36a>
 800787c:	07f9      	lsls	r1, r7, #31
 800787e:	d508      	bpl.n	8007892 <_dtoa_r+0x39a>
 8007880:	4640      	mov	r0, r8
 8007882:	4649      	mov	r1, r9
 8007884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007888:	f7f8 fec6 	bl	8000618 <__aeabi_dmul>
 800788c:	3501      	adds	r5, #1
 800788e:	4680      	mov	r8, r0
 8007890:	4689      	mov	r9, r1
 8007892:	107f      	asrs	r7, r7, #1
 8007894:	3608      	adds	r6, #8
 8007896:	e7e5      	b.n	8007864 <_dtoa_r+0x36c>
 8007898:	f000 809b 	beq.w	80079d2 <_dtoa_r+0x4da>
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	4f9d      	ldr	r7, [pc, #628]	; (8007b14 <_dtoa_r+0x61c>)
 80078a0:	425e      	negs	r6, r3
 80078a2:	4b9b      	ldr	r3, [pc, #620]	; (8007b10 <_dtoa_r+0x618>)
 80078a4:	f006 020f 	and.w	r2, r6, #15
 80078a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	ec51 0b19 	vmov	r0, r1, d9
 80078b4:	f7f8 feb0 	bl	8000618 <__aeabi_dmul>
 80078b8:	1136      	asrs	r6, r6, #4
 80078ba:	4682      	mov	sl, r0
 80078bc:	468b      	mov	fp, r1
 80078be:	2300      	movs	r3, #0
 80078c0:	2502      	movs	r5, #2
 80078c2:	2e00      	cmp	r6, #0
 80078c4:	d17a      	bne.n	80079bc <_dtoa_r+0x4c4>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1d3      	bne.n	8007872 <_dtoa_r+0x37a>
 80078ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8082 	beq.w	80079d6 <_dtoa_r+0x4de>
 80078d2:	4b91      	ldr	r3, [pc, #580]	; (8007b18 <_dtoa_r+0x620>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	4650      	mov	r0, sl
 80078d8:	4659      	mov	r1, fp
 80078da:	f7f9 f90f 	bl	8000afc <__aeabi_dcmplt>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d079      	beq.n	80079d6 <_dtoa_r+0x4de>
 80078e2:	9b03      	ldr	r3, [sp, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d076      	beq.n	80079d6 <_dtoa_r+0x4de>
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dd36      	ble.n	800795c <_dtoa_r+0x464>
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	4650      	mov	r0, sl
 80078f2:	4659      	mov	r1, fp
 80078f4:	1e5f      	subs	r7, r3, #1
 80078f6:	2200      	movs	r2, #0
 80078f8:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <_dtoa_r+0x624>)
 80078fa:	f7f8 fe8d 	bl	8000618 <__aeabi_dmul>
 80078fe:	9e02      	ldr	r6, [sp, #8]
 8007900:	4682      	mov	sl, r0
 8007902:	468b      	mov	fp, r1
 8007904:	3501      	adds	r5, #1
 8007906:	4628      	mov	r0, r5
 8007908:	f7f8 fe1c 	bl	8000544 <__aeabi_i2d>
 800790c:	4652      	mov	r2, sl
 800790e:	465b      	mov	r3, fp
 8007910:	f7f8 fe82 	bl	8000618 <__aeabi_dmul>
 8007914:	4b82      	ldr	r3, [pc, #520]	; (8007b20 <_dtoa_r+0x628>)
 8007916:	2200      	movs	r2, #0
 8007918:	f7f8 fcc8 	bl	80002ac <__adddf3>
 800791c:	46d0      	mov	r8, sl
 800791e:	46d9      	mov	r9, fp
 8007920:	4682      	mov	sl, r0
 8007922:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007926:	2e00      	cmp	r6, #0
 8007928:	d158      	bne.n	80079dc <_dtoa_r+0x4e4>
 800792a:	4b7e      	ldr	r3, [pc, #504]	; (8007b24 <_dtoa_r+0x62c>)
 800792c:	2200      	movs	r2, #0
 800792e:	4640      	mov	r0, r8
 8007930:	4649      	mov	r1, r9
 8007932:	f7f8 fcb9 	bl	80002a8 <__aeabi_dsub>
 8007936:	4652      	mov	r2, sl
 8007938:	465b      	mov	r3, fp
 800793a:	4680      	mov	r8, r0
 800793c:	4689      	mov	r9, r1
 800793e:	f7f9 f8fb 	bl	8000b38 <__aeabi_dcmpgt>
 8007942:	2800      	cmp	r0, #0
 8007944:	f040 8295 	bne.w	8007e72 <_dtoa_r+0x97a>
 8007948:	4652      	mov	r2, sl
 800794a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800794e:	4640      	mov	r0, r8
 8007950:	4649      	mov	r1, r9
 8007952:	f7f9 f8d3 	bl	8000afc <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	f040 8289 	bne.w	8007e6e <_dtoa_r+0x976>
 800795c:	ec5b ab19 	vmov	sl, fp, d9
 8007960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007962:	2b00      	cmp	r3, #0
 8007964:	f2c0 8148 	blt.w	8007bf8 <_dtoa_r+0x700>
 8007968:	9a00      	ldr	r2, [sp, #0]
 800796a:	2a0e      	cmp	r2, #14
 800796c:	f300 8144 	bgt.w	8007bf8 <_dtoa_r+0x700>
 8007970:	4b67      	ldr	r3, [pc, #412]	; (8007b10 <_dtoa_r+0x618>)
 8007972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007976:	e9d3 8900 	ldrd	r8, r9, [r3]
 800797a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	f280 80d5 	bge.w	8007b2c <_dtoa_r+0x634>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f300 80d1 	bgt.w	8007b2c <_dtoa_r+0x634>
 800798a:	f040 826f 	bne.w	8007e6c <_dtoa_r+0x974>
 800798e:	4b65      	ldr	r3, [pc, #404]	; (8007b24 <_dtoa_r+0x62c>)
 8007990:	2200      	movs	r2, #0
 8007992:	4640      	mov	r0, r8
 8007994:	4649      	mov	r1, r9
 8007996:	f7f8 fe3f 	bl	8000618 <__aeabi_dmul>
 800799a:	4652      	mov	r2, sl
 800799c:	465b      	mov	r3, fp
 800799e:	f7f9 f8c1 	bl	8000b24 <__aeabi_dcmpge>
 80079a2:	9e03      	ldr	r6, [sp, #12]
 80079a4:	4637      	mov	r7, r6
 80079a6:	2800      	cmp	r0, #0
 80079a8:	f040 8245 	bne.w	8007e36 <_dtoa_r+0x93e>
 80079ac:	9d01      	ldr	r5, [sp, #4]
 80079ae:	2331      	movs	r3, #49	; 0x31
 80079b0:	f805 3b01 	strb.w	r3, [r5], #1
 80079b4:	9b00      	ldr	r3, [sp, #0]
 80079b6:	3301      	adds	r3, #1
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	e240      	b.n	8007e3e <_dtoa_r+0x946>
 80079bc:	07f2      	lsls	r2, r6, #31
 80079be:	d505      	bpl.n	80079cc <_dtoa_r+0x4d4>
 80079c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c4:	f7f8 fe28 	bl	8000618 <__aeabi_dmul>
 80079c8:	3501      	adds	r5, #1
 80079ca:	2301      	movs	r3, #1
 80079cc:	1076      	asrs	r6, r6, #1
 80079ce:	3708      	adds	r7, #8
 80079d0:	e777      	b.n	80078c2 <_dtoa_r+0x3ca>
 80079d2:	2502      	movs	r5, #2
 80079d4:	e779      	b.n	80078ca <_dtoa_r+0x3d2>
 80079d6:	9f00      	ldr	r7, [sp, #0]
 80079d8:	9e03      	ldr	r6, [sp, #12]
 80079da:	e794      	b.n	8007906 <_dtoa_r+0x40e>
 80079dc:	9901      	ldr	r1, [sp, #4]
 80079de:	4b4c      	ldr	r3, [pc, #304]	; (8007b10 <_dtoa_r+0x618>)
 80079e0:	4431      	add	r1, r6
 80079e2:	910d      	str	r1, [sp, #52]	; 0x34
 80079e4:	9908      	ldr	r1, [sp, #32]
 80079e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079ee:	2900      	cmp	r1, #0
 80079f0:	d043      	beq.n	8007a7a <_dtoa_r+0x582>
 80079f2:	494d      	ldr	r1, [pc, #308]	; (8007b28 <_dtoa_r+0x630>)
 80079f4:	2000      	movs	r0, #0
 80079f6:	f7f8 ff39 	bl	800086c <__aeabi_ddiv>
 80079fa:	4652      	mov	r2, sl
 80079fc:	465b      	mov	r3, fp
 80079fe:	f7f8 fc53 	bl	80002a8 <__aeabi_dsub>
 8007a02:	9d01      	ldr	r5, [sp, #4]
 8007a04:	4682      	mov	sl, r0
 8007a06:	468b      	mov	fp, r1
 8007a08:	4649      	mov	r1, r9
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f7f9 f8b4 	bl	8000b78 <__aeabi_d2iz>
 8007a10:	4606      	mov	r6, r0
 8007a12:	f7f8 fd97 	bl	8000544 <__aeabi_i2d>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	f7f8 fc43 	bl	80002a8 <__aeabi_dsub>
 8007a22:	3630      	adds	r6, #48	; 0x30
 8007a24:	f805 6b01 	strb.w	r6, [r5], #1
 8007a28:	4652      	mov	r2, sl
 8007a2a:	465b      	mov	r3, fp
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	4689      	mov	r9, r1
 8007a30:	f7f9 f864 	bl	8000afc <__aeabi_dcmplt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d163      	bne.n	8007b00 <_dtoa_r+0x608>
 8007a38:	4642      	mov	r2, r8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	4936      	ldr	r1, [pc, #216]	; (8007b18 <_dtoa_r+0x620>)
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f7f8 fc32 	bl	80002a8 <__aeabi_dsub>
 8007a44:	4652      	mov	r2, sl
 8007a46:	465b      	mov	r3, fp
 8007a48:	f7f9 f858 	bl	8000afc <__aeabi_dcmplt>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f040 80b5 	bne.w	8007bbc <_dtoa_r+0x6c4>
 8007a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a54:	429d      	cmp	r5, r3
 8007a56:	d081      	beq.n	800795c <_dtoa_r+0x464>
 8007a58:	4b30      	ldr	r3, [pc, #192]	; (8007b1c <_dtoa_r+0x624>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	4659      	mov	r1, fp
 8007a60:	f7f8 fdda 	bl	8000618 <__aeabi_dmul>
 8007a64:	4b2d      	ldr	r3, [pc, #180]	; (8007b1c <_dtoa_r+0x624>)
 8007a66:	4682      	mov	sl, r0
 8007a68:	468b      	mov	fp, r1
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f7f8 fdd2 	bl	8000618 <__aeabi_dmul>
 8007a74:	4680      	mov	r8, r0
 8007a76:	4689      	mov	r9, r1
 8007a78:	e7c6      	b.n	8007a08 <_dtoa_r+0x510>
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	f7f8 fdcb 	bl	8000618 <__aeabi_dmul>
 8007a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a84:	9d01      	ldr	r5, [sp, #4]
 8007a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a88:	4682      	mov	sl, r0
 8007a8a:	468b      	mov	fp, r1
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	4640      	mov	r0, r8
 8007a90:	f7f9 f872 	bl	8000b78 <__aeabi_d2iz>
 8007a94:	4606      	mov	r6, r0
 8007a96:	f7f8 fd55 	bl	8000544 <__aeabi_i2d>
 8007a9a:	3630      	adds	r6, #48	; 0x30
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f8 fc00 	bl	80002a8 <__aeabi_dsub>
 8007aa8:	f805 6b01 	strb.w	r6, [r5], #1
 8007aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	4689      	mov	r9, r1
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	d124      	bne.n	8007b04 <_dtoa_r+0x60c>
 8007aba:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <_dtoa_r+0x630>)
 8007abc:	4650      	mov	r0, sl
 8007abe:	4659      	mov	r1, fp
 8007ac0:	f7f8 fbf4 	bl	80002ac <__adddf3>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4640      	mov	r0, r8
 8007aca:	4649      	mov	r1, r9
 8007acc:	f7f9 f834 	bl	8000b38 <__aeabi_dcmpgt>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d173      	bne.n	8007bbc <_dtoa_r+0x6c4>
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	465b      	mov	r3, fp
 8007ad8:	4913      	ldr	r1, [pc, #76]	; (8007b28 <_dtoa_r+0x630>)
 8007ada:	2000      	movs	r0, #0
 8007adc:	f7f8 fbe4 	bl	80002a8 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f9 f808 	bl	8000afc <__aeabi_dcmplt>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f43f af35 	beq.w	800795c <_dtoa_r+0x464>
 8007af2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007af4:	1e6b      	subs	r3, r5, #1
 8007af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007af8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007afc:	2b30      	cmp	r3, #48	; 0x30
 8007afe:	d0f8      	beq.n	8007af2 <_dtoa_r+0x5fa>
 8007b00:	9700      	str	r7, [sp, #0]
 8007b02:	e049      	b.n	8007b98 <_dtoa_r+0x6a0>
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <_dtoa_r+0x624>)
 8007b06:	f7f8 fd87 	bl	8000618 <__aeabi_dmul>
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4689      	mov	r9, r1
 8007b0e:	e7bd      	b.n	8007a8c <_dtoa_r+0x594>
 8007b10:	0800a6e8 	.word	0x0800a6e8
 8007b14:	0800a6c0 	.word	0x0800a6c0
 8007b18:	3ff00000 	.word	0x3ff00000
 8007b1c:	40240000 	.word	0x40240000
 8007b20:	401c0000 	.word	0x401c0000
 8007b24:	40140000 	.word	0x40140000
 8007b28:	3fe00000 	.word	0x3fe00000
 8007b2c:	9d01      	ldr	r5, [sp, #4]
 8007b2e:	4656      	mov	r6, sl
 8007b30:	465f      	mov	r7, fp
 8007b32:	4642      	mov	r2, r8
 8007b34:	464b      	mov	r3, r9
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 fe97 	bl	800086c <__aeabi_ddiv>
 8007b3e:	f7f9 f81b 	bl	8000b78 <__aeabi_d2iz>
 8007b42:	4682      	mov	sl, r0
 8007b44:	f7f8 fcfe 	bl	8000544 <__aeabi_i2d>
 8007b48:	4642      	mov	r2, r8
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	f7f8 fd64 	bl	8000618 <__aeabi_dmul>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b5c:	f7f8 fba4 	bl	80002a8 <__aeabi_dsub>
 8007b60:	f805 6b01 	strb.w	r6, [r5], #1
 8007b64:	9e01      	ldr	r6, [sp, #4]
 8007b66:	9f03      	ldr	r7, [sp, #12]
 8007b68:	1bae      	subs	r6, r5, r6
 8007b6a:	42b7      	cmp	r7, r6
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	d135      	bne.n	8007bde <_dtoa_r+0x6e6>
 8007b72:	f7f8 fb9b 	bl	80002ac <__adddf3>
 8007b76:	4642      	mov	r2, r8
 8007b78:	464b      	mov	r3, r9
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460f      	mov	r7, r1
 8007b7e:	f7f8 ffdb 	bl	8000b38 <__aeabi_dcmpgt>
 8007b82:	b9d0      	cbnz	r0, 8007bba <_dtoa_r+0x6c2>
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 ffac 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b90:	b110      	cbz	r0, 8007b98 <_dtoa_r+0x6a0>
 8007b92:	f01a 0f01 	tst.w	sl, #1
 8007b96:	d110      	bne.n	8007bba <_dtoa_r+0x6c2>
 8007b98:	4620      	mov	r0, r4
 8007b9a:	ee18 1a10 	vmov	r1, s16
 8007b9e:	f001 f893 	bl	8008cc8 <_Bfree>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	9800      	ldr	r0, [sp, #0]
 8007ba6:	702b      	strb	r3, [r5, #0]
 8007ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007baa:	3001      	adds	r0, #1
 8007bac:	6018      	str	r0, [r3, #0]
 8007bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f43f acf1 	beq.w	8007598 <_dtoa_r+0xa0>
 8007bb6:	601d      	str	r5, [r3, #0]
 8007bb8:	e4ee      	b.n	8007598 <_dtoa_r+0xa0>
 8007bba:	9f00      	ldr	r7, [sp, #0]
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bc4:	2a39      	cmp	r2, #57	; 0x39
 8007bc6:	d106      	bne.n	8007bd6 <_dtoa_r+0x6de>
 8007bc8:	9a01      	ldr	r2, [sp, #4]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d1f7      	bne.n	8007bbe <_dtoa_r+0x6c6>
 8007bce:	9901      	ldr	r1, [sp, #4]
 8007bd0:	2230      	movs	r2, #48	; 0x30
 8007bd2:	3701      	adds	r7, #1
 8007bd4:	700a      	strb	r2, [r1, #0]
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	3201      	adds	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e790      	b.n	8007b00 <_dtoa_r+0x608>
 8007bde:	4ba6      	ldr	r3, [pc, #664]	; (8007e78 <_dtoa_r+0x980>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	f7f8 fd19 	bl	8000618 <__aeabi_dmul>
 8007be6:	2200      	movs	r2, #0
 8007be8:	2300      	movs	r3, #0
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	f7f8 ff7b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d09d      	beq.n	8007b32 <_dtoa_r+0x63a>
 8007bf6:	e7cf      	b.n	8007b98 <_dtoa_r+0x6a0>
 8007bf8:	9a08      	ldr	r2, [sp, #32]
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	f000 80d7 	beq.w	8007dae <_dtoa_r+0x8b6>
 8007c00:	9a06      	ldr	r2, [sp, #24]
 8007c02:	2a01      	cmp	r2, #1
 8007c04:	f300 80ba 	bgt.w	8007d7c <_dtoa_r+0x884>
 8007c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	f000 80b2 	beq.w	8007d74 <_dtoa_r+0x87c>
 8007c10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c14:	9e07      	ldr	r6, [sp, #28]
 8007c16:	9d04      	ldr	r5, [sp, #16]
 8007c18:	9a04      	ldr	r2, [sp, #16]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	9204      	str	r2, [sp, #16]
 8007c1e:	9a05      	ldr	r2, [sp, #20]
 8007c20:	2101      	movs	r1, #1
 8007c22:	441a      	add	r2, r3
 8007c24:	4620      	mov	r0, r4
 8007c26:	9205      	str	r2, [sp, #20]
 8007c28:	f001 f950 	bl	8008ecc <__i2b>
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	dd0c      	ble.n	8007c4c <_dtoa_r+0x754>
 8007c32:	9b05      	ldr	r3, [sp, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dd09      	ble.n	8007c4c <_dtoa_r+0x754>
 8007c38:	42ab      	cmp	r3, r5
 8007c3a:	9a04      	ldr	r2, [sp, #16]
 8007c3c:	bfa8      	it	ge
 8007c3e:	462b      	movge	r3, r5
 8007c40:	1ad2      	subs	r2, r2, r3
 8007c42:	9204      	str	r2, [sp, #16]
 8007c44:	9a05      	ldr	r2, [sp, #20]
 8007c46:	1aed      	subs	r5, r5, r3
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	9305      	str	r3, [sp, #20]
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	b31b      	cbz	r3, 8007c98 <_dtoa_r+0x7a0>
 8007c50:	9b08      	ldr	r3, [sp, #32]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 80af 	beq.w	8007db6 <_dtoa_r+0x8be>
 8007c58:	2e00      	cmp	r6, #0
 8007c5a:	dd13      	ble.n	8007c84 <_dtoa_r+0x78c>
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	4632      	mov	r2, r6
 8007c60:	4620      	mov	r0, r4
 8007c62:	f001 f9f3 	bl	800904c <__pow5mult>
 8007c66:	ee18 2a10 	vmov	r2, s16
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f001 f942 	bl	8008ef8 <__multiply>
 8007c74:	ee18 1a10 	vmov	r1, s16
 8007c78:	4680      	mov	r8, r0
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f001 f824 	bl	8008cc8 <_Bfree>
 8007c80:	ee08 8a10 	vmov	s16, r8
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	1b9a      	subs	r2, r3, r6
 8007c88:	d006      	beq.n	8007c98 <_dtoa_r+0x7a0>
 8007c8a:	ee18 1a10 	vmov	r1, s16
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f001 f9dc 	bl	800904c <__pow5mult>
 8007c94:	ee08 0a10 	vmov	s16, r0
 8007c98:	2101      	movs	r1, #1
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f001 f916 	bl	8008ecc <__i2b>
 8007ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	f340 8088 	ble.w	8007dba <_dtoa_r+0x8c2>
 8007caa:	461a      	mov	r2, r3
 8007cac:	4601      	mov	r1, r0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f001 f9cc 	bl	800904c <__pow5mult>
 8007cb4:	9b06      	ldr	r3, [sp, #24]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	4606      	mov	r6, r0
 8007cba:	f340 8081 	ble.w	8007dc0 <_dtoa_r+0x8c8>
 8007cbe:	f04f 0800 	mov.w	r8, #0
 8007cc2:	6933      	ldr	r3, [r6, #16]
 8007cc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cc8:	6918      	ldr	r0, [r3, #16]
 8007cca:	f001 f8af 	bl	8008e2c <__hi0bits>
 8007cce:	f1c0 0020 	rsb	r0, r0, #32
 8007cd2:	9b05      	ldr	r3, [sp, #20]
 8007cd4:	4418      	add	r0, r3
 8007cd6:	f010 001f 	ands.w	r0, r0, #31
 8007cda:	f000 8092 	beq.w	8007e02 <_dtoa_r+0x90a>
 8007cde:	f1c0 0320 	rsb	r3, r0, #32
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	f340 808a 	ble.w	8007dfc <_dtoa_r+0x904>
 8007ce8:	f1c0 001c 	rsb	r0, r0, #28
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	4403      	add	r3, r0
 8007cf0:	9304      	str	r3, [sp, #16]
 8007cf2:	9b05      	ldr	r3, [sp, #20]
 8007cf4:	4403      	add	r3, r0
 8007cf6:	4405      	add	r5, r0
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	9b04      	ldr	r3, [sp, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	dd07      	ble.n	8007d10 <_dtoa_r+0x818>
 8007d00:	ee18 1a10 	vmov	r1, s16
 8007d04:	461a      	mov	r2, r3
 8007d06:	4620      	mov	r0, r4
 8007d08:	f001 f9fa 	bl	8009100 <__lshift>
 8007d0c:	ee08 0a10 	vmov	s16, r0
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dd05      	ble.n	8007d22 <_dtoa_r+0x82a>
 8007d16:	4631      	mov	r1, r6
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 f9f0 	bl	8009100 <__lshift>
 8007d20:	4606      	mov	r6, r0
 8007d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d06e      	beq.n	8007e06 <_dtoa_r+0x90e>
 8007d28:	ee18 0a10 	vmov	r0, s16
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	f001 fa57 	bl	80091e0 <__mcmp>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	da67      	bge.n	8007e06 <_dtoa_r+0x90e>
 8007d36:	9b00      	ldr	r3, [sp, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	ee18 1a10 	vmov	r1, s16
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	220a      	movs	r2, #10
 8007d42:	2300      	movs	r3, #0
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 ffe1 	bl	8008d0c <__multadd>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	ee08 0a10 	vmov	s16, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 81b1 	beq.w	80080b8 <_dtoa_r+0xbc0>
 8007d56:	2300      	movs	r3, #0
 8007d58:	4639      	mov	r1, r7
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 ffd5 	bl	8008d0c <__multadd>
 8007d62:	9b02      	ldr	r3, [sp, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	4607      	mov	r7, r0
 8007d68:	f300 808e 	bgt.w	8007e88 <_dtoa_r+0x990>
 8007d6c:	9b06      	ldr	r3, [sp, #24]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	dc51      	bgt.n	8007e16 <_dtoa_r+0x91e>
 8007d72:	e089      	b.n	8007e88 <_dtoa_r+0x990>
 8007d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d7a:	e74b      	b.n	8007c14 <_dtoa_r+0x71c>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	1e5e      	subs	r6, r3, #1
 8007d80:	9b07      	ldr	r3, [sp, #28]
 8007d82:	42b3      	cmp	r3, r6
 8007d84:	bfbf      	itttt	lt
 8007d86:	9b07      	ldrlt	r3, [sp, #28]
 8007d88:	9607      	strlt	r6, [sp, #28]
 8007d8a:	1af2      	sublt	r2, r6, r3
 8007d8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d8e:	bfb6      	itet	lt
 8007d90:	189b      	addlt	r3, r3, r2
 8007d92:	1b9e      	subge	r6, r3, r6
 8007d94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	bfb8      	it	lt
 8007d9a:	2600      	movlt	r6, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bfb7      	itett	lt
 8007da0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007da4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007da8:	1a9d      	sublt	r5, r3, r2
 8007daa:	2300      	movlt	r3, #0
 8007dac:	e734      	b.n	8007c18 <_dtoa_r+0x720>
 8007dae:	9e07      	ldr	r6, [sp, #28]
 8007db0:	9d04      	ldr	r5, [sp, #16]
 8007db2:	9f08      	ldr	r7, [sp, #32]
 8007db4:	e73b      	b.n	8007c2e <_dtoa_r+0x736>
 8007db6:	9a07      	ldr	r2, [sp, #28]
 8007db8:	e767      	b.n	8007c8a <_dtoa_r+0x792>
 8007dba:	9b06      	ldr	r3, [sp, #24]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	dc18      	bgt.n	8007df2 <_dtoa_r+0x8fa>
 8007dc0:	f1ba 0f00 	cmp.w	sl, #0
 8007dc4:	d115      	bne.n	8007df2 <_dtoa_r+0x8fa>
 8007dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dca:	b993      	cbnz	r3, 8007df2 <_dtoa_r+0x8fa>
 8007dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007dd0:	0d1b      	lsrs	r3, r3, #20
 8007dd2:	051b      	lsls	r3, r3, #20
 8007dd4:	b183      	cbz	r3, 8007df8 <_dtoa_r+0x900>
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9b05      	ldr	r3, [sp, #20]
 8007dde:	3301      	adds	r3, #1
 8007de0:	9305      	str	r3, [sp, #20]
 8007de2:	f04f 0801 	mov.w	r8, #1
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f af6a 	bne.w	8007cc2 <_dtoa_r+0x7ca>
 8007dee:	2001      	movs	r0, #1
 8007df0:	e76f      	b.n	8007cd2 <_dtoa_r+0x7da>
 8007df2:	f04f 0800 	mov.w	r8, #0
 8007df6:	e7f6      	b.n	8007de6 <_dtoa_r+0x8ee>
 8007df8:	4698      	mov	r8, r3
 8007dfa:	e7f4      	b.n	8007de6 <_dtoa_r+0x8ee>
 8007dfc:	f43f af7d 	beq.w	8007cfa <_dtoa_r+0x802>
 8007e00:	4618      	mov	r0, r3
 8007e02:	301c      	adds	r0, #28
 8007e04:	e772      	b.n	8007cec <_dtoa_r+0x7f4>
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc37      	bgt.n	8007e7c <_dtoa_r+0x984>
 8007e0c:	9b06      	ldr	r3, [sp, #24]
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	dd34      	ble.n	8007e7c <_dtoa_r+0x984>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	9302      	str	r3, [sp, #8]
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	b96b      	cbnz	r3, 8007e36 <_dtoa_r+0x93e>
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	2205      	movs	r2, #5
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 ff74 	bl	8008d0c <__multadd>
 8007e24:	4601      	mov	r1, r0
 8007e26:	4606      	mov	r6, r0
 8007e28:	ee18 0a10 	vmov	r0, s16
 8007e2c:	f001 f9d8 	bl	80091e0 <__mcmp>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	f73f adbb 	bgt.w	80079ac <_dtoa_r+0x4b4>
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	9d01      	ldr	r5, [sp, #4]
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	f04f 0800 	mov.w	r8, #0
 8007e42:	4631      	mov	r1, r6
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 ff3f 	bl	8008cc8 <_Bfree>
 8007e4a:	2f00      	cmp	r7, #0
 8007e4c:	f43f aea4 	beq.w	8007b98 <_dtoa_r+0x6a0>
 8007e50:	f1b8 0f00 	cmp.w	r8, #0
 8007e54:	d005      	beq.n	8007e62 <_dtoa_r+0x96a>
 8007e56:	45b8      	cmp	r8, r7
 8007e58:	d003      	beq.n	8007e62 <_dtoa_r+0x96a>
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 ff33 	bl	8008cc8 <_Bfree>
 8007e62:	4639      	mov	r1, r7
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 ff2f 	bl	8008cc8 <_Bfree>
 8007e6a:	e695      	b.n	8007b98 <_dtoa_r+0x6a0>
 8007e6c:	2600      	movs	r6, #0
 8007e6e:	4637      	mov	r7, r6
 8007e70:	e7e1      	b.n	8007e36 <_dtoa_r+0x93e>
 8007e72:	9700      	str	r7, [sp, #0]
 8007e74:	4637      	mov	r7, r6
 8007e76:	e599      	b.n	80079ac <_dtoa_r+0x4b4>
 8007e78:	40240000 	.word	0x40240000
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 80ca 	beq.w	8008018 <_dtoa_r+0xb20>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	9302      	str	r3, [sp, #8]
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	dd05      	ble.n	8007e98 <_dtoa_r+0x9a0>
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	462a      	mov	r2, r5
 8007e90:	4620      	mov	r0, r4
 8007e92:	f001 f935 	bl	8009100 <__lshift>
 8007e96:	4607      	mov	r7, r0
 8007e98:	f1b8 0f00 	cmp.w	r8, #0
 8007e9c:	d05b      	beq.n	8007f56 <_dtoa_r+0xa5e>
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fed1 	bl	8008c48 <_Balloc>
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	b928      	cbnz	r0, 8007eb6 <_dtoa_r+0x9be>
 8007eaa:	4b87      	ldr	r3, [pc, #540]	; (80080c8 <_dtoa_r+0xbd0>)
 8007eac:	4602      	mov	r2, r0
 8007eae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007eb2:	f7ff bb3b 	b.w	800752c <_dtoa_r+0x34>
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	3202      	adds	r2, #2
 8007eba:	0092      	lsls	r2, r2, #2
 8007ebc:	f107 010c 	add.w	r1, r7, #12
 8007ec0:	300c      	adds	r0, #12
 8007ec2:	f000 feb3 	bl	8008c2c <memcpy>
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f001 f918 	bl	8009100 <__lshift>
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	f103 0901 	add.w	r9, r3, #1
 8007ed6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007eda:	4413      	add	r3, r2
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	f00a 0301 	and.w	r3, sl, #1
 8007ee2:	46b8      	mov	r8, r7
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	4631      	mov	r1, r6
 8007eea:	ee18 0a10 	vmov	r0, s16
 8007eee:	f7ff fa77 	bl	80073e0 <quorem>
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	9002      	str	r0, [sp, #8]
 8007ef6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007efa:	ee18 0a10 	vmov	r0, s16
 8007efe:	f001 f96f 	bl	80091e0 <__mcmp>
 8007f02:	463a      	mov	r2, r7
 8007f04:	9003      	str	r0, [sp, #12]
 8007f06:	4631      	mov	r1, r6
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f001 f985 	bl	8009218 <__mdiff>
 8007f0e:	68c2      	ldr	r2, [r0, #12]
 8007f10:	f109 3bff 	add.w	fp, r9, #4294967295
 8007f14:	4605      	mov	r5, r0
 8007f16:	bb02      	cbnz	r2, 8007f5a <_dtoa_r+0xa62>
 8007f18:	4601      	mov	r1, r0
 8007f1a:	ee18 0a10 	vmov	r0, s16
 8007f1e:	f001 f95f 	bl	80091e0 <__mcmp>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4629      	mov	r1, r5
 8007f26:	4620      	mov	r0, r4
 8007f28:	9207      	str	r2, [sp, #28]
 8007f2a:	f000 fecd 	bl	8008cc8 <_Bfree>
 8007f2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f32:	ea43 0102 	orr.w	r1, r3, r2
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	464d      	mov	r5, r9
 8007f3c:	d10f      	bne.n	8007f5e <_dtoa_r+0xa66>
 8007f3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f42:	d02a      	beq.n	8007f9a <_dtoa_r+0xaa2>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	dd02      	ble.n	8007f50 <_dtoa_r+0xa58>
 8007f4a:	9b02      	ldr	r3, [sp, #8]
 8007f4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f50:	f88b a000 	strb.w	sl, [fp]
 8007f54:	e775      	b.n	8007e42 <_dtoa_r+0x94a>
 8007f56:	4638      	mov	r0, r7
 8007f58:	e7ba      	b.n	8007ed0 <_dtoa_r+0x9d8>
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	e7e2      	b.n	8007f24 <_dtoa_r+0xa2c>
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	db04      	blt.n	8007f6e <_dtoa_r+0xa76>
 8007f64:	9906      	ldr	r1, [sp, #24]
 8007f66:	430b      	orrs	r3, r1
 8007f68:	9904      	ldr	r1, [sp, #16]
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	d122      	bne.n	8007fb4 <_dtoa_r+0xabc>
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	ddee      	ble.n	8007f50 <_dtoa_r+0xa58>
 8007f72:	ee18 1a10 	vmov	r1, s16
 8007f76:	2201      	movs	r2, #1
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f001 f8c1 	bl	8009100 <__lshift>
 8007f7e:	4631      	mov	r1, r6
 8007f80:	ee08 0a10 	vmov	s16, r0
 8007f84:	f001 f92c 	bl	80091e0 <__mcmp>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	dc03      	bgt.n	8007f94 <_dtoa_r+0xa9c>
 8007f8c:	d1e0      	bne.n	8007f50 <_dtoa_r+0xa58>
 8007f8e:	f01a 0f01 	tst.w	sl, #1
 8007f92:	d0dd      	beq.n	8007f50 <_dtoa_r+0xa58>
 8007f94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f98:	d1d7      	bne.n	8007f4a <_dtoa_r+0xa52>
 8007f9a:	2339      	movs	r3, #57	; 0x39
 8007f9c:	f88b 3000 	strb.w	r3, [fp]
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	461d      	mov	r5, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007faa:	2a39      	cmp	r2, #57	; 0x39
 8007fac:	d071      	beq.n	8008092 <_dtoa_r+0xb9a>
 8007fae:	3201      	adds	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e746      	b.n	8007e42 <_dtoa_r+0x94a>
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	dd07      	ble.n	8007fc8 <_dtoa_r+0xad0>
 8007fb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fbc:	d0ed      	beq.n	8007f9a <_dtoa_r+0xaa2>
 8007fbe:	f10a 0301 	add.w	r3, sl, #1
 8007fc2:	f88b 3000 	strb.w	r3, [fp]
 8007fc6:	e73c      	b.n	8007e42 <_dtoa_r+0x94a>
 8007fc8:	9b05      	ldr	r3, [sp, #20]
 8007fca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007fce:	4599      	cmp	r9, r3
 8007fd0:	d047      	beq.n	8008062 <_dtoa_r+0xb6a>
 8007fd2:	ee18 1a10 	vmov	r1, s16
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fe96 	bl	8008d0c <__multadd>
 8007fe0:	45b8      	cmp	r8, r7
 8007fe2:	ee08 0a10 	vmov	s16, r0
 8007fe6:	f04f 0300 	mov.w	r3, #0
 8007fea:	f04f 020a 	mov.w	r2, #10
 8007fee:	4641      	mov	r1, r8
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	d106      	bne.n	8008002 <_dtoa_r+0xb0a>
 8007ff4:	f000 fe8a 	bl	8008d0c <__multadd>
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	f109 0901 	add.w	r9, r9, #1
 8008000:	e772      	b.n	8007ee8 <_dtoa_r+0x9f0>
 8008002:	f000 fe83 	bl	8008d0c <__multadd>
 8008006:	4639      	mov	r1, r7
 8008008:	4680      	mov	r8, r0
 800800a:	2300      	movs	r3, #0
 800800c:	220a      	movs	r2, #10
 800800e:	4620      	mov	r0, r4
 8008010:	f000 fe7c 	bl	8008d0c <__multadd>
 8008014:	4607      	mov	r7, r0
 8008016:	e7f1      	b.n	8007ffc <_dtoa_r+0xb04>
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	9d01      	ldr	r5, [sp, #4]
 800801e:	ee18 0a10 	vmov	r0, s16
 8008022:	4631      	mov	r1, r6
 8008024:	f7ff f9dc 	bl	80073e0 <quorem>
 8008028:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	f805 ab01 	strb.w	sl, [r5], #1
 8008032:	1aea      	subs	r2, r5, r3
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	4293      	cmp	r3, r2
 8008038:	dd09      	ble.n	800804e <_dtoa_r+0xb56>
 800803a:	ee18 1a10 	vmov	r1, s16
 800803e:	2300      	movs	r3, #0
 8008040:	220a      	movs	r2, #10
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fe62 	bl	8008d0c <__multadd>
 8008048:	ee08 0a10 	vmov	s16, r0
 800804c:	e7e7      	b.n	800801e <_dtoa_r+0xb26>
 800804e:	9b02      	ldr	r3, [sp, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	bfc8      	it	gt
 8008054:	461d      	movgt	r5, r3
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	bfd8      	it	le
 800805a:	2501      	movle	r5, #1
 800805c:	441d      	add	r5, r3
 800805e:	f04f 0800 	mov.w	r8, #0
 8008062:	ee18 1a10 	vmov	r1, s16
 8008066:	2201      	movs	r2, #1
 8008068:	4620      	mov	r0, r4
 800806a:	f001 f849 	bl	8009100 <__lshift>
 800806e:	4631      	mov	r1, r6
 8008070:	ee08 0a10 	vmov	s16, r0
 8008074:	f001 f8b4 	bl	80091e0 <__mcmp>
 8008078:	2800      	cmp	r0, #0
 800807a:	dc91      	bgt.n	8007fa0 <_dtoa_r+0xaa8>
 800807c:	d102      	bne.n	8008084 <_dtoa_r+0xb8c>
 800807e:	f01a 0f01 	tst.w	sl, #1
 8008082:	d18d      	bne.n	8007fa0 <_dtoa_r+0xaa8>
 8008084:	462b      	mov	r3, r5
 8008086:	461d      	mov	r5, r3
 8008088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800808c:	2a30      	cmp	r2, #48	; 0x30
 800808e:	d0fa      	beq.n	8008086 <_dtoa_r+0xb8e>
 8008090:	e6d7      	b.n	8007e42 <_dtoa_r+0x94a>
 8008092:	9a01      	ldr	r2, [sp, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d184      	bne.n	8007fa2 <_dtoa_r+0xaaa>
 8008098:	9b00      	ldr	r3, [sp, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	2331      	movs	r3, #49	; 0x31
 80080a0:	7013      	strb	r3, [r2, #0]
 80080a2:	e6ce      	b.n	8007e42 <_dtoa_r+0x94a>
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <_dtoa_r+0xbd4>)
 80080a6:	f7ff ba95 	b.w	80075d4 <_dtoa_r+0xdc>
 80080aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f47f aa6e 	bne.w	800758e <_dtoa_r+0x96>
 80080b2:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <_dtoa_r+0xbd8>)
 80080b4:	f7ff ba8e 	b.w	80075d4 <_dtoa_r+0xdc>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	dcae      	bgt.n	800801c <_dtoa_r+0xb24>
 80080be:	9b06      	ldr	r3, [sp, #24]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	f73f aea8 	bgt.w	8007e16 <_dtoa_r+0x91e>
 80080c6:	e7a9      	b.n	800801c <_dtoa_r+0xb24>
 80080c8:	0800a570 	.word	0x0800a570
 80080cc:	0800a374 	.word	0x0800a374
 80080d0:	0800a4f1 	.word	0x0800a4f1

080080d4 <__sflush_r>:
 80080d4:	898a      	ldrh	r2, [r1, #12]
 80080d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080da:	4605      	mov	r5, r0
 80080dc:	0710      	lsls	r0, r2, #28
 80080de:	460c      	mov	r4, r1
 80080e0:	d458      	bmi.n	8008194 <__sflush_r+0xc0>
 80080e2:	684b      	ldr	r3, [r1, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dc05      	bgt.n	80080f4 <__sflush_r+0x20>
 80080e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dc02      	bgt.n	80080f4 <__sflush_r+0x20>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	d0f9      	beq.n	80080ee <__sflush_r+0x1a>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008100:	682f      	ldr	r7, [r5, #0]
 8008102:	602b      	str	r3, [r5, #0]
 8008104:	d032      	beq.n	800816c <__sflush_r+0x98>
 8008106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	075a      	lsls	r2, r3, #29
 800810c:	d505      	bpl.n	800811a <__sflush_r+0x46>
 800810e:	6863      	ldr	r3, [r4, #4]
 8008110:	1ac0      	subs	r0, r0, r3
 8008112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008114:	b10b      	cbz	r3, 800811a <__sflush_r+0x46>
 8008116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008118:	1ac0      	subs	r0, r0, r3
 800811a:	2300      	movs	r3, #0
 800811c:	4602      	mov	r2, r0
 800811e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008120:	6a21      	ldr	r1, [r4, #32]
 8008122:	4628      	mov	r0, r5
 8008124:	47b0      	blx	r6
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	d106      	bne.n	800813a <__sflush_r+0x66>
 800812c:	6829      	ldr	r1, [r5, #0]
 800812e:	291d      	cmp	r1, #29
 8008130:	d82c      	bhi.n	800818c <__sflush_r+0xb8>
 8008132:	4a2a      	ldr	r2, [pc, #168]	; (80081dc <__sflush_r+0x108>)
 8008134:	40ca      	lsrs	r2, r1
 8008136:	07d6      	lsls	r6, r2, #31
 8008138:	d528      	bpl.n	800818c <__sflush_r+0xb8>
 800813a:	2200      	movs	r2, #0
 800813c:	6062      	str	r2, [r4, #4]
 800813e:	04d9      	lsls	r1, r3, #19
 8008140:	6922      	ldr	r2, [r4, #16]
 8008142:	6022      	str	r2, [r4, #0]
 8008144:	d504      	bpl.n	8008150 <__sflush_r+0x7c>
 8008146:	1c42      	adds	r2, r0, #1
 8008148:	d101      	bne.n	800814e <__sflush_r+0x7a>
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	b903      	cbnz	r3, 8008150 <__sflush_r+0x7c>
 800814e:	6560      	str	r0, [r4, #84]	; 0x54
 8008150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008152:	602f      	str	r7, [r5, #0]
 8008154:	2900      	cmp	r1, #0
 8008156:	d0ca      	beq.n	80080ee <__sflush_r+0x1a>
 8008158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800815c:	4299      	cmp	r1, r3
 800815e:	d002      	beq.n	8008166 <__sflush_r+0x92>
 8008160:	4628      	mov	r0, r5
 8008162:	f001 fa49 	bl	80095f8 <_free_r>
 8008166:	2000      	movs	r0, #0
 8008168:	6360      	str	r0, [r4, #52]	; 0x34
 800816a:	e7c1      	b.n	80080f0 <__sflush_r+0x1c>
 800816c:	6a21      	ldr	r1, [r4, #32]
 800816e:	2301      	movs	r3, #1
 8008170:	4628      	mov	r0, r5
 8008172:	47b0      	blx	r6
 8008174:	1c41      	adds	r1, r0, #1
 8008176:	d1c7      	bne.n	8008108 <__sflush_r+0x34>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0c4      	beq.n	8008108 <__sflush_r+0x34>
 800817e:	2b1d      	cmp	r3, #29
 8008180:	d001      	beq.n	8008186 <__sflush_r+0xb2>
 8008182:	2b16      	cmp	r3, #22
 8008184:	d101      	bne.n	800818a <__sflush_r+0xb6>
 8008186:	602f      	str	r7, [r5, #0]
 8008188:	e7b1      	b.n	80080ee <__sflush_r+0x1a>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	e7ad      	b.n	80080f0 <__sflush_r+0x1c>
 8008194:	690f      	ldr	r7, [r1, #16]
 8008196:	2f00      	cmp	r7, #0
 8008198:	d0a9      	beq.n	80080ee <__sflush_r+0x1a>
 800819a:	0793      	lsls	r3, r2, #30
 800819c:	680e      	ldr	r6, [r1, #0]
 800819e:	bf08      	it	eq
 80081a0:	694b      	ldreq	r3, [r1, #20]
 80081a2:	600f      	str	r7, [r1, #0]
 80081a4:	bf18      	it	ne
 80081a6:	2300      	movne	r3, #0
 80081a8:	eba6 0807 	sub.w	r8, r6, r7
 80081ac:	608b      	str	r3, [r1, #8]
 80081ae:	f1b8 0f00 	cmp.w	r8, #0
 80081b2:	dd9c      	ble.n	80080ee <__sflush_r+0x1a>
 80081b4:	6a21      	ldr	r1, [r4, #32]
 80081b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081b8:	4643      	mov	r3, r8
 80081ba:	463a      	mov	r2, r7
 80081bc:	4628      	mov	r0, r5
 80081be:	47b0      	blx	r6
 80081c0:	2800      	cmp	r0, #0
 80081c2:	dc06      	bgt.n	80081d2 <__sflush_r+0xfe>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ca:	81a3      	strh	r3, [r4, #12]
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	e78e      	b.n	80080f0 <__sflush_r+0x1c>
 80081d2:	4407      	add	r7, r0
 80081d4:	eba8 0800 	sub.w	r8, r8, r0
 80081d8:	e7e9      	b.n	80081ae <__sflush_r+0xda>
 80081da:	bf00      	nop
 80081dc:	20400001 	.word	0x20400001

080081e0 <_fflush_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	690b      	ldr	r3, [r1, #16]
 80081e4:	4605      	mov	r5, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	b913      	cbnz	r3, 80081f0 <_fflush_r+0x10>
 80081ea:	2500      	movs	r5, #0
 80081ec:	4628      	mov	r0, r5
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	b118      	cbz	r0, 80081fa <_fflush_r+0x1a>
 80081f2:	6983      	ldr	r3, [r0, #24]
 80081f4:	b90b      	cbnz	r3, 80081fa <_fflush_r+0x1a>
 80081f6:	f000 f887 	bl	8008308 <__sinit>
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <_fflush_r+0x6c>)
 80081fc:	429c      	cmp	r4, r3
 80081fe:	d11b      	bne.n	8008238 <_fflush_r+0x58>
 8008200:	686c      	ldr	r4, [r5, #4]
 8008202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0ef      	beq.n	80081ea <_fflush_r+0xa>
 800820a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800820c:	07d0      	lsls	r0, r2, #31
 800820e:	d404      	bmi.n	800821a <_fflush_r+0x3a>
 8008210:	0599      	lsls	r1, r3, #22
 8008212:	d402      	bmi.n	800821a <_fflush_r+0x3a>
 8008214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008216:	f000 fc88 	bl	8008b2a <__retarget_lock_acquire_recursive>
 800821a:	4628      	mov	r0, r5
 800821c:	4621      	mov	r1, r4
 800821e:	f7ff ff59 	bl	80080d4 <__sflush_r>
 8008222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008224:	07da      	lsls	r2, r3, #31
 8008226:	4605      	mov	r5, r0
 8008228:	d4e0      	bmi.n	80081ec <_fflush_r+0xc>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	059b      	lsls	r3, r3, #22
 800822e:	d4dd      	bmi.n	80081ec <_fflush_r+0xc>
 8008230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008232:	f000 fc7b 	bl	8008b2c <__retarget_lock_release_recursive>
 8008236:	e7d9      	b.n	80081ec <_fflush_r+0xc>
 8008238:	4b05      	ldr	r3, [pc, #20]	; (8008250 <_fflush_r+0x70>)
 800823a:	429c      	cmp	r4, r3
 800823c:	d101      	bne.n	8008242 <_fflush_r+0x62>
 800823e:	68ac      	ldr	r4, [r5, #8]
 8008240:	e7df      	b.n	8008202 <_fflush_r+0x22>
 8008242:	4b04      	ldr	r3, [pc, #16]	; (8008254 <_fflush_r+0x74>)
 8008244:	429c      	cmp	r4, r3
 8008246:	bf08      	it	eq
 8008248:	68ec      	ldreq	r4, [r5, #12]
 800824a:	e7da      	b.n	8008202 <_fflush_r+0x22>
 800824c:	0800a5a4 	.word	0x0800a5a4
 8008250:	0800a5c4 	.word	0x0800a5c4
 8008254:	0800a584 	.word	0x0800a584

08008258 <std>:
 8008258:	2300      	movs	r3, #0
 800825a:	b510      	push	{r4, lr}
 800825c:	4604      	mov	r4, r0
 800825e:	e9c0 3300 	strd	r3, r3, [r0]
 8008262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008266:	6083      	str	r3, [r0, #8]
 8008268:	8181      	strh	r1, [r0, #12]
 800826a:	6643      	str	r3, [r0, #100]	; 0x64
 800826c:	81c2      	strh	r2, [r0, #14]
 800826e:	6183      	str	r3, [r0, #24]
 8008270:	4619      	mov	r1, r3
 8008272:	2208      	movs	r2, #8
 8008274:	305c      	adds	r0, #92	; 0x5c
 8008276:	f7fd fa11 	bl	800569c <memset>
 800827a:	4b05      	ldr	r3, [pc, #20]	; (8008290 <std+0x38>)
 800827c:	6263      	str	r3, [r4, #36]	; 0x24
 800827e:	4b05      	ldr	r3, [pc, #20]	; (8008294 <std+0x3c>)
 8008280:	62a3      	str	r3, [r4, #40]	; 0x28
 8008282:	4b05      	ldr	r3, [pc, #20]	; (8008298 <std+0x40>)
 8008284:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008286:	4b05      	ldr	r3, [pc, #20]	; (800829c <std+0x44>)
 8008288:	6224      	str	r4, [r4, #32]
 800828a:	6323      	str	r3, [r4, #48]	; 0x30
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	08009d59 	.word	0x08009d59
 8008294:	08009d7b 	.word	0x08009d7b
 8008298:	08009db3 	.word	0x08009db3
 800829c:	08009dd7 	.word	0x08009dd7

080082a0 <_cleanup_r>:
 80082a0:	4901      	ldr	r1, [pc, #4]	; (80082a8 <_cleanup_r+0x8>)
 80082a2:	f000 b8af 	b.w	8008404 <_fwalk_reent>
 80082a6:	bf00      	nop
 80082a8:	080081e1 	.word	0x080081e1

080082ac <__sfmoreglue>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	2268      	movs	r2, #104	; 0x68
 80082b0:	1e4d      	subs	r5, r1, #1
 80082b2:	4355      	muls	r5, r2
 80082b4:	460e      	mov	r6, r1
 80082b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ba:	f001 fa09 	bl	80096d0 <_malloc_r>
 80082be:	4604      	mov	r4, r0
 80082c0:	b140      	cbz	r0, 80082d4 <__sfmoreglue+0x28>
 80082c2:	2100      	movs	r1, #0
 80082c4:	e9c0 1600 	strd	r1, r6, [r0]
 80082c8:	300c      	adds	r0, #12
 80082ca:	60a0      	str	r0, [r4, #8]
 80082cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082d0:	f7fd f9e4 	bl	800569c <memset>
 80082d4:	4620      	mov	r0, r4
 80082d6:	bd70      	pop	{r4, r5, r6, pc}

080082d8 <__sfp_lock_acquire>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__sfp_lock_acquire+0x8>)
 80082da:	f000 bc26 	b.w	8008b2a <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	2000033d 	.word	0x2000033d

080082e4 <__sfp_lock_release>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__sfp_lock_release+0x8>)
 80082e6:	f000 bc21 	b.w	8008b2c <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	2000033d 	.word	0x2000033d

080082f0 <__sinit_lock_acquire>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__sinit_lock_acquire+0x8>)
 80082f2:	f000 bc1a 	b.w	8008b2a <__retarget_lock_acquire_recursive>
 80082f6:	bf00      	nop
 80082f8:	2000033e 	.word	0x2000033e

080082fc <__sinit_lock_release>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__sinit_lock_release+0x8>)
 80082fe:	f000 bc15 	b.w	8008b2c <__retarget_lock_release_recursive>
 8008302:	bf00      	nop
 8008304:	2000033e 	.word	0x2000033e

08008308 <__sinit>:
 8008308:	b510      	push	{r4, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	f7ff fff0 	bl	80082f0 <__sinit_lock_acquire>
 8008310:	69a3      	ldr	r3, [r4, #24]
 8008312:	b11b      	cbz	r3, 800831c <__sinit+0x14>
 8008314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008318:	f7ff bff0 	b.w	80082fc <__sinit_lock_release>
 800831c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008320:	6523      	str	r3, [r4, #80]	; 0x50
 8008322:	4b13      	ldr	r3, [pc, #76]	; (8008370 <__sinit+0x68>)
 8008324:	4a13      	ldr	r2, [pc, #76]	; (8008374 <__sinit+0x6c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	62a2      	str	r2, [r4, #40]	; 0x28
 800832a:	42a3      	cmp	r3, r4
 800832c:	bf04      	itt	eq
 800832e:	2301      	moveq	r3, #1
 8008330:	61a3      	streq	r3, [r4, #24]
 8008332:	4620      	mov	r0, r4
 8008334:	f000 f820 	bl	8008378 <__sfp>
 8008338:	6060      	str	r0, [r4, #4]
 800833a:	4620      	mov	r0, r4
 800833c:	f000 f81c 	bl	8008378 <__sfp>
 8008340:	60a0      	str	r0, [r4, #8]
 8008342:	4620      	mov	r0, r4
 8008344:	f000 f818 	bl	8008378 <__sfp>
 8008348:	2200      	movs	r2, #0
 800834a:	60e0      	str	r0, [r4, #12]
 800834c:	2104      	movs	r1, #4
 800834e:	6860      	ldr	r0, [r4, #4]
 8008350:	f7ff ff82 	bl	8008258 <std>
 8008354:	68a0      	ldr	r0, [r4, #8]
 8008356:	2201      	movs	r2, #1
 8008358:	2109      	movs	r1, #9
 800835a:	f7ff ff7d 	bl	8008258 <std>
 800835e:	68e0      	ldr	r0, [r4, #12]
 8008360:	2202      	movs	r2, #2
 8008362:	2112      	movs	r1, #18
 8008364:	f7ff ff78 	bl	8008258 <std>
 8008368:	2301      	movs	r3, #1
 800836a:	61a3      	str	r3, [r4, #24]
 800836c:	e7d2      	b.n	8008314 <__sinit+0xc>
 800836e:	bf00      	nop
 8008370:	0800a360 	.word	0x0800a360
 8008374:	080082a1 	.word	0x080082a1

08008378 <__sfp>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	4607      	mov	r7, r0
 800837c:	f7ff ffac 	bl	80082d8 <__sfp_lock_acquire>
 8008380:	4b1e      	ldr	r3, [pc, #120]	; (80083fc <__sfp+0x84>)
 8008382:	681e      	ldr	r6, [r3, #0]
 8008384:	69b3      	ldr	r3, [r6, #24]
 8008386:	b913      	cbnz	r3, 800838e <__sfp+0x16>
 8008388:	4630      	mov	r0, r6
 800838a:	f7ff ffbd 	bl	8008308 <__sinit>
 800838e:	3648      	adds	r6, #72	; 0x48
 8008390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008394:	3b01      	subs	r3, #1
 8008396:	d503      	bpl.n	80083a0 <__sfp+0x28>
 8008398:	6833      	ldr	r3, [r6, #0]
 800839a:	b30b      	cbz	r3, 80083e0 <__sfp+0x68>
 800839c:	6836      	ldr	r6, [r6, #0]
 800839e:	e7f7      	b.n	8008390 <__sfp+0x18>
 80083a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083a4:	b9d5      	cbnz	r5, 80083dc <__sfp+0x64>
 80083a6:	4b16      	ldr	r3, [pc, #88]	; (8008400 <__sfp+0x88>)
 80083a8:	60e3      	str	r3, [r4, #12]
 80083aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083ae:	6665      	str	r5, [r4, #100]	; 0x64
 80083b0:	f000 fbba 	bl	8008b28 <__retarget_lock_init_recursive>
 80083b4:	f7ff ff96 	bl	80082e4 <__sfp_lock_release>
 80083b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083c0:	6025      	str	r5, [r4, #0]
 80083c2:	61a5      	str	r5, [r4, #24]
 80083c4:	2208      	movs	r2, #8
 80083c6:	4629      	mov	r1, r5
 80083c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083cc:	f7fd f966 	bl	800569c <memset>
 80083d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083d8:	4620      	mov	r0, r4
 80083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083dc:	3468      	adds	r4, #104	; 0x68
 80083de:	e7d9      	b.n	8008394 <__sfp+0x1c>
 80083e0:	2104      	movs	r1, #4
 80083e2:	4638      	mov	r0, r7
 80083e4:	f7ff ff62 	bl	80082ac <__sfmoreglue>
 80083e8:	4604      	mov	r4, r0
 80083ea:	6030      	str	r0, [r6, #0]
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d1d5      	bne.n	800839c <__sfp+0x24>
 80083f0:	f7ff ff78 	bl	80082e4 <__sfp_lock_release>
 80083f4:	230c      	movs	r3, #12
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	e7ee      	b.n	80083d8 <__sfp+0x60>
 80083fa:	bf00      	nop
 80083fc:	0800a360 	.word	0x0800a360
 8008400:	ffff0001 	.word	0xffff0001

08008404 <_fwalk_reent>:
 8008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008408:	4606      	mov	r6, r0
 800840a:	4688      	mov	r8, r1
 800840c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008410:	2700      	movs	r7, #0
 8008412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008416:	f1b9 0901 	subs.w	r9, r9, #1
 800841a:	d505      	bpl.n	8008428 <_fwalk_reent+0x24>
 800841c:	6824      	ldr	r4, [r4, #0]
 800841e:	2c00      	cmp	r4, #0
 8008420:	d1f7      	bne.n	8008412 <_fwalk_reent+0xe>
 8008422:	4638      	mov	r0, r7
 8008424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008428:	89ab      	ldrh	r3, [r5, #12]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d907      	bls.n	800843e <_fwalk_reent+0x3a>
 800842e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008432:	3301      	adds	r3, #1
 8008434:	d003      	beq.n	800843e <_fwalk_reent+0x3a>
 8008436:	4629      	mov	r1, r5
 8008438:	4630      	mov	r0, r6
 800843a:	47c0      	blx	r8
 800843c:	4307      	orrs	r7, r0
 800843e:	3568      	adds	r5, #104	; 0x68
 8008440:	e7e9      	b.n	8008416 <_fwalk_reent+0x12>

08008442 <rshift>:
 8008442:	6903      	ldr	r3, [r0, #16]
 8008444:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800844c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008450:	f100 0414 	add.w	r4, r0, #20
 8008454:	dd45      	ble.n	80084e2 <rshift+0xa0>
 8008456:	f011 011f 	ands.w	r1, r1, #31
 800845a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800845e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008462:	d10c      	bne.n	800847e <rshift+0x3c>
 8008464:	f100 0710 	add.w	r7, r0, #16
 8008468:	4629      	mov	r1, r5
 800846a:	42b1      	cmp	r1, r6
 800846c:	d334      	bcc.n	80084d8 <rshift+0x96>
 800846e:	1a9b      	subs	r3, r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	1eea      	subs	r2, r5, #3
 8008474:	4296      	cmp	r6, r2
 8008476:	bf38      	it	cc
 8008478:	2300      	movcc	r3, #0
 800847a:	4423      	add	r3, r4
 800847c:	e015      	b.n	80084aa <rshift+0x68>
 800847e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008482:	f1c1 0820 	rsb	r8, r1, #32
 8008486:	40cf      	lsrs	r7, r1
 8008488:	f105 0e04 	add.w	lr, r5, #4
 800848c:	46a1      	mov	r9, r4
 800848e:	4576      	cmp	r6, lr
 8008490:	46f4      	mov	ip, lr
 8008492:	d815      	bhi.n	80084c0 <rshift+0x7e>
 8008494:	1a9a      	subs	r2, r3, r2
 8008496:	0092      	lsls	r2, r2, #2
 8008498:	3a04      	subs	r2, #4
 800849a:	3501      	adds	r5, #1
 800849c:	42ae      	cmp	r6, r5
 800849e:	bf38      	it	cc
 80084a0:	2200      	movcc	r2, #0
 80084a2:	18a3      	adds	r3, r4, r2
 80084a4:	50a7      	str	r7, [r4, r2]
 80084a6:	b107      	cbz	r7, 80084aa <rshift+0x68>
 80084a8:	3304      	adds	r3, #4
 80084aa:	1b1a      	subs	r2, r3, r4
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084b2:	bf08      	it	eq
 80084b4:	2300      	moveq	r3, #0
 80084b6:	6102      	str	r2, [r0, #16]
 80084b8:	bf08      	it	eq
 80084ba:	6143      	streq	r3, [r0, #20]
 80084bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c0:	f8dc c000 	ldr.w	ip, [ip]
 80084c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80084c8:	ea4c 0707 	orr.w	r7, ip, r7
 80084cc:	f849 7b04 	str.w	r7, [r9], #4
 80084d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084d4:	40cf      	lsrs	r7, r1
 80084d6:	e7da      	b.n	800848e <rshift+0x4c>
 80084d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80084dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80084e0:	e7c3      	b.n	800846a <rshift+0x28>
 80084e2:	4623      	mov	r3, r4
 80084e4:	e7e1      	b.n	80084aa <rshift+0x68>

080084e6 <__hexdig_fun>:
 80084e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	d802      	bhi.n	80084f4 <__hexdig_fun+0xe>
 80084ee:	3820      	subs	r0, #32
 80084f0:	b2c0      	uxtb	r0, r0
 80084f2:	4770      	bx	lr
 80084f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084f8:	2b05      	cmp	r3, #5
 80084fa:	d801      	bhi.n	8008500 <__hexdig_fun+0x1a>
 80084fc:	3847      	subs	r0, #71	; 0x47
 80084fe:	e7f7      	b.n	80084f0 <__hexdig_fun+0xa>
 8008500:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008504:	2b05      	cmp	r3, #5
 8008506:	d801      	bhi.n	800850c <__hexdig_fun+0x26>
 8008508:	3827      	subs	r0, #39	; 0x27
 800850a:	e7f1      	b.n	80084f0 <__hexdig_fun+0xa>
 800850c:	2000      	movs	r0, #0
 800850e:	4770      	bx	lr

08008510 <__gethex>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	ed2d 8b02 	vpush	{d8}
 8008518:	b089      	sub	sp, #36	; 0x24
 800851a:	ee08 0a10 	vmov	s16, r0
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	4bb4      	ldr	r3, [pc, #720]	; (80087f4 <__gethex+0x2e4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	4618      	mov	r0, r3
 8008528:	468b      	mov	fp, r1
 800852a:	4690      	mov	r8, r2
 800852c:	f7f7 fe60 	bl	80001f0 <strlen>
 8008530:	9b01      	ldr	r3, [sp, #4]
 8008532:	f8db 2000 	ldr.w	r2, [fp]
 8008536:	4403      	add	r3, r0
 8008538:	4682      	mov	sl, r0
 800853a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	1c93      	adds	r3, r2, #2
 8008542:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008546:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800854a:	32fe      	adds	r2, #254	; 0xfe
 800854c:	18d1      	adds	r1, r2, r3
 800854e:	461f      	mov	r7, r3
 8008550:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008554:	9100      	str	r1, [sp, #0]
 8008556:	2830      	cmp	r0, #48	; 0x30
 8008558:	d0f8      	beq.n	800854c <__gethex+0x3c>
 800855a:	f7ff ffc4 	bl	80084e6 <__hexdig_fun>
 800855e:	4604      	mov	r4, r0
 8008560:	2800      	cmp	r0, #0
 8008562:	d13a      	bne.n	80085da <__gethex+0xca>
 8008564:	9901      	ldr	r1, [sp, #4]
 8008566:	4652      	mov	r2, sl
 8008568:	4638      	mov	r0, r7
 800856a:	f001 fc38 	bl	8009dde <strncmp>
 800856e:	4605      	mov	r5, r0
 8008570:	2800      	cmp	r0, #0
 8008572:	d168      	bne.n	8008646 <__gethex+0x136>
 8008574:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008578:	eb07 060a 	add.w	r6, r7, sl
 800857c:	f7ff ffb3 	bl	80084e6 <__hexdig_fun>
 8008580:	2800      	cmp	r0, #0
 8008582:	d062      	beq.n	800864a <__gethex+0x13a>
 8008584:	4633      	mov	r3, r6
 8008586:	7818      	ldrb	r0, [r3, #0]
 8008588:	2830      	cmp	r0, #48	; 0x30
 800858a:	461f      	mov	r7, r3
 800858c:	f103 0301 	add.w	r3, r3, #1
 8008590:	d0f9      	beq.n	8008586 <__gethex+0x76>
 8008592:	f7ff ffa8 	bl	80084e6 <__hexdig_fun>
 8008596:	2301      	movs	r3, #1
 8008598:	fab0 f480 	clz	r4, r0
 800859c:	0964      	lsrs	r4, r4, #5
 800859e:	4635      	mov	r5, r6
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	463a      	mov	r2, r7
 80085a4:	4616      	mov	r6, r2
 80085a6:	3201      	adds	r2, #1
 80085a8:	7830      	ldrb	r0, [r6, #0]
 80085aa:	f7ff ff9c 	bl	80084e6 <__hexdig_fun>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d1f8      	bne.n	80085a4 <__gethex+0x94>
 80085b2:	9901      	ldr	r1, [sp, #4]
 80085b4:	4652      	mov	r2, sl
 80085b6:	4630      	mov	r0, r6
 80085b8:	f001 fc11 	bl	8009dde <strncmp>
 80085bc:	b980      	cbnz	r0, 80085e0 <__gethex+0xd0>
 80085be:	b94d      	cbnz	r5, 80085d4 <__gethex+0xc4>
 80085c0:	eb06 050a 	add.w	r5, r6, sl
 80085c4:	462a      	mov	r2, r5
 80085c6:	4616      	mov	r6, r2
 80085c8:	3201      	adds	r2, #1
 80085ca:	7830      	ldrb	r0, [r6, #0]
 80085cc:	f7ff ff8b 	bl	80084e6 <__hexdig_fun>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d1f8      	bne.n	80085c6 <__gethex+0xb6>
 80085d4:	1bad      	subs	r5, r5, r6
 80085d6:	00ad      	lsls	r5, r5, #2
 80085d8:	e004      	b.n	80085e4 <__gethex+0xd4>
 80085da:	2400      	movs	r4, #0
 80085dc:	4625      	mov	r5, r4
 80085de:	e7e0      	b.n	80085a2 <__gethex+0x92>
 80085e0:	2d00      	cmp	r5, #0
 80085e2:	d1f7      	bne.n	80085d4 <__gethex+0xc4>
 80085e4:	7833      	ldrb	r3, [r6, #0]
 80085e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085ea:	2b50      	cmp	r3, #80	; 0x50
 80085ec:	d13b      	bne.n	8008666 <__gethex+0x156>
 80085ee:	7873      	ldrb	r3, [r6, #1]
 80085f0:	2b2b      	cmp	r3, #43	; 0x2b
 80085f2:	d02c      	beq.n	800864e <__gethex+0x13e>
 80085f4:	2b2d      	cmp	r3, #45	; 0x2d
 80085f6:	d02e      	beq.n	8008656 <__gethex+0x146>
 80085f8:	1c71      	adds	r1, r6, #1
 80085fa:	f04f 0900 	mov.w	r9, #0
 80085fe:	7808      	ldrb	r0, [r1, #0]
 8008600:	f7ff ff71 	bl	80084e6 <__hexdig_fun>
 8008604:	1e43      	subs	r3, r0, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b18      	cmp	r3, #24
 800860a:	d82c      	bhi.n	8008666 <__gethex+0x156>
 800860c:	f1a0 0210 	sub.w	r2, r0, #16
 8008610:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008614:	f7ff ff67 	bl	80084e6 <__hexdig_fun>
 8008618:	1e43      	subs	r3, r0, #1
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b18      	cmp	r3, #24
 800861e:	d91d      	bls.n	800865c <__gethex+0x14c>
 8008620:	f1b9 0f00 	cmp.w	r9, #0
 8008624:	d000      	beq.n	8008628 <__gethex+0x118>
 8008626:	4252      	negs	r2, r2
 8008628:	4415      	add	r5, r2
 800862a:	f8cb 1000 	str.w	r1, [fp]
 800862e:	b1e4      	cbz	r4, 800866a <__gethex+0x15a>
 8008630:	9b00      	ldr	r3, [sp, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf14      	ite	ne
 8008636:	2700      	movne	r7, #0
 8008638:	2706      	moveq	r7, #6
 800863a:	4638      	mov	r0, r7
 800863c:	b009      	add	sp, #36	; 0x24
 800863e:	ecbd 8b02 	vpop	{d8}
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	463e      	mov	r6, r7
 8008648:	4625      	mov	r5, r4
 800864a:	2401      	movs	r4, #1
 800864c:	e7ca      	b.n	80085e4 <__gethex+0xd4>
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	1cb1      	adds	r1, r6, #2
 8008654:	e7d3      	b.n	80085fe <__gethex+0xee>
 8008656:	f04f 0901 	mov.w	r9, #1
 800865a:	e7fa      	b.n	8008652 <__gethex+0x142>
 800865c:	230a      	movs	r3, #10
 800865e:	fb03 0202 	mla	r2, r3, r2, r0
 8008662:	3a10      	subs	r2, #16
 8008664:	e7d4      	b.n	8008610 <__gethex+0x100>
 8008666:	4631      	mov	r1, r6
 8008668:	e7df      	b.n	800862a <__gethex+0x11a>
 800866a:	1bf3      	subs	r3, r6, r7
 800866c:	3b01      	subs	r3, #1
 800866e:	4621      	mov	r1, r4
 8008670:	2b07      	cmp	r3, #7
 8008672:	dc0b      	bgt.n	800868c <__gethex+0x17c>
 8008674:	ee18 0a10 	vmov	r0, s16
 8008678:	f000 fae6 	bl	8008c48 <_Balloc>
 800867c:	4604      	mov	r4, r0
 800867e:	b940      	cbnz	r0, 8008692 <__gethex+0x182>
 8008680:	4b5d      	ldr	r3, [pc, #372]	; (80087f8 <__gethex+0x2e8>)
 8008682:	4602      	mov	r2, r0
 8008684:	21de      	movs	r1, #222	; 0xde
 8008686:	485d      	ldr	r0, [pc, #372]	; (80087fc <__gethex+0x2ec>)
 8008688:	f001 fbdc 	bl	8009e44 <__assert_func>
 800868c:	3101      	adds	r1, #1
 800868e:	105b      	asrs	r3, r3, #1
 8008690:	e7ee      	b.n	8008670 <__gethex+0x160>
 8008692:	f100 0914 	add.w	r9, r0, #20
 8008696:	f04f 0b00 	mov.w	fp, #0
 800869a:	f1ca 0301 	rsb	r3, sl, #1
 800869e:	f8cd 9008 	str.w	r9, [sp, #8]
 80086a2:	f8cd b000 	str.w	fp, [sp]
 80086a6:	9306      	str	r3, [sp, #24]
 80086a8:	42b7      	cmp	r7, r6
 80086aa:	d340      	bcc.n	800872e <__gethex+0x21e>
 80086ac:	9802      	ldr	r0, [sp, #8]
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	f840 3b04 	str.w	r3, [r0], #4
 80086b4:	eba0 0009 	sub.w	r0, r0, r9
 80086b8:	1080      	asrs	r0, r0, #2
 80086ba:	0146      	lsls	r6, r0, #5
 80086bc:	6120      	str	r0, [r4, #16]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fbb4 	bl	8008e2c <__hi0bits>
 80086c4:	1a30      	subs	r0, r6, r0
 80086c6:	f8d8 6000 	ldr.w	r6, [r8]
 80086ca:	42b0      	cmp	r0, r6
 80086cc:	dd63      	ble.n	8008796 <__gethex+0x286>
 80086ce:	1b87      	subs	r7, r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 ff58 	bl	8009588 <__any_on>
 80086d8:	4682      	mov	sl, r0
 80086da:	b1a8      	cbz	r0, 8008708 <__gethex+0x1f8>
 80086dc:	1e7b      	subs	r3, r7, #1
 80086de:	1159      	asrs	r1, r3, #5
 80086e0:	f003 021f 	and.w	r2, r3, #31
 80086e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086e8:	f04f 0a01 	mov.w	sl, #1
 80086ec:	fa0a f202 	lsl.w	r2, sl, r2
 80086f0:	420a      	tst	r2, r1
 80086f2:	d009      	beq.n	8008708 <__gethex+0x1f8>
 80086f4:	4553      	cmp	r3, sl
 80086f6:	dd05      	ble.n	8008704 <__gethex+0x1f4>
 80086f8:	1eb9      	subs	r1, r7, #2
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 ff44 	bl	8009588 <__any_on>
 8008700:	2800      	cmp	r0, #0
 8008702:	d145      	bne.n	8008790 <__gethex+0x280>
 8008704:	f04f 0a02 	mov.w	sl, #2
 8008708:	4639      	mov	r1, r7
 800870a:	4620      	mov	r0, r4
 800870c:	f7ff fe99 	bl	8008442 <rshift>
 8008710:	443d      	add	r5, r7
 8008712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008716:	42ab      	cmp	r3, r5
 8008718:	da4c      	bge.n	80087b4 <__gethex+0x2a4>
 800871a:	ee18 0a10 	vmov	r0, s16
 800871e:	4621      	mov	r1, r4
 8008720:	f000 fad2 	bl	8008cc8 <_Bfree>
 8008724:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008726:	2300      	movs	r3, #0
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	27a3      	movs	r7, #163	; 0xa3
 800872c:	e785      	b.n	800863a <__gethex+0x12a>
 800872e:	1e73      	subs	r3, r6, #1
 8008730:	9a05      	ldr	r2, [sp, #20]
 8008732:	9303      	str	r3, [sp, #12]
 8008734:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008738:	4293      	cmp	r3, r2
 800873a:	d019      	beq.n	8008770 <__gethex+0x260>
 800873c:	f1bb 0f20 	cmp.w	fp, #32
 8008740:	d107      	bne.n	8008752 <__gethex+0x242>
 8008742:	9b02      	ldr	r3, [sp, #8]
 8008744:	9a00      	ldr	r2, [sp, #0]
 8008746:	f843 2b04 	str.w	r2, [r3], #4
 800874a:	9302      	str	r3, [sp, #8]
 800874c:	2300      	movs	r3, #0
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	469b      	mov	fp, r3
 8008752:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008756:	f7ff fec6 	bl	80084e6 <__hexdig_fun>
 800875a:	9b00      	ldr	r3, [sp, #0]
 800875c:	f000 000f 	and.w	r0, r0, #15
 8008760:	fa00 f00b 	lsl.w	r0, r0, fp
 8008764:	4303      	orrs	r3, r0
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	f10b 0b04 	add.w	fp, fp, #4
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	e00d      	b.n	800878c <__gethex+0x27c>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	9a06      	ldr	r2, [sp, #24]
 8008774:	4413      	add	r3, r2
 8008776:	42bb      	cmp	r3, r7
 8008778:	d3e0      	bcc.n	800873c <__gethex+0x22c>
 800877a:	4618      	mov	r0, r3
 800877c:	9901      	ldr	r1, [sp, #4]
 800877e:	9307      	str	r3, [sp, #28]
 8008780:	4652      	mov	r2, sl
 8008782:	f001 fb2c 	bl	8009dde <strncmp>
 8008786:	9b07      	ldr	r3, [sp, #28]
 8008788:	2800      	cmp	r0, #0
 800878a:	d1d7      	bne.n	800873c <__gethex+0x22c>
 800878c:	461e      	mov	r6, r3
 800878e:	e78b      	b.n	80086a8 <__gethex+0x198>
 8008790:	f04f 0a03 	mov.w	sl, #3
 8008794:	e7b8      	b.n	8008708 <__gethex+0x1f8>
 8008796:	da0a      	bge.n	80087ae <__gethex+0x29e>
 8008798:	1a37      	subs	r7, r6, r0
 800879a:	4621      	mov	r1, r4
 800879c:	ee18 0a10 	vmov	r0, s16
 80087a0:	463a      	mov	r2, r7
 80087a2:	f000 fcad 	bl	8009100 <__lshift>
 80087a6:	1bed      	subs	r5, r5, r7
 80087a8:	4604      	mov	r4, r0
 80087aa:	f100 0914 	add.w	r9, r0, #20
 80087ae:	f04f 0a00 	mov.w	sl, #0
 80087b2:	e7ae      	b.n	8008712 <__gethex+0x202>
 80087b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087b8:	42a8      	cmp	r0, r5
 80087ba:	dd72      	ble.n	80088a2 <__gethex+0x392>
 80087bc:	1b45      	subs	r5, r0, r5
 80087be:	42ae      	cmp	r6, r5
 80087c0:	dc36      	bgt.n	8008830 <__gethex+0x320>
 80087c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d02a      	beq.n	8008820 <__gethex+0x310>
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d02c      	beq.n	8008828 <__gethex+0x318>
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d11c      	bne.n	800880c <__gethex+0x2fc>
 80087d2:	42ae      	cmp	r6, r5
 80087d4:	d11a      	bne.n	800880c <__gethex+0x2fc>
 80087d6:	2e01      	cmp	r6, #1
 80087d8:	d112      	bne.n	8008800 <__gethex+0x2f0>
 80087da:	9a04      	ldr	r2, [sp, #16]
 80087dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	2301      	movs	r3, #1
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	f8c9 3000 	str.w	r3, [r9]
 80087ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087ec:	2762      	movs	r7, #98	; 0x62
 80087ee:	601c      	str	r4, [r3, #0]
 80087f0:	e723      	b.n	800863a <__gethex+0x12a>
 80087f2:	bf00      	nop
 80087f4:	0800a64c 	.word	0x0800a64c
 80087f8:	0800a570 	.word	0x0800a570
 80087fc:	0800a5e4 	.word	0x0800a5e4
 8008800:	1e71      	subs	r1, r6, #1
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fec0 	bl	8009588 <__any_on>
 8008808:	2800      	cmp	r0, #0
 800880a:	d1e6      	bne.n	80087da <__gethex+0x2ca>
 800880c:	ee18 0a10 	vmov	r0, s16
 8008810:	4621      	mov	r1, r4
 8008812:	f000 fa59 	bl	8008cc8 <_Bfree>
 8008816:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008818:	2300      	movs	r3, #0
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	2750      	movs	r7, #80	; 0x50
 800881e:	e70c      	b.n	800863a <__gethex+0x12a>
 8008820:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f2      	bne.n	800880c <__gethex+0x2fc>
 8008826:	e7d8      	b.n	80087da <__gethex+0x2ca>
 8008828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1d5      	bne.n	80087da <__gethex+0x2ca>
 800882e:	e7ed      	b.n	800880c <__gethex+0x2fc>
 8008830:	1e6f      	subs	r7, r5, #1
 8008832:	f1ba 0f00 	cmp.w	sl, #0
 8008836:	d131      	bne.n	800889c <__gethex+0x38c>
 8008838:	b127      	cbz	r7, 8008844 <__gethex+0x334>
 800883a:	4639      	mov	r1, r7
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fea3 	bl	8009588 <__any_on>
 8008842:	4682      	mov	sl, r0
 8008844:	117b      	asrs	r3, r7, #5
 8008846:	2101      	movs	r1, #1
 8008848:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800884c:	f007 071f 	and.w	r7, r7, #31
 8008850:	fa01 f707 	lsl.w	r7, r1, r7
 8008854:	421f      	tst	r7, r3
 8008856:	4629      	mov	r1, r5
 8008858:	4620      	mov	r0, r4
 800885a:	bf18      	it	ne
 800885c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008860:	1b76      	subs	r6, r6, r5
 8008862:	f7ff fdee 	bl	8008442 <rshift>
 8008866:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800886a:	2702      	movs	r7, #2
 800886c:	f1ba 0f00 	cmp.w	sl, #0
 8008870:	d048      	beq.n	8008904 <__gethex+0x3f4>
 8008872:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d015      	beq.n	80088a6 <__gethex+0x396>
 800887a:	2b03      	cmp	r3, #3
 800887c:	d017      	beq.n	80088ae <__gethex+0x39e>
 800887e:	2b01      	cmp	r3, #1
 8008880:	d109      	bne.n	8008896 <__gethex+0x386>
 8008882:	f01a 0f02 	tst.w	sl, #2
 8008886:	d006      	beq.n	8008896 <__gethex+0x386>
 8008888:	f8d9 0000 	ldr.w	r0, [r9]
 800888c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008890:	f01a 0f01 	tst.w	sl, #1
 8008894:	d10e      	bne.n	80088b4 <__gethex+0x3a4>
 8008896:	f047 0710 	orr.w	r7, r7, #16
 800889a:	e033      	b.n	8008904 <__gethex+0x3f4>
 800889c:	f04f 0a01 	mov.w	sl, #1
 80088a0:	e7d0      	b.n	8008844 <__gethex+0x334>
 80088a2:	2701      	movs	r7, #1
 80088a4:	e7e2      	b.n	800886c <__gethex+0x35c>
 80088a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088a8:	f1c3 0301 	rsb	r3, r3, #1
 80088ac:	9315      	str	r3, [sp, #84]	; 0x54
 80088ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0f0      	beq.n	8008896 <__gethex+0x386>
 80088b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088b8:	f104 0314 	add.w	r3, r4, #20
 80088bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088c4:	f04f 0c00 	mov.w	ip, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088d2:	d01c      	beq.n	800890e <__gethex+0x3fe>
 80088d4:	3201      	adds	r2, #1
 80088d6:	6002      	str	r2, [r0, #0]
 80088d8:	2f02      	cmp	r7, #2
 80088da:	f104 0314 	add.w	r3, r4, #20
 80088de:	d13f      	bne.n	8008960 <__gethex+0x450>
 80088e0:	f8d8 2000 	ldr.w	r2, [r8]
 80088e4:	3a01      	subs	r2, #1
 80088e6:	42b2      	cmp	r2, r6
 80088e8:	d10a      	bne.n	8008900 <__gethex+0x3f0>
 80088ea:	1171      	asrs	r1, r6, #5
 80088ec:	2201      	movs	r2, #1
 80088ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088f2:	f006 061f 	and.w	r6, r6, #31
 80088f6:	fa02 f606 	lsl.w	r6, r2, r6
 80088fa:	421e      	tst	r6, r3
 80088fc:	bf18      	it	ne
 80088fe:	4617      	movne	r7, r2
 8008900:	f047 0720 	orr.w	r7, r7, #32
 8008904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008906:	601c      	str	r4, [r3, #0]
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	601d      	str	r5, [r3, #0]
 800890c:	e695      	b.n	800863a <__gethex+0x12a>
 800890e:	4299      	cmp	r1, r3
 8008910:	f843 cc04 	str.w	ip, [r3, #-4]
 8008914:	d8d8      	bhi.n	80088c8 <__gethex+0x3b8>
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	459b      	cmp	fp, r3
 800891a:	db19      	blt.n	8008950 <__gethex+0x440>
 800891c:	6861      	ldr	r1, [r4, #4]
 800891e:	ee18 0a10 	vmov	r0, s16
 8008922:	3101      	adds	r1, #1
 8008924:	f000 f990 	bl	8008c48 <_Balloc>
 8008928:	4681      	mov	r9, r0
 800892a:	b918      	cbnz	r0, 8008934 <__gethex+0x424>
 800892c:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <__gethex+0x488>)
 800892e:	4602      	mov	r2, r0
 8008930:	2184      	movs	r1, #132	; 0x84
 8008932:	e6a8      	b.n	8008686 <__gethex+0x176>
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	3202      	adds	r2, #2
 8008938:	f104 010c 	add.w	r1, r4, #12
 800893c:	0092      	lsls	r2, r2, #2
 800893e:	300c      	adds	r0, #12
 8008940:	f000 f974 	bl	8008c2c <memcpy>
 8008944:	4621      	mov	r1, r4
 8008946:	ee18 0a10 	vmov	r0, s16
 800894a:	f000 f9bd 	bl	8008cc8 <_Bfree>
 800894e:	464c      	mov	r4, r9
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008958:	6122      	str	r2, [r4, #16]
 800895a:	2201      	movs	r2, #1
 800895c:	615a      	str	r2, [r3, #20]
 800895e:	e7bb      	b.n	80088d8 <__gethex+0x3c8>
 8008960:	6922      	ldr	r2, [r4, #16]
 8008962:	455a      	cmp	r2, fp
 8008964:	dd0b      	ble.n	800897e <__gethex+0x46e>
 8008966:	2101      	movs	r1, #1
 8008968:	4620      	mov	r0, r4
 800896a:	f7ff fd6a 	bl	8008442 <rshift>
 800896e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008972:	3501      	adds	r5, #1
 8008974:	42ab      	cmp	r3, r5
 8008976:	f6ff aed0 	blt.w	800871a <__gethex+0x20a>
 800897a:	2701      	movs	r7, #1
 800897c:	e7c0      	b.n	8008900 <__gethex+0x3f0>
 800897e:	f016 061f 	ands.w	r6, r6, #31
 8008982:	d0fa      	beq.n	800897a <__gethex+0x46a>
 8008984:	4453      	add	r3, sl
 8008986:	f1c6 0620 	rsb	r6, r6, #32
 800898a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800898e:	f000 fa4d 	bl	8008e2c <__hi0bits>
 8008992:	42b0      	cmp	r0, r6
 8008994:	dbe7      	blt.n	8008966 <__gethex+0x456>
 8008996:	e7f0      	b.n	800897a <__gethex+0x46a>
 8008998:	0800a570 	.word	0x0800a570

0800899c <L_shift>:
 800899c:	f1c2 0208 	rsb	r2, r2, #8
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	b570      	push	{r4, r5, r6, lr}
 80089a4:	f1c2 0620 	rsb	r6, r2, #32
 80089a8:	6843      	ldr	r3, [r0, #4]
 80089aa:	6804      	ldr	r4, [r0, #0]
 80089ac:	fa03 f506 	lsl.w	r5, r3, r6
 80089b0:	432c      	orrs	r4, r5
 80089b2:	40d3      	lsrs	r3, r2
 80089b4:	6004      	str	r4, [r0, #0]
 80089b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80089ba:	4288      	cmp	r0, r1
 80089bc:	d3f4      	bcc.n	80089a8 <L_shift+0xc>
 80089be:	bd70      	pop	{r4, r5, r6, pc}

080089c0 <__match>:
 80089c0:	b530      	push	{r4, r5, lr}
 80089c2:	6803      	ldr	r3, [r0, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ca:	b914      	cbnz	r4, 80089d2 <__match+0x12>
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	2001      	movs	r0, #1
 80089d0:	bd30      	pop	{r4, r5, pc}
 80089d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089da:	2d19      	cmp	r5, #25
 80089dc:	bf98      	it	ls
 80089de:	3220      	addls	r2, #32
 80089e0:	42a2      	cmp	r2, r4
 80089e2:	d0f0      	beq.n	80089c6 <__match+0x6>
 80089e4:	2000      	movs	r0, #0
 80089e6:	e7f3      	b.n	80089d0 <__match+0x10>

080089e8 <__hexnan>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	680b      	ldr	r3, [r1, #0]
 80089ee:	115e      	asrs	r6, r3, #5
 80089f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089f4:	f013 031f 	ands.w	r3, r3, #31
 80089f8:	b087      	sub	sp, #28
 80089fa:	bf18      	it	ne
 80089fc:	3604      	addne	r6, #4
 80089fe:	2500      	movs	r5, #0
 8008a00:	1f37      	subs	r7, r6, #4
 8008a02:	4690      	mov	r8, r2
 8008a04:	6802      	ldr	r2, [r0, #0]
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	4682      	mov	sl, r0
 8008a0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a0e:	46b9      	mov	r9, r7
 8008a10:	463c      	mov	r4, r7
 8008a12:	9502      	str	r5, [sp, #8]
 8008a14:	46ab      	mov	fp, r5
 8008a16:	7851      	ldrb	r1, [r2, #1]
 8008a18:	1c53      	adds	r3, r2, #1
 8008a1a:	9303      	str	r3, [sp, #12]
 8008a1c:	b341      	cbz	r1, 8008a70 <__hexnan+0x88>
 8008a1e:	4608      	mov	r0, r1
 8008a20:	9205      	str	r2, [sp, #20]
 8008a22:	9104      	str	r1, [sp, #16]
 8008a24:	f7ff fd5f 	bl	80084e6 <__hexdig_fun>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d14f      	bne.n	8008acc <__hexnan+0xe4>
 8008a2c:	9904      	ldr	r1, [sp, #16]
 8008a2e:	9a05      	ldr	r2, [sp, #20]
 8008a30:	2920      	cmp	r1, #32
 8008a32:	d818      	bhi.n	8008a66 <__hexnan+0x7e>
 8008a34:	9b02      	ldr	r3, [sp, #8]
 8008a36:	459b      	cmp	fp, r3
 8008a38:	dd13      	ble.n	8008a62 <__hexnan+0x7a>
 8008a3a:	454c      	cmp	r4, r9
 8008a3c:	d206      	bcs.n	8008a4c <__hexnan+0x64>
 8008a3e:	2d07      	cmp	r5, #7
 8008a40:	dc04      	bgt.n	8008a4c <__hexnan+0x64>
 8008a42:	462a      	mov	r2, r5
 8008a44:	4649      	mov	r1, r9
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7ff ffa8 	bl	800899c <L_shift>
 8008a4c:	4544      	cmp	r4, r8
 8008a4e:	d950      	bls.n	8008af2 <__hexnan+0x10a>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f1a4 0904 	sub.w	r9, r4, #4
 8008a56:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a5e:	464c      	mov	r4, r9
 8008a60:	461d      	mov	r5, r3
 8008a62:	9a03      	ldr	r2, [sp, #12]
 8008a64:	e7d7      	b.n	8008a16 <__hexnan+0x2e>
 8008a66:	2929      	cmp	r1, #41	; 0x29
 8008a68:	d156      	bne.n	8008b18 <__hexnan+0x130>
 8008a6a:	3202      	adds	r2, #2
 8008a6c:	f8ca 2000 	str.w	r2, [sl]
 8008a70:	f1bb 0f00 	cmp.w	fp, #0
 8008a74:	d050      	beq.n	8008b18 <__hexnan+0x130>
 8008a76:	454c      	cmp	r4, r9
 8008a78:	d206      	bcs.n	8008a88 <__hexnan+0xa0>
 8008a7a:	2d07      	cmp	r5, #7
 8008a7c:	dc04      	bgt.n	8008a88 <__hexnan+0xa0>
 8008a7e:	462a      	mov	r2, r5
 8008a80:	4649      	mov	r1, r9
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff ff8a 	bl	800899c <L_shift>
 8008a88:	4544      	cmp	r4, r8
 8008a8a:	d934      	bls.n	8008af6 <__hexnan+0x10e>
 8008a8c:	f1a8 0204 	sub.w	r2, r8, #4
 8008a90:	4623      	mov	r3, r4
 8008a92:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a96:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a9a:	429f      	cmp	r7, r3
 8008a9c:	d2f9      	bcs.n	8008a92 <__hexnan+0xaa>
 8008a9e:	1b3b      	subs	r3, r7, r4
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	3401      	adds	r4, #1
 8008aa8:	3e03      	subs	r6, #3
 8008aaa:	42b4      	cmp	r4, r6
 8008aac:	bf88      	it	hi
 8008aae:	2304      	movhi	r3, #4
 8008ab0:	4443      	add	r3, r8
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f843 2b04 	str.w	r2, [r3], #4
 8008ab8:	429f      	cmp	r7, r3
 8008aba:	d2fb      	bcs.n	8008ab4 <__hexnan+0xcc>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	b91b      	cbnz	r3, 8008ac8 <__hexnan+0xe0>
 8008ac0:	4547      	cmp	r7, r8
 8008ac2:	d127      	bne.n	8008b14 <__hexnan+0x12c>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	2005      	movs	r0, #5
 8008aca:	e026      	b.n	8008b1a <__hexnan+0x132>
 8008acc:	3501      	adds	r5, #1
 8008ace:	2d08      	cmp	r5, #8
 8008ad0:	f10b 0b01 	add.w	fp, fp, #1
 8008ad4:	dd06      	ble.n	8008ae4 <__hexnan+0xfc>
 8008ad6:	4544      	cmp	r4, r8
 8008ad8:	d9c3      	bls.n	8008a62 <__hexnan+0x7a>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ae0:	2501      	movs	r5, #1
 8008ae2:	3c04      	subs	r4, #4
 8008ae4:	6822      	ldr	r2, [r4, #0]
 8008ae6:	f000 000f 	and.w	r0, r0, #15
 8008aea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	e7b7      	b.n	8008a62 <__hexnan+0x7a>
 8008af2:	2508      	movs	r5, #8
 8008af4:	e7b5      	b.n	8008a62 <__hexnan+0x7a>
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0df      	beq.n	8008abc <__hexnan+0xd4>
 8008afc:	f04f 32ff 	mov.w	r2, #4294967295
 8008b00:	f1c3 0320 	rsb	r3, r3, #32
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
 8008b08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b0c:	401a      	ands	r2, r3
 8008b0e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b12:	e7d3      	b.n	8008abc <__hexnan+0xd4>
 8008b14:	3f04      	subs	r7, #4
 8008b16:	e7d1      	b.n	8008abc <__hexnan+0xd4>
 8008b18:	2004      	movs	r0, #4
 8008b1a:	b007      	add	sp, #28
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b20 <_localeconv_r>:
 8008b20:	4800      	ldr	r0, [pc, #0]	; (8008b24 <_localeconv_r+0x4>)
 8008b22:	4770      	bx	lr
 8008b24:	20000164 	.word	0x20000164

08008b28 <__retarget_lock_init_recursive>:
 8008b28:	4770      	bx	lr

08008b2a <__retarget_lock_acquire_recursive>:
 8008b2a:	4770      	bx	lr

08008b2c <__retarget_lock_release_recursive>:
 8008b2c:	4770      	bx	lr

08008b2e <__swhatbuf_r>:
 8008b2e:	b570      	push	{r4, r5, r6, lr}
 8008b30:	460e      	mov	r6, r1
 8008b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b36:	2900      	cmp	r1, #0
 8008b38:	b096      	sub	sp, #88	; 0x58
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	461d      	mov	r5, r3
 8008b3e:	da08      	bge.n	8008b52 <__swhatbuf_r+0x24>
 8008b40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	602a      	str	r2, [r5, #0]
 8008b48:	061a      	lsls	r2, r3, #24
 8008b4a:	d410      	bmi.n	8008b6e <__swhatbuf_r+0x40>
 8008b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b50:	e00e      	b.n	8008b70 <__swhatbuf_r+0x42>
 8008b52:	466a      	mov	r2, sp
 8008b54:	f001 f9b6 	bl	8009ec4 <_fstat_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	dbf1      	blt.n	8008b40 <__swhatbuf_r+0x12>
 8008b5c:	9a01      	ldr	r2, [sp, #4]
 8008b5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b66:	425a      	negs	r2, r3
 8008b68:	415a      	adcs	r2, r3
 8008b6a:	602a      	str	r2, [r5, #0]
 8008b6c:	e7ee      	b.n	8008b4c <__swhatbuf_r+0x1e>
 8008b6e:	2340      	movs	r3, #64	; 0x40
 8008b70:	2000      	movs	r0, #0
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	b016      	add	sp, #88	; 0x58
 8008b76:	bd70      	pop	{r4, r5, r6, pc}

08008b78 <__smakebuf_r>:
 8008b78:	898b      	ldrh	r3, [r1, #12]
 8008b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b7c:	079d      	lsls	r5, r3, #30
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	d507      	bpl.n	8008b94 <__smakebuf_r+0x1c>
 8008b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	6123      	str	r3, [r4, #16]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	6163      	str	r3, [r4, #20]
 8008b90:	b002      	add	sp, #8
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	ab01      	add	r3, sp, #4
 8008b96:	466a      	mov	r2, sp
 8008b98:	f7ff ffc9 	bl	8008b2e <__swhatbuf_r>
 8008b9c:	9900      	ldr	r1, [sp, #0]
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f000 fd95 	bl	80096d0 <_malloc_r>
 8008ba6:	b948      	cbnz	r0, 8008bbc <__smakebuf_r+0x44>
 8008ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bac:	059a      	lsls	r2, r3, #22
 8008bae:	d4ef      	bmi.n	8008b90 <__smakebuf_r+0x18>
 8008bb0:	f023 0303 	bic.w	r3, r3, #3
 8008bb4:	f043 0302 	orr.w	r3, r3, #2
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	e7e3      	b.n	8008b84 <__smakebuf_r+0xc>
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <__smakebuf_r+0x7c>)
 8008bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	6020      	str	r0, [r4, #0]
 8008bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	9b00      	ldr	r3, [sp, #0]
 8008bcc:	6163      	str	r3, [r4, #20]
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	6120      	str	r0, [r4, #16]
 8008bd2:	b15b      	cbz	r3, 8008bec <__smakebuf_r+0x74>
 8008bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f001 f985 	bl	8009ee8 <_isatty_r>
 8008bde:	b128      	cbz	r0, 8008bec <__smakebuf_r+0x74>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	f043 0301 	orr.w	r3, r3, #1
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	89a0      	ldrh	r0, [r4, #12]
 8008bee:	4305      	orrs	r5, r0
 8008bf0:	81a5      	strh	r5, [r4, #12]
 8008bf2:	e7cd      	b.n	8008b90 <__smakebuf_r+0x18>
 8008bf4:	080082a1 	.word	0x080082a1

08008bf8 <malloc>:
 8008bf8:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <malloc+0xc>)
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	f000 bd67 	b.w	80096d0 <_malloc_r>
 8008c02:	bf00      	nop
 8008c04:	2000000c 	.word	0x2000000c

08008c08 <__ascii_mbtowc>:
 8008c08:	b082      	sub	sp, #8
 8008c0a:	b901      	cbnz	r1, 8008c0e <__ascii_mbtowc+0x6>
 8008c0c:	a901      	add	r1, sp, #4
 8008c0e:	b142      	cbz	r2, 8008c22 <__ascii_mbtowc+0x1a>
 8008c10:	b14b      	cbz	r3, 8008c26 <__ascii_mbtowc+0x1e>
 8008c12:	7813      	ldrb	r3, [r2, #0]
 8008c14:	600b      	str	r3, [r1, #0]
 8008c16:	7812      	ldrb	r2, [r2, #0]
 8008c18:	1e10      	subs	r0, r2, #0
 8008c1a:	bf18      	it	ne
 8008c1c:	2001      	movne	r0, #1
 8008c1e:	b002      	add	sp, #8
 8008c20:	4770      	bx	lr
 8008c22:	4610      	mov	r0, r2
 8008c24:	e7fb      	b.n	8008c1e <__ascii_mbtowc+0x16>
 8008c26:	f06f 0001 	mvn.w	r0, #1
 8008c2a:	e7f8      	b.n	8008c1e <__ascii_mbtowc+0x16>

08008c2c <memcpy>:
 8008c2c:	440a      	add	r2, r1
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c34:	d100      	bne.n	8008c38 <memcpy+0xc>
 8008c36:	4770      	bx	lr
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c42:	4291      	cmp	r1, r2
 8008c44:	d1f9      	bne.n	8008c3a <memcpy+0xe>
 8008c46:	bd10      	pop	{r4, pc}

08008c48 <_Balloc>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	b976      	cbnz	r6, 8008c70 <_Balloc+0x28>
 8008c52:	2010      	movs	r0, #16
 8008c54:	f7ff ffd0 	bl	8008bf8 <malloc>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c5c:	b920      	cbnz	r0, 8008c68 <_Balloc+0x20>
 8008c5e:	4b18      	ldr	r3, [pc, #96]	; (8008cc0 <_Balloc+0x78>)
 8008c60:	4818      	ldr	r0, [pc, #96]	; (8008cc4 <_Balloc+0x7c>)
 8008c62:	2166      	movs	r1, #102	; 0x66
 8008c64:	f001 f8ee 	bl	8009e44 <__assert_func>
 8008c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c6c:	6006      	str	r6, [r0, #0]
 8008c6e:	60c6      	str	r6, [r0, #12]
 8008c70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c72:	68f3      	ldr	r3, [r6, #12]
 8008c74:	b183      	cbz	r3, 8008c98 <_Balloc+0x50>
 8008c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c7e:	b9b8      	cbnz	r0, 8008cb0 <_Balloc+0x68>
 8008c80:	2101      	movs	r1, #1
 8008c82:	fa01 f605 	lsl.w	r6, r1, r5
 8008c86:	1d72      	adds	r2, r6, #5
 8008c88:	0092      	lsls	r2, r2, #2
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 fc9d 	bl	80095ca <_calloc_r>
 8008c90:	b160      	cbz	r0, 8008cac <_Balloc+0x64>
 8008c92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c96:	e00e      	b.n	8008cb6 <_Balloc+0x6e>
 8008c98:	2221      	movs	r2, #33	; 0x21
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fc94 	bl	80095ca <_calloc_r>
 8008ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca4:	60f0      	str	r0, [r6, #12]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e4      	bne.n	8008c76 <_Balloc+0x2e>
 8008cac:	2000      	movs	r0, #0
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	6802      	ldr	r2, [r0, #0]
 8008cb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cbc:	e7f7      	b.n	8008cae <_Balloc+0x66>
 8008cbe:	bf00      	nop
 8008cc0:	0800a4fe 	.word	0x0800a4fe
 8008cc4:	0800a660 	.word	0x0800a660

08008cc8 <_Bfree>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ccc:	4605      	mov	r5, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	b976      	cbnz	r6, 8008cf0 <_Bfree+0x28>
 8008cd2:	2010      	movs	r0, #16
 8008cd4:	f7ff ff90 	bl	8008bf8 <malloc>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	6268      	str	r0, [r5, #36]	; 0x24
 8008cdc:	b920      	cbnz	r0, 8008ce8 <_Bfree+0x20>
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <_Bfree+0x3c>)
 8008ce0:	4809      	ldr	r0, [pc, #36]	; (8008d08 <_Bfree+0x40>)
 8008ce2:	218a      	movs	r1, #138	; 0x8a
 8008ce4:	f001 f8ae 	bl	8009e44 <__assert_func>
 8008ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cec:	6006      	str	r6, [r0, #0]
 8008cee:	60c6      	str	r6, [r0, #12]
 8008cf0:	b13c      	cbz	r4, 8008d02 <_Bfree+0x3a>
 8008cf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cf4:	6862      	ldr	r2, [r4, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cfc:	6021      	str	r1, [r4, #0]
 8008cfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	0800a4fe 	.word	0x0800a4fe
 8008d08:	0800a660 	.word	0x0800a660

08008d0c <__multadd>:
 8008d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	690d      	ldr	r5, [r1, #16]
 8008d12:	4607      	mov	r7, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	461e      	mov	r6, r3
 8008d18:	f101 0c14 	add.w	ip, r1, #20
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d22:	b299      	uxth	r1, r3
 8008d24:	fb02 6101 	mla	r1, r2, r1, r6
 8008d28:	0c1e      	lsrs	r6, r3, #16
 8008d2a:	0c0b      	lsrs	r3, r1, #16
 8008d2c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d30:	b289      	uxth	r1, r1
 8008d32:	3001      	adds	r0, #1
 8008d34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d38:	4285      	cmp	r5, r0
 8008d3a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d42:	dcec      	bgt.n	8008d1e <__multadd+0x12>
 8008d44:	b30e      	cbz	r6, 8008d8a <__multadd+0x7e>
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	dc19      	bgt.n	8008d80 <__multadd+0x74>
 8008d4c:	6861      	ldr	r1, [r4, #4]
 8008d4e:	4638      	mov	r0, r7
 8008d50:	3101      	adds	r1, #1
 8008d52:	f7ff ff79 	bl	8008c48 <_Balloc>
 8008d56:	4680      	mov	r8, r0
 8008d58:	b928      	cbnz	r0, 8008d66 <__multadd+0x5a>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <__multadd+0x84>)
 8008d5e:	480d      	ldr	r0, [pc, #52]	; (8008d94 <__multadd+0x88>)
 8008d60:	21b5      	movs	r1, #181	; 0xb5
 8008d62:	f001 f86f 	bl	8009e44 <__assert_func>
 8008d66:	6922      	ldr	r2, [r4, #16]
 8008d68:	3202      	adds	r2, #2
 8008d6a:	f104 010c 	add.w	r1, r4, #12
 8008d6e:	0092      	lsls	r2, r2, #2
 8008d70:	300c      	adds	r0, #12
 8008d72:	f7ff ff5b 	bl	8008c2c <memcpy>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff ffa5 	bl	8008cc8 <_Bfree>
 8008d7e:	4644      	mov	r4, r8
 8008d80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d84:	3501      	adds	r5, #1
 8008d86:	615e      	str	r6, [r3, #20]
 8008d88:	6125      	str	r5, [r4, #16]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	0800a570 	.word	0x0800a570
 8008d94:	0800a660 	.word	0x0800a660

08008d98 <__s2b>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	4615      	mov	r5, r2
 8008da0:	461f      	mov	r7, r3
 8008da2:	2209      	movs	r2, #9
 8008da4:	3308      	adds	r3, #8
 8008da6:	4606      	mov	r6, r0
 8008da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dac:	2100      	movs	r1, #0
 8008dae:	2201      	movs	r2, #1
 8008db0:	429a      	cmp	r2, r3
 8008db2:	db09      	blt.n	8008dc8 <__s2b+0x30>
 8008db4:	4630      	mov	r0, r6
 8008db6:	f7ff ff47 	bl	8008c48 <_Balloc>
 8008dba:	b940      	cbnz	r0, 8008dce <__s2b+0x36>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <__s2b+0x8c>)
 8008dc0:	4819      	ldr	r0, [pc, #100]	; (8008e28 <__s2b+0x90>)
 8008dc2:	21ce      	movs	r1, #206	; 0xce
 8008dc4:	f001 f83e 	bl	8009e44 <__assert_func>
 8008dc8:	0052      	lsls	r2, r2, #1
 8008dca:	3101      	adds	r1, #1
 8008dcc:	e7f0      	b.n	8008db0 <__s2b+0x18>
 8008dce:	9b08      	ldr	r3, [sp, #32]
 8008dd0:	6143      	str	r3, [r0, #20]
 8008dd2:	2d09      	cmp	r5, #9
 8008dd4:	f04f 0301 	mov.w	r3, #1
 8008dd8:	6103      	str	r3, [r0, #16]
 8008dda:	dd16      	ble.n	8008e0a <__s2b+0x72>
 8008ddc:	f104 0909 	add.w	r9, r4, #9
 8008de0:	46c8      	mov	r8, r9
 8008de2:	442c      	add	r4, r5
 8008de4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008de8:	4601      	mov	r1, r0
 8008dea:	3b30      	subs	r3, #48	; 0x30
 8008dec:	220a      	movs	r2, #10
 8008dee:	4630      	mov	r0, r6
 8008df0:	f7ff ff8c 	bl	8008d0c <__multadd>
 8008df4:	45a0      	cmp	r8, r4
 8008df6:	d1f5      	bne.n	8008de4 <__s2b+0x4c>
 8008df8:	f1a5 0408 	sub.w	r4, r5, #8
 8008dfc:	444c      	add	r4, r9
 8008dfe:	1b2d      	subs	r5, r5, r4
 8008e00:	1963      	adds	r3, r4, r5
 8008e02:	42bb      	cmp	r3, r7
 8008e04:	db04      	blt.n	8008e10 <__s2b+0x78>
 8008e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0a:	340a      	adds	r4, #10
 8008e0c:	2509      	movs	r5, #9
 8008e0e:	e7f6      	b.n	8008dfe <__s2b+0x66>
 8008e10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e14:	4601      	mov	r1, r0
 8008e16:	3b30      	subs	r3, #48	; 0x30
 8008e18:	220a      	movs	r2, #10
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7ff ff76 	bl	8008d0c <__multadd>
 8008e20:	e7ee      	b.n	8008e00 <__s2b+0x68>
 8008e22:	bf00      	nop
 8008e24:	0800a570 	.word	0x0800a570
 8008e28:	0800a660 	.word	0x0800a660

08008e2c <__hi0bits>:
 8008e2c:	0c03      	lsrs	r3, r0, #16
 8008e2e:	041b      	lsls	r3, r3, #16
 8008e30:	b9d3      	cbnz	r3, 8008e68 <__hi0bits+0x3c>
 8008e32:	0400      	lsls	r0, r0, #16
 8008e34:	2310      	movs	r3, #16
 8008e36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e3a:	bf04      	itt	eq
 8008e3c:	0200      	lsleq	r0, r0, #8
 8008e3e:	3308      	addeq	r3, #8
 8008e40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e44:	bf04      	itt	eq
 8008e46:	0100      	lsleq	r0, r0, #4
 8008e48:	3304      	addeq	r3, #4
 8008e4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e4e:	bf04      	itt	eq
 8008e50:	0080      	lsleq	r0, r0, #2
 8008e52:	3302      	addeq	r3, #2
 8008e54:	2800      	cmp	r0, #0
 8008e56:	db05      	blt.n	8008e64 <__hi0bits+0x38>
 8008e58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e5c:	f103 0301 	add.w	r3, r3, #1
 8008e60:	bf08      	it	eq
 8008e62:	2320      	moveq	r3, #32
 8008e64:	4618      	mov	r0, r3
 8008e66:	4770      	bx	lr
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e7e4      	b.n	8008e36 <__hi0bits+0xa>

08008e6c <__lo0bits>:
 8008e6c:	6803      	ldr	r3, [r0, #0]
 8008e6e:	f013 0207 	ands.w	r2, r3, #7
 8008e72:	4601      	mov	r1, r0
 8008e74:	d00b      	beq.n	8008e8e <__lo0bits+0x22>
 8008e76:	07da      	lsls	r2, r3, #31
 8008e78:	d423      	bmi.n	8008ec2 <__lo0bits+0x56>
 8008e7a:	0798      	lsls	r0, r3, #30
 8008e7c:	bf49      	itett	mi
 8008e7e:	085b      	lsrmi	r3, r3, #1
 8008e80:	089b      	lsrpl	r3, r3, #2
 8008e82:	2001      	movmi	r0, #1
 8008e84:	600b      	strmi	r3, [r1, #0]
 8008e86:	bf5c      	itt	pl
 8008e88:	600b      	strpl	r3, [r1, #0]
 8008e8a:	2002      	movpl	r0, #2
 8008e8c:	4770      	bx	lr
 8008e8e:	b298      	uxth	r0, r3
 8008e90:	b9a8      	cbnz	r0, 8008ebe <__lo0bits+0x52>
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	2010      	movs	r0, #16
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	b90a      	cbnz	r2, 8008e9e <__lo0bits+0x32>
 8008e9a:	3008      	adds	r0, #8
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	071a      	lsls	r2, r3, #28
 8008ea0:	bf04      	itt	eq
 8008ea2:	091b      	lsreq	r3, r3, #4
 8008ea4:	3004      	addeq	r0, #4
 8008ea6:	079a      	lsls	r2, r3, #30
 8008ea8:	bf04      	itt	eq
 8008eaa:	089b      	lsreq	r3, r3, #2
 8008eac:	3002      	addeq	r0, #2
 8008eae:	07da      	lsls	r2, r3, #31
 8008eb0:	d403      	bmi.n	8008eba <__lo0bits+0x4e>
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	f100 0001 	add.w	r0, r0, #1
 8008eb8:	d005      	beq.n	8008ec6 <__lo0bits+0x5a>
 8008eba:	600b      	str	r3, [r1, #0]
 8008ebc:	4770      	bx	lr
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	e7e9      	b.n	8008e96 <__lo0bits+0x2a>
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	4770      	bx	lr
 8008ec6:	2020      	movs	r0, #32
 8008ec8:	4770      	bx	lr
	...

08008ecc <__i2b>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	460c      	mov	r4, r1
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	f7ff feb9 	bl	8008c48 <_Balloc>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	b928      	cbnz	r0, 8008ee6 <__i2b+0x1a>
 8008eda:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <__i2b+0x24>)
 8008edc:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <__i2b+0x28>)
 8008ede:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ee2:	f000 ffaf 	bl	8009e44 <__assert_func>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	6144      	str	r4, [r0, #20]
 8008eea:	6103      	str	r3, [r0, #16]
 8008eec:	bd10      	pop	{r4, pc}
 8008eee:	bf00      	nop
 8008ef0:	0800a570 	.word	0x0800a570
 8008ef4:	0800a660 	.word	0x0800a660

08008ef8 <__multiply>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	4691      	mov	r9, r2
 8008efe:	690a      	ldr	r2, [r1, #16]
 8008f00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	bfb8      	it	lt
 8008f08:	460b      	movlt	r3, r1
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	bfbc      	itt	lt
 8008f0e:	464c      	movlt	r4, r9
 8008f10:	4699      	movlt	r9, r3
 8008f12:	6927      	ldr	r7, [r4, #16]
 8008f14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f18:	68a3      	ldr	r3, [r4, #8]
 8008f1a:	6861      	ldr	r1, [r4, #4]
 8008f1c:	eb07 060a 	add.w	r6, r7, sl
 8008f20:	42b3      	cmp	r3, r6
 8008f22:	b085      	sub	sp, #20
 8008f24:	bfb8      	it	lt
 8008f26:	3101      	addlt	r1, #1
 8008f28:	f7ff fe8e 	bl	8008c48 <_Balloc>
 8008f2c:	b930      	cbnz	r0, 8008f3c <__multiply+0x44>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b44      	ldr	r3, [pc, #272]	; (8009044 <__multiply+0x14c>)
 8008f32:	4845      	ldr	r0, [pc, #276]	; (8009048 <__multiply+0x150>)
 8008f34:	f240 115d 	movw	r1, #349	; 0x15d
 8008f38:	f000 ff84 	bl	8009e44 <__assert_func>
 8008f3c:	f100 0514 	add.w	r5, r0, #20
 8008f40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f44:	462b      	mov	r3, r5
 8008f46:	2200      	movs	r2, #0
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	d321      	bcc.n	8008f90 <__multiply+0x98>
 8008f4c:	f104 0314 	add.w	r3, r4, #20
 8008f50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f54:	f109 0314 	add.w	r3, r9, #20
 8008f58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f5c:	9202      	str	r2, [sp, #8]
 8008f5e:	1b3a      	subs	r2, r7, r4
 8008f60:	3a15      	subs	r2, #21
 8008f62:	f022 0203 	bic.w	r2, r2, #3
 8008f66:	3204      	adds	r2, #4
 8008f68:	f104 0115 	add.w	r1, r4, #21
 8008f6c:	428f      	cmp	r7, r1
 8008f6e:	bf38      	it	cc
 8008f70:	2204      	movcc	r2, #4
 8008f72:	9201      	str	r2, [sp, #4]
 8008f74:	9a02      	ldr	r2, [sp, #8]
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d80c      	bhi.n	8008f96 <__multiply+0x9e>
 8008f7c:	2e00      	cmp	r6, #0
 8008f7e:	dd03      	ble.n	8008f88 <__multiply+0x90>
 8008f80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d05a      	beq.n	800903e <__multiply+0x146>
 8008f88:	6106      	str	r6, [r0, #16]
 8008f8a:	b005      	add	sp, #20
 8008f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f90:	f843 2b04 	str.w	r2, [r3], #4
 8008f94:	e7d8      	b.n	8008f48 <__multiply+0x50>
 8008f96:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f9a:	f1ba 0f00 	cmp.w	sl, #0
 8008f9e:	d024      	beq.n	8008fea <__multiply+0xf2>
 8008fa0:	f104 0e14 	add.w	lr, r4, #20
 8008fa4:	46a9      	mov	r9, r5
 8008fa6:	f04f 0c00 	mov.w	ip, #0
 8008faa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fae:	f8d9 1000 	ldr.w	r1, [r9]
 8008fb2:	fa1f fb82 	uxth.w	fp, r2
 8008fb6:	b289      	uxth	r1, r1
 8008fb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fc0:	f8d9 2000 	ldr.w	r2, [r9]
 8008fc4:	4461      	add	r1, ip
 8008fc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fca:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fd2:	b289      	uxth	r1, r1
 8008fd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fd8:	4577      	cmp	r7, lr
 8008fda:	f849 1b04 	str.w	r1, [r9], #4
 8008fde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fe2:	d8e2      	bhi.n	8008faa <__multiply+0xb2>
 8008fe4:	9a01      	ldr	r2, [sp, #4]
 8008fe6:	f845 c002 	str.w	ip, [r5, r2]
 8008fea:	9a03      	ldr	r2, [sp, #12]
 8008fec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	f1b9 0f00 	cmp.w	r9, #0
 8008ff6:	d020      	beq.n	800903a <__multiply+0x142>
 8008ff8:	6829      	ldr	r1, [r5, #0]
 8008ffa:	f104 0c14 	add.w	ip, r4, #20
 8008ffe:	46ae      	mov	lr, r5
 8009000:	f04f 0a00 	mov.w	sl, #0
 8009004:	f8bc b000 	ldrh.w	fp, [ip]
 8009008:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800900c:	fb09 220b 	mla	r2, r9, fp, r2
 8009010:	4492      	add	sl, r2
 8009012:	b289      	uxth	r1, r1
 8009014:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009018:	f84e 1b04 	str.w	r1, [lr], #4
 800901c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009020:	f8be 1000 	ldrh.w	r1, [lr]
 8009024:	0c12      	lsrs	r2, r2, #16
 8009026:	fb09 1102 	mla	r1, r9, r2, r1
 800902a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800902e:	4567      	cmp	r7, ip
 8009030:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009034:	d8e6      	bhi.n	8009004 <__multiply+0x10c>
 8009036:	9a01      	ldr	r2, [sp, #4]
 8009038:	50a9      	str	r1, [r5, r2]
 800903a:	3504      	adds	r5, #4
 800903c:	e79a      	b.n	8008f74 <__multiply+0x7c>
 800903e:	3e01      	subs	r6, #1
 8009040:	e79c      	b.n	8008f7c <__multiply+0x84>
 8009042:	bf00      	nop
 8009044:	0800a570 	.word	0x0800a570
 8009048:	0800a660 	.word	0x0800a660

0800904c <__pow5mult>:
 800904c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009050:	4615      	mov	r5, r2
 8009052:	f012 0203 	ands.w	r2, r2, #3
 8009056:	4606      	mov	r6, r0
 8009058:	460f      	mov	r7, r1
 800905a:	d007      	beq.n	800906c <__pow5mult+0x20>
 800905c:	4c25      	ldr	r4, [pc, #148]	; (80090f4 <__pow5mult+0xa8>)
 800905e:	3a01      	subs	r2, #1
 8009060:	2300      	movs	r3, #0
 8009062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009066:	f7ff fe51 	bl	8008d0c <__multadd>
 800906a:	4607      	mov	r7, r0
 800906c:	10ad      	asrs	r5, r5, #2
 800906e:	d03d      	beq.n	80090ec <__pow5mult+0xa0>
 8009070:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009072:	b97c      	cbnz	r4, 8009094 <__pow5mult+0x48>
 8009074:	2010      	movs	r0, #16
 8009076:	f7ff fdbf 	bl	8008bf8 <malloc>
 800907a:	4602      	mov	r2, r0
 800907c:	6270      	str	r0, [r6, #36]	; 0x24
 800907e:	b928      	cbnz	r0, 800908c <__pow5mult+0x40>
 8009080:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <__pow5mult+0xac>)
 8009082:	481e      	ldr	r0, [pc, #120]	; (80090fc <__pow5mult+0xb0>)
 8009084:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009088:	f000 fedc 	bl	8009e44 <__assert_func>
 800908c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009090:	6004      	str	r4, [r0, #0]
 8009092:	60c4      	str	r4, [r0, #12]
 8009094:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800909c:	b94c      	cbnz	r4, 80090b2 <__pow5mult+0x66>
 800909e:	f240 2171 	movw	r1, #625	; 0x271
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ff12 	bl	8008ecc <__i2b>
 80090a8:	2300      	movs	r3, #0
 80090aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ae:	4604      	mov	r4, r0
 80090b0:	6003      	str	r3, [r0, #0]
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	07eb      	lsls	r3, r5, #31
 80090b8:	d50a      	bpl.n	80090d0 <__pow5mult+0x84>
 80090ba:	4639      	mov	r1, r7
 80090bc:	4622      	mov	r2, r4
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff1a 	bl	8008ef8 <__multiply>
 80090c4:	4639      	mov	r1, r7
 80090c6:	4680      	mov	r8, r0
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff fdfd 	bl	8008cc8 <_Bfree>
 80090ce:	4647      	mov	r7, r8
 80090d0:	106d      	asrs	r5, r5, #1
 80090d2:	d00b      	beq.n	80090ec <__pow5mult+0xa0>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	b938      	cbnz	r0, 80090e8 <__pow5mult+0x9c>
 80090d8:	4622      	mov	r2, r4
 80090da:	4621      	mov	r1, r4
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff ff0b 	bl	8008ef8 <__multiply>
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	f8c0 9000 	str.w	r9, [r0]
 80090e8:	4604      	mov	r4, r0
 80090ea:	e7e4      	b.n	80090b6 <__pow5mult+0x6a>
 80090ec:	4638      	mov	r0, r7
 80090ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f2:	bf00      	nop
 80090f4:	0800a7b0 	.word	0x0800a7b0
 80090f8:	0800a4fe 	.word	0x0800a4fe
 80090fc:	0800a660 	.word	0x0800a660

08009100 <__lshift>:
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	6849      	ldr	r1, [r1, #4]
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	4607      	mov	r7, r0
 8009112:	4691      	mov	r9, r2
 8009114:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009118:	f108 0601 	add.w	r6, r8, #1
 800911c:	42b3      	cmp	r3, r6
 800911e:	db0b      	blt.n	8009138 <__lshift+0x38>
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff fd91 	bl	8008c48 <_Balloc>
 8009126:	4605      	mov	r5, r0
 8009128:	b948      	cbnz	r0, 800913e <__lshift+0x3e>
 800912a:	4602      	mov	r2, r0
 800912c:	4b2a      	ldr	r3, [pc, #168]	; (80091d8 <__lshift+0xd8>)
 800912e:	482b      	ldr	r0, [pc, #172]	; (80091dc <__lshift+0xdc>)
 8009130:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009134:	f000 fe86 	bl	8009e44 <__assert_func>
 8009138:	3101      	adds	r1, #1
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	e7ee      	b.n	800911c <__lshift+0x1c>
 800913e:	2300      	movs	r3, #0
 8009140:	f100 0114 	add.w	r1, r0, #20
 8009144:	f100 0210 	add.w	r2, r0, #16
 8009148:	4618      	mov	r0, r3
 800914a:	4553      	cmp	r3, sl
 800914c:	db37      	blt.n	80091be <__lshift+0xbe>
 800914e:	6920      	ldr	r0, [r4, #16]
 8009150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009154:	f104 0314 	add.w	r3, r4, #20
 8009158:	f019 091f 	ands.w	r9, r9, #31
 800915c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009160:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009164:	d02f      	beq.n	80091c6 <__lshift+0xc6>
 8009166:	f1c9 0e20 	rsb	lr, r9, #32
 800916a:	468a      	mov	sl, r1
 800916c:	f04f 0c00 	mov.w	ip, #0
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	fa02 f209 	lsl.w	r2, r2, r9
 8009176:	ea42 020c 	orr.w	r2, r2, ip
 800917a:	f84a 2b04 	str.w	r2, [sl], #4
 800917e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009182:	4298      	cmp	r0, r3
 8009184:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009188:	d8f2      	bhi.n	8009170 <__lshift+0x70>
 800918a:	1b03      	subs	r3, r0, r4
 800918c:	3b15      	subs	r3, #21
 800918e:	f023 0303 	bic.w	r3, r3, #3
 8009192:	3304      	adds	r3, #4
 8009194:	f104 0215 	add.w	r2, r4, #21
 8009198:	4290      	cmp	r0, r2
 800919a:	bf38      	it	cc
 800919c:	2304      	movcc	r3, #4
 800919e:	f841 c003 	str.w	ip, [r1, r3]
 80091a2:	f1bc 0f00 	cmp.w	ip, #0
 80091a6:	d001      	beq.n	80091ac <__lshift+0xac>
 80091a8:	f108 0602 	add.w	r6, r8, #2
 80091ac:	3e01      	subs	r6, #1
 80091ae:	4638      	mov	r0, r7
 80091b0:	612e      	str	r6, [r5, #16]
 80091b2:	4621      	mov	r1, r4
 80091b4:	f7ff fd88 	bl	8008cc8 <_Bfree>
 80091b8:	4628      	mov	r0, r5
 80091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091be:	f842 0f04 	str.w	r0, [r2, #4]!
 80091c2:	3301      	adds	r3, #1
 80091c4:	e7c1      	b.n	800914a <__lshift+0x4a>
 80091c6:	3904      	subs	r1, #4
 80091c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80091d0:	4298      	cmp	r0, r3
 80091d2:	d8f9      	bhi.n	80091c8 <__lshift+0xc8>
 80091d4:	e7ea      	b.n	80091ac <__lshift+0xac>
 80091d6:	bf00      	nop
 80091d8:	0800a570 	.word	0x0800a570
 80091dc:	0800a660 	.word	0x0800a660

080091e0 <__mcmp>:
 80091e0:	b530      	push	{r4, r5, lr}
 80091e2:	6902      	ldr	r2, [r0, #16]
 80091e4:	690c      	ldr	r4, [r1, #16]
 80091e6:	1b12      	subs	r2, r2, r4
 80091e8:	d10e      	bne.n	8009208 <__mcmp+0x28>
 80091ea:	f100 0314 	add.w	r3, r0, #20
 80091ee:	3114      	adds	r1, #20
 80091f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009200:	42a5      	cmp	r5, r4
 8009202:	d003      	beq.n	800920c <__mcmp+0x2c>
 8009204:	d305      	bcc.n	8009212 <__mcmp+0x32>
 8009206:	2201      	movs	r2, #1
 8009208:	4610      	mov	r0, r2
 800920a:	bd30      	pop	{r4, r5, pc}
 800920c:	4283      	cmp	r3, r0
 800920e:	d3f3      	bcc.n	80091f8 <__mcmp+0x18>
 8009210:	e7fa      	b.n	8009208 <__mcmp+0x28>
 8009212:	f04f 32ff 	mov.w	r2, #4294967295
 8009216:	e7f7      	b.n	8009208 <__mcmp+0x28>

08009218 <__mdiff>:
 8009218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	460c      	mov	r4, r1
 800921e:	4606      	mov	r6, r0
 8009220:	4611      	mov	r1, r2
 8009222:	4620      	mov	r0, r4
 8009224:	4690      	mov	r8, r2
 8009226:	f7ff ffdb 	bl	80091e0 <__mcmp>
 800922a:	1e05      	subs	r5, r0, #0
 800922c:	d110      	bne.n	8009250 <__mdiff+0x38>
 800922e:	4629      	mov	r1, r5
 8009230:	4630      	mov	r0, r6
 8009232:	f7ff fd09 	bl	8008c48 <_Balloc>
 8009236:	b930      	cbnz	r0, 8009246 <__mdiff+0x2e>
 8009238:	4b3a      	ldr	r3, [pc, #232]	; (8009324 <__mdiff+0x10c>)
 800923a:	4602      	mov	r2, r0
 800923c:	f240 2132 	movw	r1, #562	; 0x232
 8009240:	4839      	ldr	r0, [pc, #228]	; (8009328 <__mdiff+0x110>)
 8009242:	f000 fdff 	bl	8009e44 <__assert_func>
 8009246:	2301      	movs	r3, #1
 8009248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800924c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009250:	bfa4      	itt	ge
 8009252:	4643      	movge	r3, r8
 8009254:	46a0      	movge	r8, r4
 8009256:	4630      	mov	r0, r6
 8009258:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800925c:	bfa6      	itte	ge
 800925e:	461c      	movge	r4, r3
 8009260:	2500      	movge	r5, #0
 8009262:	2501      	movlt	r5, #1
 8009264:	f7ff fcf0 	bl	8008c48 <_Balloc>
 8009268:	b920      	cbnz	r0, 8009274 <__mdiff+0x5c>
 800926a:	4b2e      	ldr	r3, [pc, #184]	; (8009324 <__mdiff+0x10c>)
 800926c:	4602      	mov	r2, r0
 800926e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009272:	e7e5      	b.n	8009240 <__mdiff+0x28>
 8009274:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009278:	6926      	ldr	r6, [r4, #16]
 800927a:	60c5      	str	r5, [r0, #12]
 800927c:	f104 0914 	add.w	r9, r4, #20
 8009280:	f108 0514 	add.w	r5, r8, #20
 8009284:	f100 0e14 	add.w	lr, r0, #20
 8009288:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800928c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009290:	f108 0210 	add.w	r2, r8, #16
 8009294:	46f2      	mov	sl, lr
 8009296:	2100      	movs	r1, #0
 8009298:	f859 3b04 	ldr.w	r3, [r9], #4
 800929c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092a0:	fa1f f883 	uxth.w	r8, r3
 80092a4:	fa11 f18b 	uxtah	r1, r1, fp
 80092a8:	0c1b      	lsrs	r3, r3, #16
 80092aa:	eba1 0808 	sub.w	r8, r1, r8
 80092ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092b6:	fa1f f888 	uxth.w	r8, r8
 80092ba:	1419      	asrs	r1, r3, #16
 80092bc:	454e      	cmp	r6, r9
 80092be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092c2:	f84a 3b04 	str.w	r3, [sl], #4
 80092c6:	d8e7      	bhi.n	8009298 <__mdiff+0x80>
 80092c8:	1b33      	subs	r3, r6, r4
 80092ca:	3b15      	subs	r3, #21
 80092cc:	f023 0303 	bic.w	r3, r3, #3
 80092d0:	3304      	adds	r3, #4
 80092d2:	3415      	adds	r4, #21
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	bf38      	it	cc
 80092d8:	2304      	movcc	r3, #4
 80092da:	441d      	add	r5, r3
 80092dc:	4473      	add	r3, lr
 80092de:	469e      	mov	lr, r3
 80092e0:	462e      	mov	r6, r5
 80092e2:	4566      	cmp	r6, ip
 80092e4:	d30e      	bcc.n	8009304 <__mdiff+0xec>
 80092e6:	f10c 0203 	add.w	r2, ip, #3
 80092ea:	1b52      	subs	r2, r2, r5
 80092ec:	f022 0203 	bic.w	r2, r2, #3
 80092f0:	3d03      	subs	r5, #3
 80092f2:	45ac      	cmp	ip, r5
 80092f4:	bf38      	it	cc
 80092f6:	2200      	movcc	r2, #0
 80092f8:	441a      	add	r2, r3
 80092fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092fe:	b17b      	cbz	r3, 8009320 <__mdiff+0x108>
 8009300:	6107      	str	r7, [r0, #16]
 8009302:	e7a3      	b.n	800924c <__mdiff+0x34>
 8009304:	f856 8b04 	ldr.w	r8, [r6], #4
 8009308:	fa11 f288 	uxtah	r2, r1, r8
 800930c:	1414      	asrs	r4, r2, #16
 800930e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009312:	b292      	uxth	r2, r2
 8009314:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009318:	f84e 2b04 	str.w	r2, [lr], #4
 800931c:	1421      	asrs	r1, r4, #16
 800931e:	e7e0      	b.n	80092e2 <__mdiff+0xca>
 8009320:	3f01      	subs	r7, #1
 8009322:	e7ea      	b.n	80092fa <__mdiff+0xe2>
 8009324:	0800a570 	.word	0x0800a570
 8009328:	0800a660 	.word	0x0800a660

0800932c <__ulp>:
 800932c:	b082      	sub	sp, #8
 800932e:	ed8d 0b00 	vstr	d0, [sp]
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	4912      	ldr	r1, [pc, #72]	; (8009380 <__ulp+0x54>)
 8009336:	4019      	ands	r1, r3
 8009338:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800933c:	2900      	cmp	r1, #0
 800933e:	dd05      	ble.n	800934c <__ulp+0x20>
 8009340:	2200      	movs	r2, #0
 8009342:	460b      	mov	r3, r1
 8009344:	ec43 2b10 	vmov	d0, r2, r3
 8009348:	b002      	add	sp, #8
 800934a:	4770      	bx	lr
 800934c:	4249      	negs	r1, r1
 800934e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009352:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009356:	f04f 0200 	mov.w	r2, #0
 800935a:	f04f 0300 	mov.w	r3, #0
 800935e:	da04      	bge.n	800936a <__ulp+0x3e>
 8009360:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009364:	fa41 f300 	asr.w	r3, r1, r0
 8009368:	e7ec      	b.n	8009344 <__ulp+0x18>
 800936a:	f1a0 0114 	sub.w	r1, r0, #20
 800936e:	291e      	cmp	r1, #30
 8009370:	bfda      	itte	le
 8009372:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009376:	fa20 f101 	lsrle.w	r1, r0, r1
 800937a:	2101      	movgt	r1, #1
 800937c:	460a      	mov	r2, r1
 800937e:	e7e1      	b.n	8009344 <__ulp+0x18>
 8009380:	7ff00000 	.word	0x7ff00000

08009384 <__b2d>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	6905      	ldr	r5, [r0, #16]
 8009388:	f100 0714 	add.w	r7, r0, #20
 800938c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009390:	1f2e      	subs	r6, r5, #4
 8009392:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009396:	4620      	mov	r0, r4
 8009398:	f7ff fd48 	bl	8008e2c <__hi0bits>
 800939c:	f1c0 0320 	rsb	r3, r0, #32
 80093a0:	280a      	cmp	r0, #10
 80093a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009420 <__b2d+0x9c>
 80093a6:	600b      	str	r3, [r1, #0]
 80093a8:	dc14      	bgt.n	80093d4 <__b2d+0x50>
 80093aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80093ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80093b2:	42b7      	cmp	r7, r6
 80093b4:	ea41 030c 	orr.w	r3, r1, ip
 80093b8:	bf34      	ite	cc
 80093ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093be:	2100      	movcs	r1, #0
 80093c0:	3015      	adds	r0, #21
 80093c2:	fa04 f000 	lsl.w	r0, r4, r0
 80093c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80093ca:	ea40 0201 	orr.w	r2, r0, r1
 80093ce:	ec43 2b10 	vmov	d0, r2, r3
 80093d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d4:	42b7      	cmp	r7, r6
 80093d6:	bf3a      	itte	cc
 80093d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80093e0:	2100      	movcs	r1, #0
 80093e2:	380b      	subs	r0, #11
 80093e4:	d017      	beq.n	8009416 <__b2d+0x92>
 80093e6:	f1c0 0c20 	rsb	ip, r0, #32
 80093ea:	fa04 f500 	lsl.w	r5, r4, r0
 80093ee:	42be      	cmp	r6, r7
 80093f0:	fa21 f40c 	lsr.w	r4, r1, ip
 80093f4:	ea45 0504 	orr.w	r5, r5, r4
 80093f8:	bf8c      	ite	hi
 80093fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80093fe:	2400      	movls	r4, #0
 8009400:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009404:	fa01 f000 	lsl.w	r0, r1, r0
 8009408:	fa24 f40c 	lsr.w	r4, r4, ip
 800940c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009410:	ea40 0204 	orr.w	r2, r0, r4
 8009414:	e7db      	b.n	80093ce <__b2d+0x4a>
 8009416:	ea44 030c 	orr.w	r3, r4, ip
 800941a:	460a      	mov	r2, r1
 800941c:	e7d7      	b.n	80093ce <__b2d+0x4a>
 800941e:	bf00      	nop
 8009420:	3ff00000 	.word	0x3ff00000

08009424 <__d2b>:
 8009424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009428:	4689      	mov	r9, r1
 800942a:	2101      	movs	r1, #1
 800942c:	ec57 6b10 	vmov	r6, r7, d0
 8009430:	4690      	mov	r8, r2
 8009432:	f7ff fc09 	bl	8008c48 <_Balloc>
 8009436:	4604      	mov	r4, r0
 8009438:	b930      	cbnz	r0, 8009448 <__d2b+0x24>
 800943a:	4602      	mov	r2, r0
 800943c:	4b25      	ldr	r3, [pc, #148]	; (80094d4 <__d2b+0xb0>)
 800943e:	4826      	ldr	r0, [pc, #152]	; (80094d8 <__d2b+0xb4>)
 8009440:	f240 310a 	movw	r1, #778	; 0x30a
 8009444:	f000 fcfe 	bl	8009e44 <__assert_func>
 8009448:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800944c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009450:	bb35      	cbnz	r5, 80094a0 <__d2b+0x7c>
 8009452:	2e00      	cmp	r6, #0
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	d028      	beq.n	80094aa <__d2b+0x86>
 8009458:	4668      	mov	r0, sp
 800945a:	9600      	str	r6, [sp, #0]
 800945c:	f7ff fd06 	bl	8008e6c <__lo0bits>
 8009460:	9900      	ldr	r1, [sp, #0]
 8009462:	b300      	cbz	r0, 80094a6 <__d2b+0x82>
 8009464:	9a01      	ldr	r2, [sp, #4]
 8009466:	f1c0 0320 	rsb	r3, r0, #32
 800946a:	fa02 f303 	lsl.w	r3, r2, r3
 800946e:	430b      	orrs	r3, r1
 8009470:	40c2      	lsrs	r2, r0
 8009472:	6163      	str	r3, [r4, #20]
 8009474:	9201      	str	r2, [sp, #4]
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	61a3      	str	r3, [r4, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	bf14      	ite	ne
 800947e:	2202      	movne	r2, #2
 8009480:	2201      	moveq	r2, #1
 8009482:	6122      	str	r2, [r4, #16]
 8009484:	b1d5      	cbz	r5, 80094bc <__d2b+0x98>
 8009486:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800948a:	4405      	add	r5, r0
 800948c:	f8c9 5000 	str.w	r5, [r9]
 8009490:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009494:	f8c8 0000 	str.w	r0, [r8]
 8009498:	4620      	mov	r0, r4
 800949a:	b003      	add	sp, #12
 800949c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094a4:	e7d5      	b.n	8009452 <__d2b+0x2e>
 80094a6:	6161      	str	r1, [r4, #20]
 80094a8:	e7e5      	b.n	8009476 <__d2b+0x52>
 80094aa:	a801      	add	r0, sp, #4
 80094ac:	f7ff fcde 	bl	8008e6c <__lo0bits>
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	6163      	str	r3, [r4, #20]
 80094b4:	2201      	movs	r2, #1
 80094b6:	6122      	str	r2, [r4, #16]
 80094b8:	3020      	adds	r0, #32
 80094ba:	e7e3      	b.n	8009484 <__d2b+0x60>
 80094bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094c4:	f8c9 0000 	str.w	r0, [r9]
 80094c8:	6918      	ldr	r0, [r3, #16]
 80094ca:	f7ff fcaf 	bl	8008e2c <__hi0bits>
 80094ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094d2:	e7df      	b.n	8009494 <__d2b+0x70>
 80094d4:	0800a570 	.word	0x0800a570
 80094d8:	0800a660 	.word	0x0800a660

080094dc <__ratio>:
 80094dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	4688      	mov	r8, r1
 80094e2:	4669      	mov	r1, sp
 80094e4:	4681      	mov	r9, r0
 80094e6:	f7ff ff4d 	bl	8009384 <__b2d>
 80094ea:	a901      	add	r1, sp, #4
 80094ec:	4640      	mov	r0, r8
 80094ee:	ec55 4b10 	vmov	r4, r5, d0
 80094f2:	f7ff ff47 	bl	8009384 <__b2d>
 80094f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094fe:	eba3 0c02 	sub.w	ip, r3, r2
 8009502:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009506:	1a9b      	subs	r3, r3, r2
 8009508:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800950c:	ec51 0b10 	vmov	r0, r1, d0
 8009510:	2b00      	cmp	r3, #0
 8009512:	bfd6      	itet	le
 8009514:	460a      	movle	r2, r1
 8009516:	462a      	movgt	r2, r5
 8009518:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800951c:	468b      	mov	fp, r1
 800951e:	462f      	mov	r7, r5
 8009520:	bfd4      	ite	le
 8009522:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009526:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800952a:	4620      	mov	r0, r4
 800952c:	ee10 2a10 	vmov	r2, s0
 8009530:	465b      	mov	r3, fp
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 f99a 	bl	800086c <__aeabi_ddiv>
 8009538:	ec41 0b10 	vmov	d0, r0, r1
 800953c:	b003      	add	sp, #12
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009542 <__copybits>:
 8009542:	3901      	subs	r1, #1
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	1149      	asrs	r1, r1, #5
 8009548:	6914      	ldr	r4, [r2, #16]
 800954a:	3101      	adds	r1, #1
 800954c:	f102 0314 	add.w	r3, r2, #20
 8009550:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009554:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009558:	1f05      	subs	r5, r0, #4
 800955a:	42a3      	cmp	r3, r4
 800955c:	d30c      	bcc.n	8009578 <__copybits+0x36>
 800955e:	1aa3      	subs	r3, r4, r2
 8009560:	3b11      	subs	r3, #17
 8009562:	f023 0303 	bic.w	r3, r3, #3
 8009566:	3211      	adds	r2, #17
 8009568:	42a2      	cmp	r2, r4
 800956a:	bf88      	it	hi
 800956c:	2300      	movhi	r3, #0
 800956e:	4418      	add	r0, r3
 8009570:	2300      	movs	r3, #0
 8009572:	4288      	cmp	r0, r1
 8009574:	d305      	bcc.n	8009582 <__copybits+0x40>
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	f853 6b04 	ldr.w	r6, [r3], #4
 800957c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009580:	e7eb      	b.n	800955a <__copybits+0x18>
 8009582:	f840 3b04 	str.w	r3, [r0], #4
 8009586:	e7f4      	b.n	8009572 <__copybits+0x30>

08009588 <__any_on>:
 8009588:	f100 0214 	add.w	r2, r0, #20
 800958c:	6900      	ldr	r0, [r0, #16]
 800958e:	114b      	asrs	r3, r1, #5
 8009590:	4298      	cmp	r0, r3
 8009592:	b510      	push	{r4, lr}
 8009594:	db11      	blt.n	80095ba <__any_on+0x32>
 8009596:	dd0a      	ble.n	80095ae <__any_on+0x26>
 8009598:	f011 011f 	ands.w	r1, r1, #31
 800959c:	d007      	beq.n	80095ae <__any_on+0x26>
 800959e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095a2:	fa24 f001 	lsr.w	r0, r4, r1
 80095a6:	fa00 f101 	lsl.w	r1, r0, r1
 80095aa:	428c      	cmp	r4, r1
 80095ac:	d10b      	bne.n	80095c6 <__any_on+0x3e>
 80095ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d803      	bhi.n	80095be <__any_on+0x36>
 80095b6:	2000      	movs	r0, #0
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	4603      	mov	r3, r0
 80095bc:	e7f7      	b.n	80095ae <__any_on+0x26>
 80095be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095c2:	2900      	cmp	r1, #0
 80095c4:	d0f5      	beq.n	80095b2 <__any_on+0x2a>
 80095c6:	2001      	movs	r0, #1
 80095c8:	e7f6      	b.n	80095b8 <__any_on+0x30>

080095ca <_calloc_r>:
 80095ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095cc:	fba1 2402 	umull	r2, r4, r1, r2
 80095d0:	b94c      	cbnz	r4, 80095e6 <_calloc_r+0x1c>
 80095d2:	4611      	mov	r1, r2
 80095d4:	9201      	str	r2, [sp, #4]
 80095d6:	f000 f87b 	bl	80096d0 <_malloc_r>
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	4605      	mov	r5, r0
 80095de:	b930      	cbnz	r0, 80095ee <_calloc_r+0x24>
 80095e0:	4628      	mov	r0, r5
 80095e2:	b003      	add	sp, #12
 80095e4:	bd30      	pop	{r4, r5, pc}
 80095e6:	220c      	movs	r2, #12
 80095e8:	6002      	str	r2, [r0, #0]
 80095ea:	2500      	movs	r5, #0
 80095ec:	e7f8      	b.n	80095e0 <_calloc_r+0x16>
 80095ee:	4621      	mov	r1, r4
 80095f0:	f7fc f854 	bl	800569c <memset>
 80095f4:	e7f4      	b.n	80095e0 <_calloc_r+0x16>
	...

080095f8 <_free_r>:
 80095f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095fa:	2900      	cmp	r1, #0
 80095fc:	d044      	beq.n	8009688 <_free_r+0x90>
 80095fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009602:	9001      	str	r0, [sp, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f1a1 0404 	sub.w	r4, r1, #4
 800960a:	bfb8      	it	lt
 800960c:	18e4      	addlt	r4, r4, r3
 800960e:	f000 fca7 	bl	8009f60 <__malloc_lock>
 8009612:	4a1e      	ldr	r2, [pc, #120]	; (800968c <_free_r+0x94>)
 8009614:	9801      	ldr	r0, [sp, #4]
 8009616:	6813      	ldr	r3, [r2, #0]
 8009618:	b933      	cbnz	r3, 8009628 <_free_r+0x30>
 800961a:	6063      	str	r3, [r4, #4]
 800961c:	6014      	str	r4, [r2, #0]
 800961e:	b003      	add	sp, #12
 8009620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009624:	f000 bca2 	b.w	8009f6c <__malloc_unlock>
 8009628:	42a3      	cmp	r3, r4
 800962a:	d908      	bls.n	800963e <_free_r+0x46>
 800962c:	6825      	ldr	r5, [r4, #0]
 800962e:	1961      	adds	r1, r4, r5
 8009630:	428b      	cmp	r3, r1
 8009632:	bf01      	itttt	eq
 8009634:	6819      	ldreq	r1, [r3, #0]
 8009636:	685b      	ldreq	r3, [r3, #4]
 8009638:	1949      	addeq	r1, r1, r5
 800963a:	6021      	streq	r1, [r4, #0]
 800963c:	e7ed      	b.n	800961a <_free_r+0x22>
 800963e:	461a      	mov	r2, r3
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	b10b      	cbz	r3, 8009648 <_free_r+0x50>
 8009644:	42a3      	cmp	r3, r4
 8009646:	d9fa      	bls.n	800963e <_free_r+0x46>
 8009648:	6811      	ldr	r1, [r2, #0]
 800964a:	1855      	adds	r5, r2, r1
 800964c:	42a5      	cmp	r5, r4
 800964e:	d10b      	bne.n	8009668 <_free_r+0x70>
 8009650:	6824      	ldr	r4, [r4, #0]
 8009652:	4421      	add	r1, r4
 8009654:	1854      	adds	r4, r2, r1
 8009656:	42a3      	cmp	r3, r4
 8009658:	6011      	str	r1, [r2, #0]
 800965a:	d1e0      	bne.n	800961e <_free_r+0x26>
 800965c:	681c      	ldr	r4, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	6053      	str	r3, [r2, #4]
 8009662:	4421      	add	r1, r4
 8009664:	6011      	str	r1, [r2, #0]
 8009666:	e7da      	b.n	800961e <_free_r+0x26>
 8009668:	d902      	bls.n	8009670 <_free_r+0x78>
 800966a:	230c      	movs	r3, #12
 800966c:	6003      	str	r3, [r0, #0]
 800966e:	e7d6      	b.n	800961e <_free_r+0x26>
 8009670:	6825      	ldr	r5, [r4, #0]
 8009672:	1961      	adds	r1, r4, r5
 8009674:	428b      	cmp	r3, r1
 8009676:	bf04      	itt	eq
 8009678:	6819      	ldreq	r1, [r3, #0]
 800967a:	685b      	ldreq	r3, [r3, #4]
 800967c:	6063      	str	r3, [r4, #4]
 800967e:	bf04      	itt	eq
 8009680:	1949      	addeq	r1, r1, r5
 8009682:	6021      	streq	r1, [r4, #0]
 8009684:	6054      	str	r4, [r2, #4]
 8009686:	e7ca      	b.n	800961e <_free_r+0x26>
 8009688:	b003      	add	sp, #12
 800968a:	bd30      	pop	{r4, r5, pc}
 800968c:	20000340 	.word	0x20000340

08009690 <sbrk_aligned>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	4e0e      	ldr	r6, [pc, #56]	; (80096cc <sbrk_aligned+0x3c>)
 8009694:	460c      	mov	r4, r1
 8009696:	6831      	ldr	r1, [r6, #0]
 8009698:	4605      	mov	r5, r0
 800969a:	b911      	cbnz	r1, 80096a2 <sbrk_aligned+0x12>
 800969c:	f000 fb4c 	bl	8009d38 <_sbrk_r>
 80096a0:	6030      	str	r0, [r6, #0]
 80096a2:	4621      	mov	r1, r4
 80096a4:	4628      	mov	r0, r5
 80096a6:	f000 fb47 	bl	8009d38 <_sbrk_r>
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	d00a      	beq.n	80096c4 <sbrk_aligned+0x34>
 80096ae:	1cc4      	adds	r4, r0, #3
 80096b0:	f024 0403 	bic.w	r4, r4, #3
 80096b4:	42a0      	cmp	r0, r4
 80096b6:	d007      	beq.n	80096c8 <sbrk_aligned+0x38>
 80096b8:	1a21      	subs	r1, r4, r0
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 fb3c 	bl	8009d38 <_sbrk_r>
 80096c0:	3001      	adds	r0, #1
 80096c2:	d101      	bne.n	80096c8 <sbrk_aligned+0x38>
 80096c4:	f04f 34ff 	mov.w	r4, #4294967295
 80096c8:	4620      	mov	r0, r4
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	20000344 	.word	0x20000344

080096d0 <_malloc_r>:
 80096d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d4:	1ccd      	adds	r5, r1, #3
 80096d6:	f025 0503 	bic.w	r5, r5, #3
 80096da:	3508      	adds	r5, #8
 80096dc:	2d0c      	cmp	r5, #12
 80096de:	bf38      	it	cc
 80096e0:	250c      	movcc	r5, #12
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	4607      	mov	r7, r0
 80096e6:	db01      	blt.n	80096ec <_malloc_r+0x1c>
 80096e8:	42a9      	cmp	r1, r5
 80096ea:	d905      	bls.n	80096f8 <_malloc_r+0x28>
 80096ec:	230c      	movs	r3, #12
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	2600      	movs	r6, #0
 80096f2:	4630      	mov	r0, r6
 80096f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f8:	4e2e      	ldr	r6, [pc, #184]	; (80097b4 <_malloc_r+0xe4>)
 80096fa:	f000 fc31 	bl	8009f60 <__malloc_lock>
 80096fe:	6833      	ldr	r3, [r6, #0]
 8009700:	461c      	mov	r4, r3
 8009702:	bb34      	cbnz	r4, 8009752 <_malloc_r+0x82>
 8009704:	4629      	mov	r1, r5
 8009706:	4638      	mov	r0, r7
 8009708:	f7ff ffc2 	bl	8009690 <sbrk_aligned>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	4604      	mov	r4, r0
 8009710:	d14d      	bne.n	80097ae <_malloc_r+0xde>
 8009712:	6834      	ldr	r4, [r6, #0]
 8009714:	4626      	mov	r6, r4
 8009716:	2e00      	cmp	r6, #0
 8009718:	d140      	bne.n	800979c <_malloc_r+0xcc>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	4631      	mov	r1, r6
 800971e:	4638      	mov	r0, r7
 8009720:	eb04 0803 	add.w	r8, r4, r3
 8009724:	f000 fb08 	bl	8009d38 <_sbrk_r>
 8009728:	4580      	cmp	r8, r0
 800972a:	d13a      	bne.n	80097a2 <_malloc_r+0xd2>
 800972c:	6821      	ldr	r1, [r4, #0]
 800972e:	3503      	adds	r5, #3
 8009730:	1a6d      	subs	r5, r5, r1
 8009732:	f025 0503 	bic.w	r5, r5, #3
 8009736:	3508      	adds	r5, #8
 8009738:	2d0c      	cmp	r5, #12
 800973a:	bf38      	it	cc
 800973c:	250c      	movcc	r5, #12
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ffa5 	bl	8009690 <sbrk_aligned>
 8009746:	3001      	adds	r0, #1
 8009748:	d02b      	beq.n	80097a2 <_malloc_r+0xd2>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	442b      	add	r3, r5
 800974e:	6023      	str	r3, [r4, #0]
 8009750:	e00e      	b.n	8009770 <_malloc_r+0xa0>
 8009752:	6822      	ldr	r2, [r4, #0]
 8009754:	1b52      	subs	r2, r2, r5
 8009756:	d41e      	bmi.n	8009796 <_malloc_r+0xc6>
 8009758:	2a0b      	cmp	r2, #11
 800975a:	d916      	bls.n	800978a <_malloc_r+0xba>
 800975c:	1961      	adds	r1, r4, r5
 800975e:	42a3      	cmp	r3, r4
 8009760:	6025      	str	r5, [r4, #0]
 8009762:	bf18      	it	ne
 8009764:	6059      	strne	r1, [r3, #4]
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	bf08      	it	eq
 800976a:	6031      	streq	r1, [r6, #0]
 800976c:	5162      	str	r2, [r4, r5]
 800976e:	604b      	str	r3, [r1, #4]
 8009770:	4638      	mov	r0, r7
 8009772:	f104 060b 	add.w	r6, r4, #11
 8009776:	f000 fbf9 	bl	8009f6c <__malloc_unlock>
 800977a:	f026 0607 	bic.w	r6, r6, #7
 800977e:	1d23      	adds	r3, r4, #4
 8009780:	1af2      	subs	r2, r6, r3
 8009782:	d0b6      	beq.n	80096f2 <_malloc_r+0x22>
 8009784:	1b9b      	subs	r3, r3, r6
 8009786:	50a3      	str	r3, [r4, r2]
 8009788:	e7b3      	b.n	80096f2 <_malloc_r+0x22>
 800978a:	6862      	ldr	r2, [r4, #4]
 800978c:	42a3      	cmp	r3, r4
 800978e:	bf0c      	ite	eq
 8009790:	6032      	streq	r2, [r6, #0]
 8009792:	605a      	strne	r2, [r3, #4]
 8009794:	e7ec      	b.n	8009770 <_malloc_r+0xa0>
 8009796:	4623      	mov	r3, r4
 8009798:	6864      	ldr	r4, [r4, #4]
 800979a:	e7b2      	b.n	8009702 <_malloc_r+0x32>
 800979c:	4634      	mov	r4, r6
 800979e:	6876      	ldr	r6, [r6, #4]
 80097a0:	e7b9      	b.n	8009716 <_malloc_r+0x46>
 80097a2:	230c      	movs	r3, #12
 80097a4:	603b      	str	r3, [r7, #0]
 80097a6:	4638      	mov	r0, r7
 80097a8:	f000 fbe0 	bl	8009f6c <__malloc_unlock>
 80097ac:	e7a1      	b.n	80096f2 <_malloc_r+0x22>
 80097ae:	6025      	str	r5, [r4, #0]
 80097b0:	e7de      	b.n	8009770 <_malloc_r+0xa0>
 80097b2:	bf00      	nop
 80097b4:	20000340 	.word	0x20000340

080097b8 <__ssputs_r>:
 80097b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097bc:	688e      	ldr	r6, [r1, #8]
 80097be:	429e      	cmp	r6, r3
 80097c0:	4682      	mov	sl, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	4690      	mov	r8, r2
 80097c6:	461f      	mov	r7, r3
 80097c8:	d838      	bhi.n	800983c <__ssputs_r+0x84>
 80097ca:	898a      	ldrh	r2, [r1, #12]
 80097cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097d0:	d032      	beq.n	8009838 <__ssputs_r+0x80>
 80097d2:	6825      	ldr	r5, [r4, #0]
 80097d4:	6909      	ldr	r1, [r1, #16]
 80097d6:	eba5 0901 	sub.w	r9, r5, r1
 80097da:	6965      	ldr	r5, [r4, #20]
 80097dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097e4:	3301      	adds	r3, #1
 80097e6:	444b      	add	r3, r9
 80097e8:	106d      	asrs	r5, r5, #1
 80097ea:	429d      	cmp	r5, r3
 80097ec:	bf38      	it	cc
 80097ee:	461d      	movcc	r5, r3
 80097f0:	0553      	lsls	r3, r2, #21
 80097f2:	d531      	bpl.n	8009858 <__ssputs_r+0xa0>
 80097f4:	4629      	mov	r1, r5
 80097f6:	f7ff ff6b 	bl	80096d0 <_malloc_r>
 80097fa:	4606      	mov	r6, r0
 80097fc:	b950      	cbnz	r0, 8009814 <__ssputs_r+0x5c>
 80097fe:	230c      	movs	r3, #12
 8009800:	f8ca 3000 	str.w	r3, [sl]
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	6921      	ldr	r1, [r4, #16]
 8009816:	464a      	mov	r2, r9
 8009818:	f7ff fa08 	bl	8008c2c <memcpy>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	6126      	str	r6, [r4, #16]
 800982a:	6165      	str	r5, [r4, #20]
 800982c:	444e      	add	r6, r9
 800982e:	eba5 0509 	sub.w	r5, r5, r9
 8009832:	6026      	str	r6, [r4, #0]
 8009834:	60a5      	str	r5, [r4, #8]
 8009836:	463e      	mov	r6, r7
 8009838:	42be      	cmp	r6, r7
 800983a:	d900      	bls.n	800983e <__ssputs_r+0x86>
 800983c:	463e      	mov	r6, r7
 800983e:	6820      	ldr	r0, [r4, #0]
 8009840:	4632      	mov	r2, r6
 8009842:	4641      	mov	r1, r8
 8009844:	f000 fb72 	bl	8009f2c <memmove>
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	1b9b      	subs	r3, r3, r6
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	4433      	add	r3, r6
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	2000      	movs	r0, #0
 8009856:	e7db      	b.n	8009810 <__ssputs_r+0x58>
 8009858:	462a      	mov	r2, r5
 800985a:	f000 fb8d 	bl	8009f78 <_realloc_r>
 800985e:	4606      	mov	r6, r0
 8009860:	2800      	cmp	r0, #0
 8009862:	d1e1      	bne.n	8009828 <__ssputs_r+0x70>
 8009864:	6921      	ldr	r1, [r4, #16]
 8009866:	4650      	mov	r0, sl
 8009868:	f7ff fec6 	bl	80095f8 <_free_r>
 800986c:	e7c7      	b.n	80097fe <__ssputs_r+0x46>
	...

08009870 <_svfiprintf_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	4698      	mov	r8, r3
 8009876:	898b      	ldrh	r3, [r1, #12]
 8009878:	061b      	lsls	r3, r3, #24
 800987a:	b09d      	sub	sp, #116	; 0x74
 800987c:	4607      	mov	r7, r0
 800987e:	460d      	mov	r5, r1
 8009880:	4614      	mov	r4, r2
 8009882:	d50e      	bpl.n	80098a2 <_svfiprintf_r+0x32>
 8009884:	690b      	ldr	r3, [r1, #16]
 8009886:	b963      	cbnz	r3, 80098a2 <_svfiprintf_r+0x32>
 8009888:	2140      	movs	r1, #64	; 0x40
 800988a:	f7ff ff21 	bl	80096d0 <_malloc_r>
 800988e:	6028      	str	r0, [r5, #0]
 8009890:	6128      	str	r0, [r5, #16]
 8009892:	b920      	cbnz	r0, 800989e <_svfiprintf_r+0x2e>
 8009894:	230c      	movs	r3, #12
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e0d1      	b.n	8009a42 <_svfiprintf_r+0x1d2>
 800989e:	2340      	movs	r3, #64	; 0x40
 80098a0:	616b      	str	r3, [r5, #20]
 80098a2:	2300      	movs	r3, #0
 80098a4:	9309      	str	r3, [sp, #36]	; 0x24
 80098a6:	2320      	movs	r3, #32
 80098a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b0:	2330      	movs	r3, #48	; 0x30
 80098b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a5c <_svfiprintf_r+0x1ec>
 80098b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098ba:	f04f 0901 	mov.w	r9, #1
 80098be:	4623      	mov	r3, r4
 80098c0:	469a      	mov	sl, r3
 80098c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c6:	b10a      	cbz	r2, 80098cc <_svfiprintf_r+0x5c>
 80098c8:	2a25      	cmp	r2, #37	; 0x25
 80098ca:	d1f9      	bne.n	80098c0 <_svfiprintf_r+0x50>
 80098cc:	ebba 0b04 	subs.w	fp, sl, r4
 80098d0:	d00b      	beq.n	80098ea <_svfiprintf_r+0x7a>
 80098d2:	465b      	mov	r3, fp
 80098d4:	4622      	mov	r2, r4
 80098d6:	4629      	mov	r1, r5
 80098d8:	4638      	mov	r0, r7
 80098da:	f7ff ff6d 	bl	80097b8 <__ssputs_r>
 80098de:	3001      	adds	r0, #1
 80098e0:	f000 80aa 	beq.w	8009a38 <_svfiprintf_r+0x1c8>
 80098e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098e6:	445a      	add	r2, fp
 80098e8:	9209      	str	r2, [sp, #36]	; 0x24
 80098ea:	f89a 3000 	ldrb.w	r3, [sl]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 80a2 	beq.w	8009a38 <_svfiprintf_r+0x1c8>
 80098f4:	2300      	movs	r3, #0
 80098f6:	f04f 32ff 	mov.w	r2, #4294967295
 80098fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098fe:	f10a 0a01 	add.w	sl, sl, #1
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	9307      	str	r3, [sp, #28]
 8009906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800990a:	931a      	str	r3, [sp, #104]	; 0x68
 800990c:	4654      	mov	r4, sl
 800990e:	2205      	movs	r2, #5
 8009910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009914:	4851      	ldr	r0, [pc, #324]	; (8009a5c <_svfiprintf_r+0x1ec>)
 8009916:	f7f6 fc73 	bl	8000200 <memchr>
 800991a:	9a04      	ldr	r2, [sp, #16]
 800991c:	b9d8      	cbnz	r0, 8009956 <_svfiprintf_r+0xe6>
 800991e:	06d0      	lsls	r0, r2, #27
 8009920:	bf44      	itt	mi
 8009922:	2320      	movmi	r3, #32
 8009924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009928:	0711      	lsls	r1, r2, #28
 800992a:	bf44      	itt	mi
 800992c:	232b      	movmi	r3, #43	; 0x2b
 800992e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009932:	f89a 3000 	ldrb.w	r3, [sl]
 8009936:	2b2a      	cmp	r3, #42	; 0x2a
 8009938:	d015      	beq.n	8009966 <_svfiprintf_r+0xf6>
 800993a:	9a07      	ldr	r2, [sp, #28]
 800993c:	4654      	mov	r4, sl
 800993e:	2000      	movs	r0, #0
 8009940:	f04f 0c0a 	mov.w	ip, #10
 8009944:	4621      	mov	r1, r4
 8009946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800994a:	3b30      	subs	r3, #48	; 0x30
 800994c:	2b09      	cmp	r3, #9
 800994e:	d94e      	bls.n	80099ee <_svfiprintf_r+0x17e>
 8009950:	b1b0      	cbz	r0, 8009980 <_svfiprintf_r+0x110>
 8009952:	9207      	str	r2, [sp, #28]
 8009954:	e014      	b.n	8009980 <_svfiprintf_r+0x110>
 8009956:	eba0 0308 	sub.w	r3, r0, r8
 800995a:	fa09 f303 	lsl.w	r3, r9, r3
 800995e:	4313      	orrs	r3, r2
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	46a2      	mov	sl, r4
 8009964:	e7d2      	b.n	800990c <_svfiprintf_r+0x9c>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	1d19      	adds	r1, r3, #4
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	9103      	str	r1, [sp, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	bfbb      	ittet	lt
 8009972:	425b      	neglt	r3, r3
 8009974:	f042 0202 	orrlt.w	r2, r2, #2
 8009978:	9307      	strge	r3, [sp, #28]
 800997a:	9307      	strlt	r3, [sp, #28]
 800997c:	bfb8      	it	lt
 800997e:	9204      	strlt	r2, [sp, #16]
 8009980:	7823      	ldrb	r3, [r4, #0]
 8009982:	2b2e      	cmp	r3, #46	; 0x2e
 8009984:	d10c      	bne.n	80099a0 <_svfiprintf_r+0x130>
 8009986:	7863      	ldrb	r3, [r4, #1]
 8009988:	2b2a      	cmp	r3, #42	; 0x2a
 800998a:	d135      	bne.n	80099f8 <_svfiprintf_r+0x188>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	1d1a      	adds	r2, r3, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	9203      	str	r2, [sp, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb8      	it	lt
 8009998:	f04f 33ff 	movlt.w	r3, #4294967295
 800999c:	3402      	adds	r4, #2
 800999e:	9305      	str	r3, [sp, #20]
 80099a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a6c <_svfiprintf_r+0x1fc>
 80099a4:	7821      	ldrb	r1, [r4, #0]
 80099a6:	2203      	movs	r2, #3
 80099a8:	4650      	mov	r0, sl
 80099aa:	f7f6 fc29 	bl	8000200 <memchr>
 80099ae:	b140      	cbz	r0, 80099c2 <_svfiprintf_r+0x152>
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	eba0 000a 	sub.w	r0, r0, sl
 80099b6:	fa03 f000 	lsl.w	r0, r3, r0
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	4303      	orrs	r3, r0
 80099be:	3401      	adds	r4, #1
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c6:	4826      	ldr	r0, [pc, #152]	; (8009a60 <_svfiprintf_r+0x1f0>)
 80099c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099cc:	2206      	movs	r2, #6
 80099ce:	f7f6 fc17 	bl	8000200 <memchr>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d038      	beq.n	8009a48 <_svfiprintf_r+0x1d8>
 80099d6:	4b23      	ldr	r3, [pc, #140]	; (8009a64 <_svfiprintf_r+0x1f4>)
 80099d8:	bb1b      	cbnz	r3, 8009a22 <_svfiprintf_r+0x1b2>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	3307      	adds	r3, #7
 80099de:	f023 0307 	bic.w	r3, r3, #7
 80099e2:	3308      	adds	r3, #8
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e8:	4433      	add	r3, r6
 80099ea:	9309      	str	r3, [sp, #36]	; 0x24
 80099ec:	e767      	b.n	80098be <_svfiprintf_r+0x4e>
 80099ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f2:	460c      	mov	r4, r1
 80099f4:	2001      	movs	r0, #1
 80099f6:	e7a5      	b.n	8009944 <_svfiprintf_r+0xd4>
 80099f8:	2300      	movs	r3, #0
 80099fa:	3401      	adds	r4, #1
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	4619      	mov	r1, r3
 8009a00:	f04f 0c0a 	mov.w	ip, #10
 8009a04:	4620      	mov	r0, r4
 8009a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0a:	3a30      	subs	r2, #48	; 0x30
 8009a0c:	2a09      	cmp	r2, #9
 8009a0e:	d903      	bls.n	8009a18 <_svfiprintf_r+0x1a8>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0c5      	beq.n	80099a0 <_svfiprintf_r+0x130>
 8009a14:	9105      	str	r1, [sp, #20]
 8009a16:	e7c3      	b.n	80099a0 <_svfiprintf_r+0x130>
 8009a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e7f0      	b.n	8009a04 <_svfiprintf_r+0x194>
 8009a22:	ab03      	add	r3, sp, #12
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	462a      	mov	r2, r5
 8009a28:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <_svfiprintf_r+0x1f8>)
 8009a2a:	a904      	add	r1, sp, #16
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7fb fedd 	bl	80057ec <_printf_float>
 8009a32:	1c42      	adds	r2, r0, #1
 8009a34:	4606      	mov	r6, r0
 8009a36:	d1d6      	bne.n	80099e6 <_svfiprintf_r+0x176>
 8009a38:	89ab      	ldrh	r3, [r5, #12]
 8009a3a:	065b      	lsls	r3, r3, #25
 8009a3c:	f53f af2c 	bmi.w	8009898 <_svfiprintf_r+0x28>
 8009a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a42:	b01d      	add	sp, #116	; 0x74
 8009a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a48:	ab03      	add	r3, sp, #12
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <_svfiprintf_r+0x1f8>)
 8009a50:	a904      	add	r1, sp, #16
 8009a52:	4638      	mov	r0, r7
 8009a54:	f7fc f96e 	bl	8005d34 <_printf_i>
 8009a58:	e7eb      	b.n	8009a32 <_svfiprintf_r+0x1c2>
 8009a5a:	bf00      	nop
 8009a5c:	0800a7bc 	.word	0x0800a7bc
 8009a60:	0800a7c6 	.word	0x0800a7c6
 8009a64:	080057ed 	.word	0x080057ed
 8009a68:	080097b9 	.word	0x080097b9
 8009a6c:	0800a7c2 	.word	0x0800a7c2

08009a70 <__sfputc_r>:
 8009a70:	6893      	ldr	r3, [r2, #8]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	b410      	push	{r4}
 8009a78:	6093      	str	r3, [r2, #8]
 8009a7a:	da08      	bge.n	8009a8e <__sfputc_r+0x1e>
 8009a7c:	6994      	ldr	r4, [r2, #24]
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	db01      	blt.n	8009a86 <__sfputc_r+0x16>
 8009a82:	290a      	cmp	r1, #10
 8009a84:	d103      	bne.n	8009a8e <__sfputc_r+0x1e>
 8009a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a8a:	f7fd bbe9 	b.w	8007260 <__swbuf_r>
 8009a8e:	6813      	ldr	r3, [r2, #0]
 8009a90:	1c58      	adds	r0, r3, #1
 8009a92:	6010      	str	r0, [r2, #0]
 8009a94:	7019      	strb	r1, [r3, #0]
 8009a96:	4608      	mov	r0, r1
 8009a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <__sfputs_r>:
 8009a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	460f      	mov	r7, r1
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	18d5      	adds	r5, r2, r3
 8009aa8:	42ac      	cmp	r4, r5
 8009aaa:	d101      	bne.n	8009ab0 <__sfputs_r+0x12>
 8009aac:	2000      	movs	r0, #0
 8009aae:	e007      	b.n	8009ac0 <__sfputs_r+0x22>
 8009ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab4:	463a      	mov	r2, r7
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7ff ffda 	bl	8009a70 <__sfputc_r>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d1f3      	bne.n	8009aa8 <__sfputs_r+0xa>
 8009ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ac4 <_vfiprintf_r>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	460d      	mov	r5, r1
 8009aca:	b09d      	sub	sp, #116	; 0x74
 8009acc:	4614      	mov	r4, r2
 8009ace:	4698      	mov	r8, r3
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	b118      	cbz	r0, 8009adc <_vfiprintf_r+0x18>
 8009ad4:	6983      	ldr	r3, [r0, #24]
 8009ad6:	b90b      	cbnz	r3, 8009adc <_vfiprintf_r+0x18>
 8009ad8:	f7fe fc16 	bl	8008308 <__sinit>
 8009adc:	4b89      	ldr	r3, [pc, #548]	; (8009d04 <_vfiprintf_r+0x240>)
 8009ade:	429d      	cmp	r5, r3
 8009ae0:	d11b      	bne.n	8009b1a <_vfiprintf_r+0x56>
 8009ae2:	6875      	ldr	r5, [r6, #4]
 8009ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ae6:	07d9      	lsls	r1, r3, #31
 8009ae8:	d405      	bmi.n	8009af6 <_vfiprintf_r+0x32>
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	059a      	lsls	r2, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_vfiprintf_r+0x32>
 8009af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009af2:	f7ff f81a 	bl	8008b2a <__retarget_lock_acquire_recursive>
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	071b      	lsls	r3, r3, #28
 8009afa:	d501      	bpl.n	8009b00 <_vfiprintf_r+0x3c>
 8009afc:	692b      	ldr	r3, [r5, #16]
 8009afe:	b9eb      	cbnz	r3, 8009b3c <_vfiprintf_r+0x78>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7fd fbfe 	bl	8007304 <__swsetup_r>
 8009b08:	b1c0      	cbz	r0, 8009b3c <_vfiprintf_r+0x78>
 8009b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b0c:	07dc      	lsls	r4, r3, #31
 8009b0e:	d50e      	bpl.n	8009b2e <_vfiprintf_r+0x6a>
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295
 8009b14:	b01d      	add	sp, #116	; 0x74
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1a:	4b7b      	ldr	r3, [pc, #492]	; (8009d08 <_vfiprintf_r+0x244>)
 8009b1c:	429d      	cmp	r5, r3
 8009b1e:	d101      	bne.n	8009b24 <_vfiprintf_r+0x60>
 8009b20:	68b5      	ldr	r5, [r6, #8]
 8009b22:	e7df      	b.n	8009ae4 <_vfiprintf_r+0x20>
 8009b24:	4b79      	ldr	r3, [pc, #484]	; (8009d0c <_vfiprintf_r+0x248>)
 8009b26:	429d      	cmp	r5, r3
 8009b28:	bf08      	it	eq
 8009b2a:	68f5      	ldreq	r5, [r6, #12]
 8009b2c:	e7da      	b.n	8009ae4 <_vfiprintf_r+0x20>
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	0598      	lsls	r0, r3, #22
 8009b32:	d4ed      	bmi.n	8009b10 <_vfiprintf_r+0x4c>
 8009b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b36:	f7fe fff9 	bl	8008b2c <__retarget_lock_release_recursive>
 8009b3a:	e7e9      	b.n	8009b10 <_vfiprintf_r+0x4c>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b40:	2320      	movs	r3, #32
 8009b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b4a:	2330      	movs	r3, #48	; 0x30
 8009b4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d10 <_vfiprintf_r+0x24c>
 8009b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b54:	f04f 0901 	mov.w	r9, #1
 8009b58:	4623      	mov	r3, r4
 8009b5a:	469a      	mov	sl, r3
 8009b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b60:	b10a      	cbz	r2, 8009b66 <_vfiprintf_r+0xa2>
 8009b62:	2a25      	cmp	r2, #37	; 0x25
 8009b64:	d1f9      	bne.n	8009b5a <_vfiprintf_r+0x96>
 8009b66:	ebba 0b04 	subs.w	fp, sl, r4
 8009b6a:	d00b      	beq.n	8009b84 <_vfiprintf_r+0xc0>
 8009b6c:	465b      	mov	r3, fp
 8009b6e:	4622      	mov	r2, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff ff93 	bl	8009a9e <__sfputs_r>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f000 80aa 	beq.w	8009cd2 <_vfiprintf_r+0x20e>
 8009b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b80:	445a      	add	r2, fp
 8009b82:	9209      	str	r2, [sp, #36]	; 0x24
 8009b84:	f89a 3000 	ldrb.w	r3, [sl]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 80a2 	beq.w	8009cd2 <_vfiprintf_r+0x20e>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f04f 32ff 	mov.w	r2, #4294967295
 8009b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b98:	f10a 0a01 	add.w	sl, sl, #1
 8009b9c:	9304      	str	r3, [sp, #16]
 8009b9e:	9307      	str	r3, [sp, #28]
 8009ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ba6:	4654      	mov	r4, sl
 8009ba8:	2205      	movs	r2, #5
 8009baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bae:	4858      	ldr	r0, [pc, #352]	; (8009d10 <_vfiprintf_r+0x24c>)
 8009bb0:	f7f6 fb26 	bl	8000200 <memchr>
 8009bb4:	9a04      	ldr	r2, [sp, #16]
 8009bb6:	b9d8      	cbnz	r0, 8009bf0 <_vfiprintf_r+0x12c>
 8009bb8:	06d1      	lsls	r1, r2, #27
 8009bba:	bf44      	itt	mi
 8009bbc:	2320      	movmi	r3, #32
 8009bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc2:	0713      	lsls	r3, r2, #28
 8009bc4:	bf44      	itt	mi
 8009bc6:	232b      	movmi	r3, #43	; 0x2b
 8009bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd2:	d015      	beq.n	8009c00 <_vfiprintf_r+0x13c>
 8009bd4:	9a07      	ldr	r2, [sp, #28]
 8009bd6:	4654      	mov	r4, sl
 8009bd8:	2000      	movs	r0, #0
 8009bda:	f04f 0c0a 	mov.w	ip, #10
 8009bde:	4621      	mov	r1, r4
 8009be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009be4:	3b30      	subs	r3, #48	; 0x30
 8009be6:	2b09      	cmp	r3, #9
 8009be8:	d94e      	bls.n	8009c88 <_vfiprintf_r+0x1c4>
 8009bea:	b1b0      	cbz	r0, 8009c1a <_vfiprintf_r+0x156>
 8009bec:	9207      	str	r2, [sp, #28]
 8009bee:	e014      	b.n	8009c1a <_vfiprintf_r+0x156>
 8009bf0:	eba0 0308 	sub.w	r3, r0, r8
 8009bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	46a2      	mov	sl, r4
 8009bfe:	e7d2      	b.n	8009ba6 <_vfiprintf_r+0xe2>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	1d19      	adds	r1, r3, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	9103      	str	r1, [sp, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfbb      	ittet	lt
 8009c0c:	425b      	neglt	r3, r3
 8009c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c12:	9307      	strge	r3, [sp, #28]
 8009c14:	9307      	strlt	r3, [sp, #28]
 8009c16:	bfb8      	it	lt
 8009c18:	9204      	strlt	r2, [sp, #16]
 8009c1a:	7823      	ldrb	r3, [r4, #0]
 8009c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c1e:	d10c      	bne.n	8009c3a <_vfiprintf_r+0x176>
 8009c20:	7863      	ldrb	r3, [r4, #1]
 8009c22:	2b2a      	cmp	r3, #42	; 0x2a
 8009c24:	d135      	bne.n	8009c92 <_vfiprintf_r+0x1ce>
 8009c26:	9b03      	ldr	r3, [sp, #12]
 8009c28:	1d1a      	adds	r2, r3, #4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	9203      	str	r2, [sp, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfb8      	it	lt
 8009c32:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c36:	3402      	adds	r4, #2
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d20 <_vfiprintf_r+0x25c>
 8009c3e:	7821      	ldrb	r1, [r4, #0]
 8009c40:	2203      	movs	r2, #3
 8009c42:	4650      	mov	r0, sl
 8009c44:	f7f6 fadc 	bl	8000200 <memchr>
 8009c48:	b140      	cbz	r0, 8009c5c <_vfiprintf_r+0x198>
 8009c4a:	2340      	movs	r3, #64	; 0x40
 8009c4c:	eba0 000a 	sub.w	r0, r0, sl
 8009c50:	fa03 f000 	lsl.w	r0, r3, r0
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	4303      	orrs	r3, r0
 8009c58:	3401      	adds	r4, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c60:	482c      	ldr	r0, [pc, #176]	; (8009d14 <_vfiprintf_r+0x250>)
 8009c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c66:	2206      	movs	r2, #6
 8009c68:	f7f6 faca 	bl	8000200 <memchr>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d03f      	beq.n	8009cf0 <_vfiprintf_r+0x22c>
 8009c70:	4b29      	ldr	r3, [pc, #164]	; (8009d18 <_vfiprintf_r+0x254>)
 8009c72:	bb1b      	cbnz	r3, 8009cbc <_vfiprintf_r+0x1f8>
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	3307      	adds	r3, #7
 8009c78:	f023 0307 	bic.w	r3, r3, #7
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c82:	443b      	add	r3, r7
 8009c84:	9309      	str	r3, [sp, #36]	; 0x24
 8009c86:	e767      	b.n	8009b58 <_vfiprintf_r+0x94>
 8009c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	2001      	movs	r0, #1
 8009c90:	e7a5      	b.n	8009bde <_vfiprintf_r+0x11a>
 8009c92:	2300      	movs	r3, #0
 8009c94:	3401      	adds	r4, #1
 8009c96:	9305      	str	r3, [sp, #20]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f04f 0c0a 	mov.w	ip, #10
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca4:	3a30      	subs	r2, #48	; 0x30
 8009ca6:	2a09      	cmp	r2, #9
 8009ca8:	d903      	bls.n	8009cb2 <_vfiprintf_r+0x1ee>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c5      	beq.n	8009c3a <_vfiprintf_r+0x176>
 8009cae:	9105      	str	r1, [sp, #20]
 8009cb0:	e7c3      	b.n	8009c3a <_vfiprintf_r+0x176>
 8009cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e7f0      	b.n	8009c9e <_vfiprintf_r+0x1da>
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4b16      	ldr	r3, [pc, #88]	; (8009d1c <_vfiprintf_r+0x258>)
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7fb fd90 	bl	80057ec <_printf_float>
 8009ccc:	4607      	mov	r7, r0
 8009cce:	1c78      	adds	r0, r7, #1
 8009cd0:	d1d6      	bne.n	8009c80 <_vfiprintf_r+0x1bc>
 8009cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cd4:	07d9      	lsls	r1, r3, #31
 8009cd6:	d405      	bmi.n	8009ce4 <_vfiprintf_r+0x220>
 8009cd8:	89ab      	ldrh	r3, [r5, #12]
 8009cda:	059a      	lsls	r2, r3, #22
 8009cdc:	d402      	bmi.n	8009ce4 <_vfiprintf_r+0x220>
 8009cde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ce0:	f7fe ff24 	bl	8008b2c <__retarget_lock_release_recursive>
 8009ce4:	89ab      	ldrh	r3, [r5, #12]
 8009ce6:	065b      	lsls	r3, r3, #25
 8009ce8:	f53f af12 	bmi.w	8009b10 <_vfiprintf_r+0x4c>
 8009cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cee:	e711      	b.n	8009b14 <_vfiprintf_r+0x50>
 8009cf0:	ab03      	add	r3, sp, #12
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <_vfiprintf_r+0x258>)
 8009cf8:	a904      	add	r1, sp, #16
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7fc f81a 	bl	8005d34 <_printf_i>
 8009d00:	e7e4      	b.n	8009ccc <_vfiprintf_r+0x208>
 8009d02:	bf00      	nop
 8009d04:	0800a5a4 	.word	0x0800a5a4
 8009d08:	0800a5c4 	.word	0x0800a5c4
 8009d0c:	0800a584 	.word	0x0800a584
 8009d10:	0800a7bc 	.word	0x0800a7bc
 8009d14:	0800a7c6 	.word	0x0800a7c6
 8009d18:	080057ed 	.word	0x080057ed
 8009d1c:	08009a9f 	.word	0x08009a9f
 8009d20:	0800a7c2 	.word	0x0800a7c2
 8009d24:	00000000 	.word	0x00000000

08009d28 <nan>:
 8009d28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d30 <nan+0x8>
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	00000000 	.word	0x00000000
 8009d34:	7ff80000 	.word	0x7ff80000

08009d38 <_sbrk_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d06      	ldr	r5, [pc, #24]	; (8009d54 <_sbrk_r+0x1c>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	f7f8 ff6a 	bl	8002c1c <_sbrk>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_sbrk_r+0x1a>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_sbrk_r+0x1a>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	20000348 	.word	0x20000348

08009d58 <__sread>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d60:	f000 f93a 	bl	8009fd8 <_read_r>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	bfab      	itete	ge
 8009d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d6c:	181b      	addge	r3, r3, r0
 8009d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d72:	bfac      	ite	ge
 8009d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d76:	81a3      	strhlt	r3, [r4, #12]
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <__swrite>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	461f      	mov	r7, r3
 8009d80:	898b      	ldrh	r3, [r1, #12]
 8009d82:	05db      	lsls	r3, r3, #23
 8009d84:	4605      	mov	r5, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4616      	mov	r6, r2
 8009d8a:	d505      	bpl.n	8009d98 <__swrite+0x1e>
 8009d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d90:	2302      	movs	r3, #2
 8009d92:	2200      	movs	r2, #0
 8009d94:	f000 f8b8 	bl	8009f08 <_lseek_r>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	4628      	mov	r0, r5
 8009daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	f000 b837 	b.w	8009e20 <_write_r>

08009db2 <__sseek>:
 8009db2:	b510      	push	{r4, lr}
 8009db4:	460c      	mov	r4, r1
 8009db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dba:	f000 f8a5 	bl	8009f08 <_lseek_r>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	bf15      	itete	ne
 8009dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dce:	81a3      	strheq	r3, [r4, #12]
 8009dd0:	bf18      	it	ne
 8009dd2:	81a3      	strhne	r3, [r4, #12]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__sclose>:
 8009dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dda:	f000 b851 	b.w	8009e80 <_close_r>

08009dde <strncmp>:
 8009dde:	b510      	push	{r4, lr}
 8009de0:	b17a      	cbz	r2, 8009e02 <strncmp+0x24>
 8009de2:	4603      	mov	r3, r0
 8009de4:	3901      	subs	r1, #1
 8009de6:	1884      	adds	r4, r0, r2
 8009de8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009df0:	4290      	cmp	r0, r2
 8009df2:	d101      	bne.n	8009df8 <strncmp+0x1a>
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d101      	bne.n	8009dfc <strncmp+0x1e>
 8009df8:	1a80      	subs	r0, r0, r2
 8009dfa:	bd10      	pop	{r4, pc}
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d1f3      	bne.n	8009de8 <strncmp+0xa>
 8009e00:	e7fa      	b.n	8009df8 <strncmp+0x1a>
 8009e02:	4610      	mov	r0, r2
 8009e04:	e7f9      	b.n	8009dfa <strncmp+0x1c>

08009e06 <__ascii_wctomb>:
 8009e06:	b149      	cbz	r1, 8009e1c <__ascii_wctomb+0x16>
 8009e08:	2aff      	cmp	r2, #255	; 0xff
 8009e0a:	bf85      	ittet	hi
 8009e0c:	238a      	movhi	r3, #138	; 0x8a
 8009e0e:	6003      	strhi	r3, [r0, #0]
 8009e10:	700a      	strbls	r2, [r1, #0]
 8009e12:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e16:	bf98      	it	ls
 8009e18:	2001      	movls	r0, #1
 8009e1a:	4770      	bx	lr
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	4770      	bx	lr

08009e20 <_write_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d07      	ldr	r5, [pc, #28]	; (8009e40 <_write_r+0x20>)
 8009e24:	4604      	mov	r4, r0
 8009e26:	4608      	mov	r0, r1
 8009e28:	4611      	mov	r1, r2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	602a      	str	r2, [r5, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f7f8 fc2a 	bl	8002688 <_write>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d102      	bne.n	8009e3e <_write_r+0x1e>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	b103      	cbz	r3, 8009e3e <_write_r+0x1e>
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	20000348 	.word	0x20000348

08009e44 <__assert_func>:
 8009e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e46:	4614      	mov	r4, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4b09      	ldr	r3, [pc, #36]	; (8009e70 <__assert_func+0x2c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4605      	mov	r5, r0
 8009e50:	68d8      	ldr	r0, [r3, #12]
 8009e52:	b14c      	cbz	r4, 8009e68 <__assert_func+0x24>
 8009e54:	4b07      	ldr	r3, [pc, #28]	; (8009e74 <__assert_func+0x30>)
 8009e56:	9100      	str	r1, [sp, #0]
 8009e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e5c:	4906      	ldr	r1, [pc, #24]	; (8009e78 <__assert_func+0x34>)
 8009e5e:	462b      	mov	r3, r5
 8009e60:	f000 f81e 	bl	8009ea0 <fiprintf>
 8009e64:	f000 f8ca 	bl	8009ffc <abort>
 8009e68:	4b04      	ldr	r3, [pc, #16]	; (8009e7c <__assert_func+0x38>)
 8009e6a:	461c      	mov	r4, r3
 8009e6c:	e7f3      	b.n	8009e56 <__assert_func+0x12>
 8009e6e:	bf00      	nop
 8009e70:	2000000c 	.word	0x2000000c
 8009e74:	0800a7cd 	.word	0x0800a7cd
 8009e78:	0800a7da 	.word	0x0800a7da
 8009e7c:	0800a808 	.word	0x0800a808

08009e80 <_close_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_close_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f8 fe91 	bl	8002bb2 <_close>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_close_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_close_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	20000348 	.word	0x20000348

08009ea0 <fiprintf>:
 8009ea0:	b40e      	push	{r1, r2, r3}
 8009ea2:	b503      	push	{r0, r1, lr}
 8009ea4:	4601      	mov	r1, r0
 8009ea6:	ab03      	add	r3, sp, #12
 8009ea8:	4805      	ldr	r0, [pc, #20]	; (8009ec0 <fiprintf+0x20>)
 8009eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eae:	6800      	ldr	r0, [r0, #0]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	f7ff fe07 	bl	8009ac4 <_vfiprintf_r>
 8009eb6:	b002      	add	sp, #8
 8009eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ebc:	b003      	add	sp, #12
 8009ebe:	4770      	bx	lr
 8009ec0:	2000000c 	.word	0x2000000c

08009ec4 <_fstat_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d07      	ldr	r5, [pc, #28]	; (8009ee4 <_fstat_r+0x20>)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	4611      	mov	r1, r2
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	f7f8 fe7a 	bl	8002bca <_fstat>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d102      	bne.n	8009ee0 <_fstat_r+0x1c>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	b103      	cbz	r3, 8009ee0 <_fstat_r+0x1c>
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	bd38      	pop	{r3, r4, r5, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000348 	.word	0x20000348

08009ee8 <_isatty_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_isatty_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f8 fe79 	bl	8002bea <_isatty>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_isatty_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_isatty_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20000348 	.word	0x20000348

08009f08 <_lseek_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_lseek_r+0x20>)
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	f7f8 fe72 	bl	8002c00 <_lseek>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_lseek_r+0x1e>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_lseek_r+0x1e>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	20000348 	.word	0x20000348

08009f2c <memmove>:
 8009f2c:	4288      	cmp	r0, r1
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	eb01 0402 	add.w	r4, r1, r2
 8009f34:	d902      	bls.n	8009f3c <memmove+0x10>
 8009f36:	4284      	cmp	r4, r0
 8009f38:	4623      	mov	r3, r4
 8009f3a:	d807      	bhi.n	8009f4c <memmove+0x20>
 8009f3c:	1e43      	subs	r3, r0, #1
 8009f3e:	42a1      	cmp	r1, r4
 8009f40:	d008      	beq.n	8009f54 <memmove+0x28>
 8009f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f4a:	e7f8      	b.n	8009f3e <memmove+0x12>
 8009f4c:	4402      	add	r2, r0
 8009f4e:	4601      	mov	r1, r0
 8009f50:	428a      	cmp	r2, r1
 8009f52:	d100      	bne.n	8009f56 <memmove+0x2a>
 8009f54:	bd10      	pop	{r4, pc}
 8009f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f5e:	e7f7      	b.n	8009f50 <memmove+0x24>

08009f60 <__malloc_lock>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__malloc_lock+0x8>)
 8009f62:	f7fe bde2 	b.w	8008b2a <__retarget_lock_acquire_recursive>
 8009f66:	bf00      	nop
 8009f68:	2000033c 	.word	0x2000033c

08009f6c <__malloc_unlock>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__malloc_unlock+0x8>)
 8009f6e:	f7fe bddd 	b.w	8008b2c <__retarget_lock_release_recursive>
 8009f72:	bf00      	nop
 8009f74:	2000033c 	.word	0x2000033c

08009f78 <_realloc_r>:
 8009f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4614      	mov	r4, r2
 8009f80:	460e      	mov	r6, r1
 8009f82:	b921      	cbnz	r1, 8009f8e <_realloc_r+0x16>
 8009f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	4611      	mov	r1, r2
 8009f8a:	f7ff bba1 	b.w	80096d0 <_malloc_r>
 8009f8e:	b92a      	cbnz	r2, 8009f9c <_realloc_r+0x24>
 8009f90:	f7ff fb32 	bl	80095f8 <_free_r>
 8009f94:	4625      	mov	r5, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	f000 f835 	bl	800a00a <_malloc_usable_size_r>
 8009fa0:	4284      	cmp	r4, r0
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	d802      	bhi.n	8009fac <_realloc_r+0x34>
 8009fa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009faa:	d812      	bhi.n	8009fd2 <_realloc_r+0x5a>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7ff fb8e 	bl	80096d0 <_malloc_r>
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0ed      	beq.n	8009f96 <_realloc_r+0x1e>
 8009fba:	42bc      	cmp	r4, r7
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	bf28      	it	cs
 8009fc2:	463a      	movcs	r2, r7
 8009fc4:	f7fe fe32 	bl	8008c2c <memcpy>
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f7ff fb14 	bl	80095f8 <_free_r>
 8009fd0:	e7e1      	b.n	8009f96 <_realloc_r+0x1e>
 8009fd2:	4635      	mov	r5, r6
 8009fd4:	e7df      	b.n	8009f96 <_realloc_r+0x1e>
	...

08009fd8 <_read_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d07      	ldr	r5, [pc, #28]	; (8009ff8 <_read_r+0x20>)
 8009fdc:	4604      	mov	r4, r0
 8009fde:	4608      	mov	r0, r1
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	602a      	str	r2, [r5, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f7f8 fdc6 	bl	8002b78 <_read>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_read_r+0x1e>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_read_r+0x1e>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	20000348 	.word	0x20000348

08009ffc <abort>:
 8009ffc:	b508      	push	{r3, lr}
 8009ffe:	2006      	movs	r0, #6
 800a000:	f000 f834 	bl	800a06c <raise>
 800a004:	2001      	movs	r0, #1
 800a006:	f7f8 fdad 	bl	8002b64 <_exit>

0800a00a <_malloc_usable_size_r>:
 800a00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00e:	1f18      	subs	r0, r3, #4
 800a010:	2b00      	cmp	r3, #0
 800a012:	bfbc      	itt	lt
 800a014:	580b      	ldrlt	r3, [r1, r0]
 800a016:	18c0      	addlt	r0, r0, r3
 800a018:	4770      	bx	lr

0800a01a <_raise_r>:
 800a01a:	291f      	cmp	r1, #31
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4604      	mov	r4, r0
 800a020:	460d      	mov	r5, r1
 800a022:	d904      	bls.n	800a02e <_raise_r+0x14>
 800a024:	2316      	movs	r3, #22
 800a026:	6003      	str	r3, [r0, #0]
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	bd38      	pop	{r3, r4, r5, pc}
 800a02e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a030:	b112      	cbz	r2, 800a038 <_raise_r+0x1e>
 800a032:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a036:	b94b      	cbnz	r3, 800a04c <_raise_r+0x32>
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 f831 	bl	800a0a0 <_getpid_r>
 800a03e:	462a      	mov	r2, r5
 800a040:	4601      	mov	r1, r0
 800a042:	4620      	mov	r0, r4
 800a044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a048:	f000 b818 	b.w	800a07c <_kill_r>
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d00a      	beq.n	800a066 <_raise_r+0x4c>
 800a050:	1c59      	adds	r1, r3, #1
 800a052:	d103      	bne.n	800a05c <_raise_r+0x42>
 800a054:	2316      	movs	r3, #22
 800a056:	6003      	str	r3, [r0, #0]
 800a058:	2001      	movs	r0, #1
 800a05a:	e7e7      	b.n	800a02c <_raise_r+0x12>
 800a05c:	2400      	movs	r4, #0
 800a05e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a062:	4628      	mov	r0, r5
 800a064:	4798      	blx	r3
 800a066:	2000      	movs	r0, #0
 800a068:	e7e0      	b.n	800a02c <_raise_r+0x12>
	...

0800a06c <raise>:
 800a06c:	4b02      	ldr	r3, [pc, #8]	; (800a078 <raise+0xc>)
 800a06e:	4601      	mov	r1, r0
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	f7ff bfd2 	b.w	800a01a <_raise_r>
 800a076:	bf00      	nop
 800a078:	2000000c 	.word	0x2000000c

0800a07c <_kill_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d07      	ldr	r5, [pc, #28]	; (800a09c <_kill_r+0x20>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	4611      	mov	r1, r2
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	f7f8 fd5b 	bl	8002b44 <_kill>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	d102      	bne.n	800a098 <_kill_r+0x1c>
 800a092:	682b      	ldr	r3, [r5, #0]
 800a094:	b103      	cbz	r3, 800a098 <_kill_r+0x1c>
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	bd38      	pop	{r3, r4, r5, pc}
 800a09a:	bf00      	nop
 800a09c:	20000348 	.word	0x20000348

0800a0a0 <_getpid_r>:
 800a0a0:	f7f8 bd48 	b.w	8002b34 <_getpid>

0800a0a4 <_init>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	bf00      	nop
 800a0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0aa:	bc08      	pop	{r3}
 800a0ac:	469e      	mov	lr, r3
 800a0ae:	4770      	bx	lr

0800a0b0 <_fini>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	bf00      	nop
 800a0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b6:	bc08      	pop	{r3}
 800a0b8:	469e      	mov	lr, r3
 800a0ba:	4770      	bx	lr
