
Cpp_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005508  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005744  08005744  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800574c  0800574c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db44  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002213  00000000  00000000  0002dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267c5  00000000  00000000  00031348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f337  00000000  00000000  00057b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6301  00000000  00000000  00066e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d145  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032c4  00000000  00000000  0013d198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800569c 	.word	0x0800569c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	0800569c 	.word	0x0800569c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b75      	ldr	r3, [pc, #468]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a74      	ldr	r2, [pc, #464]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b72      	ldr	r3, [pc, #456]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b6e      	ldr	r3, [pc, #440]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a6d      	ldr	r2, [pc, #436]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b6b      	ldr	r3, [pc, #428]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b67      	ldr	r3, [pc, #412]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a66      	ldr	r2, [pc, #408]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b64      	ldr	r3, [pc, #400]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b60      	ldr	r3, [pc, #384]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a5f      	ldr	r2, [pc, #380]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b5d      	ldr	r3, [pc, #372]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	4b59      	ldr	r3, [pc, #356]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a58      	ldr	r2, [pc, #352]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b56      	ldr	r3, [pc, #344]	; (80006e0 <MX_GPIO_Init+0x1f0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f244 0181 	movw	r1, #16513	; 0x4081
 8000598:	4852      	ldr	r0, [pc, #328]	; (80006e4 <MX_GPIO_Init+0x1f4>)
 800059a:	f000 ff9f 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	4851      	ldr	r0, [pc, #324]	; (80006e8 <MX_GPIO_Init+0x1f8>)
 80005a4:	f000 ff9a 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	484b      	ldr	r0, [pc, #300]	; (80006ec <MX_GPIO_Init+0x1fc>)
 80005c0:	f000 fde0 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005c4:	2332      	movs	r3, #50	; 0x32
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005d4:	230b      	movs	r3, #11
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	4843      	ldr	r0, [pc, #268]	; (80006ec <MX_GPIO_Init+0x1fc>)
 80005e0:	f000 fdd0 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80005e4:	2386      	movs	r3, #134	; 0x86
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005f4:	230b      	movs	r3, #11
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	483c      	ldr	r0, [pc, #240]	; (80006f0 <MX_GPIO_Init+0x200>)
 8000600:	f000 fdc0 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000604:	f244 0381 	movw	r3, #16513	; 0x4081
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4831      	ldr	r0, [pc, #196]	; (80006e4 <MX_GPIO_Init+0x1f4>)
 800061e:	f000 fdb1 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000634:	230b      	movs	r3, #11
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4829      	ldr	r0, [pc, #164]	; (80006e4 <MX_GPIO_Init+0x1f4>)
 8000640:	f000 fda0 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000644:	2340      	movs	r3, #64	; 0x40
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4823      	ldr	r0, [pc, #140]	; (80006e8 <MX_GPIO_Init+0x1f8>)
 800065c:	f000 fd92 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x1f8>)
 8000674:	f000 fd86 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000678:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800068a:	230a      	movs	r3, #10
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4816      	ldr	r0, [pc, #88]	; (80006f0 <MX_GPIO_Init+0x200>)
 8000696:	f000 fd75 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800069a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4810      	ldr	r0, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x200>)
 80006b0:	f000 fd68 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c6:	230b      	movs	r3, #11
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_GPIO_Init+0x1f8>)
 80006d2:	f000 fd57 	bl	8001184 <HAL_GPIO_Init>

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40021800 	.word	0x40021800
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020000 	.word	0x40020000

080006f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C1_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C1_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C1_Init+0x74>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_I2C1_Init+0x74>)
 8000732:	f000 feed 	bl	8001510 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 f926 	bl	800098c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C1_Init+0x74>)
 8000744:	f002 fd03 	bl	800314e <HAL_I2CEx_ConfigAnalogFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 f91d 	bl	800098c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C1_Init+0x74>)
 8000756:	f002 fd36 	bl	80031c6 <HAL_I2CEx_ConfigDigitalFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f914 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000008c 	.word	0x2000008c
 800076c:	40005400 	.word	0x40005400
 8000770:	000186a0 	.word	0x000186a0

08000774 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <HAL_I2C_MspInit+0xa4>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d13c      	bne.n	8000810 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <HAL_I2C_MspInit+0xa8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1f      	ldr	r2, [pc, #124]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80007b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b8:	2312      	movs	r3, #18
 80007ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c4:	2304      	movs	r3, #4
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <HAL_I2C_MspInit+0xac>)
 80007d0:	f000 fcd8 	bl	8001184 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_I2C_MspInit+0xa8>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	201f      	movs	r0, #31
 80007f6:	f000 fbee 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007fa:	201f      	movs	r0, #31
 80007fc:	f000 fc07 	bl	800100e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2020      	movs	r0, #32
 8000806:	f000 fbe6 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800080a:	2020      	movs	r0, #32
 800080c:	f000 fbff 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40005400 	.word	0x40005400
 800081c:	40023800 	.word	0x40023800
 8000820:	40020400 	.word	0x40020400

08000824 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
#ifdef __cplusplus
extern "C" int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
#else
int _write(int32_t file, uint8_t *ptr, int32_t len) {
#endif
    if( HAL_UART_Transmit(&huart3, ptr, len, 10) == HAL_OK ) return len;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	b29a      	uxth	r2, r3
 8000834:	230a      	movs	r3, #10
 8000836:	68b9      	ldr	r1, [r7, #8]
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <_write+0x38>)
 800083a:	f003 fa38 	bl	8003cae <HAL_UART_Transmit>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <_write+0x2e>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	e000      	b.n	8000854 <_write+0x30>
    else return 0;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000e4 	.word	0x200000e4

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fa46 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f810 	bl	800088c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f7ff fe40 	bl	80004f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000870:	f000 f99c 	bl	8000bac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000874:	f7ff ff3e 	bl	80006f4 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Cpp printf Test\r\n");
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <main+0x28>)
 800087a:	f004 fa7f 	bl	8004d7c <puts>
	  HAL_Delay(1000);
 800087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000882:	f000 faa9 	bl	8000dd8 <HAL_Delay>
	  printf("Cpp printf Test\r\n");
 8000886:	e7f7      	b.n	8000878 <main+0x18>
 8000888:	080056b4 	.word	0x080056b4

0800088c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	; 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f004 f9f8 	bl	8004c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b33      	ldr	r3, [pc, #204]	; (8000984 <_Z18SystemClock_Configv+0xf8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a32      	ldr	r2, [pc, #200]	; (8000984 <_Z18SystemClock_Configv+0xf8>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b30      	ldr	r3, [pc, #192]	; (8000984 <_Z18SystemClock_Configv+0xf8>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <_Z18SystemClock_Configv+0xfc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a2c      	ldr	r2, [pc, #176]	; (8000988 <_Z18SystemClock_Configv+0xfc>)
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <_Z18SystemClock_Configv+0xfc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000900:	23b4      	movs	r3, #180	; 0xb4
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fce7 	bl	80032e4 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000926:	f000 f831 	bl	800098c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800092a:	f002 fc8b 	bl	8003244 <HAL_PWREx_EnableOverDrive>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800093e:	f000 f825 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2105      	movs	r1, #5
 8000960:	4618      	mov	r0, r3
 8000962:	f002 ff37 	bl	80037d4 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8000976:	f000 f809 	bl	800098c <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f9b0 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <I2C1_EV_IRQHandler+0x10>)
 8000a42:	f000 fea9 	bl	8001798 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000008c 	.word	0x2000008c

08000a50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <I2C1_ER_IRQHandler+0x10>)
 8000a56:	f001 f810 	bl	8001a7a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000008c 	.word	0x2000008c

08000a64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USART3_IRQHandler+0x10>)
 8000a6a:	f003 f9b3 	bl	8003dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000e4 	.word	0x200000e4

08000a78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e00a      	b.n	8000aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8a:	f3af 8000 	nop.w
 8000a8e:	4601      	mov	r1, r0
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	b2ca      	uxtb	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <_read+0x12>
	}

return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	605a      	str	r2, [r3, #4]
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_isatty>:

int _isatty(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	return 1;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f004 f876 	bl	8004c3c <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20030000 	.word	0x20030000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200000e0 	.word	0x200000e0
 8000b84:	20000140 	.word	0x20000140

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART3_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART3_UART_Init+0x4c>)
 8000be4:	f003 f816 	bl	8003c14 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f7ff fecd 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000e4 	.word	0x200000e4
 8000bfc:	40004800 	.word	0x40004800

08000c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_UART_MspInit+0x94>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d134      	bne.n	8000c8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c78:	f000 fa84 	bl	8001184 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2027      	movs	r0, #39	; 0x27
 8000c82:	f000 f9a8 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c86:	2027      	movs	r0, #39	; 0x27
 8000c88:	f000 f9c1 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40004800 	.word	0x40004800
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ff5d 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f003 ffbb 	bl	8004c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fdc5 	bl	8000860 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce4:	08005754 	.word	0x08005754
  ldr r2, =_sbss
 8000ce8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cec:	2000013c 	.word	0x2000013c

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe36 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000128 	.word	0x20000128

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000128 	.word	0x20000128

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff feb6 	bl	8000dc0 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d008      	beq.n	8001074 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e052      	b.n	800111a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0216 	bic.w	r2, r2, #22
 8001082:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001092:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <HAL_DMA_Abort+0x62>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0208 	bic.w	r2, r2, #8
 80010b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c4:	e013      	b.n	80010ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c6:	f7ff fe7b 	bl	8000dc0 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d90c      	bls.n	80010ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2220      	movs	r2, #32
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e015      	b.n	800111a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e4      	bne.n	80010c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001100:	223f      	movs	r2, #63	; 0x3f
 8001102:	409a      	lsls	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d004      	beq.n	8001140 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e00c      	b.n	800115a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2205      	movs	r2, #5
 8001144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001174:	b2db      	uxtb	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e177      	b.n	8001490 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8166 	bne.w	800148a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d130      	bne.n	8001238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80c0 	beq.w	800148a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <HAL_GPIO_Init+0x324>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a65      	ldr	r2, [pc, #404]	; (80014a8 <HAL_GPIO_Init+0x324>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <HAL_GPIO_Init+0x324>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a61      	ldr	r2, [pc, #388]	; (80014ac <HAL_GPIO_Init+0x328>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a58      	ldr	r2, [pc, #352]	; (80014b0 <HAL_GPIO_Init+0x32c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d037      	beq.n	80013c2 <HAL_GPIO_Init+0x23e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <HAL_GPIO_Init+0x330>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d031      	beq.n	80013be <HAL_GPIO_Init+0x23a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a56      	ldr	r2, [pc, #344]	; (80014b8 <HAL_GPIO_Init+0x334>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02b      	beq.n	80013ba <HAL_GPIO_Init+0x236>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a55      	ldr	r2, [pc, #340]	; (80014bc <HAL_GPIO_Init+0x338>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x232>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a54      	ldr	r2, [pc, #336]	; (80014c0 <HAL_GPIO_Init+0x33c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x22e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a53      	ldr	r2, [pc, #332]	; (80014c4 <HAL_GPIO_Init+0x340>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x22a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_GPIO_Init+0x344>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x226>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a51      	ldr	r2, [pc, #324]	; (80014cc <HAL_GPIO_Init+0x348>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x222>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a50      	ldr	r2, [pc, #320]	; (80014d0 <HAL_GPIO_Init+0x34c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x21e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4f      	ldr	r2, [pc, #316]	; (80014d4 <HAL_GPIO_Init+0x350>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x21a>
 800139a:	2309      	movs	r3, #9
 800139c:	e012      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 800139e:	230a      	movs	r3, #10
 80013a0:	e010      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013a2:	2308      	movs	r3, #8
 80013a4:	e00e      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013a6:	2307      	movs	r3, #7
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x240>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x328>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_GPIO_Init+0x354>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a34      	ldr	r2, [pc, #208]	; (80014d8 <HAL_GPIO_Init+0x354>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_GPIO_Init+0x354>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <HAL_GPIO_Init+0x354>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_GPIO_Init+0x354>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <HAL_GPIO_Init+0x354>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_GPIO_Init+0x354>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_GPIO_Init+0x354>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae84 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40022000 	.word	0x40022000
 80014d4:	40022400 	.word	0x40022400
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e12b      	b.n	800177a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff f91c 	bl	8000774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001574:	f002 fb26 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8001578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a81      	ldr	r2, [pc, #516]	; (8001784 <HAL_I2C_Init+0x274>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d807      	bhi.n	8001594 <HAL_I2C_Init+0x84>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a80      	ldr	r2, [pc, #512]	; (8001788 <HAL_I2C_Init+0x278>)
 8001588:	4293      	cmp	r3, r2
 800158a:	bf94      	ite	ls
 800158c:	2301      	movls	r3, #1
 800158e:	2300      	movhi	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e006      	b.n	80015a2 <HAL_I2C_Init+0x92>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a7d      	ldr	r2, [pc, #500]	; (800178c <HAL_I2C_Init+0x27c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	bf94      	ite	ls
 800159c:	2301      	movls	r3, #1
 800159e:	2300      	movhi	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e7      	b.n	800177a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a78      	ldr	r2, [pc, #480]	; (8001790 <HAL_I2C_Init+0x280>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <HAL_I2C_Init+0x274>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d802      	bhi.n	80015e4 <HAL_I2C_Init+0xd4>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3301      	adds	r3, #1
 80015e2:	e009      	b.n	80015f8 <HAL_I2C_Init+0xe8>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_I2C_Init+0x284>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	3301      	adds	r3, #1
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800160a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	495c      	ldr	r1, [pc, #368]	; (8001784 <HAL_I2C_Init+0x274>)
 8001614:	428b      	cmp	r3, r1
 8001616:	d819      	bhi.n	800164c <HAL_I2C_Init+0x13c>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fbb1 f3f3 	udiv	r3, r1, r3
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800162c:	400b      	ands	r3, r1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <HAL_I2C_Init+0x138>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e59      	subs	r1, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001640:	3301      	adds	r3, #1
 8001642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001646:	e051      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 8001648:	2304      	movs	r3, #4
 800164a:	e04f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d111      	bne.n	8001678 <HAL_I2C_Init+0x168>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	440b      	add	r3, r1
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	e012      	b.n	800169e <HAL_I2C_Init+0x18e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	0099      	lsls	r1, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Init+0x196>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e022      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10e      	bne.n	80016cc <HAL_I2C_Init+0x1bc>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e58      	subs	r0, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	440b      	add	r3, r1
 80016bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ca:	e00f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	0099      	lsls	r1, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800171a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6911      	ldr	r1, [r2, #16]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68d2      	ldr	r2, [r2, #12]
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	430b      	orrs	r3, r1
 800172e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	000186a0 	.word	0x000186a0
 8001788:	001e847f 	.word	0x001e847f
 800178c:	003d08ff 	.word	0x003d08ff
 8001790:	431bde83 	.word	0x431bde83
 8001794:	10624dd3 	.word	0x10624dd3

08001798 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	d003      	beq.n	80017d0 <HAL_I2C_EV_IRQHandler+0x38>
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	f040 80c1 	bne.w	8001952 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10d      	bne.n	8001806 <HAL_I2C_EV_IRQHandler+0x6e>
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80017f0:	d003      	beq.n	80017fa <HAL_I2C_EV_IRQHandler+0x62>
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_EV_IRQHandler+0x66>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x68>
 80017fe:	2300      	movs	r3, #0
 8001800:	2b01      	cmp	r3, #1
 8001802:	f000 8132 	beq.w	8001a6a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00c      	beq.n	800182a <HAL_I2C_EV_IRQHandler+0x92>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f001 fc7b 	bl	8003118 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fd83 	bl	800232e <I2C_Master_SB>
 8001828:	e092      	b.n	8001950 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	08db      	lsrs	r3, r3, #3
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_I2C_EV_IRQHandler+0xb2>
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	0a5b      	lsrs	r3, r3, #9
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fdf9 	bl	800243a <I2C_Master_ADD10>
 8001848:	e082      	b.n	8001950 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_I2C_EV_IRQHandler+0xd2>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	0a5b      	lsrs	r3, r3, #9
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fe13 	bl	800248e <I2C_Master_ADDR>
 8001868:	e072      	b.n	8001950 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03b      	beq.n	80018ee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001884:	f000 80f3 	beq.w	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	09db      	lsrs	r3, r3, #7
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00f      	beq.n	80018b4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	0a9b      	lsrs	r3, r3, #10
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <HAL_I2C_EV_IRQHandler+0x11c>
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f9f3 	bl	8001c98 <I2C_MasterTransmit_TXE>
 80018b2:	e04d      	b.n	8001950 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80d6 	beq.w	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	0a5b      	lsrs	r3, r3, #9
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80cf 	beq.w	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	2b21      	cmp	r3, #33	; 0x21
 80018d4:	d103      	bne.n	80018de <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fa7a 	bl	8001dd0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018dc:	e0c7      	b.n	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b40      	cmp	r3, #64	; 0x40
 80018e2:	f040 80c4 	bne.w	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fae8 	bl	8001ebc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ec:	e0bf      	b.n	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018fc:	f000 80b7 	beq.w	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00f      	beq.n	800192c <HAL_I2C_EV_IRQHandler+0x194>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d009      	beq.n	800192c <HAL_I2C_EV_IRQHandler+0x194>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fb5d 	bl	8001fe4 <I2C_MasterReceive_RXNE>
 800192a:	e011      	b.n	8001950 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 809a 	beq.w	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	0a5b      	lsrs	r3, r3, #9
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8093 	beq.w	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fc06 	bl	800215a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800194e:	e08e      	b.n	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001950:	e08d      	b.n	8001a6e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e007      	b.n	8001974 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d012      	beq.n	80019a6 <HAL_I2C_EV_IRQHandler+0x20e>
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	0a5b      	lsrs	r3, r3, #9
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00c      	beq.n	80019a6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800199c:	69b9      	ldr	r1, [r7, #24]
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 ffc4 	bl	800292c <I2C_Slave_ADDR>
 80019a4:	e066      	b.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_I2C_EV_IRQHandler+0x22e>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	0a5b      	lsrs	r3, r3, #9
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fffe 	bl	80029c0 <I2C_Slave_STOPF>
 80019c4:	e056      	b.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2b21      	cmp	r3, #33	; 0x21
 80019ca:	d002      	beq.n	80019d2 <HAL_I2C_EV_IRQHandler+0x23a>
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	2b29      	cmp	r3, #41	; 0x29
 80019d0:	d125      	bne.n	8001a1e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	09db      	lsrs	r3, r3, #7
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00f      	beq.n	80019fe <HAL_I2C_EV_IRQHandler+0x266>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	0a9b      	lsrs	r3, r3, #10
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_I2C_EV_IRQHandler+0x266>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d103      	bne.n	80019fe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 feda 	bl	80027b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019fc:	e039      	b.n	8001a72 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d033      	beq.n	8001a72 <HAL_I2C_EV_IRQHandler+0x2da>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	0a5b      	lsrs	r3, r3, #9
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d02d      	beq.n	8001a72 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 ff07 	bl	800282a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a1c:	e029      	b.n	8001a72 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00f      	beq.n	8001a4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	0a9b      	lsrs	r3, r3, #10
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 ff12 	bl	800286c <I2C_SlaveReceive_RXNE>
 8001a48:	e014      	b.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00e      	beq.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	0a5b      	lsrs	r3, r3, #9
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 ff40 	bl	80028e8 <I2C_SlaveReceive_BTF>
 8001a68:	e004      	b.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a6a:	bf00      	nop
 8001a6c:	e002      	b.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a72:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b08a      	sub	sp, #40	; 0x28
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a9c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_I2C_ER_IRQHandler+0x4e>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ac6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00e      	beq.n	8001af2 <HAL_I2C_ER_IRQHandler+0x78>
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001af0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	0a9b      	lsrs	r3, r3, #10
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d03f      	beq.n	8001b7e <HAL_I2C_ER_IRQHandler+0x104>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d039      	beq.n	8001b7e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001b0a:	7efb      	ldrb	r3, [r7, #27]
 8001b0c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b24:	7ebb      	ldrb	r3, [r7, #26]
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d112      	bne.n	8001b50 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10f      	bne.n	8001b50 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b30:	7cfb      	ldrb	r3, [r7, #19]
 8001b32:	2b21      	cmp	r3, #33	; 0x21
 8001b34:	d008      	beq.n	8001b48 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b36:	7cfb      	ldrb	r3, [r7, #19]
 8001b38:	2b29      	cmp	r3, #41	; 0x29
 8001b3a:	d005      	beq.n	8001b48 <HAL_I2C_ER_IRQHandler+0xce>
 8001b3c:	7cfb      	ldrb	r3, [r7, #19]
 8001b3e:	2b28      	cmp	r3, #40	; 0x28
 8001b40:	d106      	bne.n	8001b50 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b21      	cmp	r3, #33	; 0x21
 8001b46:	d103      	bne.n	8001b50 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f001 f869 	bl	8002c20 <I2C_Slave_AF>
 8001b4e:	e016      	b.n	8001b7e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b58:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b62:	7efb      	ldrb	r3, [r7, #27]
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d002      	beq.n	8001b6e <HAL_I2C_ER_IRQHandler+0xf4>
 8001b68:	7efb      	ldrb	r3, [r7, #27]
 8001b6a:	2b40      	cmp	r3, #64	; 0x40
 8001b6c:	d107      	bne.n	8001b7e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	0adb      	lsrs	r3, r3, #11
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00e      	beq.n	8001ba8 <HAL_I2C_ER_IRQHandler+0x12e>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001ba6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f001 f8a0 	bl	8002d00 <I2C_ITError>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
 8001c24:	4613      	mov	r3, r2
 8001c26:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d150      	bne.n	8001d60 <I2C_MasterTransmit_TXE+0xc8>
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	2b21      	cmp	r3, #33	; 0x21
 8001cc2:	d14d      	bne.n	8001d60 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d01d      	beq.n	8001d06 <I2C_MasterTransmit_TXE+0x6e>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d01a      	beq.n	8001d06 <I2C_MasterTransmit_TXE+0x6e>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cd6:	d016      	beq.n	8001d06 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ce6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2211      	movs	r2, #17
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff62 	bl	8001bc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d04:	e060      	b.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d14:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d24:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b40      	cmp	r3, #64	; 0x40
 8001d3e:	d107      	bne.n	8001d50 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff7d 	bl	8001c48 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d4e:	e03b      	b.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff35 	bl	8001bc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d5e:	e033      	b.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b21      	cmp	r3, #33	; 0x21
 8001d64:	d005      	beq.n	8001d72 <I2C_MasterTransmit_TXE+0xda>
 8001d66:	7bbb      	ldrb	r3, [r7, #14]
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d12d      	bne.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b22      	cmp	r3, #34	; 0x22
 8001d70:	d12a      	bne.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d108      	bne.n	8001d8e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d8c:	e01c      	b.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b40      	cmp	r3, #64	; 0x40
 8001d98:	d103      	bne.n	8001da2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f88e 	bl	8001ebc <I2C_MemoryTransmit_TXE_BTF>
}
 8001da0:	e012      	b.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001dc6:	e7ff      	b.n	8001dc8 <I2C_MasterTransmit_TXE+0x130>
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b21      	cmp	r3, #33	; 0x21
 8001de8:	d164      	bne.n	8001eb4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d012      	beq.n	8001e1a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e18:	e04c      	b.n	8001eb4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d01d      	beq.n	8001e5c <I2C_MasterTransmit_BTF+0x8c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d01a      	beq.n	8001e5c <I2C_MasterTransmit_BTF+0x8c>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e2c:	d016      	beq.n	8001e5c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e3c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2211      	movs	r2, #17
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff feb7 	bl	8001bc8 <HAL_I2C_MasterTxCpltCallback>
}
 8001e5a:	e02b      	b.n	8001eb4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e6a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b40      	cmp	r3, #64	; 0x40
 8001e94:	d107      	bne.n	8001ea6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fed2 	bl	8001c48 <HAL_I2C_MemTxCpltCallback>
}
 8001ea4:	e006      	b.n	8001eb4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fe8a 	bl	8001bc8 <HAL_I2C_MasterTxCpltCallback>
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d11d      	bne.n	8001f10 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10b      	bne.n	8001ef4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001ef2:	e073      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	121b      	asrs	r3, r3, #8
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f0e:	e065      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d10b      	bne.n	8001f30 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f2e:	e055      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d151      	bne.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b22      	cmp	r3, #34	; 0x22
 8001f3c:	d10d      	bne.n	8001f5a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f58:	e040      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d015      	beq.n	8001f90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b21      	cmp	r3, #33	; 0x21
 8001f68:	d112      	bne.n	8001f90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f8e:	e025      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d120      	bne.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	2b21      	cmp	r3, #33	; 0x21
 8001f9e:	d11d      	bne.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fe36 	bl	8001c48 <HAL_I2C_MemTxCpltCallback>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b22      	cmp	r3, #34	; 0x22
 8001ff6:	f040 80ac 	bne.w	8002152 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d921      	bls.n	800204c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b03      	cmp	r3, #3
 8002036:	f040 808c 	bne.w	8002152 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002048:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800204a:	e082      	b.n	8002152 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b02      	cmp	r3, #2
 8002052:	d075      	beq.n	8002140 <I2C_MasterReceive_RXNE+0x15c>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d002      	beq.n	8002060 <I2C_MasterReceive_RXNE+0x7c>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d16f      	bne.n	8002140 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f001 f827 	bl	80030b4 <I2C_WaitOnSTOPRequestThroughIT>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d142      	bne.n	80020f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800208a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d10a      	bne.n	80020dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fdc1 	bl	8001c5c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020da:	e03a      	b.n	8002152 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2212      	movs	r2, #18
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fd76 	bl	8001bdc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020f0:	e02f      	b.n	8002152 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002100:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fd99 	bl	8001c70 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800213e:	e008      	b.n	8002152 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214e:	605a      	str	r2, [r3, #4]
}
 8002150:	e7ff      	b.n	8002152 <I2C_MasterReceive_RXNE+0x16e>
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b04      	cmp	r3, #4
 8002170:	d11b      	bne.n	80021aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002180:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80021a8:	e0bd      	b.n	8002326 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d129      	bne.n	8002208 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d00a      	beq.n	80021e0 <I2C_MasterReceive_BTF+0x86>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d007      	beq.n	80021e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002206:	e08e      	b.n	8002326 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d176      	bne.n	8002300 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d002      	beq.n	800221e <I2C_MasterReceive_BTF+0xc4>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b10      	cmp	r3, #16
 800221c:	d108      	bne.n	8002230 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e019      	b.n	8002264 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d002      	beq.n	800223c <I2C_MasterReceive_BTF+0xe2>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d108      	bne.n	800224e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e00a      	b.n	8002264 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b10      	cmp	r3, #16
 8002252:	d007      	beq.n	8002264 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002262:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d10a      	bne.n	80022ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fcba 	bl	8001c5c <HAL_I2C_MemRxCpltCallback>
}
 80022e8:	e01d      	b.n	8002326 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2212      	movs	r2, #18
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fc6f 	bl	8001bdc <HAL_I2C_MasterRxCpltCallback>
}
 80022fe:	e012      	b.n	8002326 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d117      	bne.n	8002372 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800235a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800235c:	e067      	b.n	800242e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
}
 8002370:	e05d      	b.n	800242e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237a:	d133      	bne.n	80023e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b21      	cmp	r3, #33	; 0x21
 8002386:	d109      	bne.n	800239c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	e008      	b.n	80023ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <I2C_Master_SB+0x92>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d032      	beq.n	800242e <I2C_Master_SB+0x100>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02d      	beq.n	800242e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e0:	605a      	str	r2, [r3, #4]
}
 80023e2:	e024      	b.n	800242e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10e      	bne.n	800240a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	11db      	asrs	r3, r3, #7
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 0306 	and.w	r3, r3, #6
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f063 030f 	orn	r3, r3, #15
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]
}
 8002408:	e011      	b.n	800242e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10d      	bne.n	800242e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	b29b      	uxth	r3, r3
 8002418:	11db      	asrs	r3, r3, #7
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 0306 	and.w	r3, r3, #6
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f063 030e 	orn	r3, r3, #14
 8002426:	b2da      	uxtb	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	611a      	str	r2, [r3, #16]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	b2da      	uxtb	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <I2C_Master_ADD10+0x26>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d108      	bne.n	8002472 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <I2C_Master_ADD10+0x48>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002480:	605a      	str	r2, [r3, #4]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800248e:	b480      	push	{r7}
 8002490:	b091      	sub	sp, #68	; 0x44
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b22      	cmp	r3, #34	; 0x22
 80024b6:	f040 8169 	bne.w	800278c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10f      	bne.n	80024e2 <I2C_Master_ADDR+0x54>
 80024c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d10b      	bne.n	80024e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ca:	2300      	movs	r3, #0
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	e160      	b.n	80027a4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11d      	bne.n	8002526 <I2C_Master_ADDR+0x98>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024f2:	d118      	bne.n	8002526 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002518:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	651a      	str	r2, [r3, #80]	; 0x50
 8002524:	e13e      	b.n	80027a4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d113      	bne.n	8002558 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002530:	2300      	movs	r3, #0
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e115      	b.n	8002784 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 808a 	bne.w	8002678 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800256a:	d137      	bne.n	80025dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258a:	d113      	bne.n	80025b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	e0e7      	b.n	8002784 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e0d3      	b.n	8002784 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d02e      	beq.n	8002640 <I2C_Master_ADDR+0x1b2>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d02b      	beq.n	8002640 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ea:	2b12      	cmp	r3, #18
 80025ec:	d102      	bne.n	80025f4 <I2C_Master_ADDR+0x166>
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d125      	bne.n	8002640 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d00e      	beq.n	8002618 <I2C_Master_ADDR+0x18a>
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d00b      	beq.n	8002618 <I2C_Master_ADDR+0x18a>
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	2b10      	cmp	r3, #16
 8002604:	d008      	beq.n	8002618 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002626:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	e0a1      	b.n	8002784 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e085      	b.n	8002784 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d14d      	bne.n	800271e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	2b04      	cmp	r3, #4
 8002686:	d016      	beq.n	80026b6 <I2C_Master_ADDR+0x228>
 8002688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268a:	2b02      	cmp	r3, #2
 800268c:	d013      	beq.n	80026b6 <I2C_Master_ADDR+0x228>
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	2b10      	cmp	r3, #16
 8002692:	d010      	beq.n	80026b6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e007      	b.n	80026c6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d4:	d117      	bne.n	8002706 <I2C_Master_ADDR+0x278>
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026dc:	d00b      	beq.n	80026f6 <I2C_Master_ADDR+0x268>
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d008      	beq.n	80026f6 <I2C_Master_ADDR+0x268>
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d005      	beq.n	80026f6 <I2C_Master_ADDR+0x268>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d002      	beq.n	80026f6 <I2C_Master_ADDR+0x268>
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d107      	bne.n	8002706 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002704:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	e032      	b.n	8002784 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800272c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800273c:	d117      	bne.n	800276e <I2C_Master_ADDR+0x2e0>
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002744:	d00b      	beq.n	800275e <I2C_Master_ADDR+0x2d0>
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	2b01      	cmp	r3, #1
 800274a:	d008      	beq.n	800275e <I2C_Master_ADDR+0x2d0>
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	2b08      	cmp	r3, #8
 8002750:	d005      	beq.n	800275e <I2C_Master_ADDR+0x2d0>
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	2b10      	cmp	r3, #16
 8002756:	d002      	beq.n	800275e <I2C_Master_ADDR+0x2d0>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	2b20      	cmp	r3, #32
 800275c:	d107      	bne.n	800276e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800276c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800278a:	e00b      	b.n	80027a4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	e7ff      	b.n	80027a4 <I2C_Master_ADDR+0x316>
 80027a4:	bf00      	nop
 80027a6:	3744      	adds	r7, #68	; 0x44
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02b      	beq.n	8002822 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d114      	bne.n	8002822 <I2C_SlaveTransmit_TXE+0x72>
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b29      	cmp	r3, #41	; 0x29
 80027fc:	d111      	bne.n	8002822 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2221      	movs	r2, #33	; 0x21
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2228      	movs	r2, #40	; 0x28
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff f9e7 	bl	8001bf0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d011      	beq.n	8002860 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	781a      	ldrb	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d02c      	beq.n	80028e0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d114      	bne.n	80028e0 <I2C_SlaveReceive_RXNE+0x74>
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b2a      	cmp	r3, #42	; 0x2a
 80028ba:	d111      	bne.n	80028e0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2222      	movs	r2, #34	; 0x22
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2228      	movs	r2, #40	; 0x28
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff f992 	bl	8001c04 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002946:	2b28      	cmp	r3, #40	; 0x28
 8002948:	d127      	bne.n	800299a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002958:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	09db      	lsrs	r3, r3, #7
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	81bb      	strh	r3, [r7, #12]
 800297c:	e002      	b.n	8002984 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800298c:	89ba      	ldrh	r2, [r7, #12]
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff f940 	bl	8001c18 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002998:	e00e      	b.n	80029b8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1c:	d172      	bne.n	8002b04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b22      	cmp	r3, #34	; 0x22
 8002a22:	d002      	beq.n	8002a2a <I2C_Slave_STOPF+0x6a>
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b2a      	cmp	r3, #42	; 0x2a
 8002a28:	d135      	bne.n	8002a96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fb7f 	bl	8001166 <HAL_DMA_GetState>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d049      	beq.n	8002b02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	4a69      	ldr	r2, [pc, #420]	; (8002c18 <I2C_Slave_STOPF+0x258>)
 8002a74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fb51 	bl	8001122 <HAL_DMA_Abort_IT>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03d      	beq.n	8002b02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a90:	4610      	mov	r0, r2
 8002a92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a94:	e035      	b.n	8002b02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fb49 	bl	8001166 <HAL_DMA_GetState>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d014      	beq.n	8002b04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <I2C_Slave_STOPF+0x258>)
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fb1b 	bl	8001122 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
 8002b00:	e000      	b.n	8002b04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03e      	beq.n	8002b8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d112      	bne.n	8002b42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d112      	bne.n	8002b76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8b3 	bl	8002d00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b9a:	e039      	b.n	8002c10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba0:	d109      	bne.n	8002bb6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2228      	movs	r2, #40	; 0x28
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff f827 	bl	8001c04 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b28      	cmp	r3, #40	; 0x28
 8002bc0:	d111      	bne.n	8002be6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <I2C_Slave_STOPF+0x25c>)
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff f828 	bl	8001c34 <HAL_I2C_ListenCpltCallback>
}
 8002be4:	e014      	b.n	8002c10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	2b22      	cmp	r3, #34	; 0x22
 8002bec:	d002      	beq.n	8002bf4 <I2C_Slave_STOPF+0x234>
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b22      	cmp	r3, #34	; 0x22
 8002bf2:	d10d      	bne.n	8002c10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fffa 	bl	8001c04 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	08002f65 	.word	0x08002f65
 8002c1c:	ffff0000 	.word	0xffff0000

08002c20 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d002      	beq.n	8002c42 <I2C_Slave_AF+0x22>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d129      	bne.n	8002c96 <I2C_Slave_AF+0x76>
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b28      	cmp	r3, #40	; 0x28
 8002c46:	d126      	bne.n	8002c96 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a2c      	ldr	r2, [pc, #176]	; (8002cfc <I2C_Slave_AF+0xdc>)
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c5c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c66:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe ffd0 	bl	8001c34 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c94:	e02e      	b.n	8002cf4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b21      	cmp	r3, #33	; 0x21
 8002c9a:	d126      	bne.n	8002cea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <I2C_Slave_AF+0xdc>)
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2221      	movs	r2, #33	; 0x21
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe ff84 	bl	8001bf0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ce8:	e004      	b.n	8002cf4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cf2:	615a      	str	r2, [r3, #20]
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	ffff0000 	.word	0xffff0000

08002d00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d002      	beq.n	8002d24 <I2C_ITError+0x24>
 8002d1e:	7bbb      	ldrb	r3, [r7, #14]
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d10a      	bne.n	8002d3a <I2C_ITError+0x3a>
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b22      	cmp	r3, #34	; 0x22
 8002d28:	d107      	bne.n	8002d3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d40:	2b28      	cmp	r3, #40	; 0x28
 8002d42:	d107      	bne.n	8002d54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2228      	movs	r2, #40	; 0x28
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d52:	e015      	b.n	8002d80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d62:	d00a      	beq.n	8002d7a <I2C_ITError+0x7a>
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b60      	cmp	r3, #96	; 0x60
 8002d68:	d007      	beq.n	8002d7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d8e:	d162      	bne.n	8002e56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d020      	beq.n	8002df0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	4a6a      	ldr	r2, [pc, #424]	; (8002f5c <I2C_ITError+0x25c>)
 8002db4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f9b1 	bl	8001122 <HAL_DMA_Abort_IT>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8089 	beq.w	8002eda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dea:	4610      	mov	r0, r2
 8002dec:	4798      	blx	r3
 8002dee:	e074      	b.n	8002eda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	4a59      	ldr	r2, [pc, #356]	; (8002f5c <I2C_ITError+0x25c>)
 8002df6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe f990 	bl	8001122 <HAL_DMA_Abort_IT>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d068      	beq.n	8002eda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d10b      	bne.n	8002e2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e50:	4610      	mov	r0, r2
 8002e52:	4798      	blx	r3
 8002e54:	e041      	b.n	8002eda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b60      	cmp	r3, #96	; 0x60
 8002e60:	d125      	bne.n	8002eae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d10b      	bne.n	8002e96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe feec 	bl	8001c84 <HAL_I2C_AbortCpltCallback>
 8002eac:	e015      	b.n	8002eda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d10b      	bne.n	8002ed4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe fecb 	bl	8001c70 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10e      	bne.n	8002f08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f16:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d113      	bne.n	8002f54 <I2C_ITError+0x254>
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b28      	cmp	r3, #40	; 0x28
 8002f30:	d110      	bne.n	8002f54 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <I2C_ITError+0x260>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fe70 	bl	8001c34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	08002f65 	.word	0x08002f65
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <I2C_DMAAbort+0x148>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	08db      	lsrs	r3, r3, #3
 8002f84:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <I2C_DMAAbort+0x14c>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0a1a      	lsrs	r2, r3, #8
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00da      	lsls	r2, r3, #3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002faa:	e00a      	b.n	8002fc2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc0:	d0ea      	beq.n	8002f98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	2200      	movs	r2, #0
 8002fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	2200      	movs	r2, #0
 8002fe0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	2200      	movs	r2, #0
 8003006:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	2200      	movs	r2, #0
 8003016:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b60      	cmp	r3, #96	; 0x60
 8003032:	d10e      	bne.n	8003052 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800304a:	6978      	ldr	r0, [r7, #20]
 800304c:	f7fe fe1a 	bl	8001c84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003050:	e027      	b.n	80030a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003058:	2b28      	cmp	r3, #40	; 0x28
 800305a:	d117      	bne.n	800308c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800307a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2228      	movs	r2, #40	; 0x28
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800308a:	e007      	b.n	800309c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f7fe fde7 	bl	8001c70 <HAL_I2C_ErrorCallback>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000000 	.word	0x20000000
 80030b0:	14f8b589 	.word	0x14f8b589

080030b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	0a1a      	lsrs	r2, r3, #8
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b01      	subs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e008      	b.n	8003104 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003100:	d0e9      	beq.n	80030d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	20000000 	.word	0x20000000
 8003114:	14f8b589 	.word	0x14f8b589

08003118 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003128:	d103      	bne.n	8003132 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003130:	e007      	b.n	8003142 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800313a:	d102      	bne.n	8003142 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2208      	movs	r2, #8
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b20      	cmp	r3, #32
 8003162:	d129      	bne.n	80031b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0210 	bic.w	r2, r2, #16
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d12a      	bne.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	f023 030f 	bic.w	r3, r3, #15
 8003206:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b29a      	uxth	r2, r3
 800320c:	89fb      	ldrh	r3, [r7, #14]
 800320e:	4313      	orrs	r3, r2
 8003210:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	89fa      	ldrh	r2, [r7, #14]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003236:	2302      	movs	r3, #2
  }
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003270:	f7fd fda6 	bl	8000dc0 <HAL_GetTick>
 8003274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003276:	e009      	b.n	800328c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003278:	f7fd fda2 	bl	8000dc0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003286:	d901      	bls.n	800328c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e01f      	b.n	80032cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_PWREx_EnableOverDrive+0x98>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d1ee      	bne.n	8003278 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a0:	f7fd fd8e 	bl	8000dc0 <HAL_GetTick>
 80032a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032a6:	e009      	b.n	80032bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a8:	f7fd fd8a 	bl	8000dc0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b6:	d901      	bls.n	80032bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e007      	b.n	80032cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_PWREx_EnableOverDrive+0x98>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c8:	d1ee      	bne.n	80032a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	420e0040 	.word	0x420e0040
 80032dc:	40007000 	.word	0x40007000
 80032e0:	420e0044 	.word	0x420e0044

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e267      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d075      	beq.n	80033ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b82      	ldr	r3, [pc, #520]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b7e      	ldr	r3, [pc, #504]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x108>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e242      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x74>
 800334a:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b70      	ldr	r3, [pc, #448]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6f      	ldr	r2, [pc, #444]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b6d      	ldr	r3, [pc, #436]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6c      	ldr	r2, [pc, #432]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 800337c:	4b69      	ldr	r3, [pc, #420]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a68      	ldr	r2, [pc, #416]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a65      	ldr	r2, [pc, #404]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fd fd10 	bl	8000dc0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fd fd0c 	bl	8000dc0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e207      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xc0>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fcfc 	bl	8000dc0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fd fcf8 	bl	8000dc0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1f3      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0xe8>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b44      	ldr	r3, [pc, #272]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1c7      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4937      	ldr	r1, [pc, #220]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x244>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fd fcb1 	bl	8000dc0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003462:	f7fd fcad 	bl	8000dc0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1a8      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b28      	ldr	r3, [pc, #160]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4925      	ldr	r1, [pc, #148]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCC_OscConfig+0x244>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd fc90 	bl	8000dc0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a4:	f7fd fc8c 	bl	8000dc0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e187      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_RCC_OscConfig+0x248>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fd fc70 	bl	8000dc0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fd fc6c 	bl	8000dc0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e167      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x240>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x200>
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_OscConfig+0x248>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fd fc59 	bl	8000dc0 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e00e      	b.n	8003530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003512:	f7fd fc55 	bl	8000dc0 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d907      	bls.n	8003530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e150      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	42470000 	.word	0x42470000
 800352c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ea      	bne.n	8003512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8097 	beq.w	8003678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b81      	ldr	r3, [pc, #516]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a7c      	ldr	r2, [pc, #496]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b7a      	ldr	r3, [pc, #488]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b77      	ldr	r3, [pc, #476]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b74      	ldr	r3, [pc, #464]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7fd fc15 	bl	8000dc0 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7fd fc11 	bl	8000dc0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e10c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <HAL_RCC_OscConfig+0x474>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x2ea>
 80035c0:	4b64      	ldr	r3, [pc, #400]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a63      	ldr	r2, [pc, #396]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	e01c      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x30c>
 80035d6:	4b5f      	ldr	r3, [pc, #380]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a5e      	ldr	r2, [pc, #376]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a5b      	ldr	r2, [pc, #364]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035f0:	4b58      	ldr	r3, [pc, #352]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a57      	ldr	r2, [pc, #348]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
 80035fc:	4b55      	ldr	r3, [pc, #340]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a54      	ldr	r2, [pc, #336]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fd fbd6 	bl	8000dc0 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fd fbd2 	bl	8000dc0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0cb      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4b49      	ldr	r3, [pc, #292]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCC_OscConfig+0x334>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7fd fbc0 	bl	8000dc0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fd fbbc 	bl	8000dc0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0b5      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ee      	bne.n	8003644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	4a38      	ldr	r2, [pc, #224]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a1 	beq.w	80037c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003682:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d05c      	beq.n	8003748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d141      	bne.n	800371a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_OscConfig+0x478>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fd fb90 	bl	8000dc0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fd fb8c 	bl	8000dc0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e087      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	491b      	ldr	r1, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x478>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fd fb65 	bl	8000dc0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fd fb61 	bl	8000dc0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e05c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x416>
 8003718:	e054      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fd fb4e 	bl	8000dc0 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7fd fb4a 	bl	8000dc0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e045      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
 8003746:	e03d      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e038      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
 800375c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d028      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d121      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d11a      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003798:	4293      	cmp	r3, r2
 800379a:	d111      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cc      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d90c      	bls.n	8003810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d044      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e067      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4934      	ldr	r1, [pc, #208]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fd fa7c 	bl	8000dc0 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd fa78 	bl	8000dc0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20c      	bcs.n	800391c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd f9dc 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00
 8003990:	40023800 	.word	0x40023800
 8003994:	080056c8 	.word	0x080056c8
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b094      	sub	sp, #80	; 0x50
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
 80039ac:	2300      	movs	r3, #0
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b0:	2300      	movs	r3, #0
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x40>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f200 80e1 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x3a>
 80039d2:	e0db      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b73      	ldr	r3, [pc, #460]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039d8:	e0db      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039da:	4b73      	ldr	r3, [pc, #460]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039de:	e0d8      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	0159      	lsls	r1, r3, #5
 8003a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a24:	0150      	lsls	r0, r2, #5
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	1a51      	subs	r1, r2, r1
 8003a2e:	6139      	str	r1, [r7, #16]
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb63 0301 	sbc.w	r3, r3, r1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a44:	4659      	mov	r1, fp
 8003a46:	018b      	lsls	r3, r1, #6
 8003a48:	4651      	mov	r1, sl
 8003a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4e:	4651      	mov	r1, sl
 8003a50:	018a      	lsls	r2, r1, #6
 8003a52:	4651      	mov	r1, sl
 8003a54:	ebb2 0801 	subs.w	r8, r2, r1
 8003a58:	4659      	mov	r1, fp
 8003a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a72:	4690      	mov	r8, r2
 8003a74:	4699      	mov	r9, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	eb18 0303 	adds.w	r3, r8, r3
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	eb49 0303 	adc.w	r3, r9, r3
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a92:	4629      	mov	r1, r5
 8003a94:	024b      	lsls	r3, r1, #9
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	024a      	lsls	r2, r1, #9
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab0:	f7fc fb9c 	bl	80001ec <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	e058      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	4611      	mov	r1, r2
 8003aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	f04f 0000 	mov.w	r0, #0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	0159      	lsls	r1, r3, #5
 8003ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aea:	0150      	lsls	r0, r2, #5
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4641      	mov	r1, r8
 8003af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003af6:	4649      	mov	r1, r9
 8003af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b10:	ebb2 040a 	subs.w	r4, r2, sl
 8003b14:	eb63 050b 	sbc.w	r5, r3, fp
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	464b      	mov	r3, r9
 8003b34:	eb45 0303 	adc.w	r3, r5, r3
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b46:	4629      	mov	r1, r5
 8003b48:	028b      	lsls	r3, r1, #10
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b50:	4621      	mov	r1, r4
 8003b52:	028a      	lsls	r2, r1, #10
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	61fa      	str	r2, [r7, #28]
 8003b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b64:	f7fc fb42 	bl	80001ec <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3750      	adds	r7, #80	; 0x50
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	007a1200 	.word	0x007a1200

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	080056d8 	.word	0x080056d8

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffdc 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0b5b      	lsrs	r3, r3, #13
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	080056d8 	.word	0x080056d8

08003c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e03f      	b.n	8003ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fc ffe0 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fd7b 	bl	8004754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08a      	sub	sp, #40	; 0x28
 8003cb2:	af02      	add	r7, sp, #8
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d17c      	bne.n	8003dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_UART_Transmit+0x2c>
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e075      	b.n	8003dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_UART_Transmit+0x3e>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e06e      	b.n	8003dca <HAL_UART_Transmit+0x11c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	; 0x21
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fd f85d 	bl	8000dc0 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x82>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d40:	e02a      	b.n	8003d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2180      	movs	r1, #128	; 0x80
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 faf9 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e036      	b.n	8003dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3302      	adds	r3, #2
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	e007      	b.n	8003d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1cf      	bne.n	8003d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2140      	movs	r1, #64	; 0x40
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fac9 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e006      	b.n	8003dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0ba      	sub	sp, #232	; 0xe8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fbd3 	bl	80045de <UART_Receive_IT>
      return;
 8003e38:	e256      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80de 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
 8003e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80d1 	beq.w	8004000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
 8003e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
 8003e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f043 0202 	orr.w	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f043 0208 	orr.w	r2, r3, #8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 81ed 	beq.w	80042de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb5e 	bl	80045de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_UART_IRQHandler+0x17a>
 8003f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04f      	beq.n	8003fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa66 	bl	8004420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d141      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3314      	adds	r3, #20
 8003f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1d9      	bne.n	8003f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	4a7d      	ldr	r2, [pc, #500]	; (80041b0 <HAL_UART_IRQHandler+0x3dc>)
 8003fbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd f8ad 	bl	8001122 <HAL_DMA_Abort_IT>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00e      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f99a 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e00a      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f996 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e006      	b.n	8003ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f992 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ffa:	e170      	b.n	80042de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	bf00      	nop
    return;
 8003ffe:	e16e      	b.n	80042de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 814a 	bne.w	800429e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8143 	beq.w	800429e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 813c 	beq.w	800429e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	f040 80b4 	bne.w	80041b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8140 	beq.w	80042e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800406a:	429a      	cmp	r2, r3
 800406c:	f080 8139 	bcs.w	80042e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004076:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	f000 8088 	beq.w	8004196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800409c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1d9      	bne.n	8004086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e1      	bne.n	80040d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800411e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e3      	bne.n	800410e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004178:	65ba      	str	r2, [r7, #88]	; 0x58
 800417a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800417e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e3      	bne.n	8004154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	4618      	mov	r0, r3
 8004192:	f7fc ff56 	bl	8001042 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8c0 	bl	800432c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ac:	e099      	b.n	80042e2 <HAL_UART_IRQHandler+0x50e>
 80041ae:	bf00      	nop
 80041b0:	080044e7 	.word	0x080044e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 808b 	beq.w	80042e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80041d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8086 	beq.w	80042e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800420c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e3      	bne.n	80041da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3314      	adds	r3, #20
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	623b      	str	r3, [r7, #32]
   return(result);
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004236:	633a      	str	r2, [r7, #48]	; 0x30
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e3      	bne.n	8004212 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	60fb      	str	r3, [r7, #12]
   return(result);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800427c:	61fa      	str	r2, [r7, #28]
 800427e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	617b      	str	r3, [r7, #20]
   return(result);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e3      	bne.n	8004258 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f848 	bl	800432c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800429c:	e023      	b.n	80042e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_UART_IRQHandler+0x4ea>
 80042aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f929 	bl	800450e <UART_Transmit_IT>
    return;
 80042bc:	e014      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00e      	beq.n	80042e8 <HAL_UART_IRQHandler+0x514>
 80042ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f969 	bl	80045ae <UART_EndTransmit_IT>
    return;
 80042dc:	e004      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
    return;
 80042de:	bf00      	nop
 80042e0:	e002      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
      return;
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <HAL_UART_IRQHandler+0x514>
      return;
 80042e6:	bf00      	nop
  }
}
 80042e8:	37e8      	adds	r7, #232	; 0xe8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop

080042f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b090      	sub	sp, #64	; 0x40
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004354:	e050      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d04c      	beq.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800435e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <UART_WaitOnFlagUntilTimeout+0x30>
 8004364:	f7fc fd2c 	bl	8000dc0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004370:	429a      	cmp	r2, r3
 8004372:	d241      	bcs.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004394:	637a      	str	r2, [r7, #52]	; 0x34
 8004396:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800439a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e5      	bne.n	8004374 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3314      	adds	r3, #20
 80043ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	613b      	str	r3, [r7, #16]
   return(result);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3314      	adds	r3, #20
 80043c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043c8:	623a      	str	r2, [r7, #32]
 80043ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	69f9      	ldr	r1, [r7, #28]
 80043ce:	6a3a      	ldr	r2, [r7, #32]
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e5      	bne.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e00f      	b.n	8004418 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	429a      	cmp	r2, r3
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	429a      	cmp	r2, r3
 8004414:	d09f      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3740      	adds	r7, #64	; 0x40
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b095      	sub	sp, #84	; 0x54
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800443e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004448:	643a      	str	r2, [r7, #64]	; 0x40
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800444e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e5      	bne.n	8004428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	61fb      	str	r3, [r7, #28]
   return(result);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800447c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	2b01      	cmp	r3, #1
 8004496:	d119      	bne.n	80044cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f023 0310 	bic.w	r3, r3, #16
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b8:	61ba      	str	r2, [r7, #24]
 80044ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6979      	ldr	r1, [r7, #20]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	613b      	str	r3, [r7, #16]
   return(result);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044da:	bf00      	nop
 80044dc:	3754      	adds	r7, #84	; 0x54
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff09 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b21      	cmp	r3, #33	; 0x21
 8004520:	d13e      	bne.n	80045a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d114      	bne.n	8004556 <UART_Transmit_IT+0x48>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d110      	bne.n	8004556 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	1c9a      	adds	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]
 8004554:	e008      	b.n	8004568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6211      	str	r1, [r2, #32]
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29b      	uxth	r3, r3
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4619      	mov	r1, r3
 8004576:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800458a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fe8e 	bl	80042f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b08c      	sub	sp, #48	; 0x30
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b22      	cmp	r3, #34	; 0x22
 80045f0:	f040 80ab 	bne.w	800474a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fc:	d117      	bne.n	800462e <UART_Receive_IT+0x50>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d113      	bne.n	800462e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461c:	b29a      	uxth	r2, r3
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
 800462c:	e026      	b.n	800467c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d007      	beq.n	8004652 <UART_Receive_IT+0x74>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <UART_Receive_IT+0x82>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e008      	b.n	8004672 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800466c:	b2da      	uxtb	r2, r3
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29b      	uxth	r3, r3
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4619      	mov	r1, r3
 800468a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800468c:	2b00      	cmp	r3, #0
 800468e:	d15a      	bne.n	8004746 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0220 	bic.w	r2, r2, #32
 800469e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d135      	bne.n	800473c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	613b      	str	r3, [r7, #16]
   return(result);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f6:	623a      	str	r2, [r7, #32]
 80046f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	69f9      	ldr	r1, [r7, #28]
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	61bb      	str	r3, [r7, #24]
   return(result);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e5      	bne.n	80046d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b10      	cmp	r3, #16
 8004716:	d10a      	bne.n	800472e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff fdf9 	bl	800432c <HAL_UARTEx_RxEventCallback>
 800473a:	e002      	b.n	8004742 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff fde1 	bl	8004304 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e002      	b.n	800474c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3730      	adds	r7, #48	; 0x30
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004758:	b0c0      	sub	sp, #256	; 0x100
 800475a:	af00      	add	r7, sp, #0
 800475c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	68d9      	ldr	r1, [r3, #12]
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	ea40 0301 	orr.w	r3, r0, r1
 800477c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	431a      	orrs	r2, r3
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047ac:	f021 010c 	bic.w	r1, r1, #12
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ba:	430b      	orrs	r3, r1
 80047bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	6999      	ldr	r1, [r3, #24]
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	ea40 0301 	orr.w	r3, r0, r1
 80047da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8f      	ldr	r3, [pc, #572]	; (8004a20 <UART_SetConfig+0x2cc>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d005      	beq.n	80047f4 <UART_SetConfig+0xa0>
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b8d      	ldr	r3, [pc, #564]	; (8004a24 <UART_SetConfig+0x2d0>)
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d104      	bne.n	80047fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7ff f9fa 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 80047f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047fc:	e003      	b.n	8004806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7ff f9e1 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004802:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	f040 810c 	bne.w	8004a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800481e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	1891      	adds	r1, r2, r2
 800482c:	65b9      	str	r1, [r7, #88]	; 0x58
 800482e:	415b      	adcs	r3, r3
 8004830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004836:	4621      	mov	r1, r4
 8004838:	eb12 0801 	adds.w	r8, r2, r1
 800483c:	4629      	mov	r1, r5
 800483e:	eb43 0901 	adc.w	r9, r3, r1
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004856:	4690      	mov	r8, r2
 8004858:	4699      	mov	r9, r3
 800485a:	4623      	mov	r3, r4
 800485c:	eb18 0303 	adds.w	r3, r8, r3
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004864:	462b      	mov	r3, r5
 8004866:	eb49 0303 	adc.w	r3, r9, r3
 800486a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800487a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800487e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004882:	460b      	mov	r3, r1
 8004884:	18db      	adds	r3, r3, r3
 8004886:	653b      	str	r3, [r7, #80]	; 0x50
 8004888:	4613      	mov	r3, r2
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
 8004890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004898:	f7fb fca8 	bl	80001ec <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <UART_SetConfig+0x2d4>)
 80048a2:	fba3 2302 	umull	r2, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	011c      	lsls	r4, r3, #4
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048c4:	415b      	adcs	r3, r3
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048cc:	4641      	mov	r1, r8
 80048ce:	eb12 0a01 	adds.w	sl, r2, r1
 80048d2:	4649      	mov	r1, r9
 80048d4:	eb43 0b01 	adc.w	fp, r3, r1
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ec:	4692      	mov	sl, r2
 80048ee:	469b      	mov	fp, r3
 80048f0:	4643      	mov	r3, r8
 80048f2:	eb1a 0303 	adds.w	r3, sl, r3
 80048f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048fa:	464b      	mov	r3, r9
 80048fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004910:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004918:	460b      	mov	r3, r1
 800491a:	18db      	adds	r3, r3, r3
 800491c:	643b      	str	r3, [r7, #64]	; 0x40
 800491e:	4613      	mov	r3, r2
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
 8004926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800492a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800492e:	f7fb fc5d 	bl	80001ec <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4611      	mov	r1, r2
 8004938:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <UART_SetConfig+0x2d4>)
 800493a:	fba3 2301 	umull	r2, r3, r3, r1
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2264      	movs	r2, #100	; 0x64
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	1acb      	subs	r3, r1, r3
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <UART_SetConfig+0x2d4>)
 8004950:	fba3 2302 	umull	r2, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800495c:	441c      	add	r4, r3
 800495e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004968:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800496c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	1891      	adds	r1, r2, r2
 8004976:	63b9      	str	r1, [r7, #56]	; 0x38
 8004978:	415b      	adcs	r3, r3
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800497c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004980:	4641      	mov	r1, r8
 8004982:	1851      	adds	r1, r2, r1
 8004984:	6339      	str	r1, [r7, #48]	; 0x30
 8004986:	4649      	mov	r1, r9
 8004988:	414b      	adcs	r3, r1
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004998:	4659      	mov	r1, fp
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a2:	4651      	mov	r1, sl
 80049a4:	00ca      	lsls	r2, r1, #3
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	4642      	mov	r2, r8
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b4:	464b      	mov	r3, r9
 80049b6:	460a      	mov	r2, r1
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049d4:	460b      	mov	r3, r1
 80049d6:	18db      	adds	r3, r3, r3
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049da:	4613      	mov	r3, r2
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ea:	f7fb fbff 	bl	80001ec <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <UART_SetConfig+0x2d4>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	; 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	3332      	adds	r3, #50	; 0x32
 8004a06:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <UART_SetConfig+0x2d4>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 0207 	and.w	r2, r3, #7
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4422      	add	r2, r4
 8004a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a1c:	e105      	b.n	8004c2a <UART_SetConfig+0x4d6>
 8004a1e:	bf00      	nop
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a3e:	4642      	mov	r2, r8
 8004a40:	464b      	mov	r3, r9
 8004a42:	1891      	adds	r1, r2, r2
 8004a44:	6239      	str	r1, [r7, #32]
 8004a46:	415b      	adcs	r3, r3
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4e:	4641      	mov	r1, r8
 8004a50:	1854      	adds	r4, r2, r1
 8004a52:	4649      	mov	r1, r9
 8004a54:	eb43 0501 	adc.w	r5, r3, r1
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	00eb      	lsls	r3, r5, #3
 8004a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a66:	00e2      	lsls	r2, r4, #3
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	18e3      	adds	r3, r4, r3
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a74:	464b      	mov	r3, r9
 8004a76:	eb45 0303 	adc.w	r3, r5, r3
 8004a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	008b      	lsls	r3, r1, #2
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	008a      	lsls	r2, r1, #2
 8004aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aac:	f7fb fb9e 	bl	80001ec <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4b60      	ldr	r3, [pc, #384]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	011c      	lsls	r4, r3, #4
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	61b9      	str	r1, [r7, #24]
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6139      	str	r1, [r7, #16]
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b38:	4649      	mov	r1, r9
 8004b3a:	008b      	lsls	r3, r1, #2
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b42:	4641      	mov	r1, r8
 8004b44:	008a      	lsls	r2, r1, #2
 8004b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b4a:	f7fb fb4f 	bl	80001ec <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004b54:	fba3 1302 	umull	r1, r3, r3, r2
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	2164      	movs	r1, #100	; 0x64
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	3332      	adds	r3, #50	; 0x32
 8004b66:	4a34      	ldr	r2, [pc, #208]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b72:	441c      	add	r4, r3
 8004b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b78:	2200      	movs	r2, #0
 8004b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b7c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b82:	4642      	mov	r2, r8
 8004b84:	464b      	mov	r3, r9
 8004b86:	1891      	adds	r1, r2, r2
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b92:	4641      	mov	r1, r8
 8004b94:	1851      	adds	r1, r2, r1
 8004b96:	6039      	str	r1, [r7, #0]
 8004b98:	4649      	mov	r1, r9
 8004b9a:	414b      	adcs	r3, r1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004baa:	4659      	mov	r1, fp
 8004bac:	00cb      	lsls	r3, r1, #3
 8004bae:	4651      	mov	r1, sl
 8004bb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb4:	4651      	mov	r1, sl
 8004bb6:	00ca      	lsls	r2, r1, #3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4642      	mov	r2, r8
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bd8:	667a      	str	r2, [r7, #100]	; 0x64
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004be6:	4649      	mov	r1, r9
 8004be8:	008b      	lsls	r3, r1, #2
 8004bea:	4641      	mov	r1, r8
 8004bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	008a      	lsls	r2, r1, #2
 8004bf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bf8:	f7fb faf8 	bl	80001ec <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004c02:	fba3 1302 	umull	r1, r3, r3, r2
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2164      	movs	r1, #100	; 0x64
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	3332      	adds	r3, #50	; 0x32
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4422      	add	r2, r4
 8004c28:	609a      	str	r2, [r3, #8]
}
 8004c2a:	bf00      	nop
 8004c2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c30:	46bd      	mov	sp, r7
 8004c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c36:	bf00      	nop
 8004c38:	51eb851f 	.word	0x51eb851f

08004c3c <__errno>:
 8004c3c:	4b01      	ldr	r3, [pc, #4]	; (8004c44 <__errno+0x8>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c

08004c48 <__libc_init_array>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4d0d      	ldr	r5, [pc, #52]	; (8004c80 <__libc_init_array+0x38>)
 8004c4c:	4c0d      	ldr	r4, [pc, #52]	; (8004c84 <__libc_init_array+0x3c>)
 8004c4e:	1b64      	subs	r4, r4, r5
 8004c50:	10a4      	asrs	r4, r4, #2
 8004c52:	2600      	movs	r6, #0
 8004c54:	42a6      	cmp	r6, r4
 8004c56:	d109      	bne.n	8004c6c <__libc_init_array+0x24>
 8004c58:	4d0b      	ldr	r5, [pc, #44]	; (8004c88 <__libc_init_array+0x40>)
 8004c5a:	4c0c      	ldr	r4, [pc, #48]	; (8004c8c <__libc_init_array+0x44>)
 8004c5c:	f000 fd1e 	bl	800569c <_init>
 8004c60:	1b64      	subs	r4, r4, r5
 8004c62:	10a4      	asrs	r4, r4, #2
 8004c64:	2600      	movs	r6, #0
 8004c66:	42a6      	cmp	r6, r4
 8004c68:	d105      	bne.n	8004c76 <__libc_init_array+0x2e>
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c70:	4798      	blx	r3
 8004c72:	3601      	adds	r6, #1
 8004c74:	e7ee      	b.n	8004c54 <__libc_init_array+0xc>
 8004c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7a:	4798      	blx	r3
 8004c7c:	3601      	adds	r6, #1
 8004c7e:	e7f2      	b.n	8004c66 <__libc_init_array+0x1e>
 8004c80:	0800574c 	.word	0x0800574c
 8004c84:	0800574c 	.word	0x0800574c
 8004c88:	0800574c 	.word	0x0800574c
 8004c8c:	08005750 	.word	0x08005750

08004c90 <memset>:
 8004c90:	4402      	add	r2, r0
 8004c92:	4603      	mov	r3, r0
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d100      	bne.n	8004c9a <memset+0xa>
 8004c98:	4770      	bx	lr
 8004c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9e:	e7f9      	b.n	8004c94 <memset+0x4>

08004ca0 <_puts_r>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	460e      	mov	r6, r1
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b118      	cbz	r0, 8004cb0 <_puts_r+0x10>
 8004ca8:	6983      	ldr	r3, [r0, #24]
 8004caa:	b90b      	cbnz	r3, 8004cb0 <_puts_r+0x10>
 8004cac:	f000 fa48 	bl	8005140 <__sinit>
 8004cb0:	69ab      	ldr	r3, [r5, #24]
 8004cb2:	68ac      	ldr	r4, [r5, #8]
 8004cb4:	b913      	cbnz	r3, 8004cbc <_puts_r+0x1c>
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fa42 	bl	8005140 <__sinit>
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <_puts_r+0xd0>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	d120      	bne.n	8004d04 <_puts_r+0x64>
 8004cc2:	686c      	ldr	r4, [r5, #4]
 8004cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc6:	07db      	lsls	r3, r3, #31
 8004cc8:	d405      	bmi.n	8004cd6 <_puts_r+0x36>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	0598      	lsls	r0, r3, #22
 8004cce:	d402      	bmi.n	8004cd6 <_puts_r+0x36>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f000 fad3 	bl	800527c <__retarget_lock_acquire_recursive>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	0719      	lsls	r1, r3, #28
 8004cda:	d51d      	bpl.n	8004d18 <_puts_r+0x78>
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	b1db      	cbz	r3, 8004d18 <_puts_r+0x78>
 8004ce0:	3e01      	subs	r6, #1
 8004ce2:	68a3      	ldr	r3, [r4, #8]
 8004ce4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	60a3      	str	r3, [r4, #8]
 8004cec:	bb39      	cbnz	r1, 8004d3e <_puts_r+0x9e>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	da38      	bge.n	8004d64 <_puts_r+0xc4>
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	210a      	movs	r1, #10
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 f848 	bl	8004d8c <__swbuf_r>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d011      	beq.n	8004d24 <_puts_r+0x84>
 8004d00:	250a      	movs	r5, #10
 8004d02:	e011      	b.n	8004d28 <_puts_r+0x88>
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <_puts_r+0xd4>)
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d101      	bne.n	8004d0e <_puts_r+0x6e>
 8004d0a:	68ac      	ldr	r4, [r5, #8]
 8004d0c:	e7da      	b.n	8004cc4 <_puts_r+0x24>
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <_puts_r+0xd8>)
 8004d10:	429c      	cmp	r4, r3
 8004d12:	bf08      	it	eq
 8004d14:	68ec      	ldreq	r4, [r5, #12]
 8004d16:	e7d5      	b.n	8004cc4 <_puts_r+0x24>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 f888 	bl	8004e30 <__swsetup_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d0dd      	beq.n	8004ce0 <_puts_r+0x40>
 8004d24:	f04f 35ff 	mov.w	r5, #4294967295
 8004d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d2a:	07da      	lsls	r2, r3, #31
 8004d2c:	d405      	bmi.n	8004d3a <_puts_r+0x9a>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	059b      	lsls	r3, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_puts_r+0x9a>
 8004d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d36:	f000 faa2 	bl	800527e <__retarget_lock_release_recursive>
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da04      	bge.n	8004d4c <_puts_r+0xac>
 8004d42:	69a2      	ldr	r2, [r4, #24]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	dc06      	bgt.n	8004d56 <_puts_r+0xb6>
 8004d48:	290a      	cmp	r1, #10
 8004d4a:	d004      	beq.n	8004d56 <_puts_r+0xb6>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	7019      	strb	r1, [r3, #0]
 8004d54:	e7c5      	b.n	8004ce2 <_puts_r+0x42>
 8004d56:	4622      	mov	r2, r4
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f000 f817 	bl	8004d8c <__swbuf_r>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d1bf      	bne.n	8004ce2 <_puts_r+0x42>
 8004d62:	e7df      	b.n	8004d24 <_puts_r+0x84>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	250a      	movs	r5, #10
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	6022      	str	r2, [r4, #0]
 8004d6c:	701d      	strb	r5, [r3, #0]
 8004d6e:	e7db      	b.n	8004d28 <_puts_r+0x88>
 8004d70:	08005704 	.word	0x08005704
 8004d74:	08005724 	.word	0x08005724
 8004d78:	080056e4 	.word	0x080056e4

08004d7c <puts>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <puts+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f7ff bf8d 	b.w	8004ca0 <_puts_r>
 8004d86:	bf00      	nop
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <__swbuf_r>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	460e      	mov	r6, r1
 8004d90:	4614      	mov	r4, r2
 8004d92:	4605      	mov	r5, r0
 8004d94:	b118      	cbz	r0, 8004d9e <__swbuf_r+0x12>
 8004d96:	6983      	ldr	r3, [r0, #24]
 8004d98:	b90b      	cbnz	r3, 8004d9e <__swbuf_r+0x12>
 8004d9a:	f000 f9d1 	bl	8005140 <__sinit>
 8004d9e:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <__swbuf_r+0x98>)
 8004da0:	429c      	cmp	r4, r3
 8004da2:	d12b      	bne.n	8004dfc <__swbuf_r+0x70>
 8004da4:	686c      	ldr	r4, [r5, #4]
 8004da6:	69a3      	ldr	r3, [r4, #24]
 8004da8:	60a3      	str	r3, [r4, #8]
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	071a      	lsls	r2, r3, #28
 8004dae:	d52f      	bpl.n	8004e10 <__swbuf_r+0x84>
 8004db0:	6923      	ldr	r3, [r4, #16]
 8004db2:	b36b      	cbz	r3, 8004e10 <__swbuf_r+0x84>
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	1ac0      	subs	r0, r0, r3
 8004dba:	6963      	ldr	r3, [r4, #20]
 8004dbc:	b2f6      	uxtb	r6, r6
 8004dbe:	4283      	cmp	r3, r0
 8004dc0:	4637      	mov	r7, r6
 8004dc2:	dc04      	bgt.n	8004dce <__swbuf_r+0x42>
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 f926 	bl	8005018 <_fflush_r>
 8004dcc:	bb30      	cbnz	r0, 8004e1c <__swbuf_r+0x90>
 8004dce:	68a3      	ldr	r3, [r4, #8]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	60a3      	str	r3, [r4, #8]
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	6022      	str	r2, [r4, #0]
 8004dda:	701e      	strb	r6, [r3, #0]
 8004ddc:	6963      	ldr	r3, [r4, #20]
 8004dde:	3001      	adds	r0, #1
 8004de0:	4283      	cmp	r3, r0
 8004de2:	d004      	beq.n	8004dee <__swbuf_r+0x62>
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	07db      	lsls	r3, r3, #31
 8004de8:	d506      	bpl.n	8004df8 <__swbuf_r+0x6c>
 8004dea:	2e0a      	cmp	r6, #10
 8004dec:	d104      	bne.n	8004df8 <__swbuf_r+0x6c>
 8004dee:	4621      	mov	r1, r4
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 f911 	bl	8005018 <_fflush_r>
 8004df6:	b988      	cbnz	r0, 8004e1c <__swbuf_r+0x90>
 8004df8:	4638      	mov	r0, r7
 8004dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <__swbuf_r+0x9c>)
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	d101      	bne.n	8004e06 <__swbuf_r+0x7a>
 8004e02:	68ac      	ldr	r4, [r5, #8]
 8004e04:	e7cf      	b.n	8004da6 <__swbuf_r+0x1a>
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <__swbuf_r+0xa0>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	bf08      	it	eq
 8004e0c:	68ec      	ldreq	r4, [r5, #12]
 8004e0e:	e7ca      	b.n	8004da6 <__swbuf_r+0x1a>
 8004e10:	4621      	mov	r1, r4
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 f80c 	bl	8004e30 <__swsetup_r>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d0cb      	beq.n	8004db4 <__swbuf_r+0x28>
 8004e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e20:	e7ea      	b.n	8004df8 <__swbuf_r+0x6c>
 8004e22:	bf00      	nop
 8004e24:	08005704 	.word	0x08005704
 8004e28:	08005724 	.word	0x08005724
 8004e2c:	080056e4 	.word	0x080056e4

08004e30 <__swsetup_r>:
 8004e30:	4b32      	ldr	r3, [pc, #200]	; (8004efc <__swsetup_r+0xcc>)
 8004e32:	b570      	push	{r4, r5, r6, lr}
 8004e34:	681d      	ldr	r5, [r3, #0]
 8004e36:	4606      	mov	r6, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	b125      	cbz	r5, 8004e46 <__swsetup_r+0x16>
 8004e3c:	69ab      	ldr	r3, [r5, #24]
 8004e3e:	b913      	cbnz	r3, 8004e46 <__swsetup_r+0x16>
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 f97d 	bl	8005140 <__sinit>
 8004e46:	4b2e      	ldr	r3, [pc, #184]	; (8004f00 <__swsetup_r+0xd0>)
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	d10f      	bne.n	8004e6c <__swsetup_r+0x3c>
 8004e4c:	686c      	ldr	r4, [r5, #4]
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e54:	0719      	lsls	r1, r3, #28
 8004e56:	d42c      	bmi.n	8004eb2 <__swsetup_r+0x82>
 8004e58:	06dd      	lsls	r5, r3, #27
 8004e5a:	d411      	bmi.n	8004e80 <__swsetup_r+0x50>
 8004e5c:	2309      	movs	r3, #9
 8004e5e:	6033      	str	r3, [r6, #0]
 8004e60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e64:	81a3      	strh	r3, [r4, #12]
 8004e66:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6a:	e03e      	b.n	8004eea <__swsetup_r+0xba>
 8004e6c:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <__swsetup_r+0xd4>)
 8004e6e:	429c      	cmp	r4, r3
 8004e70:	d101      	bne.n	8004e76 <__swsetup_r+0x46>
 8004e72:	68ac      	ldr	r4, [r5, #8]
 8004e74:	e7eb      	b.n	8004e4e <__swsetup_r+0x1e>
 8004e76:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <__swsetup_r+0xd8>)
 8004e78:	429c      	cmp	r4, r3
 8004e7a:	bf08      	it	eq
 8004e7c:	68ec      	ldreq	r4, [r5, #12]
 8004e7e:	e7e6      	b.n	8004e4e <__swsetup_r+0x1e>
 8004e80:	0758      	lsls	r0, r3, #29
 8004e82:	d512      	bpl.n	8004eaa <__swsetup_r+0x7a>
 8004e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e86:	b141      	cbz	r1, 8004e9a <__swsetup_r+0x6a>
 8004e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <__swsetup_r+0x66>
 8004e90:	4630      	mov	r0, r6
 8004e92:	f000 fa5b 	bl	800534c <_free_r>
 8004e96:	2300      	movs	r3, #0
 8004e98:	6363      	str	r3, [r4, #52]	; 0x34
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	f043 0308 	orr.w	r3, r3, #8
 8004eb0:	81a3      	strh	r3, [r4, #12]
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	b94b      	cbnz	r3, 8004eca <__swsetup_r+0x9a>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec0:	d003      	beq.n	8004eca <__swsetup_r+0x9a>
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f000 fa01 	bl	80052cc <__smakebuf_r>
 8004eca:	89a0      	ldrh	r0, [r4, #12]
 8004ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ed0:	f010 0301 	ands.w	r3, r0, #1
 8004ed4:	d00a      	beq.n	8004eec <__swsetup_r+0xbc>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	6963      	ldr	r3, [r4, #20]
 8004edc:	425b      	negs	r3, r3
 8004ede:	61a3      	str	r3, [r4, #24]
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	b943      	cbnz	r3, 8004ef6 <__swsetup_r+0xc6>
 8004ee4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ee8:	d1ba      	bne.n	8004e60 <__swsetup_r+0x30>
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	0781      	lsls	r1, r0, #30
 8004eee:	bf58      	it	pl
 8004ef0:	6963      	ldrpl	r3, [r4, #20]
 8004ef2:	60a3      	str	r3, [r4, #8]
 8004ef4:	e7f4      	b.n	8004ee0 <__swsetup_r+0xb0>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	e7f7      	b.n	8004eea <__swsetup_r+0xba>
 8004efa:	bf00      	nop
 8004efc:	2000000c 	.word	0x2000000c
 8004f00:	08005704 	.word	0x08005704
 8004f04:	08005724 	.word	0x08005724
 8004f08:	080056e4 	.word	0x080056e4

08004f0c <__sflush_r>:
 8004f0c:	898a      	ldrh	r2, [r1, #12]
 8004f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f12:	4605      	mov	r5, r0
 8004f14:	0710      	lsls	r0, r2, #28
 8004f16:	460c      	mov	r4, r1
 8004f18:	d458      	bmi.n	8004fcc <__sflush_r+0xc0>
 8004f1a:	684b      	ldr	r3, [r1, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	dc05      	bgt.n	8004f2c <__sflush_r+0x20>
 8004f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dc02      	bgt.n	8004f2c <__sflush_r+0x20>
 8004f26:	2000      	movs	r0, #0
 8004f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f2e:	2e00      	cmp	r6, #0
 8004f30:	d0f9      	beq.n	8004f26 <__sflush_r+0x1a>
 8004f32:	2300      	movs	r3, #0
 8004f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f38:	682f      	ldr	r7, [r5, #0]
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	d032      	beq.n	8004fa4 <__sflush_r+0x98>
 8004f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	075a      	lsls	r2, r3, #29
 8004f44:	d505      	bpl.n	8004f52 <__sflush_r+0x46>
 8004f46:	6863      	ldr	r3, [r4, #4]
 8004f48:	1ac0      	subs	r0, r0, r3
 8004f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f4c:	b10b      	cbz	r3, 8004f52 <__sflush_r+0x46>
 8004f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f50:	1ac0      	subs	r0, r0, r3
 8004f52:	2300      	movs	r3, #0
 8004f54:	4602      	mov	r2, r0
 8004f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f58:	6a21      	ldr	r1, [r4, #32]
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b0      	blx	r6
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	d106      	bne.n	8004f72 <__sflush_r+0x66>
 8004f64:	6829      	ldr	r1, [r5, #0]
 8004f66:	291d      	cmp	r1, #29
 8004f68:	d82c      	bhi.n	8004fc4 <__sflush_r+0xb8>
 8004f6a:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <__sflush_r+0x108>)
 8004f6c:	40ca      	lsrs	r2, r1
 8004f6e:	07d6      	lsls	r6, r2, #31
 8004f70:	d528      	bpl.n	8004fc4 <__sflush_r+0xb8>
 8004f72:	2200      	movs	r2, #0
 8004f74:	6062      	str	r2, [r4, #4]
 8004f76:	04d9      	lsls	r1, r3, #19
 8004f78:	6922      	ldr	r2, [r4, #16]
 8004f7a:	6022      	str	r2, [r4, #0]
 8004f7c:	d504      	bpl.n	8004f88 <__sflush_r+0x7c>
 8004f7e:	1c42      	adds	r2, r0, #1
 8004f80:	d101      	bne.n	8004f86 <__sflush_r+0x7a>
 8004f82:	682b      	ldr	r3, [r5, #0]
 8004f84:	b903      	cbnz	r3, 8004f88 <__sflush_r+0x7c>
 8004f86:	6560      	str	r0, [r4, #84]	; 0x54
 8004f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f8a:	602f      	str	r7, [r5, #0]
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d0ca      	beq.n	8004f26 <__sflush_r+0x1a>
 8004f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f94:	4299      	cmp	r1, r3
 8004f96:	d002      	beq.n	8004f9e <__sflush_r+0x92>
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 f9d7 	bl	800534c <_free_r>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8004fa2:	e7c1      	b.n	8004f28 <__sflush_r+0x1c>
 8004fa4:	6a21      	ldr	r1, [r4, #32]
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b0      	blx	r6
 8004fac:	1c41      	adds	r1, r0, #1
 8004fae:	d1c7      	bne.n	8004f40 <__sflush_r+0x34>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0c4      	beq.n	8004f40 <__sflush_r+0x34>
 8004fb6:	2b1d      	cmp	r3, #29
 8004fb8:	d001      	beq.n	8004fbe <__sflush_r+0xb2>
 8004fba:	2b16      	cmp	r3, #22
 8004fbc:	d101      	bne.n	8004fc2 <__sflush_r+0xb6>
 8004fbe:	602f      	str	r7, [r5, #0]
 8004fc0:	e7b1      	b.n	8004f26 <__sflush_r+0x1a>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc8:	81a3      	strh	r3, [r4, #12]
 8004fca:	e7ad      	b.n	8004f28 <__sflush_r+0x1c>
 8004fcc:	690f      	ldr	r7, [r1, #16]
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	d0a9      	beq.n	8004f26 <__sflush_r+0x1a>
 8004fd2:	0793      	lsls	r3, r2, #30
 8004fd4:	680e      	ldr	r6, [r1, #0]
 8004fd6:	bf08      	it	eq
 8004fd8:	694b      	ldreq	r3, [r1, #20]
 8004fda:	600f      	str	r7, [r1, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	2300      	movne	r3, #0
 8004fe0:	eba6 0807 	sub.w	r8, r6, r7
 8004fe4:	608b      	str	r3, [r1, #8]
 8004fe6:	f1b8 0f00 	cmp.w	r8, #0
 8004fea:	dd9c      	ble.n	8004f26 <__sflush_r+0x1a>
 8004fec:	6a21      	ldr	r1, [r4, #32]
 8004fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ff0:	4643      	mov	r3, r8
 8004ff2:	463a      	mov	r2, r7
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b0      	blx	r6
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	dc06      	bgt.n	800500a <__sflush_r+0xfe>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	e78e      	b.n	8004f28 <__sflush_r+0x1c>
 800500a:	4407      	add	r7, r0
 800500c:	eba8 0800 	sub.w	r8, r8, r0
 8005010:	e7e9      	b.n	8004fe6 <__sflush_r+0xda>
 8005012:	bf00      	nop
 8005014:	20400001 	.word	0x20400001

08005018 <_fflush_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	690b      	ldr	r3, [r1, #16]
 800501c:	4605      	mov	r5, r0
 800501e:	460c      	mov	r4, r1
 8005020:	b913      	cbnz	r3, 8005028 <_fflush_r+0x10>
 8005022:	2500      	movs	r5, #0
 8005024:	4628      	mov	r0, r5
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	b118      	cbz	r0, 8005032 <_fflush_r+0x1a>
 800502a:	6983      	ldr	r3, [r0, #24]
 800502c:	b90b      	cbnz	r3, 8005032 <_fflush_r+0x1a>
 800502e:	f000 f887 	bl	8005140 <__sinit>
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <_fflush_r+0x6c>)
 8005034:	429c      	cmp	r4, r3
 8005036:	d11b      	bne.n	8005070 <_fflush_r+0x58>
 8005038:	686c      	ldr	r4, [r5, #4]
 800503a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0ef      	beq.n	8005022 <_fflush_r+0xa>
 8005042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005044:	07d0      	lsls	r0, r2, #31
 8005046:	d404      	bmi.n	8005052 <_fflush_r+0x3a>
 8005048:	0599      	lsls	r1, r3, #22
 800504a:	d402      	bmi.n	8005052 <_fflush_r+0x3a>
 800504c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800504e:	f000 f915 	bl	800527c <__retarget_lock_acquire_recursive>
 8005052:	4628      	mov	r0, r5
 8005054:	4621      	mov	r1, r4
 8005056:	f7ff ff59 	bl	8004f0c <__sflush_r>
 800505a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800505c:	07da      	lsls	r2, r3, #31
 800505e:	4605      	mov	r5, r0
 8005060:	d4e0      	bmi.n	8005024 <_fflush_r+0xc>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	059b      	lsls	r3, r3, #22
 8005066:	d4dd      	bmi.n	8005024 <_fflush_r+0xc>
 8005068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506a:	f000 f908 	bl	800527e <__retarget_lock_release_recursive>
 800506e:	e7d9      	b.n	8005024 <_fflush_r+0xc>
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <_fflush_r+0x70>)
 8005072:	429c      	cmp	r4, r3
 8005074:	d101      	bne.n	800507a <_fflush_r+0x62>
 8005076:	68ac      	ldr	r4, [r5, #8]
 8005078:	e7df      	b.n	800503a <_fflush_r+0x22>
 800507a:	4b04      	ldr	r3, [pc, #16]	; (800508c <_fflush_r+0x74>)
 800507c:	429c      	cmp	r4, r3
 800507e:	bf08      	it	eq
 8005080:	68ec      	ldreq	r4, [r5, #12]
 8005082:	e7da      	b.n	800503a <_fflush_r+0x22>
 8005084:	08005704 	.word	0x08005704
 8005088:	08005724 	.word	0x08005724
 800508c:	080056e4 	.word	0x080056e4

08005090 <std>:
 8005090:	2300      	movs	r3, #0
 8005092:	b510      	push	{r4, lr}
 8005094:	4604      	mov	r4, r0
 8005096:	e9c0 3300 	strd	r3, r3, [r0]
 800509a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800509e:	6083      	str	r3, [r0, #8]
 80050a0:	8181      	strh	r1, [r0, #12]
 80050a2:	6643      	str	r3, [r0, #100]	; 0x64
 80050a4:	81c2      	strh	r2, [r0, #14]
 80050a6:	6183      	str	r3, [r0, #24]
 80050a8:	4619      	mov	r1, r3
 80050aa:	2208      	movs	r2, #8
 80050ac:	305c      	adds	r0, #92	; 0x5c
 80050ae:	f7ff fdef 	bl	8004c90 <memset>
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <std+0x38>)
 80050b4:	6263      	str	r3, [r4, #36]	; 0x24
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <std+0x3c>)
 80050b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <std+0x40>)
 80050bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <std+0x44>)
 80050c0:	6224      	str	r4, [r4, #32]
 80050c2:	6323      	str	r3, [r4, #48]	; 0x30
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	bf00      	nop
 80050c8:	0800552d 	.word	0x0800552d
 80050cc:	0800554f 	.word	0x0800554f
 80050d0:	08005587 	.word	0x08005587
 80050d4:	080055ab 	.word	0x080055ab

080050d8 <_cleanup_r>:
 80050d8:	4901      	ldr	r1, [pc, #4]	; (80050e0 <_cleanup_r+0x8>)
 80050da:	f000 b8af 	b.w	800523c <_fwalk_reent>
 80050de:	bf00      	nop
 80050e0:	08005019 	.word	0x08005019

080050e4 <__sfmoreglue>:
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	2268      	movs	r2, #104	; 0x68
 80050e8:	1e4d      	subs	r5, r1, #1
 80050ea:	4355      	muls	r5, r2
 80050ec:	460e      	mov	r6, r1
 80050ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050f2:	f000 f997 	bl	8005424 <_malloc_r>
 80050f6:	4604      	mov	r4, r0
 80050f8:	b140      	cbz	r0, 800510c <__sfmoreglue+0x28>
 80050fa:	2100      	movs	r1, #0
 80050fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005100:	300c      	adds	r0, #12
 8005102:	60a0      	str	r0, [r4, #8]
 8005104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005108:	f7ff fdc2 	bl	8004c90 <memset>
 800510c:	4620      	mov	r0, r4
 800510e:	bd70      	pop	{r4, r5, r6, pc}

08005110 <__sfp_lock_acquire>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__sfp_lock_acquire+0x8>)
 8005112:	f000 b8b3 	b.w	800527c <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	2000012d 	.word	0x2000012d

0800511c <__sfp_lock_release>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__sfp_lock_release+0x8>)
 800511e:	f000 b8ae 	b.w	800527e <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	2000012d 	.word	0x2000012d

08005128 <__sinit_lock_acquire>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__sinit_lock_acquire+0x8>)
 800512a:	f000 b8a7 	b.w	800527c <__retarget_lock_acquire_recursive>
 800512e:	bf00      	nop
 8005130:	2000012e 	.word	0x2000012e

08005134 <__sinit_lock_release>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__sinit_lock_release+0x8>)
 8005136:	f000 b8a2 	b.w	800527e <__retarget_lock_release_recursive>
 800513a:	bf00      	nop
 800513c:	2000012e 	.word	0x2000012e

08005140 <__sinit>:
 8005140:	b510      	push	{r4, lr}
 8005142:	4604      	mov	r4, r0
 8005144:	f7ff fff0 	bl	8005128 <__sinit_lock_acquire>
 8005148:	69a3      	ldr	r3, [r4, #24]
 800514a:	b11b      	cbz	r3, 8005154 <__sinit+0x14>
 800514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005150:	f7ff bff0 	b.w	8005134 <__sinit_lock_release>
 8005154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005158:	6523      	str	r3, [r4, #80]	; 0x50
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <__sinit+0x68>)
 800515c:	4a13      	ldr	r2, [pc, #76]	; (80051ac <__sinit+0x6c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	62a2      	str	r2, [r4, #40]	; 0x28
 8005162:	42a3      	cmp	r3, r4
 8005164:	bf04      	itt	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	61a3      	streq	r3, [r4, #24]
 800516a:	4620      	mov	r0, r4
 800516c:	f000 f820 	bl	80051b0 <__sfp>
 8005170:	6060      	str	r0, [r4, #4]
 8005172:	4620      	mov	r0, r4
 8005174:	f000 f81c 	bl	80051b0 <__sfp>
 8005178:	60a0      	str	r0, [r4, #8]
 800517a:	4620      	mov	r0, r4
 800517c:	f000 f818 	bl	80051b0 <__sfp>
 8005180:	2200      	movs	r2, #0
 8005182:	60e0      	str	r0, [r4, #12]
 8005184:	2104      	movs	r1, #4
 8005186:	6860      	ldr	r0, [r4, #4]
 8005188:	f7ff ff82 	bl	8005090 <std>
 800518c:	68a0      	ldr	r0, [r4, #8]
 800518e:	2201      	movs	r2, #1
 8005190:	2109      	movs	r1, #9
 8005192:	f7ff ff7d 	bl	8005090 <std>
 8005196:	68e0      	ldr	r0, [r4, #12]
 8005198:	2202      	movs	r2, #2
 800519a:	2112      	movs	r1, #18
 800519c:	f7ff ff78 	bl	8005090 <std>
 80051a0:	2301      	movs	r3, #1
 80051a2:	61a3      	str	r3, [r4, #24]
 80051a4:	e7d2      	b.n	800514c <__sinit+0xc>
 80051a6:	bf00      	nop
 80051a8:	080056e0 	.word	0x080056e0
 80051ac:	080050d9 	.word	0x080050d9

080051b0 <__sfp>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	4607      	mov	r7, r0
 80051b4:	f7ff ffac 	bl	8005110 <__sfp_lock_acquire>
 80051b8:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <__sfp+0x84>)
 80051ba:	681e      	ldr	r6, [r3, #0]
 80051bc:	69b3      	ldr	r3, [r6, #24]
 80051be:	b913      	cbnz	r3, 80051c6 <__sfp+0x16>
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7ff ffbd 	bl	8005140 <__sinit>
 80051c6:	3648      	adds	r6, #72	; 0x48
 80051c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	d503      	bpl.n	80051d8 <__sfp+0x28>
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	b30b      	cbz	r3, 8005218 <__sfp+0x68>
 80051d4:	6836      	ldr	r6, [r6, #0]
 80051d6:	e7f7      	b.n	80051c8 <__sfp+0x18>
 80051d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051dc:	b9d5      	cbnz	r5, 8005214 <__sfp+0x64>
 80051de:	4b16      	ldr	r3, [pc, #88]	; (8005238 <__sfp+0x88>)
 80051e0:	60e3      	str	r3, [r4, #12]
 80051e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051e6:	6665      	str	r5, [r4, #100]	; 0x64
 80051e8:	f000 f847 	bl	800527a <__retarget_lock_init_recursive>
 80051ec:	f7ff ff96 	bl	800511c <__sfp_lock_release>
 80051f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051f8:	6025      	str	r5, [r4, #0]
 80051fa:	61a5      	str	r5, [r4, #24]
 80051fc:	2208      	movs	r2, #8
 80051fe:	4629      	mov	r1, r5
 8005200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005204:	f7ff fd44 	bl	8004c90 <memset>
 8005208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800520c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005210:	4620      	mov	r0, r4
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005214:	3468      	adds	r4, #104	; 0x68
 8005216:	e7d9      	b.n	80051cc <__sfp+0x1c>
 8005218:	2104      	movs	r1, #4
 800521a:	4638      	mov	r0, r7
 800521c:	f7ff ff62 	bl	80050e4 <__sfmoreglue>
 8005220:	4604      	mov	r4, r0
 8005222:	6030      	str	r0, [r6, #0]
 8005224:	2800      	cmp	r0, #0
 8005226:	d1d5      	bne.n	80051d4 <__sfp+0x24>
 8005228:	f7ff ff78 	bl	800511c <__sfp_lock_release>
 800522c:	230c      	movs	r3, #12
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	e7ee      	b.n	8005210 <__sfp+0x60>
 8005232:	bf00      	nop
 8005234:	080056e0 	.word	0x080056e0
 8005238:	ffff0001 	.word	0xffff0001

0800523c <_fwalk_reent>:
 800523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005240:	4606      	mov	r6, r0
 8005242:	4688      	mov	r8, r1
 8005244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005248:	2700      	movs	r7, #0
 800524a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800524e:	f1b9 0901 	subs.w	r9, r9, #1
 8005252:	d505      	bpl.n	8005260 <_fwalk_reent+0x24>
 8005254:	6824      	ldr	r4, [r4, #0]
 8005256:	2c00      	cmp	r4, #0
 8005258:	d1f7      	bne.n	800524a <_fwalk_reent+0xe>
 800525a:	4638      	mov	r0, r7
 800525c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005260:	89ab      	ldrh	r3, [r5, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d907      	bls.n	8005276 <_fwalk_reent+0x3a>
 8005266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800526a:	3301      	adds	r3, #1
 800526c:	d003      	beq.n	8005276 <_fwalk_reent+0x3a>
 800526e:	4629      	mov	r1, r5
 8005270:	4630      	mov	r0, r6
 8005272:	47c0      	blx	r8
 8005274:	4307      	orrs	r7, r0
 8005276:	3568      	adds	r5, #104	; 0x68
 8005278:	e7e9      	b.n	800524e <_fwalk_reent+0x12>

0800527a <__retarget_lock_init_recursive>:
 800527a:	4770      	bx	lr

0800527c <__retarget_lock_acquire_recursive>:
 800527c:	4770      	bx	lr

0800527e <__retarget_lock_release_recursive>:
 800527e:	4770      	bx	lr

08005280 <__swhatbuf_r>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	460e      	mov	r6, r1
 8005284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005288:	2900      	cmp	r1, #0
 800528a:	b096      	sub	sp, #88	; 0x58
 800528c:	4614      	mov	r4, r2
 800528e:	461d      	mov	r5, r3
 8005290:	da08      	bge.n	80052a4 <__swhatbuf_r+0x24>
 8005292:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	602a      	str	r2, [r5, #0]
 800529a:	061a      	lsls	r2, r3, #24
 800529c:	d410      	bmi.n	80052c0 <__swhatbuf_r+0x40>
 800529e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a2:	e00e      	b.n	80052c2 <__swhatbuf_r+0x42>
 80052a4:	466a      	mov	r2, sp
 80052a6:	f000 f9a7 	bl	80055f8 <_fstat_r>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	dbf1      	blt.n	8005292 <__swhatbuf_r+0x12>
 80052ae:	9a01      	ldr	r2, [sp, #4]
 80052b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052b8:	425a      	negs	r2, r3
 80052ba:	415a      	adcs	r2, r3
 80052bc:	602a      	str	r2, [r5, #0]
 80052be:	e7ee      	b.n	800529e <__swhatbuf_r+0x1e>
 80052c0:	2340      	movs	r3, #64	; 0x40
 80052c2:	2000      	movs	r0, #0
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	b016      	add	sp, #88	; 0x58
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052cc <__smakebuf_r>:
 80052cc:	898b      	ldrh	r3, [r1, #12]
 80052ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052d0:	079d      	lsls	r5, r3, #30
 80052d2:	4606      	mov	r6, r0
 80052d4:	460c      	mov	r4, r1
 80052d6:	d507      	bpl.n	80052e8 <__smakebuf_r+0x1c>
 80052d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	2301      	movs	r3, #1
 80052e2:	6163      	str	r3, [r4, #20]
 80052e4:	b002      	add	sp, #8
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	ab01      	add	r3, sp, #4
 80052ea:	466a      	mov	r2, sp
 80052ec:	f7ff ffc8 	bl	8005280 <__swhatbuf_r>
 80052f0:	9900      	ldr	r1, [sp, #0]
 80052f2:	4605      	mov	r5, r0
 80052f4:	4630      	mov	r0, r6
 80052f6:	f000 f895 	bl	8005424 <_malloc_r>
 80052fa:	b948      	cbnz	r0, 8005310 <__smakebuf_r+0x44>
 80052fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005300:	059a      	lsls	r2, r3, #22
 8005302:	d4ef      	bmi.n	80052e4 <__smakebuf_r+0x18>
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	e7e3      	b.n	80052d8 <__smakebuf_r+0xc>
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <__smakebuf_r+0x7c>)
 8005312:	62b3      	str	r3, [r6, #40]	; 0x28
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	6020      	str	r0, [r4, #0]
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	9b00      	ldr	r3, [sp, #0]
 8005320:	6163      	str	r3, [r4, #20]
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	6120      	str	r0, [r4, #16]
 8005326:	b15b      	cbz	r3, 8005340 <__smakebuf_r+0x74>
 8005328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800532c:	4630      	mov	r0, r6
 800532e:	f000 f975 	bl	800561c <_isatty_r>
 8005332:	b128      	cbz	r0, 8005340 <__smakebuf_r+0x74>
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	81a3      	strh	r3, [r4, #12]
 8005340:	89a0      	ldrh	r0, [r4, #12]
 8005342:	4305      	orrs	r5, r0
 8005344:	81a5      	strh	r5, [r4, #12]
 8005346:	e7cd      	b.n	80052e4 <__smakebuf_r+0x18>
 8005348:	080050d9 	.word	0x080050d9

0800534c <_free_r>:
 800534c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800534e:	2900      	cmp	r1, #0
 8005350:	d044      	beq.n	80053dc <_free_r+0x90>
 8005352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005356:	9001      	str	r0, [sp, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f1a1 0404 	sub.w	r4, r1, #4
 800535e:	bfb8      	it	lt
 8005360:	18e4      	addlt	r4, r4, r3
 8005362:	f000 f97d 	bl	8005660 <__malloc_lock>
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <_free_r+0x94>)
 8005368:	9801      	ldr	r0, [sp, #4]
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	b933      	cbnz	r3, 800537c <_free_r+0x30>
 800536e:	6063      	str	r3, [r4, #4]
 8005370:	6014      	str	r4, [r2, #0]
 8005372:	b003      	add	sp, #12
 8005374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005378:	f000 b978 	b.w	800566c <__malloc_unlock>
 800537c:	42a3      	cmp	r3, r4
 800537e:	d908      	bls.n	8005392 <_free_r+0x46>
 8005380:	6825      	ldr	r5, [r4, #0]
 8005382:	1961      	adds	r1, r4, r5
 8005384:	428b      	cmp	r3, r1
 8005386:	bf01      	itttt	eq
 8005388:	6819      	ldreq	r1, [r3, #0]
 800538a:	685b      	ldreq	r3, [r3, #4]
 800538c:	1949      	addeq	r1, r1, r5
 800538e:	6021      	streq	r1, [r4, #0]
 8005390:	e7ed      	b.n	800536e <_free_r+0x22>
 8005392:	461a      	mov	r2, r3
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	b10b      	cbz	r3, 800539c <_free_r+0x50>
 8005398:	42a3      	cmp	r3, r4
 800539a:	d9fa      	bls.n	8005392 <_free_r+0x46>
 800539c:	6811      	ldr	r1, [r2, #0]
 800539e:	1855      	adds	r5, r2, r1
 80053a0:	42a5      	cmp	r5, r4
 80053a2:	d10b      	bne.n	80053bc <_free_r+0x70>
 80053a4:	6824      	ldr	r4, [r4, #0]
 80053a6:	4421      	add	r1, r4
 80053a8:	1854      	adds	r4, r2, r1
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	d1e0      	bne.n	8005372 <_free_r+0x26>
 80053b0:	681c      	ldr	r4, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	6053      	str	r3, [r2, #4]
 80053b6:	4421      	add	r1, r4
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	e7da      	b.n	8005372 <_free_r+0x26>
 80053bc:	d902      	bls.n	80053c4 <_free_r+0x78>
 80053be:	230c      	movs	r3, #12
 80053c0:	6003      	str	r3, [r0, #0]
 80053c2:	e7d6      	b.n	8005372 <_free_r+0x26>
 80053c4:	6825      	ldr	r5, [r4, #0]
 80053c6:	1961      	adds	r1, r4, r5
 80053c8:	428b      	cmp	r3, r1
 80053ca:	bf04      	itt	eq
 80053cc:	6819      	ldreq	r1, [r3, #0]
 80053ce:	685b      	ldreq	r3, [r3, #4]
 80053d0:	6063      	str	r3, [r4, #4]
 80053d2:	bf04      	itt	eq
 80053d4:	1949      	addeq	r1, r1, r5
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	6054      	str	r4, [r2, #4]
 80053da:	e7ca      	b.n	8005372 <_free_r+0x26>
 80053dc:	b003      	add	sp, #12
 80053de:	bd30      	pop	{r4, r5, pc}
 80053e0:	20000130 	.word	0x20000130

080053e4 <sbrk_aligned>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4e0e      	ldr	r6, [pc, #56]	; (8005420 <sbrk_aligned+0x3c>)
 80053e8:	460c      	mov	r4, r1
 80053ea:	6831      	ldr	r1, [r6, #0]
 80053ec:	4605      	mov	r5, r0
 80053ee:	b911      	cbnz	r1, 80053f6 <sbrk_aligned+0x12>
 80053f0:	f000 f88c 	bl	800550c <_sbrk_r>
 80053f4:	6030      	str	r0, [r6, #0]
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	f000 f887 	bl	800550c <_sbrk_r>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d00a      	beq.n	8005418 <sbrk_aligned+0x34>
 8005402:	1cc4      	adds	r4, r0, #3
 8005404:	f024 0403 	bic.w	r4, r4, #3
 8005408:	42a0      	cmp	r0, r4
 800540a:	d007      	beq.n	800541c <sbrk_aligned+0x38>
 800540c:	1a21      	subs	r1, r4, r0
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f87c 	bl	800550c <_sbrk_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d101      	bne.n	800541c <sbrk_aligned+0x38>
 8005418:	f04f 34ff 	mov.w	r4, #4294967295
 800541c:	4620      	mov	r0, r4
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	20000134 	.word	0x20000134

08005424 <_malloc_r>:
 8005424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005428:	1ccd      	adds	r5, r1, #3
 800542a:	f025 0503 	bic.w	r5, r5, #3
 800542e:	3508      	adds	r5, #8
 8005430:	2d0c      	cmp	r5, #12
 8005432:	bf38      	it	cc
 8005434:	250c      	movcc	r5, #12
 8005436:	2d00      	cmp	r5, #0
 8005438:	4607      	mov	r7, r0
 800543a:	db01      	blt.n	8005440 <_malloc_r+0x1c>
 800543c:	42a9      	cmp	r1, r5
 800543e:	d905      	bls.n	800544c <_malloc_r+0x28>
 8005440:	230c      	movs	r3, #12
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	2600      	movs	r6, #0
 8005446:	4630      	mov	r0, r6
 8005448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800544c:	4e2e      	ldr	r6, [pc, #184]	; (8005508 <_malloc_r+0xe4>)
 800544e:	f000 f907 	bl	8005660 <__malloc_lock>
 8005452:	6833      	ldr	r3, [r6, #0]
 8005454:	461c      	mov	r4, r3
 8005456:	bb34      	cbnz	r4, 80054a6 <_malloc_r+0x82>
 8005458:	4629      	mov	r1, r5
 800545a:	4638      	mov	r0, r7
 800545c:	f7ff ffc2 	bl	80053e4 <sbrk_aligned>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	4604      	mov	r4, r0
 8005464:	d14d      	bne.n	8005502 <_malloc_r+0xde>
 8005466:	6834      	ldr	r4, [r6, #0]
 8005468:	4626      	mov	r6, r4
 800546a:	2e00      	cmp	r6, #0
 800546c:	d140      	bne.n	80054f0 <_malloc_r+0xcc>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	4631      	mov	r1, r6
 8005472:	4638      	mov	r0, r7
 8005474:	eb04 0803 	add.w	r8, r4, r3
 8005478:	f000 f848 	bl	800550c <_sbrk_r>
 800547c:	4580      	cmp	r8, r0
 800547e:	d13a      	bne.n	80054f6 <_malloc_r+0xd2>
 8005480:	6821      	ldr	r1, [r4, #0]
 8005482:	3503      	adds	r5, #3
 8005484:	1a6d      	subs	r5, r5, r1
 8005486:	f025 0503 	bic.w	r5, r5, #3
 800548a:	3508      	adds	r5, #8
 800548c:	2d0c      	cmp	r5, #12
 800548e:	bf38      	it	cc
 8005490:	250c      	movcc	r5, #12
 8005492:	4629      	mov	r1, r5
 8005494:	4638      	mov	r0, r7
 8005496:	f7ff ffa5 	bl	80053e4 <sbrk_aligned>
 800549a:	3001      	adds	r0, #1
 800549c:	d02b      	beq.n	80054f6 <_malloc_r+0xd2>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	442b      	add	r3, r5
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	e00e      	b.n	80054c4 <_malloc_r+0xa0>
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	1b52      	subs	r2, r2, r5
 80054aa:	d41e      	bmi.n	80054ea <_malloc_r+0xc6>
 80054ac:	2a0b      	cmp	r2, #11
 80054ae:	d916      	bls.n	80054de <_malloc_r+0xba>
 80054b0:	1961      	adds	r1, r4, r5
 80054b2:	42a3      	cmp	r3, r4
 80054b4:	6025      	str	r5, [r4, #0]
 80054b6:	bf18      	it	ne
 80054b8:	6059      	strne	r1, [r3, #4]
 80054ba:	6863      	ldr	r3, [r4, #4]
 80054bc:	bf08      	it	eq
 80054be:	6031      	streq	r1, [r6, #0]
 80054c0:	5162      	str	r2, [r4, r5]
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	4638      	mov	r0, r7
 80054c6:	f104 060b 	add.w	r6, r4, #11
 80054ca:	f000 f8cf 	bl	800566c <__malloc_unlock>
 80054ce:	f026 0607 	bic.w	r6, r6, #7
 80054d2:	1d23      	adds	r3, r4, #4
 80054d4:	1af2      	subs	r2, r6, r3
 80054d6:	d0b6      	beq.n	8005446 <_malloc_r+0x22>
 80054d8:	1b9b      	subs	r3, r3, r6
 80054da:	50a3      	str	r3, [r4, r2]
 80054dc:	e7b3      	b.n	8005446 <_malloc_r+0x22>
 80054de:	6862      	ldr	r2, [r4, #4]
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	bf0c      	ite	eq
 80054e4:	6032      	streq	r2, [r6, #0]
 80054e6:	605a      	strne	r2, [r3, #4]
 80054e8:	e7ec      	b.n	80054c4 <_malloc_r+0xa0>
 80054ea:	4623      	mov	r3, r4
 80054ec:	6864      	ldr	r4, [r4, #4]
 80054ee:	e7b2      	b.n	8005456 <_malloc_r+0x32>
 80054f0:	4634      	mov	r4, r6
 80054f2:	6876      	ldr	r6, [r6, #4]
 80054f4:	e7b9      	b.n	800546a <_malloc_r+0x46>
 80054f6:	230c      	movs	r3, #12
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4638      	mov	r0, r7
 80054fc:	f000 f8b6 	bl	800566c <__malloc_unlock>
 8005500:	e7a1      	b.n	8005446 <_malloc_r+0x22>
 8005502:	6025      	str	r5, [r4, #0]
 8005504:	e7de      	b.n	80054c4 <_malloc_r+0xa0>
 8005506:	bf00      	nop
 8005508:	20000130 	.word	0x20000130

0800550c <_sbrk_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d06      	ldr	r5, [pc, #24]	; (8005528 <_sbrk_r+0x1c>)
 8005510:	2300      	movs	r3, #0
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	f7fb fb00 	bl	8000b1c <_sbrk>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_sbrk_r+0x1a>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_sbrk_r+0x1a>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	20000138 	.word	0x20000138

0800552c <__sread>:
 800552c:	b510      	push	{r4, lr}
 800552e:	460c      	mov	r4, r1
 8005530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005534:	f000 f8a0 	bl	8005678 <_read_r>
 8005538:	2800      	cmp	r0, #0
 800553a:	bfab      	itete	ge
 800553c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800553e:	89a3      	ldrhlt	r3, [r4, #12]
 8005540:	181b      	addge	r3, r3, r0
 8005542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005546:	bfac      	ite	ge
 8005548:	6563      	strge	r3, [r4, #84]	; 0x54
 800554a:	81a3      	strhlt	r3, [r4, #12]
 800554c:	bd10      	pop	{r4, pc}

0800554e <__swrite>:
 800554e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005552:	461f      	mov	r7, r3
 8005554:	898b      	ldrh	r3, [r1, #12]
 8005556:	05db      	lsls	r3, r3, #23
 8005558:	4605      	mov	r5, r0
 800555a:	460c      	mov	r4, r1
 800555c:	4616      	mov	r6, r2
 800555e:	d505      	bpl.n	800556c <__swrite+0x1e>
 8005560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005564:	2302      	movs	r3, #2
 8005566:	2200      	movs	r2, #0
 8005568:	f000 f868 	bl	800563c <_lseek_r>
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	4632      	mov	r2, r6
 800557a:	463b      	mov	r3, r7
 800557c:	4628      	mov	r0, r5
 800557e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005582:	f000 b817 	b.w	80055b4 <_write_r>

08005586 <__sseek>:
 8005586:	b510      	push	{r4, lr}
 8005588:	460c      	mov	r4, r1
 800558a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558e:	f000 f855 	bl	800563c <_lseek_r>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	bf15      	itete	ne
 8005598:	6560      	strne	r0, [r4, #84]	; 0x54
 800559a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800559e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055a2:	81a3      	strheq	r3, [r4, #12]
 80055a4:	bf18      	it	ne
 80055a6:	81a3      	strhne	r3, [r4, #12]
 80055a8:	bd10      	pop	{r4, pc}

080055aa <__sclose>:
 80055aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ae:	f000 b813 	b.w	80055d8 <_close_r>
	...

080055b4 <_write_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d07      	ldr	r5, [pc, #28]	; (80055d4 <_write_r+0x20>)
 80055b8:	4604      	mov	r4, r0
 80055ba:	4608      	mov	r0, r1
 80055bc:	4611      	mov	r1, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	602a      	str	r2, [r5, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7fb f92e 	bl	8000824 <_write>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_write_r+0x1e>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_write_r+0x1e>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	20000138 	.word	0x20000138

080055d8 <_close_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d06      	ldr	r5, [pc, #24]	; (80055f4 <_close_r+0x1c>)
 80055dc:	2300      	movs	r3, #0
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fb fa65 	bl	8000ab2 <_close>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_close_r+0x1a>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_close_r+0x1a>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20000138 	.word	0x20000138

080055f8 <_fstat_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d07      	ldr	r5, [pc, #28]	; (8005618 <_fstat_r+0x20>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	4611      	mov	r1, r2
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	f7fb fa60 	bl	8000aca <_fstat>
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	d102      	bne.n	8005614 <_fstat_r+0x1c>
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	b103      	cbz	r3, 8005614 <_fstat_r+0x1c>
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	bd38      	pop	{r3, r4, r5, pc}
 8005616:	bf00      	nop
 8005618:	20000138 	.word	0x20000138

0800561c <_isatty_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d06      	ldr	r5, [pc, #24]	; (8005638 <_isatty_r+0x1c>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fb fa5f 	bl	8000aea <_isatty>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_isatty_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_isatty_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20000138 	.word	0x20000138

0800563c <_lseek_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	; (800565c <_lseek_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fb fa58 	bl	8000b00 <_lseek>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_lseek_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_lseek_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000138 	.word	0x20000138

08005660 <__malloc_lock>:
 8005660:	4801      	ldr	r0, [pc, #4]	; (8005668 <__malloc_lock+0x8>)
 8005662:	f7ff be0b 	b.w	800527c <__retarget_lock_acquire_recursive>
 8005666:	bf00      	nop
 8005668:	2000012c 	.word	0x2000012c

0800566c <__malloc_unlock>:
 800566c:	4801      	ldr	r0, [pc, #4]	; (8005674 <__malloc_unlock+0x8>)
 800566e:	f7ff be06 	b.w	800527e <__retarget_lock_release_recursive>
 8005672:	bf00      	nop
 8005674:	2000012c 	.word	0x2000012c

08005678 <_read_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	; (8005698 <_read_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fb f9f6 	bl	8000a78 <_read>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_read_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_read_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000138 	.word	0x20000138

0800569c <_init>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr

080056a8 <_fini>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr
