
3.Debug_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  080089e0  080089e0  000189e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ee4  08008ee4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000038  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b46  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021a2  00000000  00000000  00029d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276f7  00000000  00000000  0002d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab71  00000000  00000000  000549a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b3e  00000000  00000000  0005f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143056  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ef8  00000000  00000000  001430a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080089c8 	.word	0x080089c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080089c8 	.word	0x080089c8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <LL_SYSCFG_SetEXTISource+0x58>)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	3302      	adds	r3, #2
 800102a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	0c1b      	lsrs	r3, r3, #16
 8001032:	43db      	mvns	r3, r3
 8001034:	ea02 0103 	and.w	r1, r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	0c1b      	lsrs	r3, r3, #16
 800103c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	fa03 f202 	lsl.w	r2, r3, r2
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <LL_SYSCFG_SetEXTISource+0x58>)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	430a      	orrs	r2, r1
 800105e:	3302      	adds	r3, #2
 8001060:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40013800 	.word	0x40013800

08001074 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	613b      	str	r3, [r7, #16]
  return result;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2103      	movs	r1, #3
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	401a      	ands	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	61bb      	str	r3, [r7, #24]
  return result;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b089      	sub	sp, #36	; 0x24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	613b      	str	r3, [r7, #16]
  return result;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2103      	movs	r1, #3
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	61bb      	str	r3, [r7, #24]
  return result;
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	431a      	orrs	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	60da      	str	r2, [r3, #12]
}
 8001124:	bf00      	nop
 8001126:	3724      	adds	r7, #36	; 0x24
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800115a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011a0:	2004      	movs	r0, #4
 80011a2:	f7ff ffd5 	bl	8001150 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80011a6:	2080      	movs	r0, #128	; 0x80
 80011a8:	f7ff ffd2 	bl	8001150 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff ffcf 	bl	8001150 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff ffcc 	bl	8001150 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80011b8:	2008      	movs	r0, #8
 80011ba:	f7ff ffc9 	bl	8001150 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80011be:	2040      	movs	r0, #64	; 0x40
 80011c0:	f7ff ffc6 	bl	8001150 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 80011c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80011c8:	485b      	ldr	r0, [pc, #364]	; (8001338 <MX_GPIO_Init+0x1b8>)
 80011ca:	f7ff ffb1 	bl	8001130 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin);
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	485a      	ldr	r0, [pc, #360]	; (800133c <MX_GPIO_Init+0x1bc>)
 80011d2:	f7ff ffad 	bl	8001130 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80011d6:	495a      	ldr	r1, [pc, #360]	; (8001340 <MX_GPIO_Init+0x1c0>)
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff ff1d 	bl	8001018 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80011ec:	2301      	movs	r3, #1
 80011ee:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fe0d 	bl	8002e14 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_PULL_NO);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	4850      	ldr	r0, [pc, #320]	; (8001344 <MX_GPIO_Init+0x1c4>)
 8001202:	f7ff ff66 	bl	80010d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_MODE_INPUT);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120c:	484d      	ldr	r0, [pc, #308]	; (8001344 <MX_GPIO_Init+0x1c4>)
 800120e:	f7ff ff31 	bl	8001074 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001212:	2332      	movs	r3, #50	; 0x32
 8001214:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001216:	2302      	movs	r3, #2
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001226:	230b      	movs	r3, #11
 8001228:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	463b      	mov	r3, r7
 800122c:	4619      	mov	r1, r3
 800122e:	4845      	ldr	r0, [pc, #276]	; (8001344 <MX_GPIO_Init+0x1c4>)
 8001230:	f001 ff76 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001234:	2386      	movs	r3, #134	; 0x86
 8001236:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001238:	2302      	movs	r3, #2
 800123a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001248:	230b      	movs	r3, #11
 800124a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	483d      	ldr	r0, [pc, #244]	; (8001348 <MX_GPIO_Init+0x1c8>)
 8001252:	f001 ff65 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001256:	f244 0381 	movw	r3, #16513	; 0x4081
 800125a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4831      	ldr	r0, [pc, #196]	; (8001338 <MX_GPIO_Init+0x1b8>)
 8001272:	f001 ff55 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800127c:	2302      	movs	r3, #2
 800127e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 800128c:	230b      	movs	r3, #11
 800128e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4828      	ldr	r0, [pc, #160]	; (8001338 <MX_GPIO_Init+0x1b8>)
 8001296:	f001 ff43 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800129e:	2301      	movs	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4822      	ldr	r0, [pc, #136]	; (800133c <MX_GPIO_Init+0x1bc>)
 80012b4:	f001 ff34 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	481c      	ldr	r0, [pc, #112]	; (800133c <MX_GPIO_Init+0x1bc>)
 80012ca:	f001 ff29 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012d4:	2302      	movs	r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 80012e4:	230a      	movs	r3, #10
 80012e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4816      	ldr	r0, [pc, #88]	; (8001348 <MX_GPIO_Init+0x1c8>)
 80012ee:	f001 ff17 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <MX_GPIO_Init+0x1c8>)
 8001306:	f001 ff0b 	bl	8003120 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800130a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800130e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001310:	2302      	movs	r3, #2
 8001312:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8001320:	230b      	movs	r3, #11
 8001322:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_GPIO_Init+0x1bc>)
 800132a:	f001 fef9 	bl	8003120 <LL_GPIO_Init>

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020400 	.word	0x40020400
 800133c:	40021800 	.word	0x40021800
 8001340:	00f00003 	.word	0x00f00003
 8001344:	40020800 	.word	0x40020800
 8001348:	40020000 	.word	0x40020000

0800134c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	621a      	str	r2, [r3, #32]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1a      	ldr	r2, [r3, #32]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	621a      	str	r2, [r3, #32]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b089      	sub	sp, #36	; 0x24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	330c      	adds	r3, #12
 80013be:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	e853 3f00 	ldrex	r3, [r3]
 80013c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	330c      	adds	r3, #12
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	61ba      	str	r2, [r7, #24]
 80013d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013da:	6979      	ldr	r1, [r7, #20]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	e841 2300 	strex	r3, r2, [r1]
 80013e2:	613b      	str	r3, [r7, #16]
   return(result);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e7      	bne.n	80013ba <LL_USART_EnableIT_RXNE+0x8>
}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4013      	ands	r3, r2
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43d9      	mvns	r1, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	400b      	ands	r3, r1
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(uint32_t file, uint8_t* ptr, uint32_t len )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]

	for(int i = 0; i < len; i++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00d      	b.n	8001476 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART3, *(ptr+i));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <_write+0x40>)
 8001466:	f7ff ffc7 	bl	80013f8 <LL_USART_TransmitData8>
		HAL_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fe7c 	bl	8002168 <HAL_Delay>
	for(int i = 0; i < len; i++)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d8ed      	bhi.n	800145a <_write+0x12>
	}

	return len;
 800147e:	687b      	ldr	r3, [r7, #4]

	//if(HAL_UART_Transmit(&huart3, ptr, len, len) == HAL_OK) return len;
	//else return 0;
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40004800 	.word	0x40004800

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001492:	f000 fdf7 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001496:	f000 f8a1 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149a:	f7ff fe71 	bl	8001180 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800149e:	f000 fd65 	bl	8001f6c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80014a2:	f000 fbff 	bl	8001ca4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80014a6:	4842      	ldr	r0, [pc, #264]	; (80015b0 <main+0x124>)
 80014a8:	f7ff ff50 	bl	800134c <LL_TIM_EnableCounter>
  LL_USART_EnableIT_RXNE(USART3);	// Receive Complete Interrupt -> IRQ Handler
 80014ac:	4841      	ldr	r0, [pc, #260]	; (80015b4 <main+0x128>)
 80014ae:	f7ff ff80 	bl	80013b2 <LL_USART_EnableIT_RXNE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80014b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b6:	483e      	ldr	r0, [pc, #248]	; (80015b0 <main+0x124>)
 80014b8:	f7ff ff58 	bl	800136c <LL_TIM_CC_EnableChannel>
  for(int i=0; i< 4; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e013      	b.n	80014ea <main+0x5e>
   	  {
   		  TIM3->PSC = 500*(i + 1);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014ca:	fb03 f202 	mul.w	r2, r3, r2
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <main+0x124>)
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
   		  printf("TIM3->PSC : %ld\r\n", TIM3->PSC);
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <main+0x124>)
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <main+0x12c>)
 80014da:	f003 fc65 	bl	8004da8 <iprintf>
   		  HAL_Delay(100);
 80014de:	2064      	movs	r0, #100	; 0x64
 80014e0:	f000 fe42 	bl	8002168 <HAL_Delay>
  for(int i=0; i< 4; i++)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	dde8      	ble.n	80014c2 <main+0x36>

   	  }
   LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80014f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f4:	482e      	ldr	r0, [pc, #184]	; (80015b0 <main+0x124>)
 80014f6:	f7ff ff4a 	bl	800138e <LL_TIM_CC_DisableChannel>
  float f = 1.234;
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <main+0x130>)
 80014fc:	607b      	str	r3, [r7, #4]
  int32_t fToInt = (int32_t)(f * 1000);
 80014fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001502:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80015c0 <main+0x134>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150e:	ee17 3a90 	vmov	r3, s15
 8001512:	60bb      	str	r3, [r7, #8]
  printf("%f %ld\r\n", f, fToInt);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff f827 	bl	8000568 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	9100      	str	r1, [sp, #0]
 8001522:	4828      	ldr	r0, [pc, #160]	; (80015c4 <main+0x138>)
 8001524:	f003 fc40 	bl	8004da8 <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("%lf\r\n", (double)fToInt/1000);
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7ff f80b 	bl	8000544 <__aeabi_i2d>
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <main+0x13c>)
 8001534:	f7ff f99a 	bl	800086c <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4823      	ldr	r0, [pc, #140]	; (80015cc <main+0x140>)
 800153e:	f003 fc33 	bl	8004da8 <iprintf>
	  fToInt += 1;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
	  HAL_Delay(500);
 8001548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800154c:	f000 fe0c 	bl	8002168 <HAL_Delay>


	  if(uart3_rx_flag == 1)
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <main+0x144>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d129      	bne.n	80015ac <main+0x120>
	  {
		  uart3_rx_flag = 0;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <main+0x144>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART3, uart3_rx_data);	// Transmit received data
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <main+0x148>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4813      	ldr	r0, [pc, #76]	; (80015b4 <main+0x128>)
 8001566:	f7ff ff47 	bl	80013f8 <LL_USART_TransmitData8>
		  switch(uart3_rx_data)
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <main+0x148>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b32      	cmp	r3, #50	; 0x32
 8001570:	d016      	beq.n	80015a0 <main+0x114>
 8001572:	2b32      	cmp	r3, #50	; 0x32
 8001574:	dcd8      	bgt.n	8001528 <main+0x9c>
 8001576:	2b30      	cmp	r3, #48	; 0x30
 8001578:	d002      	beq.n	8001580 <main+0xf4>
 800157a:	2b31      	cmp	r3, #49	; 0x31
 800157c:	d00a      	beq.n	8001594 <main+0x108>
 800157e:	e016      	b.n	80015ae <main+0x122>
		  {
		  	  case '0':
		  		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0| LL_GPIO_PIN_7|LL_GPIO_PIN_14);
 8001580:	f244 0181 	movw	r1, #16513	; 0x4081
 8001584:	4814      	ldr	r0, [pc, #80]	; (80015d8 <main+0x14c>)
 8001586:	f7ff ff46 	bl	8001416 <LL_GPIO_TogglePin>
		  		  HAL_Delay(500);
 800158a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158e:	f000 fdeb 	bl	8002168 <HAL_Delay>
		  		  break;
 8001592:	e00c      	b.n	80015ae <main+0x122>

		  	  case '1': LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); break;
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <main+0x124>)
 800159a:	f7ff fee7 	bl	800136c <LL_TIM_CC_EnableChannel>
 800159e:	e006      	b.n	80015ae <main+0x122>
		  	  case '2': LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4); break;
 80015a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <main+0x124>)
 80015a6:	f7ff fef2 	bl	800138e <LL_TIM_CC_DisableChannel>
 80015aa:	e000      	b.n	80015ae <main+0x122>
		  }
	  }
 80015ac:	bf00      	nop
	  printf("%lf\r\n", (double)fToInt/1000);
 80015ae:	e7bb      	b.n	8001528 <main+0x9c>
 80015b0:	40000400 	.word	0x40000400
 80015b4:	40004800 	.word	0x40004800
 80015b8:	080089e0 	.word	0x080089e0
 80015bc:	3f9df3b6 	.word	0x3f9df3b6
 80015c0:	447a0000 	.word	0x447a0000
 80015c4:	080089f4 	.word	0x080089f4
 80015c8:	408f4000 	.word	0x408f4000
 80015cc:	08008a00 	.word	0x08008a00
 80015d0:	200001fc 	.word	0x200001fc
 80015d4:	200001fd 	.word	0x200001fd
 80015d8:	40020400 	.word	0x40020400

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	; 0x50
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2230      	movs	r2, #48	; 0x30
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fd5a 	bl	80040a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <SystemClock_Config+0xd8>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <SystemClock_Config+0xd8>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <SystemClock_Config+0xd8>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <SystemClock_Config+0xdc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <SystemClock_Config+0xdc>)
 8001626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <SystemClock_Config+0xdc>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	2302      	movs	r3, #2
 8001644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800164c:	2304      	movs	r3, #4
 800164e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001650:	23b4      	movs	r3, #180	; 0xb4
 8001652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001654:	2302      	movs	r3, #2
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001658:	2304      	movs	r3, #4
 800165a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fedb 	bl	800241c <HAL_RCC_OscConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800166c:	f000 f826 	bl	80016bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001670:	f000 fe84 	bl	800237c <HAL_PWREx_EnableOverDrive>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800167a:	f000 f81f 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2105      	movs	r1, #5
 800169c:	4618      	mov	r0, r3
 800169e:	f001 f935 	bl	800290c <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016a8:	f000 f808 	bl	80016bc <Error_Handler>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3750      	adds	r7, #80	; 0x50
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <LL_USART_IsActiveFlag_RXNE>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	2b20      	cmp	r3, #32
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_USART_ClearFlag_RXNE>:
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f06f 0220 	mvn.w	r2, #32
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_USART_ReceiveData8>:
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	b2db      	uxtb	r3, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c0:	f000 fcb2 	bl	8002128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3))
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <USART3_IRQHandler+0x30>)
 80017de:	f7ff ff9b 	bl	8001718 <LL_USART_IsActiveFlag_RXNE>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00c      	beq.n	8001802 <USART3_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <USART3_IRQHandler+0x30>)
 80017ea:	f7ff ffa8 	bl	800173e <LL_USART_ClearFlag_RXNE>
		uart3_rx_data = LL_USART_ReceiveData8(USART3);
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <USART3_IRQHandler+0x30>)
 80017f0:	f7ff ffb3 	bl	800175a <LL_USART_ReceiveData8>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <USART3_IRQHandler+0x34>)
 80017fa:	701a      	strb	r2, [r3, #0]
		uart3_rx_flag = 1;
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <USART3_IRQHandler+0x38>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40004800 	.word	0x40004800
 800180c:	200001fd 	.word	0x200001fd
 8001810:	200001fc 	.word	0x200001fc

08001814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_kill>:

int _kill(int pid, int sig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800182e:	f002 fc0f 	bl	8004050 <__errno>
 8001832:	4603      	mov	r3, r0
 8001834:	2216      	movs	r2, #22
 8001836:	601a      	str	r2, [r3, #0]
	return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_exit>:

void _exit (int status)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ffe7 	bl	8001824 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001856:	e7fe      	b.n	8001856 <_exit+0x12>

08001858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e00a      	b.n	8001880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800186a:	f3af 8000 	nop.w
 800186e:	4601      	mov	r1, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	b2ca      	uxtb	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf0      	blt.n	800186a <_read+0x12>
	}

return len;
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	return -1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ba:	605a      	str	r2, [r3, #4]
	return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_isatty>:

int _isatty(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	return 1;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f002 fb90 	bl	8004050 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20030000 	.word	0x20030000
 800195c:	00000400 	.word	0x00000400
 8001960:	20000200 	.word	0x20000200
 8001964:	20000218 	.word	0x20000218

08001968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_TIM_EnableARRPreload>:
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d01c      	beq.n	8001b0a <LL_TIM_OC_DisableFast+0x4a>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d017      	beq.n	8001b06 <LL_TIM_OC_DisableFast+0x46>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d012      	beq.n	8001b02 <LL_TIM_OC_DisableFast+0x42>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b40      	cmp	r3, #64	; 0x40
 8001ae0:	d00d      	beq.n	8001afe <LL_TIM_OC_DisableFast+0x3e>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae8:	d007      	beq.n	8001afa <LL_TIM_OC_DisableFast+0x3a>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af0:	d101      	bne.n	8001af6 <LL_TIM_OC_DisableFast+0x36>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e00a      	b.n	8001b0c <LL_TIM_OC_DisableFast+0x4c>
 8001af6:	2306      	movs	r3, #6
 8001af8:	e008      	b.n	8001b0c <LL_TIM_OC_DisableFast+0x4c>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e006      	b.n	8001b0c <LL_TIM_OC_DisableFast+0x4c>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <LL_TIM_OC_DisableFast+0x4c>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <LL_TIM_OC_DisableFast+0x4c>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_TIM_OC_DisableFast+0x4c>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3318      	adds	r3, #24
 8001b12:	4619      	mov	r1, r3
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LL_TIM_OC_DisableFast+0x84>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	440b      	add	r3, r1
 8001b1c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	4908      	ldr	r1, [pc, #32]	; (8001b48 <LL_TIM_OC_DisableFast+0x88>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	408b      	lsls	r3, r1
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	401a      	ands	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	601a      	str	r2, [r3, #0]

}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	08008a20 	.word	0x08008a20
 8001b48:	08008a28 	.word	0x08008a28

08001b4c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d01c      	beq.n	8001b96 <LL_TIM_OC_EnablePreload+0x4a>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d017      	beq.n	8001b92 <LL_TIM_OC_EnablePreload+0x46>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d012      	beq.n	8001b8e <LL_TIM_OC_EnablePreload+0x42>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b40      	cmp	r3, #64	; 0x40
 8001b6c:	d00d      	beq.n	8001b8a <LL_TIM_OC_EnablePreload+0x3e>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b74:	d007      	beq.n	8001b86 <LL_TIM_OC_EnablePreload+0x3a>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7c:	d101      	bne.n	8001b82 <LL_TIM_OC_EnablePreload+0x36>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e00a      	b.n	8001b98 <LL_TIM_OC_EnablePreload+0x4c>
 8001b82:	2306      	movs	r3, #6
 8001b84:	e008      	b.n	8001b98 <LL_TIM_OC_EnablePreload+0x4c>
 8001b86:	2304      	movs	r3, #4
 8001b88:	e006      	b.n	8001b98 <LL_TIM_OC_EnablePreload+0x4c>
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e004      	b.n	8001b98 <LL_TIM_OC_EnablePreload+0x4c>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <LL_TIM_OC_EnablePreload+0x4c>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_TIM_OC_EnablePreload+0x4c>
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3318      	adds	r3, #24
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <LL_TIM_OC_EnablePreload+0x80>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	440b      	add	r3, r1
 8001ba8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <LL_TIM_OC_EnablePreload+0x84>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	408b      	lsls	r3, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	08008a20 	.word	0x08008a20
 8001bd0:	08008a28 	.word	0x08008a28

08001bd4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be6:	f023 0307 	bic.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_AHB1_GRP1_EnableClock>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40023800 	.word	0x40023800

08001c74 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	; 0x50
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001caa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 f9ee 	bl	80040a4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7ff ffcb 	bl	8001c74 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001cde:	f7ff fe55 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fea5 	bl	8001a38 <NVIC_EncodePriority>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	201d      	movs	r0, #29
 8001cf4:	f7ff fe76 	bl	80019e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001cf8:	201d      	movs	r0, #29
 8001cfa:	f7ff fe55 	bl	80019a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8001cfe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d02:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d04:	2300      	movs	r3, #0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 30-LL_TIM_IC_FILTER_FDIV1_N2;
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <MX_TIM3_Init+0xfc>)
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d14:	4619      	mov	r1, r3
 8001d16:	4823      	ldr	r0, [pc, #140]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d18:	f001 fc22 	bl	8003560 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001d1c:	4821      	ldr	r0, [pc, #132]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d1e:	f7ff febe 	bl	8001a9e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d22:	2100      	movs	r1, #0
 8001d24:	481f      	ldr	r0, [pc, #124]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d26:	f7ff ff55 	bl	8001bd4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2e:	481d      	ldr	r0, [pc, #116]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d30:	f7ff ff0c 	bl	8001b4c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001d34:	2360      	movs	r3, #96	; 0x60
 8001d36:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 14;
 8001d40:	230e      	movs	r3, #14
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d52:	4814      	ldr	r0, [pc, #80]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d54:	f001 fc9e 	bl	8003694 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d5e:	f7ff feaf 	bl	8001ac0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001d62:	2100      	movs	r1, #0
 8001d64:	480f      	ldr	r0, [pc, #60]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d66:	f7ff ff4a 	bl	8001bfe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001d6a:	480e      	ldr	r0, [pc, #56]	; (8001da4 <MX_TIM3_Init+0x100>)
 8001d6c:	f7ff ff5a 	bl	8001c24 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d70:	2002      	movs	r0, #2
 8001d72:	f7ff ff67 	bl	8001c44 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001d76:	2302      	movs	r3, #2
 8001d78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_TIM3_Init+0x104>)
 8001d94:	f001 f9c4 	bl	8003120 <LL_GPIO_Init>

}
 8001d98:	bf00      	nop
 8001d9a:	3750      	adds	r7, #80	; 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	fff0001e 	.word	0xfff0001e
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40020400 	.word	0x40020400

08001dac <__NVIC_GetPriorityGrouping>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_USART_Enable>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60da      	str	r2, [r3, #12]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_USART_ConfigAsyncMode>:
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	615a      	str	r2, [r3, #20]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <LL_AHB1_GRP1_EnableClock>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40023800 	.word	0x40023800

08001f3c <LL_APB1_GRP1_EnableClock>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40023800 	.word	0x40023800

08001f6c <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001f96:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001f9a:	f7ff ffcf 	bl	8001f3c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001f9e:	2008      	movs	r0, #8
 8001fa0:	f7ff ffb4 	bl	8001f0c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001fa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001faa:	2302      	movs	r3, #2
 8001fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <MX_USART3_UART_Init+0xbc>)
 8001fc4:	f001 f8ac 	bl	8003120 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fc8:	f7ff fef0 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff40 	bl	8001e58 <NVIC_EncodePriority>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	2027      	movs	r0, #39	; 0x27
 8001fde:	f7ff ff11 	bl	8001e04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001fe2:	2027      	movs	r0, #39	; 0x27
 8001fe4:	f7ff fef0 	bl	8001dc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8001fe8:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8001fec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	4807      	ldr	r0, [pc, #28]	; (800202c <MX_USART3_UART_Init+0xc0>)
 800200e:	f001 ff8d 	bl	8003f2c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <MX_USART3_UART_Init+0xc0>)
 8002014:	f7ff ff63 	bl	8001ede <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_USART3_UART_Init+0xc0>)
 800201a:	f7ff ff50 	bl	8001ebe <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	3738      	adds	r7, #56	; 0x38
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40020c00 	.word	0x40020c00
 800202c:	40004800 	.word	0x40004800

08002030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002068 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002036:	490e      	ldr	r1, [pc, #56]	; (8002070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800204c:	4c0b      	ldr	r4, [pc, #44]	; (800207c <LoopFillZerobss+0x26>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800205a:	f7ff fc85 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205e:	f001 fffd 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002062:	f7ff fa13 	bl	800148c <main>
  bx  lr    
 8002066:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002068:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002074:	08008eec 	.word	0x08008eec
  ldr r2, =_sbss
 8002078:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800207c:	20000218 	.word	0x20000218

08002080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC_IRQHandler>
	...

08002084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <HAL_Init+0x40>)
 800208e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_Init+0x40>)
 800209a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_Init+0x40>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 f931 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f000 f808 	bl	80020c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b8:	f7ff fb06 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x54>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f93b 	bl	8002362 <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00e      	b.n	8002114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d80a      	bhi.n	8002112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fc:	2200      	movs	r2, #0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f000 f911 	bl	800232a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <HAL_InitTick+0x5c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000000 	.word	0x20000000
 8002120:	20000008 	.word	0x20000008
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x20>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x24>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_IncTick+0x24>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000008 	.word	0x20000008
 800214c:	20000204 	.word	0x20000204

08002150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_GetTick+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000204 	.word	0x20000204

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff ffee 	bl	8002150 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d005      	beq.n	800218e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_Delay+0x44>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800218e:	bf00      	nop
 8002190:	f7ff ffde 	bl	8002150 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d8f7      	bhi.n	8002190 <HAL_Delay+0x28>
  {
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000008 	.word	0x20000008

080021b0 <__NVIC_SetPriorityGrouping>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_SetPriority>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff8e 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff47 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff5c 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff8e 	bl	8002268 <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5d 	bl	8002214 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffb0 	bl	80022d0 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_PWREx_EnableOverDrive+0x90>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_PWREx_EnableOverDrive+0x90>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_PWREx_EnableOverDrive+0x90>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_PWREx_EnableOverDrive+0x94>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a8:	f7ff fed2 	bl	8002150 <HAL_GetTick>
 80023ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023ae:	e009      	b.n	80023c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023b0:	f7ff fece 	bl	8002150 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023be:	d901      	bls.n	80023c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e01f      	b.n	8002404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_PWREx_EnableOverDrive+0x98>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d1ee      	bne.n	80023b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff feba 	bl	8002150 <HAL_GetTick>
 80023dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023de:	e009      	b.n	80023f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023e0:	f7ff feb6 	bl	8002150 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ee:	d901      	bls.n	80023f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e007      	b.n	8002404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002400:	d1ee      	bne.n	80023e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	420e0040 	.word	0x420e0040
 8002414:	40007000 	.word	0x40007000
 8002418:	420e0044 	.word	0x420e0044

0800241c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e267      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b82      	ldr	r3, [pc, #520]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e242      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x74>
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b70      	ldr	r3, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6f      	ldr	r2, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6c      	ldr	r2, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a65      	ldr	r2, [pc, #404]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff fe3c 	bl	8002150 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff fe38 	bl	8002150 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e207      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xc0>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff fe28 	bl	8002150 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff fe24 	bl	8002150 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1f3      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b51      	ldr	r3, [pc, #324]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0xe8>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b44      	ldr	r3, [pc, #272]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1c7      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_OscConfig+0x244>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff fddd 	bl	8002150 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff fdd9 	bl	8002150 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1a8      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4925      	ldr	r1, [pc, #148]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCC_OscConfig+0x244>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff fdbc 	bl	8002150 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025dc:	f7ff fdb8 	bl	8002150 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e187      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d036      	beq.n	8002674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_RCC_OscConfig+0x248>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7ff fd9c 	bl	8002150 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff fd98 	bl	8002150 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e167      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x200>
 800263a:	e01b      	b.n	8002674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x248>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7ff fd85 	bl	8002150 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	e00e      	b.n	8002668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264a:	f7ff fd81 	bl	8002150 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d907      	bls.n	8002668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e150      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
 800265c:	40023800 	.word	0x40023800
 8002660:	42470000 	.word	0x42470000
 8002664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ea      	bne.n	800264a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8097 	beq.w	80027b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b7d      	ldr	r3, [pc, #500]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a7c      	ldr	r2, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b77      	ldr	r3, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b74      	ldr	r3, [pc, #464]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a73      	ldr	r2, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fd41 	bl	8002150 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7ff fd3d 	bl	8002150 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e10c      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x2ea>
 80026f8:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x30c>
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a5e      	ldr	r2, [pc, #376]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a5b      	ldr	r2, [pc, #364]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002728:	4b58      	ldr	r3, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	; 0x70
 8002734:	4b55      	ldr	r3, [pc, #340]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a54      	ldr	r2, [pc, #336]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff fd02 	bl	8002150 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff fcfe 	bl	8002150 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0cb      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ee      	beq.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7ff fcec 	bl	8002150 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7ff fce8 	bl	8002150 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0b5      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	4b3e      	ldr	r3, [pc, #248]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ee      	bne.n	800277c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a38      	ldr	r2, [pc, #224]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80a1 	beq.w	80028fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d05c      	beq.n	8002880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d141      	bne.n	8002852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff fcbc 	bl	8002150 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff fcb8 	bl	8002150 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e087      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	491b      	ldr	r1, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7ff fc91 	bl	8002150 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002832:	f7ff fc8d 	bl	8002150 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e05c      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x416>
 8002850:	e054      	b.n	80028fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff fc7a 	bl	8002150 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff fc76 	bl	8002150 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e045      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
 800287e:	e03d      	b.n	80028fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e038      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000
 8002894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x4ec>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d028      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d121      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d11a      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d111      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cc      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4934      	ldr	r1, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7ff fba8 	bl	8002150 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7ff fba4 	bl	8002150 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20c      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb08 	bl	80020c8 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08008a08 	.word	0x08008a08
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002adc:	b094      	sub	sp, #80	; 0x50
 8002ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae8:	2300      	movs	r3, #0
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af0:	4b79      	ldr	r3, [pc, #484]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d00d      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x40>
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	f200 80e1 	bhi.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x34>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0a:	e0db      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b10:	e0db      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b12:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b16:	e0d8      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b22:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d063      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	2200      	movs	r2, #0
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
 8002b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	462b      	mov	r3, r5
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	0159      	lsls	r1, r3, #5
 8002b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5c:	0150      	lsls	r0, r2, #5
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4621      	mov	r1, r4
 8002b64:	1a51      	subs	r1, r2, r1
 8002b66:	6139      	str	r1, [r7, #16]
 8002b68:	4629      	mov	r1, r5
 8002b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	018b      	lsls	r3, r1, #6
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b86:	4651      	mov	r1, sl
 8002b88:	018a      	lsls	r2, r1, #6
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b90:	4659      	mov	r1, fp
 8002b92:	eb63 0901 	sbc.w	r9, r3, r1
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002baa:	4690      	mov	r8, r2
 8002bac:	4699      	mov	r9, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	eb18 0303 	adds.w	r3, r8, r3
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	eb49 0303 	adc.w	r3, r9, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	024b      	lsls	r3, r1, #9
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	024a      	lsls	r2, r1, #9
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bde:	2200      	movs	r2, #0
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be8:	f7fe f85e 	bl	8000ca8 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf4:	e058      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	4611      	mov	r1, r2
 8002c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c10:	4642      	mov	r2, r8
 8002c12:	464b      	mov	r3, r9
 8002c14:	f04f 0000 	mov.w	r0, #0
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	0159      	lsls	r1, r3, #5
 8002c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c22:	0150      	lsls	r0, r2, #5
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4641      	mov	r1, r8
 8002c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c2e:	4649      	mov	r1, r9
 8002c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c48:	ebb2 040a 	subs.w	r4, r2, sl
 8002c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	00eb      	lsls	r3, r5, #3
 8002c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5e:	00e2      	lsls	r2, r4, #3
 8002c60:	4614      	mov	r4, r2
 8002c62:	461d      	mov	r5, r3
 8002c64:	4643      	mov	r3, r8
 8002c66:	18e3      	adds	r3, r4, r3
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	eb45 0303 	adc.w	r3, r5, r3
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	028b      	lsls	r3, r1, #10
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c88:	4621      	mov	r1, r4
 8002c8a:	028a      	lsls	r2, r1, #10
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c92:	2200      	movs	r2, #0
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	61fa      	str	r2, [r7, #28]
 8002c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9c:	f7fe f804 	bl	8000ca8 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3750      	adds	r7, #80	; 0x50
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <LL_EXTI_EnableIT_0_31+0x20>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4904      	ldr	r1, [pc, #16]	; (8002d04 <LL_EXTI_EnableIT_0_31+0x20>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <LL_EXTI_DisableIT_0_31+0x24>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	4904      	ldr	r1, [pc, #16]	; (8002d2c <LL_EXTI_DisableIT_0_31+0x24>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]

}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	4904      	ldr	r1, [pc, #16]	; (8002d78 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4904      	ldr	r1, [pc, #16]	; (8002d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]

}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40013c00 	.word	0x40013c00

08002da0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]

}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	4904      	ldr	r1, [pc, #16]	; (8002de8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40013c00 	.word	0x40013c00

08002dec <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4904      	ldr	r1, [pc, #16]	; (8002e10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	791b      	ldrb	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d065      	beq.n	8002ef4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d06c      	beq.n	8002f0a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	795b      	ldrb	r3, [r3, #5]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d01c      	beq.n	8002e72 <LL_EXTI_Init+0x5e>
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	dc25      	bgt.n	8002e88 <LL_EXTI_Init+0x74>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <LL_EXTI_Init+0x32>
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d00b      	beq.n	8002e5c <LL_EXTI_Init+0x48>
 8002e44:	e020      	b.n	8002e88 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff82 	bl	8002d54 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff45 	bl	8002ce4 <LL_EXTI_EnableIT_0_31>
          break;
 8002e5a:	e018      	b.n	8002e8e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff51 	bl	8002d08 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff60 	bl	8002d30 <LL_EXTI_EnableEvent_0_31>
          break;
 8002e70:	e00d      	b.n	8002e8e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff34 	bl	8002ce4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff55 	bl	8002d30 <LL_EXTI_EnableEvent_0_31>
          break;
 8002e86:	e002      	b.n	8002e8e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e8c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	799b      	ldrb	r3, [r3, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d039      	beq.n	8002f0a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	799b      	ldrb	r3, [r3, #6]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d01c      	beq.n	8002ed8 <LL_EXTI_Init+0xc4>
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	dc25      	bgt.n	8002eee <LL_EXTI_Init+0xda>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <LL_EXTI_Init+0x98>
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d00b      	beq.n	8002ec2 <LL_EXTI_Init+0xae>
 8002eaa:	e020      	b.n	8002eee <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff9b 	bl	8002dec <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff5e 	bl	8002d7c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002ec0:	e024      	b.n	8002f0c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff6a 	bl	8002da0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff79 	bl	8002dc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002ed6:	e019      	b.n	8002f0c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff4d 	bl	8002d7c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ff6e 	bl	8002dc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002eec:	e00e      	b.n	8002f0c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
            break;
 8002ef2:	e00b      	b.n	8002f0c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff05 	bl	8002d08 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff26 	bl	8002d54 <LL_EXTI_DisableEvent_0_31>
 8002f08:	e000      	b.n	8002f0c <LL_EXTI_Init+0xf8>
      }
 8002f0a:	bf00      	nop
  }
  return status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <LL_GPIO_SetPinMode>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b089      	sub	sp, #36	; 0x24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	613b      	str	r3, [r7, #16]
  return result;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	401a      	ands	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	61bb      	str	r3, [r7, #24]
  return result;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	3724      	adds	r7, #36	; 0x24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_GPIO_SetPinOutputType>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	401a      	ands	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_GPIO_SetPinSpeed>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	613b      	str	r3, [r7, #16]
  return result;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2103      	movs	r1, #3
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	61bb      	str	r3, [r7, #24]
  return result;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	609a      	str	r2, [r3, #8]
}
 8002ff6:	bf00      	nop
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_GPIO_SetPinPull>:
{
 8003002:	b480      	push	{r7}
 8003004:	b089      	sub	sp, #36	; 0x24
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	613b      	str	r3, [r7, #16]
  return result;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2103      	movs	r1, #3
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	401a      	ands	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	61bb      	str	r3, [r7, #24]
  return result;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	60da      	str	r2, [r3, #12]
}
 8003054:	bf00      	nop
 8003056:	3724      	adds	r7, #36	; 0x24
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_GPIO_SetAFPin_0_7>:
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	613b      	str	r3, [r7, #16]
  return result;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	210f      	movs	r1, #15
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	61bb      	str	r3, [r7, #24]
  return result;
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_GPIO_SetAFPin_8_15>:
{
 80030be:	b480      	push	{r7}
 80030c0:	b089      	sub	sp, #36	; 0x24
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	613b      	str	r3, [r7, #16]
  return result;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	210f      	movs	r1, #15
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	401a      	ands	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	61bb      	str	r3, [r7, #24]
  return result;
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	431a      	orrs	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003114:	bf00      	nop
 8003116:	3724      	adds	r7, #36	; 0x24
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	613b      	str	r3, [r7, #16]
  return result;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800314a:	e050      	b.n	80031ee <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d042      	beq.n	80031e8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d003      	beq.n	8003172 <LL_GPIO_Init+0x52>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d10d      	bne.n	800318e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	461a      	mov	r2, r3
 8003178:	69b9      	ldr	r1, [r7, #24]
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff12 	bl	8002fa4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	461a      	mov	r2, r3
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff fef3 	bl	8002f74 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	461a      	mov	r2, r3
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ff33 	bl	8003002 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d11a      	bne.n	80031da <LL_GPIO_Init+0xba>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	60bb      	str	r3, [r7, #8]
  return result;
 80031b0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d807      	bhi.n	80031cc <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	461a      	mov	r2, r3
 80031c2:	69b9      	ldr	r1, [r7, #24]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff4b 	bl	8003060 <LL_GPIO_SetAFPin_0_7>
 80031ca:	e006      	b.n	80031da <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	461a      	mov	r2, r3
 80031d2:	69b9      	ldr	r1, [r7, #24]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff72 	bl	80030be <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fe97 	bl	8002f16 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1a7      	bne.n	800314c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <LL_RCC_GetSysClkSource+0x18>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800

08003224 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <LL_RCC_GetAHBPrescaler+0x18>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800

08003278 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <LL_RCC_PLL_GetMainSource+0x18>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <LL_RCC_PLL_GetN+0x18>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	099b      	lsrs	r3, r3, #6
 800329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40023800 	.word	0x40023800

080032b0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <LL_RCC_PLL_GetP+0x18>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <LL_RCC_PLL_GetDivider+0x18>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80032f0:	f000 f820 	bl	8003334 <RCC_GetSystemClockFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f840 	bl	8003384 <RCC_GetHCLKClockFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f84e 	bl	80033b0 <RCC_GetPCLK1ClockFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f85a 	bl	80033d8 <RCC_GetPCLK2ClockFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60da      	str	r2, [r3, #12]
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800333e:	f7ff ff63 	bl	8003208 <LL_RCC_GetSysClkSource>
 8003342:	4603      	mov	r3, r0
 8003344:	2b08      	cmp	r3, #8
 8003346:	d00c      	beq.n	8003362 <RCC_GetSystemClockFreq+0x2e>
 8003348:	2b08      	cmp	r3, #8
 800334a:	d80f      	bhi.n	800336c <RCC_GetSystemClockFreq+0x38>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <RCC_GetSystemClockFreq+0x22>
 8003350:	2b04      	cmp	r3, #4
 8003352:	d003      	beq.n	800335c <RCC_GetSystemClockFreq+0x28>
 8003354:	e00a      	b.n	800336c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <RCC_GetSystemClockFreq+0x48>)
 8003358:	607b      	str	r3, [r7, #4]
      break;
 800335a:	e00a      	b.n	8003372 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <RCC_GetSystemClockFreq+0x4c>)
 800335e:	607b      	str	r3, [r7, #4]
      break;
 8003360:	e007      	b.n	8003372 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003362:	2008      	movs	r0, #8
 8003364:	f000 f84c 	bl	8003400 <RCC_PLL_GetFreqDomain_SYS>
 8003368:	6078      	str	r0, [r7, #4]
      break;
 800336a:	e002      	b.n	8003372 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <RCC_GetSystemClockFreq+0x48>)
 800336e:	607b      	str	r3, [r7, #4]
      break;
 8003370:	bf00      	nop
  }

  return frequency;
 8003372:	687b      	ldr	r3, [r7, #4]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00f42400 	.word	0x00f42400
 8003380:	007a1200 	.word	0x007a1200

08003384 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800338c:	f7ff ff4a 	bl	8003224 <LL_RCC_GetAHBPrescaler>
 8003390:	4603      	mov	r3, r0
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <RCC_GetHCLKClockFreq+0x28>)
 800339a:	5cd3      	ldrb	r3, [r2, r3]
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	40d3      	lsrs	r3, r2
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	08008a08 	.word	0x08008a08

080033b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80033b8:	f7ff ff42 	bl	8003240 <LL_RCC_GetAPB1Prescaler>
 80033bc:	4603      	mov	r3, r0
 80033be:	0a9b      	lsrs	r3, r3, #10
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	40d3      	lsrs	r3, r2
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08008a18 	.word	0x08008a18

080033d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80033e0:	f7ff ff3c 	bl	800325c <LL_RCC_GetAPB2Prescaler>
 80033e4:	4603      	mov	r3, r0
 80033e6:	0b5b      	lsrs	r3, r3, #13
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <RCC_GetPCLK2ClockFreq+0x24>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	461a      	mov	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	40d3      	lsrs	r3, r2
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	08008a18 	.word	0x08008a18

08003400 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003414:	f7ff ff30 	bl	8003278 <LL_RCC_PLL_GetMainSource>
 8003418:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d003      	beq.n	8003430 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003428:	e005      	b.n	8003436 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800342c:	617b      	str	r3, [r7, #20]
      break;
 800342e:	e005      	b.n	800343c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003432:	617b      	str	r3, [r7, #20]
      break;
 8003434:	e002      	b.n	800343c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003438:	617b      	str	r3, [r7, #20]
      break;
 800343a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b08      	cmp	r3, #8
 8003440:	d113      	bne.n	800346a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003442:	f7ff ff43 	bl	80032cc <LL_RCC_PLL_GetDivider>
 8003446:	4602      	mov	r2, r0
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fbb3 f4f2 	udiv	r4, r3, r2
 800344e:	f7ff ff21 	bl	8003294 <LL_RCC_PLL_GetN>
 8003452:	4603      	mov	r3, r0
 8003454:	fb03 f404 	mul.w	r4, r3, r4
 8003458:	f7ff ff2a 	bl	80032b0 <LL_RCC_PLL_GetP>
 800345c:	4603      	mov	r3, r0
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	3301      	adds	r3, #1
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fbb4 f3f3 	udiv	r3, r4, r3
 8003468:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800346a:	693b      	ldr	r3, [r7, #16]
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <LL_TIM_SetPrescaler>:
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_TIM_SetAutoReload>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_TIM_SetRepetitionCounter>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_TIM_OC_SetCompareCH1>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_TIM_OC_SetCompareCH2>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_TIM_OC_SetCompareCH3>:
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_TIM_OC_SetCompareCH4>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	615a      	str	r2, [r3, #20]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3d      	ldr	r2, [pc, #244]	; (8003668 <LL_TIM_Init+0x108>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <LL_TIM_Init+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357e:	d00f      	beq.n	80035a0 <LL_TIM_Init+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3a      	ldr	r2, [pc, #232]	; (800366c <LL_TIM_Init+0x10c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <LL_TIM_Init+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a39      	ldr	r2, [pc, #228]	; (8003670 <LL_TIM_Init+0x110>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <LL_TIM_Init+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a38      	ldr	r2, [pc, #224]	; (8003674 <LL_TIM_Init+0x114>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <LL_TIM_Init+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a37      	ldr	r2, [pc, #220]	; (8003678 <LL_TIM_Init+0x118>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d106      	bne.n	80035ae <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <LL_TIM_Init+0x108>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02b      	beq.n	800360e <LL_TIM_Init+0xae>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d027      	beq.n	800360e <LL_TIM_Init+0xae>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2a      	ldr	r2, [pc, #168]	; (800366c <LL_TIM_Init+0x10c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d023      	beq.n	800360e <LL_TIM_Init+0xae>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a29      	ldr	r2, [pc, #164]	; (8003670 <LL_TIM_Init+0x110>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01f      	beq.n	800360e <LL_TIM_Init+0xae>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a28      	ldr	r2, [pc, #160]	; (8003674 <LL_TIM_Init+0x114>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01b      	beq.n	800360e <LL_TIM_Init+0xae>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a27      	ldr	r2, [pc, #156]	; (8003678 <LL_TIM_Init+0x118>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d017      	beq.n	800360e <LL_TIM_Init+0xae>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a26      	ldr	r2, [pc, #152]	; (800367c <LL_TIM_Init+0x11c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <LL_TIM_Init+0xae>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a25      	ldr	r2, [pc, #148]	; (8003680 <LL_TIM_Init+0x120>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00f      	beq.n	800360e <LL_TIM_Init+0xae>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a24      	ldr	r2, [pc, #144]	; (8003684 <LL_TIM_Init+0x124>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <LL_TIM_Init+0xae>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a23      	ldr	r2, [pc, #140]	; (8003688 <LL_TIM_Init+0x128>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <LL_TIM_Init+0xae>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a22      	ldr	r2, [pc, #136]	; (800368c <LL_TIM_Init+0x12c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <LL_TIM_Init+0xae>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a21      	ldr	r2, [pc, #132]	; (8003690 <LL_TIM_Init+0x130>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d106      	bne.n	800361c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4619      	mov	r1, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff35 	bl	8003498 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff21 	bl	800347c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <LL_TIM_Init+0x108>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <LL_TIM_Init+0xea>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <LL_TIM_Init+0x118>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d105      	bne.n	8003656 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	4619      	mov	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff2f 	bl	80034b4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ff72 	bl	8003540 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40010400 	.word	0x40010400
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400
 8003684:	40014800 	.word	0x40014800
 8003688:	40001800 	.word	0x40001800
 800368c:	40001c00 	.word	0x40001c00
 8003690:	40002000 	.word	0x40002000

08003694 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	d027      	beq.n	80036fc <LL_TIM_OC_Init+0x68>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b2:	d82a      	bhi.n	800370a <LL_TIM_OC_Init+0x76>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ba:	d018      	beq.n	80036ee <LL_TIM_OC_Init+0x5a>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c2:	d822      	bhi.n	800370a <LL_TIM_OC_Init+0x76>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d003      	beq.n	80036d2 <LL_TIM_OC_Init+0x3e>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d007      	beq.n	80036e0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80036d0:	e01b      	b.n	800370a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f81f 	bl	8003718 <OC1Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	e015      	b.n	800370c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f884 	bl	80037f0 <OC2Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	e00e      	b.n	800370c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f8ed 	bl	80038d0 <OC3Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]
      break;
 80036fa:	e007      	b.n	800370c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f956 	bl	80039b0 <OC4Config>
 8003704:	4603      	mov	r3, r0
 8003706:	75fb      	strb	r3, [r7, #23]
      break;
 8003708:	e000      	b.n	800370c <LL_TIM_OC_Init+0x78>
      break;
 800370a:	bf00      	nop
  }

  return result;
 800370c:	7dfb      	ldrb	r3, [r7, #23]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 0202 	bic.w	r2, r3, #2
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <OC1Config+0xd0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <OC1Config+0x6a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <OC1Config+0xd4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d11e      	bne.n	80037c0 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 0208 	bic.w	r2, r3, #8
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 0204 	bic.w	r2, r3, #4
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fe7c 	bl	80034d0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40010400 	.word	0x40010400

080037f0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f023 0210 	bic.w	r2, r3, #16
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0220 	bic.w	r2, r3, #32
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0210 	bic.w	r2, r3, #16
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <OC2Config+0xd8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <OC2Config+0x70>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <OC2Config+0xdc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d11f      	bne.n	80038a0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	019b      	lsls	r3, r3, #6
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fe1a 	bl	80034ec <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40010400 	.word	0x40010400

080038d0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <OC3Config+0xd8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <OC3Config+0x6e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <OC3Config+0xdc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d11f      	bne.n	800397e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	029b      	lsls	r3, r3, #10
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4619      	mov	r1, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fdb9 	bl	8003508 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40010400 	.word	0x40010400

080039b0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	031b      	lsls	r3, r3, #12
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	031b      	lsls	r3, r3, #12
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <OC4Config+0xa8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <OC4Config+0x70>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a10      	ldr	r2, [pc, #64]	; (8003a5c <OC4Config+0xac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d107      	bne.n	8003a30 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	019b      	lsls	r3, r3, #6
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fd6e 	bl	8003524 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40010400 	.word	0x40010400

08003a60 <LL_USART_IsEnabled>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_USART_SetStopBitsLength>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_USART_SetHWFlowCtrl>:
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	615a      	str	r2, [r3, #20]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_USART_SetBaudRate>:
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b0c0      	sub	sp, #256	; 0x100
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ae0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003ae4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af4:	f040 810c 	bne.w	8003d10 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003af8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	6639      	str	r1, [r7, #96]	; 0x60
 8003b12:	415b      	adcs	r3, r3
 8003b14:	667b      	str	r3, [r7, #100]	; 0x64
 8003b16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	eb12 0801 	adds.w	r8, r2, r1
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb43 0901 	adc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	eb49 0303 	adc.w	r3, r9, r3
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b56:	2200      	movs	r2, #0
 8003b58:	469a      	mov	sl, r3
 8003b5a:	4693      	mov	fp, r2
 8003b5c:	eb1a 030a 	adds.w	r3, sl, sl
 8003b60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b62:	eb4b 030b 	adc.w	r3, fp, fp
 8003b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b70:	f7fd f89a 	bl	8000ca8 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4b64      	ldr	r3, [pc, #400]	; (8003d0c <LL_USART_SetBaudRate+0x238>)
 8003b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	b29c      	uxth	r4, r3
 8003b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b90:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b94:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003b98:	4642      	mov	r2, r8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	1891      	adds	r1, r2, r2
 8003b9e:	6539      	str	r1, [r7, #80]	; 0x50
 8003ba0:	415b      	adcs	r3, r3
 8003ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ba8:	4641      	mov	r1, r8
 8003baa:	1851      	adds	r1, r2, r1
 8003bac:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bae:	4649      	mov	r1, r9
 8003bb0:	414b      	adcs	r3, r1
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	00cb      	lsls	r3, r1, #3
 8003bc4:	4651      	mov	r1, sl
 8003bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bca:	4651      	mov	r1, sl
 8003bcc:	00ca      	lsls	r2, r1, #3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bdc:	464b      	mov	r3, r9
 8003bde:	460a      	mov	r2, r1
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003be8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003bf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	18db      	adds	r3, r3, r3
 8003bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8003c00:	4613      	mov	r3, r2
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	647b      	str	r3, [r7, #68]	; 0x44
 8003c08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c0c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003c10:	f7fd f84a 	bl	8000ca8 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <LL_USART_SetBaudRate+0x238>)
 8003c1c:	fba3 2301 	umull	r2, r3, r3, r1
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	2264      	movs	r2, #100	; 0x64
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	1acb      	subs	r3, r1, r3
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <LL_USART_SetBaudRate+0x238>)
 8003c32:	fba3 2302 	umull	r2, r3, r3, r2
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4423      	add	r3, r4
 8003c46:	b29c      	uxth	r4, r3
 8003c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c52:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c56:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003c5a:	4642      	mov	r2, r8
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	1891      	adds	r1, r2, r2
 8003c60:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c62:	415b      	adcs	r3, r3
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	1851      	adds	r1, r2, r1
 8003c6e:	6339      	str	r1, [r7, #48]	; 0x30
 8003c70:	4649      	mov	r1, r9
 8003c72:	414b      	adcs	r3, r1
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c82:	4659      	mov	r1, fp
 8003c84:	00cb      	lsls	r3, r1, #3
 8003c86:	4651      	mov	r1, sl
 8003c88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	00ca      	lsls	r2, r1, #3
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	4603      	mov	r3, r0
 8003c96:	4642      	mov	r2, r8
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	eb42 0303 	adc.w	r3, r2, r3
 8003ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003cb8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	18db      	adds	r3, r3, r3
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003cd2:	f7fc ffe9 	bl	8000ca8 <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <LL_USART_SetBaudRate+0x238>)
 8003cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	2164      	movs	r1, #100	; 0x64
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	3332      	adds	r3, #50	; 0x32
 8003cee:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <LL_USART_SetBaudRate+0x238>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4423      	add	r3, r4
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d08:	609a      	str	r2, [r3, #8]
}
 8003d0a:	e107      	b.n	8003f1c <LL_USART_SetBaudRate+0x448>
 8003d0c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003d10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d1a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d1e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6239      	str	r1, [r7, #32]
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	4641      	mov	r1, r8
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0501 	adc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d58:	464b      	mov	r3, r9
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	4621      	mov	r1, r4
 8003d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d86:	4621      	mov	r1, r4
 8003d88:	008a      	lsls	r2, r1, #2
 8003d8a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003d8e:	f7fc ff8b 	bl	8000ca8 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b64      	ldr	r3, [pc, #400]	; (8003f28 <LL_USART_SetBaudRate+0x454>)
 8003d98:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	b29c      	uxth	r4, r3
 8003da4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003db2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003db6:	4642      	mov	r2, r8
 8003db8:	464b      	mov	r3, r9
 8003dba:	1891      	adds	r1, r2, r2
 8003dbc:	61b9      	str	r1, [r7, #24]
 8003dbe:	415b      	adcs	r3, r3
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	1851      	adds	r1, r2, r1
 8003dca:	6139      	str	r1, [r7, #16]
 8003dcc:	4649      	mov	r1, r9
 8003dce:	414b      	adcs	r3, r1
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dde:	4659      	mov	r1, fp
 8003de0:	00cb      	lsls	r3, r1, #3
 8003de2:	4651      	mov	r1, sl
 8003de4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de8:	4651      	mov	r1, sl
 8003dea:	00ca      	lsls	r2, r1, #3
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	4642      	mov	r2, r8
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	eb42 0303 	adc.w	r3, r2, r3
 8003e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003e20:	4649      	mov	r1, r9
 8003e22:	008b      	lsls	r3, r1, #2
 8003e24:	4641      	mov	r1, r8
 8003e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	008a      	lsls	r2, r1, #2
 8003e2e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003e32:	f7fc ff39 	bl	8000ca8 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <LL_USART_SetBaudRate+0x454>)
 8003e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	3332      	adds	r3, #50	; 0x32
 8003e4e:	4a36      	ldr	r2, [pc, #216]	; (8003f28 <LL_USART_SetBaudRate+0x454>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4423      	add	r3, r4
 8003e60:	b29c      	uxth	r4, r3
 8003e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e66:	2200      	movs	r2, #0
 8003e68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e80:	4641      	mov	r1, r8
 8003e82:	1851      	adds	r1, r2, r1
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	4649      	mov	r1, r9
 8003e88:	414b      	adcs	r3, r1
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e98:	4659      	mov	r1, fp
 8003e9a:	00cb      	lsls	r3, r1, #3
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	00ca      	lsls	r2, r1, #3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4642      	mov	r2, r8
 8003eae:	189b      	adds	r3, r3, r2
 8003eb0:	673b      	str	r3, [r7, #112]	; 0x70
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	eb42 0303 	adc.w	r3, r2, r3
 8003eba:	677b      	str	r3, [r7, #116]	; 0x74
 8003ebc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	008b      	lsls	r3, r1, #2
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003edc:	4641      	mov	r1, r8
 8003ede:	008a      	lsls	r2, r1, #2
 8003ee0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003ee4:	f7fc fee0 	bl	8000ca8 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <LL_USART_SetBaudRate+0x454>)
 8003eee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2164      	movs	r1, #100	; 0x64
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <LL_USART_SetBaudRate+0x454>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4423      	add	r3, r4
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f28:	51eb851f 	.word	0x51eb851f

08003f2c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fd8e 	bl	8003a60 <LL_USART_IsEnabled>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d16c      	bne.n	8004024 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f52:	f023 030c 	bic.w	r3, r3, #12
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	6851      	ldr	r1, [r2, #4]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	6912      	ldr	r2, [r2, #16]
 8003f64:	4311      	orrs	r1, r2
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	6992      	ldr	r2, [r2, #24]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fd85 	bl	8003a88 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4619      	mov	r1, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fd92 	bl	8003aae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f9aa 	bl	80032e8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a26      	ldr	r2, [pc, #152]	; (8004030 <LL_USART_Init+0x104>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	e02f      	b.n	8004002 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <LL_USART_Init+0x108>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d102      	bne.n	8003fb0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e028      	b.n	8004002 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a21      	ldr	r2, [pc, #132]	; (8004038 <LL_USART_Init+0x10c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d102      	bne.n	8003fbe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	e021      	b.n	8004002 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	; (800403c <LL_USART_Init+0x110>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d102      	bne.n	8003fcc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e01a      	b.n	8004002 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <LL_USART_Init+0x114>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d102      	bne.n	8003fda <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e013      	b.n	8004002 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <LL_USART_Init+0x118>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d102      	bne.n	8003fe8 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e00c      	b.n	8004002 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <LL_USART_Init+0x11c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d102      	bne.n	8003ff6 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e005      	b.n	8004002 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <LL_USART_Init+0x120>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8004010:	2300      	movs	r3, #0
 8004012:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fd58 	bl	8003ad4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004024:	7ffb      	ldrb	r3, [r7, #31]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40011000 	.word	0x40011000
 8004034:	40004400 	.word	0x40004400
 8004038:	40004800 	.word	0x40004800
 800403c:	40011400 	.word	0x40011400
 8004040:	40004c00 	.word	0x40004c00
 8004044:	40005000 	.word	0x40005000
 8004048:	40007800 	.word	0x40007800
 800404c:	40007c00 	.word	0x40007c00

08004050 <__errno>:
 8004050:	4b01      	ldr	r3, [pc, #4]	; (8004058 <__errno+0x8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	2000000c 	.word	0x2000000c

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4d0d      	ldr	r5, [pc, #52]	; (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2600      	movs	r6, #0
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4d0b      	ldr	r5, [pc, #44]	; (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	; (80040a0 <__libc_init_array+0x44>)
 8004070:	f004 fcaa 	bl	80089c8 <_init>
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2600      	movs	r6, #0
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	08008ee4 	.word	0x08008ee4
 8004098:	08008ee4 	.word	0x08008ee4
 800409c:	08008ee4 	.word	0x08008ee4
 80040a0:	08008ee8 	.word	0x08008ee8

080040a4 <memset>:
 80040a4:	4402      	add	r2, r0
 80040a6:	4603      	mov	r3, r0
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d100      	bne.n	80040ae <memset+0xa>
 80040ac:	4770      	bx	lr
 80040ae:	f803 1b01 	strb.w	r1, [r3], #1
 80040b2:	e7f9      	b.n	80040a8 <memset+0x4>

080040b4 <__cvt>:
 80040b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	ec55 4b10 	vmov	r4, r5, d0
 80040bc:	2d00      	cmp	r5, #0
 80040be:	460e      	mov	r6, r1
 80040c0:	4619      	mov	r1, r3
 80040c2:	462b      	mov	r3, r5
 80040c4:	bfbb      	ittet	lt
 80040c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040ca:	461d      	movlt	r5, r3
 80040cc:	2300      	movge	r3, #0
 80040ce:	232d      	movlt	r3, #45	; 0x2d
 80040d0:	700b      	strb	r3, [r1, #0]
 80040d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040d8:	4691      	mov	r9, r2
 80040da:	f023 0820 	bic.w	r8, r3, #32
 80040de:	bfbc      	itt	lt
 80040e0:	4622      	movlt	r2, r4
 80040e2:	4614      	movlt	r4, r2
 80040e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040e8:	d005      	beq.n	80040f6 <__cvt+0x42>
 80040ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040ee:	d100      	bne.n	80040f2 <__cvt+0x3e>
 80040f0:	3601      	adds	r6, #1
 80040f2:	2102      	movs	r1, #2
 80040f4:	e000      	b.n	80040f8 <__cvt+0x44>
 80040f6:	2103      	movs	r1, #3
 80040f8:	ab03      	add	r3, sp, #12
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	ab02      	add	r3, sp, #8
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	ec45 4b10 	vmov	d0, r4, r5
 8004104:	4653      	mov	r3, sl
 8004106:	4632      	mov	r2, r6
 8004108:	f001 fdc6 	bl	8005c98 <_dtoa_r>
 800410c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004110:	4607      	mov	r7, r0
 8004112:	d102      	bne.n	800411a <__cvt+0x66>
 8004114:	f019 0f01 	tst.w	r9, #1
 8004118:	d022      	beq.n	8004160 <__cvt+0xac>
 800411a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800411e:	eb07 0906 	add.w	r9, r7, r6
 8004122:	d110      	bne.n	8004146 <__cvt+0x92>
 8004124:	783b      	ldrb	r3, [r7, #0]
 8004126:	2b30      	cmp	r3, #48	; 0x30
 8004128:	d10a      	bne.n	8004140 <__cvt+0x8c>
 800412a:	2200      	movs	r2, #0
 800412c:	2300      	movs	r3, #0
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f7fc fcd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004136:	b918      	cbnz	r0, 8004140 <__cvt+0x8c>
 8004138:	f1c6 0601 	rsb	r6, r6, #1
 800413c:	f8ca 6000 	str.w	r6, [sl]
 8004140:	f8da 3000 	ldr.w	r3, [sl]
 8004144:	4499      	add	r9, r3
 8004146:	2200      	movs	r2, #0
 8004148:	2300      	movs	r3, #0
 800414a:	4620      	mov	r0, r4
 800414c:	4629      	mov	r1, r5
 800414e:	f7fc fccb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004152:	b108      	cbz	r0, 8004158 <__cvt+0xa4>
 8004154:	f8cd 900c 	str.w	r9, [sp, #12]
 8004158:	2230      	movs	r2, #48	; 0x30
 800415a:	9b03      	ldr	r3, [sp, #12]
 800415c:	454b      	cmp	r3, r9
 800415e:	d307      	bcc.n	8004170 <__cvt+0xbc>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004164:	1bdb      	subs	r3, r3, r7
 8004166:	4638      	mov	r0, r7
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	b004      	add	sp, #16
 800416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004170:	1c59      	adds	r1, r3, #1
 8004172:	9103      	str	r1, [sp, #12]
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e7f0      	b.n	800415a <__cvt+0xa6>

08004178 <__exponent>:
 8004178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800417a:	4603      	mov	r3, r0
 800417c:	2900      	cmp	r1, #0
 800417e:	bfb8      	it	lt
 8004180:	4249      	neglt	r1, r1
 8004182:	f803 2b02 	strb.w	r2, [r3], #2
 8004186:	bfb4      	ite	lt
 8004188:	222d      	movlt	r2, #45	; 0x2d
 800418a:	222b      	movge	r2, #43	; 0x2b
 800418c:	2909      	cmp	r1, #9
 800418e:	7042      	strb	r2, [r0, #1]
 8004190:	dd2a      	ble.n	80041e8 <__exponent+0x70>
 8004192:	f10d 0407 	add.w	r4, sp, #7
 8004196:	46a4      	mov	ip, r4
 8004198:	270a      	movs	r7, #10
 800419a:	46a6      	mov	lr, r4
 800419c:	460a      	mov	r2, r1
 800419e:	fb91 f6f7 	sdiv	r6, r1, r7
 80041a2:	fb07 1516 	mls	r5, r7, r6, r1
 80041a6:	3530      	adds	r5, #48	; 0x30
 80041a8:	2a63      	cmp	r2, #99	; 0x63
 80041aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80041ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041b2:	4631      	mov	r1, r6
 80041b4:	dcf1      	bgt.n	800419a <__exponent+0x22>
 80041b6:	3130      	adds	r1, #48	; 0x30
 80041b8:	f1ae 0502 	sub.w	r5, lr, #2
 80041bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041c0:	1c44      	adds	r4, r0, #1
 80041c2:	4629      	mov	r1, r5
 80041c4:	4561      	cmp	r1, ip
 80041c6:	d30a      	bcc.n	80041de <__exponent+0x66>
 80041c8:	f10d 0209 	add.w	r2, sp, #9
 80041cc:	eba2 020e 	sub.w	r2, r2, lr
 80041d0:	4565      	cmp	r5, ip
 80041d2:	bf88      	it	hi
 80041d4:	2200      	movhi	r2, #0
 80041d6:	4413      	add	r3, r2
 80041d8:	1a18      	subs	r0, r3, r0
 80041da:	b003      	add	sp, #12
 80041dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041e6:	e7ed      	b.n	80041c4 <__exponent+0x4c>
 80041e8:	2330      	movs	r3, #48	; 0x30
 80041ea:	3130      	adds	r1, #48	; 0x30
 80041ec:	7083      	strb	r3, [r0, #2]
 80041ee:	70c1      	strb	r1, [r0, #3]
 80041f0:	1d03      	adds	r3, r0, #4
 80041f2:	e7f1      	b.n	80041d8 <__exponent+0x60>

080041f4 <_printf_float>:
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	ed2d 8b02 	vpush	{d8}
 80041fc:	b08d      	sub	sp, #52	; 0x34
 80041fe:	460c      	mov	r4, r1
 8004200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004204:	4616      	mov	r6, r2
 8004206:	461f      	mov	r7, r3
 8004208:	4605      	mov	r5, r0
 800420a:	f002 ff97 	bl	800713c <_localeconv_r>
 800420e:	f8d0 a000 	ldr.w	sl, [r0]
 8004212:	4650      	mov	r0, sl
 8004214:	f7fb ffec 	bl	80001f0 <strlen>
 8004218:	2300      	movs	r3, #0
 800421a:	930a      	str	r3, [sp, #40]	; 0x28
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	9305      	str	r3, [sp, #20]
 8004220:	f8d8 3000 	ldr.w	r3, [r8]
 8004224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004228:	3307      	adds	r3, #7
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	f103 0208 	add.w	r2, r3, #8
 8004232:	f8c8 2000 	str.w	r2, [r8]
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800423e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004246:	9307      	str	r3, [sp, #28]
 8004248:	f8cd 8018 	str.w	r8, [sp, #24]
 800424c:	ee08 0a10 	vmov	s16, r0
 8004250:	4b9f      	ldr	r3, [pc, #636]	; (80044d0 <_printf_float+0x2dc>)
 8004252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	f7fc fc77 	bl	8000b4c <__aeabi_dcmpun>
 800425e:	bb88      	cbnz	r0, 80042c4 <_printf_float+0xd0>
 8004260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004264:	4b9a      	ldr	r3, [pc, #616]	; (80044d0 <_printf_float+0x2dc>)
 8004266:	f04f 32ff 	mov.w	r2, #4294967295
 800426a:	f7fc fc51 	bl	8000b10 <__aeabi_dcmple>
 800426e:	bb48      	cbnz	r0, 80042c4 <_printf_float+0xd0>
 8004270:	2200      	movs	r2, #0
 8004272:	2300      	movs	r3, #0
 8004274:	4640      	mov	r0, r8
 8004276:	4649      	mov	r1, r9
 8004278:	f7fc fc40 	bl	8000afc <__aeabi_dcmplt>
 800427c:	b110      	cbz	r0, 8004284 <_printf_float+0x90>
 800427e:	232d      	movs	r3, #45	; 0x2d
 8004280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <_printf_float+0x2e0>)
 8004286:	4894      	ldr	r0, [pc, #592]	; (80044d8 <_printf_float+0x2e4>)
 8004288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800428c:	bf94      	ite	ls
 800428e:	4698      	movls	r8, r3
 8004290:	4680      	movhi	r8, r0
 8004292:	2303      	movs	r3, #3
 8004294:	6123      	str	r3, [r4, #16]
 8004296:	9b05      	ldr	r3, [sp, #20]
 8004298:	f023 0204 	bic.w	r2, r3, #4
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	f04f 0900 	mov.w	r9, #0
 80042a2:	9700      	str	r7, [sp, #0]
 80042a4:	4633      	mov	r3, r6
 80042a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80042a8:	4621      	mov	r1, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f9d8 	bl	8004660 <_printf_common>
 80042b0:	3001      	adds	r0, #1
 80042b2:	f040 8090 	bne.w	80043d6 <_printf_float+0x1e2>
 80042b6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ba:	b00d      	add	sp, #52	; 0x34
 80042bc:	ecbd 8b02 	vpop	{d8}
 80042c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	4640      	mov	r0, r8
 80042ca:	4649      	mov	r1, r9
 80042cc:	f7fc fc3e 	bl	8000b4c <__aeabi_dcmpun>
 80042d0:	b140      	cbz	r0, 80042e4 <_printf_float+0xf0>
 80042d2:	464b      	mov	r3, r9
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bfbc      	itt	lt
 80042d8:	232d      	movlt	r3, #45	; 0x2d
 80042da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042de:	487f      	ldr	r0, [pc, #508]	; (80044dc <_printf_float+0x2e8>)
 80042e0:	4b7f      	ldr	r3, [pc, #508]	; (80044e0 <_printf_float+0x2ec>)
 80042e2:	e7d1      	b.n	8004288 <_printf_float+0x94>
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042ea:	9206      	str	r2, [sp, #24]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	d13f      	bne.n	8004370 <_printf_float+0x17c>
 80042f0:	2306      	movs	r3, #6
 80042f2:	6063      	str	r3, [r4, #4]
 80042f4:	9b05      	ldr	r3, [sp, #20]
 80042f6:	6861      	ldr	r1, [r4, #4]
 80042f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042fc:	2300      	movs	r3, #0
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	ab0a      	add	r3, sp, #40	; 0x28
 8004302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004306:	ab09      	add	r3, sp, #36	; 0x24
 8004308:	ec49 8b10 	vmov	d0, r8, r9
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6022      	str	r2, [r4, #0]
 8004310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004314:	4628      	mov	r0, r5
 8004316:	f7ff fecd 	bl	80040b4 <__cvt>
 800431a:	9b06      	ldr	r3, [sp, #24]
 800431c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800431e:	2b47      	cmp	r3, #71	; 0x47
 8004320:	4680      	mov	r8, r0
 8004322:	d108      	bne.n	8004336 <_printf_float+0x142>
 8004324:	1cc8      	adds	r0, r1, #3
 8004326:	db02      	blt.n	800432e <_printf_float+0x13a>
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	4299      	cmp	r1, r3
 800432c:	dd41      	ble.n	80043b2 <_printf_float+0x1be>
 800432e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004332:	fa5f fb8b 	uxtb.w	fp, fp
 8004336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800433a:	d820      	bhi.n	800437e <_printf_float+0x18a>
 800433c:	3901      	subs	r1, #1
 800433e:	465a      	mov	r2, fp
 8004340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004344:	9109      	str	r1, [sp, #36]	; 0x24
 8004346:	f7ff ff17 	bl	8004178 <__exponent>
 800434a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800434c:	1813      	adds	r3, r2, r0
 800434e:	2a01      	cmp	r2, #1
 8004350:	4681      	mov	r9, r0
 8004352:	6123      	str	r3, [r4, #16]
 8004354:	dc02      	bgt.n	800435c <_printf_float+0x168>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	07d2      	lsls	r2, r2, #31
 800435a:	d501      	bpl.n	8004360 <_printf_float+0x16c>
 800435c:	3301      	adds	r3, #1
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004364:	2b00      	cmp	r3, #0
 8004366:	d09c      	beq.n	80042a2 <_printf_float+0xae>
 8004368:	232d      	movs	r3, #45	; 0x2d
 800436a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800436e:	e798      	b.n	80042a2 <_printf_float+0xae>
 8004370:	9a06      	ldr	r2, [sp, #24]
 8004372:	2a47      	cmp	r2, #71	; 0x47
 8004374:	d1be      	bne.n	80042f4 <_printf_float+0x100>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1bc      	bne.n	80042f4 <_printf_float+0x100>
 800437a:	2301      	movs	r3, #1
 800437c:	e7b9      	b.n	80042f2 <_printf_float+0xfe>
 800437e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004382:	d118      	bne.n	80043b6 <_printf_float+0x1c2>
 8004384:	2900      	cmp	r1, #0
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	dd0b      	ble.n	80043a2 <_printf_float+0x1ae>
 800438a:	6121      	str	r1, [r4, #16]
 800438c:	b913      	cbnz	r3, 8004394 <_printf_float+0x1a0>
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	07d0      	lsls	r0, r2, #31
 8004392:	d502      	bpl.n	800439a <_printf_float+0x1a6>
 8004394:	3301      	adds	r3, #1
 8004396:	440b      	add	r3, r1
 8004398:	6123      	str	r3, [r4, #16]
 800439a:	65a1      	str	r1, [r4, #88]	; 0x58
 800439c:	f04f 0900 	mov.w	r9, #0
 80043a0:	e7de      	b.n	8004360 <_printf_float+0x16c>
 80043a2:	b913      	cbnz	r3, 80043aa <_printf_float+0x1b6>
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	07d2      	lsls	r2, r2, #31
 80043a8:	d501      	bpl.n	80043ae <_printf_float+0x1ba>
 80043aa:	3302      	adds	r3, #2
 80043ac:	e7f4      	b.n	8004398 <_printf_float+0x1a4>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e7f2      	b.n	8004398 <_printf_float+0x1a4>
 80043b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80043b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043b8:	4299      	cmp	r1, r3
 80043ba:	db05      	blt.n	80043c8 <_printf_float+0x1d4>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	6121      	str	r1, [r4, #16]
 80043c0:	07d8      	lsls	r0, r3, #31
 80043c2:	d5ea      	bpl.n	800439a <_printf_float+0x1a6>
 80043c4:	1c4b      	adds	r3, r1, #1
 80043c6:	e7e7      	b.n	8004398 <_printf_float+0x1a4>
 80043c8:	2900      	cmp	r1, #0
 80043ca:	bfd4      	ite	le
 80043cc:	f1c1 0202 	rsble	r2, r1, #2
 80043d0:	2201      	movgt	r2, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	e7e0      	b.n	8004398 <_printf_float+0x1a4>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	055a      	lsls	r2, r3, #21
 80043da:	d407      	bmi.n	80043ec <_printf_float+0x1f8>
 80043dc:	6923      	ldr	r3, [r4, #16]
 80043de:	4642      	mov	r2, r8
 80043e0:	4631      	mov	r1, r6
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	d12c      	bne.n	8004444 <_printf_float+0x250>
 80043ea:	e764      	b.n	80042b6 <_printf_float+0xc2>
 80043ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043f0:	f240 80e0 	bls.w	80045b4 <_printf_float+0x3c0>
 80043f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043f8:	2200      	movs	r2, #0
 80043fa:	2300      	movs	r3, #0
 80043fc:	f7fc fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 8004400:	2800      	cmp	r0, #0
 8004402:	d034      	beq.n	800446e <_printf_float+0x27a>
 8004404:	4a37      	ldr	r2, [pc, #220]	; (80044e4 <_printf_float+0x2f0>)
 8004406:	2301      	movs	r3, #1
 8004408:	4631      	mov	r1, r6
 800440a:	4628      	mov	r0, r5
 800440c:	47b8      	blx	r7
 800440e:	3001      	adds	r0, #1
 8004410:	f43f af51 	beq.w	80042b6 <_printf_float+0xc2>
 8004414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004418:	429a      	cmp	r2, r3
 800441a:	db02      	blt.n	8004422 <_printf_float+0x22e>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	07d8      	lsls	r0, r3, #31
 8004420:	d510      	bpl.n	8004444 <_printf_float+0x250>
 8004422:	ee18 3a10 	vmov	r3, s16
 8004426:	4652      	mov	r2, sl
 8004428:	4631      	mov	r1, r6
 800442a:	4628      	mov	r0, r5
 800442c:	47b8      	blx	r7
 800442e:	3001      	adds	r0, #1
 8004430:	f43f af41 	beq.w	80042b6 <_printf_float+0xc2>
 8004434:	f04f 0800 	mov.w	r8, #0
 8004438:	f104 091a 	add.w	r9, r4, #26
 800443c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	4543      	cmp	r3, r8
 8004442:	dc09      	bgt.n	8004458 <_printf_float+0x264>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	079b      	lsls	r3, r3, #30
 8004448:	f100 8105 	bmi.w	8004656 <_printf_float+0x462>
 800444c:	68e0      	ldr	r0, [r4, #12]
 800444e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004450:	4298      	cmp	r0, r3
 8004452:	bfb8      	it	lt
 8004454:	4618      	movlt	r0, r3
 8004456:	e730      	b.n	80042ba <_printf_float+0xc6>
 8004458:	2301      	movs	r3, #1
 800445a:	464a      	mov	r2, r9
 800445c:	4631      	mov	r1, r6
 800445e:	4628      	mov	r0, r5
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	f43f af27 	beq.w	80042b6 <_printf_float+0xc2>
 8004468:	f108 0801 	add.w	r8, r8, #1
 800446c:	e7e6      	b.n	800443c <_printf_float+0x248>
 800446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	dc39      	bgt.n	80044e8 <_printf_float+0x2f4>
 8004474:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <_printf_float+0x2f0>)
 8004476:	2301      	movs	r3, #1
 8004478:	4631      	mov	r1, r6
 800447a:	4628      	mov	r0, r5
 800447c:	47b8      	blx	r7
 800447e:	3001      	adds	r0, #1
 8004480:	f43f af19 	beq.w	80042b6 <_printf_float+0xc2>
 8004484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004488:	4313      	orrs	r3, r2
 800448a:	d102      	bne.n	8004492 <_printf_float+0x29e>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	07d9      	lsls	r1, r3, #31
 8004490:	d5d8      	bpl.n	8004444 <_printf_float+0x250>
 8004492:	ee18 3a10 	vmov	r3, s16
 8004496:	4652      	mov	r2, sl
 8004498:	4631      	mov	r1, r6
 800449a:	4628      	mov	r0, r5
 800449c:	47b8      	blx	r7
 800449e:	3001      	adds	r0, #1
 80044a0:	f43f af09 	beq.w	80042b6 <_printf_float+0xc2>
 80044a4:	f04f 0900 	mov.w	r9, #0
 80044a8:	f104 0a1a 	add.w	sl, r4, #26
 80044ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ae:	425b      	negs	r3, r3
 80044b0:	454b      	cmp	r3, r9
 80044b2:	dc01      	bgt.n	80044b8 <_printf_float+0x2c4>
 80044b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b6:	e792      	b.n	80043de <_printf_float+0x1ea>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4652      	mov	r2, sl
 80044bc:	4631      	mov	r1, r6
 80044be:	4628      	mov	r0, r5
 80044c0:	47b8      	blx	r7
 80044c2:	3001      	adds	r0, #1
 80044c4:	f43f aef7 	beq.w	80042b6 <_printf_float+0xc2>
 80044c8:	f109 0901 	add.w	r9, r9, #1
 80044cc:	e7ee      	b.n	80044ac <_printf_float+0x2b8>
 80044ce:	bf00      	nop
 80044d0:	7fefffff 	.word	0x7fefffff
 80044d4:	08008a34 	.word	0x08008a34
 80044d8:	08008a38 	.word	0x08008a38
 80044dc:	08008a40 	.word	0x08008a40
 80044e0:	08008a3c 	.word	0x08008a3c
 80044e4:	08008a44 	.word	0x08008a44
 80044e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ec:	429a      	cmp	r2, r3
 80044ee:	bfa8      	it	ge
 80044f0:	461a      	movge	r2, r3
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	4691      	mov	r9, r2
 80044f6:	dc37      	bgt.n	8004568 <_printf_float+0x374>
 80044f8:	f04f 0b00 	mov.w	fp, #0
 80044fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004500:	f104 021a 	add.w	r2, r4, #26
 8004504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004506:	9305      	str	r3, [sp, #20]
 8004508:	eba3 0309 	sub.w	r3, r3, r9
 800450c:	455b      	cmp	r3, fp
 800450e:	dc33      	bgt.n	8004578 <_printf_float+0x384>
 8004510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004514:	429a      	cmp	r2, r3
 8004516:	db3b      	blt.n	8004590 <_printf_float+0x39c>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	07da      	lsls	r2, r3, #31
 800451c:	d438      	bmi.n	8004590 <_printf_float+0x39c>
 800451e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004520:	9a05      	ldr	r2, [sp, #20]
 8004522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004524:	1a9a      	subs	r2, r3, r2
 8004526:	eba3 0901 	sub.w	r9, r3, r1
 800452a:	4591      	cmp	r9, r2
 800452c:	bfa8      	it	ge
 800452e:	4691      	movge	r9, r2
 8004530:	f1b9 0f00 	cmp.w	r9, #0
 8004534:	dc35      	bgt.n	80045a2 <_printf_float+0x3ae>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800453e:	f104 0a1a 	add.w	sl, r4, #26
 8004542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	eba3 0309 	sub.w	r3, r3, r9
 800454c:	4543      	cmp	r3, r8
 800454e:	f77f af79 	ble.w	8004444 <_printf_float+0x250>
 8004552:	2301      	movs	r3, #1
 8004554:	4652      	mov	r2, sl
 8004556:	4631      	mov	r1, r6
 8004558:	4628      	mov	r0, r5
 800455a:	47b8      	blx	r7
 800455c:	3001      	adds	r0, #1
 800455e:	f43f aeaa 	beq.w	80042b6 <_printf_float+0xc2>
 8004562:	f108 0801 	add.w	r8, r8, #1
 8004566:	e7ec      	b.n	8004542 <_printf_float+0x34e>
 8004568:	4613      	mov	r3, r2
 800456a:	4631      	mov	r1, r6
 800456c:	4642      	mov	r2, r8
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	d1c0      	bne.n	80044f8 <_printf_float+0x304>
 8004576:	e69e      	b.n	80042b6 <_printf_float+0xc2>
 8004578:	2301      	movs	r3, #1
 800457a:	4631      	mov	r1, r6
 800457c:	4628      	mov	r0, r5
 800457e:	9205      	str	r2, [sp, #20]
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	f43f ae97 	beq.w	80042b6 <_printf_float+0xc2>
 8004588:	9a05      	ldr	r2, [sp, #20]
 800458a:	f10b 0b01 	add.w	fp, fp, #1
 800458e:	e7b9      	b.n	8004504 <_printf_float+0x310>
 8004590:	ee18 3a10 	vmov	r3, s16
 8004594:	4652      	mov	r2, sl
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	d1be      	bne.n	800451e <_printf_float+0x32a>
 80045a0:	e689      	b.n	80042b6 <_printf_float+0xc2>
 80045a2:	9a05      	ldr	r2, [sp, #20]
 80045a4:	464b      	mov	r3, r9
 80045a6:	4442      	add	r2, r8
 80045a8:	4631      	mov	r1, r6
 80045aa:	4628      	mov	r0, r5
 80045ac:	47b8      	blx	r7
 80045ae:	3001      	adds	r0, #1
 80045b0:	d1c1      	bne.n	8004536 <_printf_float+0x342>
 80045b2:	e680      	b.n	80042b6 <_printf_float+0xc2>
 80045b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045b6:	2a01      	cmp	r2, #1
 80045b8:	dc01      	bgt.n	80045be <_printf_float+0x3ca>
 80045ba:	07db      	lsls	r3, r3, #31
 80045bc:	d538      	bpl.n	8004630 <_printf_float+0x43c>
 80045be:	2301      	movs	r3, #1
 80045c0:	4642      	mov	r2, r8
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b8      	blx	r7
 80045c8:	3001      	adds	r0, #1
 80045ca:	f43f ae74 	beq.w	80042b6 <_printf_float+0xc2>
 80045ce:	ee18 3a10 	vmov	r3, s16
 80045d2:	4652      	mov	r2, sl
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	47b8      	blx	r7
 80045da:	3001      	adds	r0, #1
 80045dc:	f43f ae6b 	beq.w	80042b6 <_printf_float+0xc2>
 80045e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045e4:	2200      	movs	r2, #0
 80045e6:	2300      	movs	r3, #0
 80045e8:	f7fc fa7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80045ec:	b9d8      	cbnz	r0, 8004626 <_printf_float+0x432>
 80045ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f0:	f108 0201 	add.w	r2, r8, #1
 80045f4:	3b01      	subs	r3, #1
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	d10e      	bne.n	800461e <_printf_float+0x42a>
 8004600:	e659      	b.n	80042b6 <_printf_float+0xc2>
 8004602:	2301      	movs	r3, #1
 8004604:	4652      	mov	r2, sl
 8004606:	4631      	mov	r1, r6
 8004608:	4628      	mov	r0, r5
 800460a:	47b8      	blx	r7
 800460c:	3001      	adds	r0, #1
 800460e:	f43f ae52 	beq.w	80042b6 <_printf_float+0xc2>
 8004612:	f108 0801 	add.w	r8, r8, #1
 8004616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	4543      	cmp	r3, r8
 800461c:	dcf1      	bgt.n	8004602 <_printf_float+0x40e>
 800461e:	464b      	mov	r3, r9
 8004620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004624:	e6dc      	b.n	80043e0 <_printf_float+0x1ec>
 8004626:	f04f 0800 	mov.w	r8, #0
 800462a:	f104 0a1a 	add.w	sl, r4, #26
 800462e:	e7f2      	b.n	8004616 <_printf_float+0x422>
 8004630:	2301      	movs	r3, #1
 8004632:	4642      	mov	r2, r8
 8004634:	e7df      	b.n	80045f6 <_printf_float+0x402>
 8004636:	2301      	movs	r3, #1
 8004638:	464a      	mov	r2, r9
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	f43f ae38 	beq.w	80042b6 <_printf_float+0xc2>
 8004646:	f108 0801 	add.w	r8, r8, #1
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800464e:	1a5b      	subs	r3, r3, r1
 8004650:	4543      	cmp	r3, r8
 8004652:	dcf0      	bgt.n	8004636 <_printf_float+0x442>
 8004654:	e6fa      	b.n	800444c <_printf_float+0x258>
 8004656:	f04f 0800 	mov.w	r8, #0
 800465a:	f104 0919 	add.w	r9, r4, #25
 800465e:	e7f4      	b.n	800464a <_printf_float+0x456>

08004660 <_printf_common>:
 8004660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	4616      	mov	r6, r2
 8004666:	4699      	mov	r9, r3
 8004668:	688a      	ldr	r2, [r1, #8]
 800466a:	690b      	ldr	r3, [r1, #16]
 800466c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004670:	4293      	cmp	r3, r2
 8004672:	bfb8      	it	lt
 8004674:	4613      	movlt	r3, r2
 8004676:	6033      	str	r3, [r6, #0]
 8004678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800467c:	4607      	mov	r7, r0
 800467e:	460c      	mov	r4, r1
 8004680:	b10a      	cbz	r2, 8004686 <_printf_common+0x26>
 8004682:	3301      	adds	r3, #1
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	0699      	lsls	r1, r3, #26
 800468a:	bf42      	ittt	mi
 800468c:	6833      	ldrmi	r3, [r6, #0]
 800468e:	3302      	addmi	r3, #2
 8004690:	6033      	strmi	r3, [r6, #0]
 8004692:	6825      	ldr	r5, [r4, #0]
 8004694:	f015 0506 	ands.w	r5, r5, #6
 8004698:	d106      	bne.n	80046a8 <_printf_common+0x48>
 800469a:	f104 0a19 	add.w	sl, r4, #25
 800469e:	68e3      	ldr	r3, [r4, #12]
 80046a0:	6832      	ldr	r2, [r6, #0]
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	42ab      	cmp	r3, r5
 80046a6:	dc26      	bgt.n	80046f6 <_printf_common+0x96>
 80046a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046ac:	1e13      	subs	r3, r2, #0
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	bf18      	it	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	0692      	lsls	r2, r2, #26
 80046b6:	d42b      	bmi.n	8004710 <_printf_common+0xb0>
 80046b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046bc:	4649      	mov	r1, r9
 80046be:	4638      	mov	r0, r7
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d01e      	beq.n	8004704 <_printf_common+0xa4>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	68e5      	ldr	r5, [r4, #12]
 80046ca:	6832      	ldr	r2, [r6, #0]
 80046cc:	f003 0306 	and.w	r3, r3, #6
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	bf08      	it	eq
 80046d4:	1aad      	subeq	r5, r5, r2
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	6922      	ldr	r2, [r4, #16]
 80046da:	bf0c      	ite	eq
 80046dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e0:	2500      	movne	r5, #0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bfc4      	itt	gt
 80046e6:	1a9b      	subgt	r3, r3, r2
 80046e8:	18ed      	addgt	r5, r5, r3
 80046ea:	2600      	movs	r6, #0
 80046ec:	341a      	adds	r4, #26
 80046ee:	42b5      	cmp	r5, r6
 80046f0:	d11a      	bne.n	8004728 <_printf_common+0xc8>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e008      	b.n	8004708 <_printf_common+0xa8>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	4649      	mov	r1, r9
 80046fc:	4638      	mov	r0, r7
 80046fe:	47c0      	blx	r8
 8004700:	3001      	adds	r0, #1
 8004702:	d103      	bne.n	800470c <_printf_common+0xac>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	3501      	adds	r5, #1
 800470e:	e7c6      	b.n	800469e <_printf_common+0x3e>
 8004710:	18e1      	adds	r1, r4, r3
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	2030      	movs	r0, #48	; 0x30
 8004716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800471a:	4422      	add	r2, r4
 800471c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004724:	3302      	adds	r3, #2
 8004726:	e7c7      	b.n	80046b8 <_printf_common+0x58>
 8004728:	2301      	movs	r3, #1
 800472a:	4622      	mov	r2, r4
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	47c0      	blx	r8
 8004732:	3001      	adds	r0, #1
 8004734:	d0e6      	beq.n	8004704 <_printf_common+0xa4>
 8004736:	3601      	adds	r6, #1
 8004738:	e7d9      	b.n	80046ee <_printf_common+0x8e>
	...

0800473c <_printf_i>:
 800473c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	7e0f      	ldrb	r7, [r1, #24]
 8004742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004744:	2f78      	cmp	r7, #120	; 0x78
 8004746:	4691      	mov	r9, r2
 8004748:	4680      	mov	r8, r0
 800474a:	460c      	mov	r4, r1
 800474c:	469a      	mov	sl, r3
 800474e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004752:	d807      	bhi.n	8004764 <_printf_i+0x28>
 8004754:	2f62      	cmp	r7, #98	; 0x62
 8004756:	d80a      	bhi.n	800476e <_printf_i+0x32>
 8004758:	2f00      	cmp	r7, #0
 800475a:	f000 80d8 	beq.w	800490e <_printf_i+0x1d2>
 800475e:	2f58      	cmp	r7, #88	; 0x58
 8004760:	f000 80a3 	beq.w	80048aa <_printf_i+0x16e>
 8004764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800476c:	e03a      	b.n	80047e4 <_printf_i+0xa8>
 800476e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004772:	2b15      	cmp	r3, #21
 8004774:	d8f6      	bhi.n	8004764 <_printf_i+0x28>
 8004776:	a101      	add	r1, pc, #4	; (adr r1, 800477c <_printf_i+0x40>)
 8004778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047e9 	.word	0x080047e9
 8004784:	08004765 	.word	0x08004765
 8004788:	08004765 	.word	0x08004765
 800478c:	08004765 	.word	0x08004765
 8004790:	08004765 	.word	0x08004765
 8004794:	080047e9 	.word	0x080047e9
 8004798:	08004765 	.word	0x08004765
 800479c:	08004765 	.word	0x08004765
 80047a0:	08004765 	.word	0x08004765
 80047a4:	08004765 	.word	0x08004765
 80047a8:	080048f5 	.word	0x080048f5
 80047ac:	08004819 	.word	0x08004819
 80047b0:	080048d7 	.word	0x080048d7
 80047b4:	08004765 	.word	0x08004765
 80047b8:	08004765 	.word	0x08004765
 80047bc:	08004917 	.word	0x08004917
 80047c0:	08004765 	.word	0x08004765
 80047c4:	08004819 	.word	0x08004819
 80047c8:	08004765 	.word	0x08004765
 80047cc:	08004765 	.word	0x08004765
 80047d0:	080048df 	.word	0x080048df
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	602a      	str	r2, [r5, #0]
 80047dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0a3      	b.n	8004930 <_printf_i+0x1f4>
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	6829      	ldr	r1, [r5, #0]
 80047ec:	0606      	lsls	r6, r0, #24
 80047ee:	f101 0304 	add.w	r3, r1, #4
 80047f2:	d50a      	bpl.n	800480a <_printf_i+0xce>
 80047f4:	680e      	ldr	r6, [r1, #0]
 80047f6:	602b      	str	r3, [r5, #0]
 80047f8:	2e00      	cmp	r6, #0
 80047fa:	da03      	bge.n	8004804 <_printf_i+0xc8>
 80047fc:	232d      	movs	r3, #45	; 0x2d
 80047fe:	4276      	negs	r6, r6
 8004800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004804:	485e      	ldr	r0, [pc, #376]	; (8004980 <_printf_i+0x244>)
 8004806:	230a      	movs	r3, #10
 8004808:	e019      	b.n	800483e <_printf_i+0x102>
 800480a:	680e      	ldr	r6, [r1, #0]
 800480c:	602b      	str	r3, [r5, #0]
 800480e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004812:	bf18      	it	ne
 8004814:	b236      	sxthne	r6, r6
 8004816:	e7ef      	b.n	80047f8 <_printf_i+0xbc>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	6820      	ldr	r0, [r4, #0]
 800481c:	1d19      	adds	r1, r3, #4
 800481e:	6029      	str	r1, [r5, #0]
 8004820:	0601      	lsls	r1, r0, #24
 8004822:	d501      	bpl.n	8004828 <_printf_i+0xec>
 8004824:	681e      	ldr	r6, [r3, #0]
 8004826:	e002      	b.n	800482e <_printf_i+0xf2>
 8004828:	0646      	lsls	r6, r0, #25
 800482a:	d5fb      	bpl.n	8004824 <_printf_i+0xe8>
 800482c:	881e      	ldrh	r6, [r3, #0]
 800482e:	4854      	ldr	r0, [pc, #336]	; (8004980 <_printf_i+0x244>)
 8004830:	2f6f      	cmp	r7, #111	; 0x6f
 8004832:	bf0c      	ite	eq
 8004834:	2308      	moveq	r3, #8
 8004836:	230a      	movne	r3, #10
 8004838:	2100      	movs	r1, #0
 800483a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800483e:	6865      	ldr	r5, [r4, #4]
 8004840:	60a5      	str	r5, [r4, #8]
 8004842:	2d00      	cmp	r5, #0
 8004844:	bfa2      	ittt	ge
 8004846:	6821      	ldrge	r1, [r4, #0]
 8004848:	f021 0104 	bicge.w	r1, r1, #4
 800484c:	6021      	strge	r1, [r4, #0]
 800484e:	b90e      	cbnz	r6, 8004854 <_printf_i+0x118>
 8004850:	2d00      	cmp	r5, #0
 8004852:	d04d      	beq.n	80048f0 <_printf_i+0x1b4>
 8004854:	4615      	mov	r5, r2
 8004856:	fbb6 f1f3 	udiv	r1, r6, r3
 800485a:	fb03 6711 	mls	r7, r3, r1, r6
 800485e:	5dc7      	ldrb	r7, [r0, r7]
 8004860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004864:	4637      	mov	r7, r6
 8004866:	42bb      	cmp	r3, r7
 8004868:	460e      	mov	r6, r1
 800486a:	d9f4      	bls.n	8004856 <_printf_i+0x11a>
 800486c:	2b08      	cmp	r3, #8
 800486e:	d10b      	bne.n	8004888 <_printf_i+0x14c>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	07de      	lsls	r6, r3, #31
 8004874:	d508      	bpl.n	8004888 <_printf_i+0x14c>
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	6861      	ldr	r1, [r4, #4]
 800487a:	4299      	cmp	r1, r3
 800487c:	bfde      	ittt	le
 800487e:	2330      	movle	r3, #48	; 0x30
 8004880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004888:	1b52      	subs	r2, r2, r5
 800488a:	6122      	str	r2, [r4, #16]
 800488c:	f8cd a000 	str.w	sl, [sp]
 8004890:	464b      	mov	r3, r9
 8004892:	aa03      	add	r2, sp, #12
 8004894:	4621      	mov	r1, r4
 8004896:	4640      	mov	r0, r8
 8004898:	f7ff fee2 	bl	8004660 <_printf_common>
 800489c:	3001      	adds	r0, #1
 800489e:	d14c      	bne.n	800493a <_printf_i+0x1fe>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	b004      	add	sp, #16
 80048a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048aa:	4835      	ldr	r0, [pc, #212]	; (8004980 <_printf_i+0x244>)
 80048ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048b0:	6829      	ldr	r1, [r5, #0]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80048b8:	6029      	str	r1, [r5, #0]
 80048ba:	061d      	lsls	r5, r3, #24
 80048bc:	d514      	bpl.n	80048e8 <_printf_i+0x1ac>
 80048be:	07df      	lsls	r7, r3, #31
 80048c0:	bf44      	itt	mi
 80048c2:	f043 0320 	orrmi.w	r3, r3, #32
 80048c6:	6023      	strmi	r3, [r4, #0]
 80048c8:	b91e      	cbnz	r6, 80048d2 <_printf_i+0x196>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	f023 0320 	bic.w	r3, r3, #32
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	2310      	movs	r3, #16
 80048d4:	e7b0      	b.n	8004838 <_printf_i+0xfc>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f043 0320 	orr.w	r3, r3, #32
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	2378      	movs	r3, #120	; 0x78
 80048e0:	4828      	ldr	r0, [pc, #160]	; (8004984 <_printf_i+0x248>)
 80048e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e6:	e7e3      	b.n	80048b0 <_printf_i+0x174>
 80048e8:	0659      	lsls	r1, r3, #25
 80048ea:	bf48      	it	mi
 80048ec:	b2b6      	uxthmi	r6, r6
 80048ee:	e7e6      	b.n	80048be <_printf_i+0x182>
 80048f0:	4615      	mov	r5, r2
 80048f2:	e7bb      	b.n	800486c <_printf_i+0x130>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	6826      	ldr	r6, [r4, #0]
 80048f8:	6961      	ldr	r1, [r4, #20]
 80048fa:	1d18      	adds	r0, r3, #4
 80048fc:	6028      	str	r0, [r5, #0]
 80048fe:	0635      	lsls	r5, r6, #24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	d501      	bpl.n	8004908 <_printf_i+0x1cc>
 8004904:	6019      	str	r1, [r3, #0]
 8004906:	e002      	b.n	800490e <_printf_i+0x1d2>
 8004908:	0670      	lsls	r0, r6, #25
 800490a:	d5fb      	bpl.n	8004904 <_printf_i+0x1c8>
 800490c:	8019      	strh	r1, [r3, #0]
 800490e:	2300      	movs	r3, #0
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	4615      	mov	r5, r2
 8004914:	e7ba      	b.n	800488c <_printf_i+0x150>
 8004916:	682b      	ldr	r3, [r5, #0]
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	602a      	str	r2, [r5, #0]
 800491c:	681d      	ldr	r5, [r3, #0]
 800491e:	6862      	ldr	r2, [r4, #4]
 8004920:	2100      	movs	r1, #0
 8004922:	4628      	mov	r0, r5
 8004924:	f7fb fc6c 	bl	8000200 <memchr>
 8004928:	b108      	cbz	r0, 800492e <_printf_i+0x1f2>
 800492a:	1b40      	subs	r0, r0, r5
 800492c:	6060      	str	r0, [r4, #4]
 800492e:	6863      	ldr	r3, [r4, #4]
 8004930:	6123      	str	r3, [r4, #16]
 8004932:	2300      	movs	r3, #0
 8004934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004938:	e7a8      	b.n	800488c <_printf_i+0x150>
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	462a      	mov	r2, r5
 800493e:	4649      	mov	r1, r9
 8004940:	4640      	mov	r0, r8
 8004942:	47d0      	blx	sl
 8004944:	3001      	adds	r0, #1
 8004946:	d0ab      	beq.n	80048a0 <_printf_i+0x164>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	079b      	lsls	r3, r3, #30
 800494c:	d413      	bmi.n	8004976 <_printf_i+0x23a>
 800494e:	68e0      	ldr	r0, [r4, #12]
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	4298      	cmp	r0, r3
 8004954:	bfb8      	it	lt
 8004956:	4618      	movlt	r0, r3
 8004958:	e7a4      	b.n	80048a4 <_printf_i+0x168>
 800495a:	2301      	movs	r3, #1
 800495c:	4632      	mov	r2, r6
 800495e:	4649      	mov	r1, r9
 8004960:	4640      	mov	r0, r8
 8004962:	47d0      	blx	sl
 8004964:	3001      	adds	r0, #1
 8004966:	d09b      	beq.n	80048a0 <_printf_i+0x164>
 8004968:	3501      	adds	r5, #1
 800496a:	68e3      	ldr	r3, [r4, #12]
 800496c:	9903      	ldr	r1, [sp, #12]
 800496e:	1a5b      	subs	r3, r3, r1
 8004970:	42ab      	cmp	r3, r5
 8004972:	dcf2      	bgt.n	800495a <_printf_i+0x21e>
 8004974:	e7eb      	b.n	800494e <_printf_i+0x212>
 8004976:	2500      	movs	r5, #0
 8004978:	f104 0619 	add.w	r6, r4, #25
 800497c:	e7f5      	b.n	800496a <_printf_i+0x22e>
 800497e:	bf00      	nop
 8004980:	08008a46 	.word	0x08008a46
 8004984:	08008a57 	.word	0x08008a57

08004988 <_scanf_float>:
 8004988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498c:	b087      	sub	sp, #28
 800498e:	4617      	mov	r7, r2
 8004990:	9303      	str	r3, [sp, #12]
 8004992:	688b      	ldr	r3, [r1, #8]
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800499a:	bf83      	ittte	hi
 800499c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80049a0:	195b      	addhi	r3, r3, r5
 80049a2:	9302      	strhi	r3, [sp, #8]
 80049a4:	2300      	movls	r3, #0
 80049a6:	bf86      	itte	hi
 80049a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80049ac:	608b      	strhi	r3, [r1, #8]
 80049ae:	9302      	strls	r3, [sp, #8]
 80049b0:	680b      	ldr	r3, [r1, #0]
 80049b2:	468b      	mov	fp, r1
 80049b4:	2500      	movs	r5, #0
 80049b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80049ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80049be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80049c2:	4680      	mov	r8, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	465e      	mov	r6, fp
 80049c8:	46aa      	mov	sl, r5
 80049ca:	46a9      	mov	r9, r5
 80049cc:	9501      	str	r5, [sp, #4]
 80049ce:	68a2      	ldr	r2, [r4, #8]
 80049d0:	b152      	cbz	r2, 80049e8 <_scanf_float+0x60>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b4e      	cmp	r3, #78	; 0x4e
 80049d8:	d864      	bhi.n	8004aa4 <_scanf_float+0x11c>
 80049da:	2b40      	cmp	r3, #64	; 0x40
 80049dc:	d83c      	bhi.n	8004a58 <_scanf_float+0xd0>
 80049de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80049e2:	b2c8      	uxtb	r0, r1
 80049e4:	280e      	cmp	r0, #14
 80049e6:	d93a      	bls.n	8004a5e <_scanf_float+0xd6>
 80049e8:	f1b9 0f00 	cmp.w	r9, #0
 80049ec:	d003      	beq.n	80049f6 <_scanf_float+0x6e>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049fa:	f1ba 0f01 	cmp.w	sl, #1
 80049fe:	f200 8113 	bhi.w	8004c28 <_scanf_float+0x2a0>
 8004a02:	455e      	cmp	r6, fp
 8004a04:	f200 8105 	bhi.w	8004c12 <_scanf_float+0x28a>
 8004a08:	2501      	movs	r5, #1
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	b007      	add	sp, #28
 8004a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004a16:	2a0d      	cmp	r2, #13
 8004a18:	d8e6      	bhi.n	80049e8 <_scanf_float+0x60>
 8004a1a:	a101      	add	r1, pc, #4	; (adr r1, 8004a20 <_scanf_float+0x98>)
 8004a1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a20:	08004b5f 	.word	0x08004b5f
 8004a24:	080049e9 	.word	0x080049e9
 8004a28:	080049e9 	.word	0x080049e9
 8004a2c:	080049e9 	.word	0x080049e9
 8004a30:	08004bbf 	.word	0x08004bbf
 8004a34:	08004b97 	.word	0x08004b97
 8004a38:	080049e9 	.word	0x080049e9
 8004a3c:	080049e9 	.word	0x080049e9
 8004a40:	08004b6d 	.word	0x08004b6d
 8004a44:	080049e9 	.word	0x080049e9
 8004a48:	080049e9 	.word	0x080049e9
 8004a4c:	080049e9 	.word	0x080049e9
 8004a50:	080049e9 	.word	0x080049e9
 8004a54:	08004b25 	.word	0x08004b25
 8004a58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a5c:	e7db      	b.n	8004a16 <_scanf_float+0x8e>
 8004a5e:	290e      	cmp	r1, #14
 8004a60:	d8c2      	bhi.n	80049e8 <_scanf_float+0x60>
 8004a62:	a001      	add	r0, pc, #4	; (adr r0, 8004a68 <_scanf_float+0xe0>)
 8004a64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a68:	08004b17 	.word	0x08004b17
 8004a6c:	080049e9 	.word	0x080049e9
 8004a70:	08004b17 	.word	0x08004b17
 8004a74:	08004bab 	.word	0x08004bab
 8004a78:	080049e9 	.word	0x080049e9
 8004a7c:	08004ac5 	.word	0x08004ac5
 8004a80:	08004b01 	.word	0x08004b01
 8004a84:	08004b01 	.word	0x08004b01
 8004a88:	08004b01 	.word	0x08004b01
 8004a8c:	08004b01 	.word	0x08004b01
 8004a90:	08004b01 	.word	0x08004b01
 8004a94:	08004b01 	.word	0x08004b01
 8004a98:	08004b01 	.word	0x08004b01
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004b01 	.word	0x08004b01
 8004aa4:	2b6e      	cmp	r3, #110	; 0x6e
 8004aa6:	d809      	bhi.n	8004abc <_scanf_float+0x134>
 8004aa8:	2b60      	cmp	r3, #96	; 0x60
 8004aaa:	d8b2      	bhi.n	8004a12 <_scanf_float+0x8a>
 8004aac:	2b54      	cmp	r3, #84	; 0x54
 8004aae:	d077      	beq.n	8004ba0 <_scanf_float+0x218>
 8004ab0:	2b59      	cmp	r3, #89	; 0x59
 8004ab2:	d199      	bne.n	80049e8 <_scanf_float+0x60>
 8004ab4:	2d07      	cmp	r5, #7
 8004ab6:	d197      	bne.n	80049e8 <_scanf_float+0x60>
 8004ab8:	2508      	movs	r5, #8
 8004aba:	e029      	b.n	8004b10 <_scanf_float+0x188>
 8004abc:	2b74      	cmp	r3, #116	; 0x74
 8004abe:	d06f      	beq.n	8004ba0 <_scanf_float+0x218>
 8004ac0:	2b79      	cmp	r3, #121	; 0x79
 8004ac2:	e7f6      	b.n	8004ab2 <_scanf_float+0x12a>
 8004ac4:	6821      	ldr	r1, [r4, #0]
 8004ac6:	05c8      	lsls	r0, r1, #23
 8004ac8:	d51a      	bpl.n	8004b00 <_scanf_float+0x178>
 8004aca:	9b02      	ldr	r3, [sp, #8]
 8004acc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ad0:	6021      	str	r1, [r4, #0]
 8004ad2:	f109 0901 	add.w	r9, r9, #1
 8004ad6:	b11b      	cbz	r3, 8004ae0 <_scanf_float+0x158>
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	3201      	adds	r2, #1
 8004adc:	9302      	str	r3, [sp, #8]
 8004ade:	60a2      	str	r2, [r4, #8]
 8004ae0:	68a3      	ldr	r3, [r4, #8]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60a3      	str	r3, [r4, #8]
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	6123      	str	r3, [r4, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	f340 8084 	ble.w	8004c00 <_scanf_float+0x278>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	3301      	adds	r3, #1
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	e766      	b.n	80049ce <_scanf_float+0x46>
 8004b00:	eb1a 0f05 	cmn.w	sl, r5
 8004b04:	f47f af70 	bne.w	80049e8 <_scanf_float+0x60>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004b0e:	6022      	str	r2, [r4, #0]
 8004b10:	f806 3b01 	strb.w	r3, [r6], #1
 8004b14:	e7e4      	b.n	8004ae0 <_scanf_float+0x158>
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	0610      	lsls	r0, r2, #24
 8004b1a:	f57f af65 	bpl.w	80049e8 <_scanf_float+0x60>
 8004b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b22:	e7f4      	b.n	8004b0e <_scanf_float+0x186>
 8004b24:	f1ba 0f00 	cmp.w	sl, #0
 8004b28:	d10e      	bne.n	8004b48 <_scanf_float+0x1c0>
 8004b2a:	f1b9 0f00 	cmp.w	r9, #0
 8004b2e:	d10e      	bne.n	8004b4e <_scanf_float+0x1c6>
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b3a:	d108      	bne.n	8004b4e <_scanf_float+0x1c6>
 8004b3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b40:	6022      	str	r2, [r4, #0]
 8004b42:	f04f 0a01 	mov.w	sl, #1
 8004b46:	e7e3      	b.n	8004b10 <_scanf_float+0x188>
 8004b48:	f1ba 0f02 	cmp.w	sl, #2
 8004b4c:	d055      	beq.n	8004bfa <_scanf_float+0x272>
 8004b4e:	2d01      	cmp	r5, #1
 8004b50:	d002      	beq.n	8004b58 <_scanf_float+0x1d0>
 8004b52:	2d04      	cmp	r5, #4
 8004b54:	f47f af48 	bne.w	80049e8 <_scanf_float+0x60>
 8004b58:	3501      	adds	r5, #1
 8004b5a:	b2ed      	uxtb	r5, r5
 8004b5c:	e7d8      	b.n	8004b10 <_scanf_float+0x188>
 8004b5e:	f1ba 0f01 	cmp.w	sl, #1
 8004b62:	f47f af41 	bne.w	80049e8 <_scanf_float+0x60>
 8004b66:	f04f 0a02 	mov.w	sl, #2
 8004b6a:	e7d1      	b.n	8004b10 <_scanf_float+0x188>
 8004b6c:	b97d      	cbnz	r5, 8004b8e <_scanf_float+0x206>
 8004b6e:	f1b9 0f00 	cmp.w	r9, #0
 8004b72:	f47f af3c 	bne.w	80049ee <_scanf_float+0x66>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b80:	f47f af39 	bne.w	80049f6 <_scanf_float+0x6e>
 8004b84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b88:	6022      	str	r2, [r4, #0]
 8004b8a:	2501      	movs	r5, #1
 8004b8c:	e7c0      	b.n	8004b10 <_scanf_float+0x188>
 8004b8e:	2d03      	cmp	r5, #3
 8004b90:	d0e2      	beq.n	8004b58 <_scanf_float+0x1d0>
 8004b92:	2d05      	cmp	r5, #5
 8004b94:	e7de      	b.n	8004b54 <_scanf_float+0x1cc>
 8004b96:	2d02      	cmp	r5, #2
 8004b98:	f47f af26 	bne.w	80049e8 <_scanf_float+0x60>
 8004b9c:	2503      	movs	r5, #3
 8004b9e:	e7b7      	b.n	8004b10 <_scanf_float+0x188>
 8004ba0:	2d06      	cmp	r5, #6
 8004ba2:	f47f af21 	bne.w	80049e8 <_scanf_float+0x60>
 8004ba6:	2507      	movs	r5, #7
 8004ba8:	e7b2      	b.n	8004b10 <_scanf_float+0x188>
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	0591      	lsls	r1, r2, #22
 8004bae:	f57f af1b 	bpl.w	80049e8 <_scanf_float+0x60>
 8004bb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004bbc:	e7a8      	b.n	8004b10 <_scanf_float+0x188>
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004bc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004bc8:	d006      	beq.n	8004bd8 <_scanf_float+0x250>
 8004bca:	0550      	lsls	r0, r2, #21
 8004bcc:	f57f af0c 	bpl.w	80049e8 <_scanf_float+0x60>
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	f43f af0f 	beq.w	80049f6 <_scanf_float+0x6e>
 8004bd8:	0591      	lsls	r1, r2, #22
 8004bda:	bf58      	it	pl
 8004bdc:	9901      	ldrpl	r1, [sp, #4]
 8004bde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004be2:	bf58      	it	pl
 8004be4:	eba9 0101 	subpl.w	r1, r9, r1
 8004be8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004bec:	bf58      	it	pl
 8004bee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bf2:	6022      	str	r2, [r4, #0]
 8004bf4:	f04f 0900 	mov.w	r9, #0
 8004bf8:	e78a      	b.n	8004b10 <_scanf_float+0x188>
 8004bfa:	f04f 0a03 	mov.w	sl, #3
 8004bfe:	e787      	b.n	8004b10 <_scanf_float+0x188>
 8004c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004c04:	4639      	mov	r1, r7
 8004c06:	4640      	mov	r0, r8
 8004c08:	4798      	blx	r3
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	f43f aedf 	beq.w	80049ce <_scanf_float+0x46>
 8004c10:	e6ea      	b.n	80049e8 <_scanf_float+0x60>
 8004c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c1a:	463a      	mov	r2, r7
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4798      	blx	r3
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	6123      	str	r3, [r4, #16]
 8004c26:	e6ec      	b.n	8004a02 <_scanf_float+0x7a>
 8004c28:	1e6b      	subs	r3, r5, #1
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d825      	bhi.n	8004c7a <_scanf_float+0x2f2>
 8004c2e:	2d02      	cmp	r5, #2
 8004c30:	d836      	bhi.n	8004ca0 <_scanf_float+0x318>
 8004c32:	455e      	cmp	r6, fp
 8004c34:	f67f aee8 	bls.w	8004a08 <_scanf_float+0x80>
 8004c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c40:	463a      	mov	r2, r7
 8004c42:	4640      	mov	r0, r8
 8004c44:	4798      	blx	r3
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	e7f1      	b.n	8004c32 <_scanf_float+0x2aa>
 8004c4e:	9802      	ldr	r0, [sp, #8]
 8004c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c58:	9002      	str	r0, [sp, #8]
 8004c5a:	463a      	mov	r2, r7
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	4798      	blx	r3
 8004c60:	6923      	ldr	r3, [r4, #16]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c6a:	fa5f fa8a 	uxtb.w	sl, sl
 8004c6e:	f1ba 0f02 	cmp.w	sl, #2
 8004c72:	d1ec      	bne.n	8004c4e <_scanf_float+0x2c6>
 8004c74:	3d03      	subs	r5, #3
 8004c76:	b2ed      	uxtb	r5, r5
 8004c78:	1b76      	subs	r6, r6, r5
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	05da      	lsls	r2, r3, #23
 8004c7e:	d52f      	bpl.n	8004ce0 <_scanf_float+0x358>
 8004c80:	055b      	lsls	r3, r3, #21
 8004c82:	d510      	bpl.n	8004ca6 <_scanf_float+0x31e>
 8004c84:	455e      	cmp	r6, fp
 8004c86:	f67f aebf 	bls.w	8004a08 <_scanf_float+0x80>
 8004c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c92:	463a      	mov	r2, r7
 8004c94:	4640      	mov	r0, r8
 8004c96:	4798      	blx	r3
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	e7f1      	b.n	8004c84 <_scanf_float+0x2fc>
 8004ca0:	46aa      	mov	sl, r5
 8004ca2:	9602      	str	r6, [sp, #8]
 8004ca4:	e7df      	b.n	8004c66 <_scanf_float+0x2de>
 8004ca6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004caa:	6923      	ldr	r3, [r4, #16]
 8004cac:	2965      	cmp	r1, #101	; 0x65
 8004cae:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8004cb6:	6123      	str	r3, [r4, #16]
 8004cb8:	d00c      	beq.n	8004cd4 <_scanf_float+0x34c>
 8004cba:	2945      	cmp	r1, #69	; 0x45
 8004cbc:	d00a      	beq.n	8004cd4 <_scanf_float+0x34c>
 8004cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cc2:	463a      	mov	r2, r7
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4798      	blx	r3
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	1eb5      	subs	r5, r6, #2
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cd8:	463a      	mov	r2, r7
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4798      	blx	r3
 8004cde:	462e      	mov	r6, r5
 8004ce0:	6825      	ldr	r5, [r4, #0]
 8004ce2:	f015 0510 	ands.w	r5, r5, #16
 8004ce6:	d159      	bne.n	8004d9c <_scanf_float+0x414>
 8004ce8:	7035      	strb	r5, [r6, #0]
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d11b      	bne.n	8004d2e <_scanf_float+0x3a6>
 8004cf6:	9b01      	ldr	r3, [sp, #4]
 8004cf8:	454b      	cmp	r3, r9
 8004cfa:	eba3 0209 	sub.w	r2, r3, r9
 8004cfe:	d123      	bne.n	8004d48 <_scanf_float+0x3c0>
 8004d00:	2200      	movs	r2, #0
 8004d02:	4659      	mov	r1, fp
 8004d04:	4640      	mov	r0, r8
 8004d06:	f000 feb1 	bl	8005a6c <_strtod_r>
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	f012 0f02 	tst.w	r2, #2
 8004d12:	ec57 6b10 	vmov	r6, r7, d0
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	d021      	beq.n	8004d5e <_scanf_float+0x3d6>
 8004d1a:	9903      	ldr	r1, [sp, #12]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	600a      	str	r2, [r1, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	e9c3 6700 	strd	r6, r7, [r3]
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	60e3      	str	r3, [r4, #12]
 8004d2c:	e66d      	b.n	8004a0a <_scanf_float+0x82>
 8004d2e:	9b04      	ldr	r3, [sp, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0e5      	beq.n	8004d00 <_scanf_float+0x378>
 8004d34:	9905      	ldr	r1, [sp, #20]
 8004d36:	230a      	movs	r3, #10
 8004d38:	462a      	mov	r2, r5
 8004d3a:	3101      	adds	r1, #1
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	f000 ff1d 	bl	8005b7c <_strtol_r>
 8004d42:	9b04      	ldr	r3, [sp, #16]
 8004d44:	9e05      	ldr	r6, [sp, #20]
 8004d46:	1ac2      	subs	r2, r0, r3
 8004d48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d4c:	429e      	cmp	r6, r3
 8004d4e:	bf28      	it	cs
 8004d50:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d54:	4912      	ldr	r1, [pc, #72]	; (8004da0 <_scanf_float+0x418>)
 8004d56:	4630      	mov	r0, r6
 8004d58:	f000 f844 	bl	8004de4 <siprintf>
 8004d5c:	e7d0      	b.n	8004d00 <_scanf_float+0x378>
 8004d5e:	9903      	ldr	r1, [sp, #12]
 8004d60:	f012 0f04 	tst.w	r2, #4
 8004d64:	f103 0204 	add.w	r2, r3, #4
 8004d68:	600a      	str	r2, [r1, #0]
 8004d6a:	d1d9      	bne.n	8004d20 <_scanf_float+0x398>
 8004d6c:	f8d3 8000 	ldr.w	r8, [r3]
 8004d70:	ee10 2a10 	vmov	r2, s0
 8004d74:	ee10 0a10 	vmov	r0, s0
 8004d78:	463b      	mov	r3, r7
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb fee6 	bl	8000b4c <__aeabi_dcmpun>
 8004d80:	b128      	cbz	r0, 8004d8e <_scanf_float+0x406>
 8004d82:	4808      	ldr	r0, [pc, #32]	; (8004da4 <_scanf_float+0x41c>)
 8004d84:	f000 f828 	bl	8004dd8 <nanf>
 8004d88:	ed88 0a00 	vstr	s0, [r8]
 8004d8c:	e7cb      	b.n	8004d26 <_scanf_float+0x39e>
 8004d8e:	4630      	mov	r0, r6
 8004d90:	4639      	mov	r1, r7
 8004d92:	f7fb ff39 	bl	8000c08 <__aeabi_d2f>
 8004d96:	f8c8 0000 	str.w	r0, [r8]
 8004d9a:	e7c4      	b.n	8004d26 <_scanf_float+0x39e>
 8004d9c:	2500      	movs	r5, #0
 8004d9e:	e634      	b.n	8004a0a <_scanf_float+0x82>
 8004da0:	08008a68 	.word	0x08008a68
 8004da4:	08008ed8 	.word	0x08008ed8

08004da8 <iprintf>:
 8004da8:	b40f      	push	{r0, r1, r2, r3}
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <iprintf+0x2c>)
 8004dac:	b513      	push	{r0, r1, r4, lr}
 8004dae:	681c      	ldr	r4, [r3, #0]
 8004db0:	b124      	cbz	r4, 8004dbc <iprintf+0x14>
 8004db2:	69a3      	ldr	r3, [r4, #24]
 8004db4:	b913      	cbnz	r3, 8004dbc <iprintf+0x14>
 8004db6:	4620      	mov	r0, r4
 8004db8:	f001 fdb4 	bl	8006924 <__sinit>
 8004dbc:	ab05      	add	r3, sp, #20
 8004dbe:	9a04      	ldr	r2, [sp, #16]
 8004dc0:	68a1      	ldr	r1, [r4, #8]
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f003 f927 	bl	8008018 <_vfiprintf_r>
 8004dca:	b002      	add	sp, #8
 8004dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd0:	b004      	add	sp, #16
 8004dd2:	4770      	bx	lr
 8004dd4:	2000000c 	.word	0x2000000c

08004dd8 <nanf>:
 8004dd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004de0 <nanf+0x8>
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	7fc00000 	.word	0x7fc00000

08004de4 <siprintf>:
 8004de4:	b40e      	push	{r1, r2, r3}
 8004de6:	b500      	push	{lr}
 8004de8:	b09c      	sub	sp, #112	; 0x70
 8004dea:	ab1d      	add	r3, sp, #116	; 0x74
 8004dec:	9002      	str	r0, [sp, #8]
 8004dee:	9006      	str	r0, [sp, #24]
 8004df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004df4:	4809      	ldr	r0, [pc, #36]	; (8004e1c <siprintf+0x38>)
 8004df6:	9107      	str	r1, [sp, #28]
 8004df8:	9104      	str	r1, [sp, #16]
 8004dfa:	4909      	ldr	r1, [pc, #36]	; (8004e20 <siprintf+0x3c>)
 8004dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e00:	9105      	str	r1, [sp, #20]
 8004e02:	6800      	ldr	r0, [r0, #0]
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	a902      	add	r1, sp, #8
 8004e08:	f002 ffdc 	bl	8007dc4 <_svfiprintf_r>
 8004e0c:	9b02      	ldr	r3, [sp, #8]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	b01c      	add	sp, #112	; 0x70
 8004e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e18:	b003      	add	sp, #12
 8004e1a:	4770      	bx	lr
 8004e1c:	2000000c 	.word	0x2000000c
 8004e20:	ffff0208 	.word	0xffff0208

08004e24 <sulp>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	ec45 4b10 	vmov	d0, r4, r5
 8004e2e:	4616      	mov	r6, r2
 8004e30:	f002 fd26 	bl	8007880 <__ulp>
 8004e34:	ec51 0b10 	vmov	r0, r1, d0
 8004e38:	b17e      	cbz	r6, 8004e5a <sulp+0x36>
 8004e3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004e3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	dd09      	ble.n	8004e5a <sulp+0x36>
 8004e46:	051b      	lsls	r3, r3, #20
 8004e48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e4c:	2400      	movs	r4, #0
 8004e4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e52:	4622      	mov	r2, r4
 8004e54:	462b      	mov	r3, r5
 8004e56:	f7fb fbdf 	bl	8000618 <__aeabi_dmul>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	0000      	movs	r0, r0
	...

08004e60 <_strtod_l>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	ed2d 8b02 	vpush	{d8}
 8004e68:	b09d      	sub	sp, #116	; 0x74
 8004e6a:	461f      	mov	r7, r3
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9318      	str	r3, [sp, #96]	; 0x60
 8004e70:	4ba2      	ldr	r3, [pc, #648]	; (80050fc <_strtod_l+0x29c>)
 8004e72:	9213      	str	r2, [sp, #76]	; 0x4c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	4604      	mov	r4, r0
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	4688      	mov	r8, r1
 8004e7e:	f7fb f9b7 	bl	80001f0 <strlen>
 8004e82:	f04f 0a00 	mov.w	sl, #0
 8004e86:	4605      	mov	r5, r0
 8004e88:	f04f 0b00 	mov.w	fp, #0
 8004e8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	2a2b      	cmp	r2, #43	; 0x2b
 8004e96:	d04e      	beq.n	8004f36 <_strtod_l+0xd6>
 8004e98:	d83b      	bhi.n	8004f12 <_strtod_l+0xb2>
 8004e9a:	2a0d      	cmp	r2, #13
 8004e9c:	d834      	bhi.n	8004f08 <_strtod_l+0xa8>
 8004e9e:	2a08      	cmp	r2, #8
 8004ea0:	d834      	bhi.n	8004f0c <_strtod_l+0xac>
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	d03e      	beq.n	8004f24 <_strtod_l+0xc4>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8004eaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004eac:	7833      	ldrb	r3, [r6, #0]
 8004eae:	2b30      	cmp	r3, #48	; 0x30
 8004eb0:	f040 80b0 	bne.w	8005014 <_strtod_l+0x1b4>
 8004eb4:	7873      	ldrb	r3, [r6, #1]
 8004eb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004eba:	2b58      	cmp	r3, #88	; 0x58
 8004ebc:	d168      	bne.n	8004f90 <_strtod_l+0x130>
 8004ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	ab18      	add	r3, sp, #96	; 0x60
 8004ec4:	9702      	str	r7, [sp, #8]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4a8d      	ldr	r2, [pc, #564]	; (8005100 <_strtod_l+0x2a0>)
 8004eca:	ab19      	add	r3, sp, #100	; 0x64
 8004ecc:	a917      	add	r1, sp, #92	; 0x5c
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f001 fe2c 	bl	8006b2c <__gethex>
 8004ed4:	f010 0707 	ands.w	r7, r0, #7
 8004ed8:	4605      	mov	r5, r0
 8004eda:	d005      	beq.n	8004ee8 <_strtod_l+0x88>
 8004edc:	2f06      	cmp	r7, #6
 8004ede:	d12c      	bne.n	8004f3a <_strtod_l+0xda>
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9617      	str	r6, [sp, #92]	; 0x5c
 8004ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 8590 	bne.w	8005a10 <_strtod_l+0xbb0>
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef2:	b1eb      	cbz	r3, 8004f30 <_strtod_l+0xd0>
 8004ef4:	4652      	mov	r2, sl
 8004ef6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004efa:	ec43 2b10 	vmov	d0, r2, r3
 8004efe:	b01d      	add	sp, #116	; 0x74
 8004f00:	ecbd 8b02 	vpop	{d8}
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	2a20      	cmp	r2, #32
 8004f0a:	d1cc      	bne.n	8004ea6 <_strtod_l+0x46>
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f10:	e7be      	b.n	8004e90 <_strtod_l+0x30>
 8004f12:	2a2d      	cmp	r2, #45	; 0x2d
 8004f14:	d1c7      	bne.n	8004ea6 <_strtod_l+0x46>
 8004f16:	2201      	movs	r2, #1
 8004f18:	920a      	str	r2, [sp, #40]	; 0x28
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1c2      	bne.n	8004eaa <_strtod_l+0x4a>
 8004f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 856e 	bne.w	8005a0c <_strtod_l+0xbac>
 8004f30:	4652      	mov	r2, sl
 8004f32:	465b      	mov	r3, fp
 8004f34:	e7e1      	b.n	8004efa <_strtod_l+0x9a>
 8004f36:	2200      	movs	r2, #0
 8004f38:	e7ee      	b.n	8004f18 <_strtod_l+0xb8>
 8004f3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004f3c:	b13a      	cbz	r2, 8004f4e <_strtod_l+0xee>
 8004f3e:	2135      	movs	r1, #53	; 0x35
 8004f40:	a81a      	add	r0, sp, #104	; 0x68
 8004f42:	f002 fda8 	bl	8007a96 <__copybits>
 8004f46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f002 f967 	bl	800721c <_Bfree>
 8004f4e:	3f01      	subs	r7, #1
 8004f50:	2f04      	cmp	r7, #4
 8004f52:	d806      	bhi.n	8004f62 <_strtod_l+0x102>
 8004f54:	e8df f007 	tbb	[pc, r7]
 8004f58:	1714030a 	.word	0x1714030a
 8004f5c:	0a          	.byte	0x0a
 8004f5d:	00          	.byte	0x00
 8004f5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004f62:	0728      	lsls	r0, r5, #28
 8004f64:	d5c0      	bpl.n	8004ee8 <_strtod_l+0x88>
 8004f66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004f6a:	e7bd      	b.n	8004ee8 <_strtod_l+0x88>
 8004f6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004f70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004f7e:	e7f0      	b.n	8004f62 <_strtod_l+0x102>
 8004f80:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005104 <_strtod_l+0x2a4>
 8004f84:	e7ed      	b.n	8004f62 <_strtod_l+0x102>
 8004f86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004f8a:	f04f 3aff 	mov.w	sl, #4294967295
 8004f8e:	e7e8      	b.n	8004f62 <_strtod_l+0x102>
 8004f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	9217      	str	r2, [sp, #92]	; 0x5c
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d0f9      	beq.n	8004f90 <_strtod_l+0x130>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0a3      	beq.n	8004ee8 <_strtod_l+0x88>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f04f 0900 	mov.w	r9, #0
 8004fa6:	9304      	str	r3, [sp, #16]
 8004fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004faa:	9308      	str	r3, [sp, #32]
 8004fac:	f8cd 901c 	str.w	r9, [sp, #28]
 8004fb0:	464f      	mov	r7, r9
 8004fb2:	220a      	movs	r2, #10
 8004fb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004fb6:	7806      	ldrb	r6, [r0, #0]
 8004fb8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004fbc:	b2d9      	uxtb	r1, r3
 8004fbe:	2909      	cmp	r1, #9
 8004fc0:	d92a      	bls.n	8005018 <_strtod_l+0x1b8>
 8004fc2:	9905      	ldr	r1, [sp, #20]
 8004fc4:	462a      	mov	r2, r5
 8004fc6:	f003 f9b2 	bl	800832e <strncmp>
 8004fca:	b398      	cbz	r0, 8005034 <_strtod_l+0x1d4>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	4632      	mov	r2, r6
 8004fd0:	463d      	mov	r5, r7
 8004fd2:	9005      	str	r0, [sp, #20]
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2a65      	cmp	r2, #101	; 0x65
 8004fd8:	d001      	beq.n	8004fde <_strtod_l+0x17e>
 8004fda:	2a45      	cmp	r2, #69	; 0x45
 8004fdc:	d118      	bne.n	8005010 <_strtod_l+0x1b0>
 8004fde:	b91d      	cbnz	r5, 8004fe8 <_strtod_l+0x188>
 8004fe0:	9a04      	ldr	r2, [sp, #16]
 8004fe2:	4302      	orrs	r2, r0
 8004fe4:	d09e      	beq.n	8004f24 <_strtod_l+0xc4>
 8004fe6:	2500      	movs	r5, #0
 8004fe8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004fec:	f108 0201 	add.w	r2, r8, #1
 8004ff0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ff2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004ff6:	2a2b      	cmp	r2, #43	; 0x2b
 8004ff8:	d075      	beq.n	80050e6 <_strtod_l+0x286>
 8004ffa:	2a2d      	cmp	r2, #45	; 0x2d
 8004ffc:	d07b      	beq.n	80050f6 <_strtod_l+0x296>
 8004ffe:	f04f 0c00 	mov.w	ip, #0
 8005002:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005006:	2909      	cmp	r1, #9
 8005008:	f240 8082 	bls.w	8005110 <_strtod_l+0x2b0>
 800500c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005010:	2600      	movs	r6, #0
 8005012:	e09d      	b.n	8005150 <_strtod_l+0x2f0>
 8005014:	2300      	movs	r3, #0
 8005016:	e7c4      	b.n	8004fa2 <_strtod_l+0x142>
 8005018:	2f08      	cmp	r7, #8
 800501a:	bfd8      	it	le
 800501c:	9907      	ldrle	r1, [sp, #28]
 800501e:	f100 0001 	add.w	r0, r0, #1
 8005022:	bfda      	itte	le
 8005024:	fb02 3301 	mlale	r3, r2, r1, r3
 8005028:	9307      	strle	r3, [sp, #28]
 800502a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800502e:	3701      	adds	r7, #1
 8005030:	9017      	str	r0, [sp, #92]	; 0x5c
 8005032:	e7bf      	b.n	8004fb4 <_strtod_l+0x154>
 8005034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005036:	195a      	adds	r2, r3, r5
 8005038:	9217      	str	r2, [sp, #92]	; 0x5c
 800503a:	5d5a      	ldrb	r2, [r3, r5]
 800503c:	2f00      	cmp	r7, #0
 800503e:	d037      	beq.n	80050b0 <_strtod_l+0x250>
 8005040:	9005      	str	r0, [sp, #20]
 8005042:	463d      	mov	r5, r7
 8005044:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005048:	2b09      	cmp	r3, #9
 800504a:	d912      	bls.n	8005072 <_strtod_l+0x212>
 800504c:	2301      	movs	r3, #1
 800504e:	e7c2      	b.n	8004fd6 <_strtod_l+0x176>
 8005050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	9217      	str	r2, [sp, #92]	; 0x5c
 8005056:	785a      	ldrb	r2, [r3, #1]
 8005058:	3001      	adds	r0, #1
 800505a:	2a30      	cmp	r2, #48	; 0x30
 800505c:	d0f8      	beq.n	8005050 <_strtod_l+0x1f0>
 800505e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005062:	2b08      	cmp	r3, #8
 8005064:	f200 84d9 	bhi.w	8005a1a <_strtod_l+0xbba>
 8005068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800506a:	9005      	str	r0, [sp, #20]
 800506c:	2000      	movs	r0, #0
 800506e:	9308      	str	r3, [sp, #32]
 8005070:	4605      	mov	r5, r0
 8005072:	3a30      	subs	r2, #48	; 0x30
 8005074:	f100 0301 	add.w	r3, r0, #1
 8005078:	d014      	beq.n	80050a4 <_strtod_l+0x244>
 800507a:	9905      	ldr	r1, [sp, #20]
 800507c:	4419      	add	r1, r3
 800507e:	9105      	str	r1, [sp, #20]
 8005080:	462b      	mov	r3, r5
 8005082:	eb00 0e05 	add.w	lr, r0, r5
 8005086:	210a      	movs	r1, #10
 8005088:	4573      	cmp	r3, lr
 800508a:	d113      	bne.n	80050b4 <_strtod_l+0x254>
 800508c:	182b      	adds	r3, r5, r0
 800508e:	2b08      	cmp	r3, #8
 8005090:	f105 0501 	add.w	r5, r5, #1
 8005094:	4405      	add	r5, r0
 8005096:	dc1c      	bgt.n	80050d2 <_strtod_l+0x272>
 8005098:	9907      	ldr	r1, [sp, #28]
 800509a:	230a      	movs	r3, #10
 800509c:	fb03 2301 	mla	r3, r3, r1, r2
 80050a0:	9307      	str	r3, [sp, #28]
 80050a2:	2300      	movs	r3, #0
 80050a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80050a6:	1c51      	adds	r1, r2, #1
 80050a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80050aa:	7852      	ldrb	r2, [r2, #1]
 80050ac:	4618      	mov	r0, r3
 80050ae:	e7c9      	b.n	8005044 <_strtod_l+0x1e4>
 80050b0:	4638      	mov	r0, r7
 80050b2:	e7d2      	b.n	800505a <_strtod_l+0x1fa>
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	dc04      	bgt.n	80050c2 <_strtod_l+0x262>
 80050b8:	9e07      	ldr	r6, [sp, #28]
 80050ba:	434e      	muls	r6, r1
 80050bc:	9607      	str	r6, [sp, #28]
 80050be:	3301      	adds	r3, #1
 80050c0:	e7e2      	b.n	8005088 <_strtod_l+0x228>
 80050c2:	f103 0c01 	add.w	ip, r3, #1
 80050c6:	f1bc 0f10 	cmp.w	ip, #16
 80050ca:	bfd8      	it	le
 80050cc:	fb01 f909 	mulle.w	r9, r1, r9
 80050d0:	e7f5      	b.n	80050be <_strtod_l+0x25e>
 80050d2:	2d10      	cmp	r5, #16
 80050d4:	bfdc      	itt	le
 80050d6:	230a      	movle	r3, #10
 80050d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80050dc:	e7e1      	b.n	80050a2 <_strtod_l+0x242>
 80050de:	2300      	movs	r3, #0
 80050e0:	9305      	str	r3, [sp, #20]
 80050e2:	2301      	movs	r3, #1
 80050e4:	e77c      	b.n	8004fe0 <_strtod_l+0x180>
 80050e6:	f04f 0c00 	mov.w	ip, #0
 80050ea:	f108 0202 	add.w	r2, r8, #2
 80050ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80050f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80050f4:	e785      	b.n	8005002 <_strtod_l+0x1a2>
 80050f6:	f04f 0c01 	mov.w	ip, #1
 80050fa:	e7f6      	b.n	80050ea <_strtod_l+0x28a>
 80050fc:	08008d1c 	.word	0x08008d1c
 8005100:	08008a70 	.word	0x08008a70
 8005104:	7ff00000 	.word	0x7ff00000
 8005108:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800510a:	1c51      	adds	r1, r2, #1
 800510c:	9117      	str	r1, [sp, #92]	; 0x5c
 800510e:	7852      	ldrb	r2, [r2, #1]
 8005110:	2a30      	cmp	r2, #48	; 0x30
 8005112:	d0f9      	beq.n	8005108 <_strtod_l+0x2a8>
 8005114:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005118:	2908      	cmp	r1, #8
 800511a:	f63f af79 	bhi.w	8005010 <_strtod_l+0x1b0>
 800511e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005122:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005124:	9206      	str	r2, [sp, #24]
 8005126:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005128:	1c51      	adds	r1, r2, #1
 800512a:	9117      	str	r1, [sp, #92]	; 0x5c
 800512c:	7852      	ldrb	r2, [r2, #1]
 800512e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005132:	2e09      	cmp	r6, #9
 8005134:	d937      	bls.n	80051a6 <_strtod_l+0x346>
 8005136:	9e06      	ldr	r6, [sp, #24]
 8005138:	1b89      	subs	r1, r1, r6
 800513a:	2908      	cmp	r1, #8
 800513c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005140:	dc02      	bgt.n	8005148 <_strtod_l+0x2e8>
 8005142:	4576      	cmp	r6, lr
 8005144:	bfa8      	it	ge
 8005146:	4676      	movge	r6, lr
 8005148:	f1bc 0f00 	cmp.w	ip, #0
 800514c:	d000      	beq.n	8005150 <_strtod_l+0x2f0>
 800514e:	4276      	negs	r6, r6
 8005150:	2d00      	cmp	r5, #0
 8005152:	d14d      	bne.n	80051f0 <_strtod_l+0x390>
 8005154:	9904      	ldr	r1, [sp, #16]
 8005156:	4301      	orrs	r1, r0
 8005158:	f47f aec6 	bne.w	8004ee8 <_strtod_l+0x88>
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f aee1 	bne.w	8004f24 <_strtod_l+0xc4>
 8005162:	2a69      	cmp	r2, #105	; 0x69
 8005164:	d027      	beq.n	80051b6 <_strtod_l+0x356>
 8005166:	dc24      	bgt.n	80051b2 <_strtod_l+0x352>
 8005168:	2a49      	cmp	r2, #73	; 0x49
 800516a:	d024      	beq.n	80051b6 <_strtod_l+0x356>
 800516c:	2a4e      	cmp	r2, #78	; 0x4e
 800516e:	f47f aed9 	bne.w	8004f24 <_strtod_l+0xc4>
 8005172:	499f      	ldr	r1, [pc, #636]	; (80053f0 <_strtod_l+0x590>)
 8005174:	a817      	add	r0, sp, #92	; 0x5c
 8005176:	f001 ff31 	bl	8006fdc <__match>
 800517a:	2800      	cmp	r0, #0
 800517c:	f43f aed2 	beq.w	8004f24 <_strtod_l+0xc4>
 8005180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b28      	cmp	r3, #40	; 0x28
 8005186:	d12d      	bne.n	80051e4 <_strtod_l+0x384>
 8005188:	499a      	ldr	r1, [pc, #616]	; (80053f4 <_strtod_l+0x594>)
 800518a:	aa1a      	add	r2, sp, #104	; 0x68
 800518c:	a817      	add	r0, sp, #92	; 0x5c
 800518e:	f001 ff39 	bl	8007004 <__hexnan>
 8005192:	2805      	cmp	r0, #5
 8005194:	d126      	bne.n	80051e4 <_strtod_l+0x384>
 8005196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005198:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800519c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80051a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80051a4:	e6a0      	b.n	8004ee8 <_strtod_l+0x88>
 80051a6:	210a      	movs	r1, #10
 80051a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80051ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80051b0:	e7b9      	b.n	8005126 <_strtod_l+0x2c6>
 80051b2:	2a6e      	cmp	r2, #110	; 0x6e
 80051b4:	e7db      	b.n	800516e <_strtod_l+0x30e>
 80051b6:	4990      	ldr	r1, [pc, #576]	; (80053f8 <_strtod_l+0x598>)
 80051b8:	a817      	add	r0, sp, #92	; 0x5c
 80051ba:	f001 ff0f 	bl	8006fdc <__match>
 80051be:	2800      	cmp	r0, #0
 80051c0:	f43f aeb0 	beq.w	8004f24 <_strtod_l+0xc4>
 80051c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051c6:	498d      	ldr	r1, [pc, #564]	; (80053fc <_strtod_l+0x59c>)
 80051c8:	3b01      	subs	r3, #1
 80051ca:	a817      	add	r0, sp, #92	; 0x5c
 80051cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80051ce:	f001 ff05 	bl	8006fdc <__match>
 80051d2:	b910      	cbnz	r0, 80051da <_strtod_l+0x37a>
 80051d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051d6:	3301      	adds	r3, #1
 80051d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80051da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800540c <_strtod_l+0x5ac>
 80051de:	f04f 0a00 	mov.w	sl, #0
 80051e2:	e681      	b.n	8004ee8 <_strtod_l+0x88>
 80051e4:	4886      	ldr	r0, [pc, #536]	; (8005400 <_strtod_l+0x5a0>)
 80051e6:	f003 f847 	bl	8008278 <nan>
 80051ea:	ec5b ab10 	vmov	sl, fp, d0
 80051ee:	e67b      	b.n	8004ee8 <_strtod_l+0x88>
 80051f0:	9b05      	ldr	r3, [sp, #20]
 80051f2:	9807      	ldr	r0, [sp, #28]
 80051f4:	1af3      	subs	r3, r6, r3
 80051f6:	2f00      	cmp	r7, #0
 80051f8:	bf08      	it	eq
 80051fa:	462f      	moveq	r7, r5
 80051fc:	2d10      	cmp	r5, #16
 80051fe:	9306      	str	r3, [sp, #24]
 8005200:	46a8      	mov	r8, r5
 8005202:	bfa8      	it	ge
 8005204:	f04f 0810 	movge.w	r8, #16
 8005208:	f7fb f98c 	bl	8000524 <__aeabi_ui2d>
 800520c:	2d09      	cmp	r5, #9
 800520e:	4682      	mov	sl, r0
 8005210:	468b      	mov	fp, r1
 8005212:	dd13      	ble.n	800523c <_strtod_l+0x3dc>
 8005214:	4b7b      	ldr	r3, [pc, #492]	; (8005404 <_strtod_l+0x5a4>)
 8005216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800521a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800521e:	f7fb f9fb 	bl	8000618 <__aeabi_dmul>
 8005222:	4682      	mov	sl, r0
 8005224:	4648      	mov	r0, r9
 8005226:	468b      	mov	fp, r1
 8005228:	f7fb f97c 	bl	8000524 <__aeabi_ui2d>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	f7fb f83a 	bl	80002ac <__adddf3>
 8005238:	4682      	mov	sl, r0
 800523a:	468b      	mov	fp, r1
 800523c:	2d0f      	cmp	r5, #15
 800523e:	dc38      	bgt.n	80052b2 <_strtod_l+0x452>
 8005240:	9b06      	ldr	r3, [sp, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	f43f ae50 	beq.w	8004ee8 <_strtod_l+0x88>
 8005248:	dd24      	ble.n	8005294 <_strtod_l+0x434>
 800524a:	2b16      	cmp	r3, #22
 800524c:	dc0b      	bgt.n	8005266 <_strtod_l+0x406>
 800524e:	496d      	ldr	r1, [pc, #436]	; (8005404 <_strtod_l+0x5a4>)
 8005250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005258:	4652      	mov	r2, sl
 800525a:	465b      	mov	r3, fp
 800525c:	f7fb f9dc 	bl	8000618 <__aeabi_dmul>
 8005260:	4682      	mov	sl, r0
 8005262:	468b      	mov	fp, r1
 8005264:	e640      	b.n	8004ee8 <_strtod_l+0x88>
 8005266:	9a06      	ldr	r2, [sp, #24]
 8005268:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800526c:	4293      	cmp	r3, r2
 800526e:	db20      	blt.n	80052b2 <_strtod_l+0x452>
 8005270:	4c64      	ldr	r4, [pc, #400]	; (8005404 <_strtod_l+0x5a4>)
 8005272:	f1c5 050f 	rsb	r5, r5, #15
 8005276:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800527a:	4652      	mov	r2, sl
 800527c:	465b      	mov	r3, fp
 800527e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005282:	f7fb f9c9 	bl	8000618 <__aeabi_dmul>
 8005286:	9b06      	ldr	r3, [sp, #24]
 8005288:	1b5d      	subs	r5, r3, r5
 800528a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800528e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005292:	e7e3      	b.n	800525c <_strtod_l+0x3fc>
 8005294:	9b06      	ldr	r3, [sp, #24]
 8005296:	3316      	adds	r3, #22
 8005298:	db0b      	blt.n	80052b2 <_strtod_l+0x452>
 800529a:	9b05      	ldr	r3, [sp, #20]
 800529c:	1b9e      	subs	r6, r3, r6
 800529e:	4b59      	ldr	r3, [pc, #356]	; (8005404 <_strtod_l+0x5a4>)
 80052a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80052a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052a8:	4650      	mov	r0, sl
 80052aa:	4659      	mov	r1, fp
 80052ac:	f7fb fade 	bl	800086c <__aeabi_ddiv>
 80052b0:	e7d6      	b.n	8005260 <_strtod_l+0x400>
 80052b2:	9b06      	ldr	r3, [sp, #24]
 80052b4:	eba5 0808 	sub.w	r8, r5, r8
 80052b8:	4498      	add	r8, r3
 80052ba:	f1b8 0f00 	cmp.w	r8, #0
 80052be:	dd74      	ble.n	80053aa <_strtod_l+0x54a>
 80052c0:	f018 030f 	ands.w	r3, r8, #15
 80052c4:	d00a      	beq.n	80052dc <_strtod_l+0x47c>
 80052c6:	494f      	ldr	r1, [pc, #316]	; (8005404 <_strtod_l+0x5a4>)
 80052c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052cc:	4652      	mov	r2, sl
 80052ce:	465b      	mov	r3, fp
 80052d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d4:	f7fb f9a0 	bl	8000618 <__aeabi_dmul>
 80052d8:	4682      	mov	sl, r0
 80052da:	468b      	mov	fp, r1
 80052dc:	f038 080f 	bics.w	r8, r8, #15
 80052e0:	d04f      	beq.n	8005382 <_strtod_l+0x522>
 80052e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80052e6:	dd22      	ble.n	800532e <_strtod_l+0x4ce>
 80052e8:	2500      	movs	r5, #0
 80052ea:	462e      	mov	r6, r5
 80052ec:	9507      	str	r5, [sp, #28]
 80052ee:	9505      	str	r5, [sp, #20]
 80052f0:	2322      	movs	r3, #34	; 0x22
 80052f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800540c <_strtod_l+0x5ac>
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	f04f 0a00 	mov.w	sl, #0
 80052fc:	9b07      	ldr	r3, [sp, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f43f adf2 	beq.w	8004ee8 <_strtod_l+0x88>
 8005304:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005306:	4620      	mov	r0, r4
 8005308:	f001 ff88 	bl	800721c <_Bfree>
 800530c:	9905      	ldr	r1, [sp, #20]
 800530e:	4620      	mov	r0, r4
 8005310:	f001 ff84 	bl	800721c <_Bfree>
 8005314:	4631      	mov	r1, r6
 8005316:	4620      	mov	r0, r4
 8005318:	f001 ff80 	bl	800721c <_Bfree>
 800531c:	9907      	ldr	r1, [sp, #28]
 800531e:	4620      	mov	r0, r4
 8005320:	f001 ff7c 	bl	800721c <_Bfree>
 8005324:	4629      	mov	r1, r5
 8005326:	4620      	mov	r0, r4
 8005328:	f001 ff78 	bl	800721c <_Bfree>
 800532c:	e5dc      	b.n	8004ee8 <_strtod_l+0x88>
 800532e:	4b36      	ldr	r3, [pc, #216]	; (8005408 <_strtod_l+0x5a8>)
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	2300      	movs	r3, #0
 8005334:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005338:	4650      	mov	r0, sl
 800533a:	4659      	mov	r1, fp
 800533c:	4699      	mov	r9, r3
 800533e:	f1b8 0f01 	cmp.w	r8, #1
 8005342:	dc21      	bgt.n	8005388 <_strtod_l+0x528>
 8005344:	b10b      	cbz	r3, 800534a <_strtod_l+0x4ea>
 8005346:	4682      	mov	sl, r0
 8005348:	468b      	mov	fp, r1
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <_strtod_l+0x5a8>)
 800534c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005350:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005354:	4652      	mov	r2, sl
 8005356:	465b      	mov	r3, fp
 8005358:	e9d9 0100 	ldrd	r0, r1, [r9]
 800535c:	f7fb f95c 	bl	8000618 <__aeabi_dmul>
 8005360:	4b2a      	ldr	r3, [pc, #168]	; (800540c <_strtod_l+0x5ac>)
 8005362:	460a      	mov	r2, r1
 8005364:	400b      	ands	r3, r1
 8005366:	492a      	ldr	r1, [pc, #168]	; (8005410 <_strtod_l+0x5b0>)
 8005368:	428b      	cmp	r3, r1
 800536a:	4682      	mov	sl, r0
 800536c:	d8bc      	bhi.n	80052e8 <_strtod_l+0x488>
 800536e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005372:	428b      	cmp	r3, r1
 8005374:	bf86      	itte	hi
 8005376:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005414 <_strtod_l+0x5b4>
 800537a:	f04f 3aff 	movhi.w	sl, #4294967295
 800537e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005382:	2300      	movs	r3, #0
 8005384:	9304      	str	r3, [sp, #16]
 8005386:	e084      	b.n	8005492 <_strtod_l+0x632>
 8005388:	f018 0f01 	tst.w	r8, #1
 800538c:	d005      	beq.n	800539a <_strtod_l+0x53a>
 800538e:	9b04      	ldr	r3, [sp, #16]
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f7fb f940 	bl	8000618 <__aeabi_dmul>
 8005398:	2301      	movs	r3, #1
 800539a:	9a04      	ldr	r2, [sp, #16]
 800539c:	3208      	adds	r2, #8
 800539e:	f109 0901 	add.w	r9, r9, #1
 80053a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80053a6:	9204      	str	r2, [sp, #16]
 80053a8:	e7c9      	b.n	800533e <_strtod_l+0x4de>
 80053aa:	d0ea      	beq.n	8005382 <_strtod_l+0x522>
 80053ac:	f1c8 0800 	rsb	r8, r8, #0
 80053b0:	f018 020f 	ands.w	r2, r8, #15
 80053b4:	d00a      	beq.n	80053cc <_strtod_l+0x56c>
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <_strtod_l+0x5a4>)
 80053b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053bc:	4650      	mov	r0, sl
 80053be:	4659      	mov	r1, fp
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fb fa52 	bl	800086c <__aeabi_ddiv>
 80053c8:	4682      	mov	sl, r0
 80053ca:	468b      	mov	fp, r1
 80053cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80053d0:	d0d7      	beq.n	8005382 <_strtod_l+0x522>
 80053d2:	f1b8 0f1f 	cmp.w	r8, #31
 80053d6:	dd1f      	ble.n	8005418 <_strtod_l+0x5b8>
 80053d8:	2500      	movs	r5, #0
 80053da:	462e      	mov	r6, r5
 80053dc:	9507      	str	r5, [sp, #28]
 80053de:	9505      	str	r5, [sp, #20]
 80053e0:	2322      	movs	r3, #34	; 0x22
 80053e2:	f04f 0a00 	mov.w	sl, #0
 80053e6:	f04f 0b00 	mov.w	fp, #0
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	e786      	b.n	80052fc <_strtod_l+0x49c>
 80053ee:	bf00      	nop
 80053f0:	08008a41 	.word	0x08008a41
 80053f4:	08008a84 	.word	0x08008a84
 80053f8:	08008a39 	.word	0x08008a39
 80053fc:	08008bc4 	.word	0x08008bc4
 8005400:	08008ed8 	.word	0x08008ed8
 8005404:	08008db8 	.word	0x08008db8
 8005408:	08008d90 	.word	0x08008d90
 800540c:	7ff00000 	.word	0x7ff00000
 8005410:	7ca00000 	.word	0x7ca00000
 8005414:	7fefffff 	.word	0x7fefffff
 8005418:	f018 0310 	ands.w	r3, r8, #16
 800541c:	bf18      	it	ne
 800541e:	236a      	movne	r3, #106	; 0x6a
 8005420:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80057d0 <_strtod_l+0x970>
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	4650      	mov	r0, sl
 8005428:	4659      	mov	r1, fp
 800542a:	2300      	movs	r3, #0
 800542c:	f018 0f01 	tst.w	r8, #1
 8005430:	d004      	beq.n	800543c <_strtod_l+0x5dc>
 8005432:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005436:	f7fb f8ef 	bl	8000618 <__aeabi_dmul>
 800543a:	2301      	movs	r3, #1
 800543c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005440:	f109 0908 	add.w	r9, r9, #8
 8005444:	d1f2      	bne.n	800542c <_strtod_l+0x5cc>
 8005446:	b10b      	cbz	r3, 800544c <_strtod_l+0x5ec>
 8005448:	4682      	mov	sl, r0
 800544a:	468b      	mov	fp, r1
 800544c:	9b04      	ldr	r3, [sp, #16]
 800544e:	b1c3      	cbz	r3, 8005482 <_strtod_l+0x622>
 8005450:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005454:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005458:	2b00      	cmp	r3, #0
 800545a:	4659      	mov	r1, fp
 800545c:	dd11      	ble.n	8005482 <_strtod_l+0x622>
 800545e:	2b1f      	cmp	r3, #31
 8005460:	f340 8124 	ble.w	80056ac <_strtod_l+0x84c>
 8005464:	2b34      	cmp	r3, #52	; 0x34
 8005466:	bfde      	ittt	le
 8005468:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800546c:	f04f 33ff 	movle.w	r3, #4294967295
 8005470:	fa03 f202 	lslle.w	r2, r3, r2
 8005474:	f04f 0a00 	mov.w	sl, #0
 8005478:	bfcc      	ite	gt
 800547a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800547e:	ea02 0b01 	andle.w	fp, r2, r1
 8005482:	2200      	movs	r2, #0
 8005484:	2300      	movs	r3, #0
 8005486:	4650      	mov	r0, sl
 8005488:	4659      	mov	r1, fp
 800548a:	f7fb fb2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800548e:	2800      	cmp	r0, #0
 8005490:	d1a2      	bne.n	80053d8 <_strtod_l+0x578>
 8005492:	9b07      	ldr	r3, [sp, #28]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	9908      	ldr	r1, [sp, #32]
 8005498:	462b      	mov	r3, r5
 800549a:	463a      	mov	r2, r7
 800549c:	4620      	mov	r0, r4
 800549e:	f001 ff25 	bl	80072ec <__s2b>
 80054a2:	9007      	str	r0, [sp, #28]
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f43f af1f 	beq.w	80052e8 <_strtod_l+0x488>
 80054aa:	9b05      	ldr	r3, [sp, #20]
 80054ac:	1b9e      	subs	r6, r3, r6
 80054ae:	9b06      	ldr	r3, [sp, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bfb4      	ite	lt
 80054b4:	4633      	movlt	r3, r6
 80054b6:	2300      	movge	r3, #0
 80054b8:	930c      	str	r3, [sp, #48]	; 0x30
 80054ba:	9b06      	ldr	r3, [sp, #24]
 80054bc:	2500      	movs	r5, #0
 80054be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80054c2:	9312      	str	r3, [sp, #72]	; 0x48
 80054c4:	462e      	mov	r6, r5
 80054c6:	9b07      	ldr	r3, [sp, #28]
 80054c8:	4620      	mov	r0, r4
 80054ca:	6859      	ldr	r1, [r3, #4]
 80054cc:	f001 fe66 	bl	800719c <_Balloc>
 80054d0:	9005      	str	r0, [sp, #20]
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f43f af0c 	beq.w	80052f0 <_strtod_l+0x490>
 80054d8:	9b07      	ldr	r3, [sp, #28]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	3202      	adds	r2, #2
 80054de:	f103 010c 	add.w	r1, r3, #12
 80054e2:	0092      	lsls	r2, r2, #2
 80054e4:	300c      	adds	r0, #12
 80054e6:	f001 fe4b 	bl	8007180 <memcpy>
 80054ea:	ec4b ab10 	vmov	d0, sl, fp
 80054ee:	aa1a      	add	r2, sp, #104	; 0x68
 80054f0:	a919      	add	r1, sp, #100	; 0x64
 80054f2:	4620      	mov	r0, r4
 80054f4:	f002 fa40 	bl	8007978 <__d2b>
 80054f8:	ec4b ab18 	vmov	d8, sl, fp
 80054fc:	9018      	str	r0, [sp, #96]	; 0x60
 80054fe:	2800      	cmp	r0, #0
 8005500:	f43f aef6 	beq.w	80052f0 <_strtod_l+0x490>
 8005504:	2101      	movs	r1, #1
 8005506:	4620      	mov	r0, r4
 8005508:	f001 ff8a 	bl	8007420 <__i2b>
 800550c:	4606      	mov	r6, r0
 800550e:	2800      	cmp	r0, #0
 8005510:	f43f aeee 	beq.w	80052f0 <_strtod_l+0x490>
 8005514:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005516:	9904      	ldr	r1, [sp, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	bfab      	itete	ge
 800551c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800551e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005520:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005522:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005526:	bfac      	ite	ge
 8005528:	eb03 0902 	addge.w	r9, r3, r2
 800552c:	1ad7      	sublt	r7, r2, r3
 800552e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005530:	eba3 0801 	sub.w	r8, r3, r1
 8005534:	4490      	add	r8, r2
 8005536:	4ba1      	ldr	r3, [pc, #644]	; (80057bc <_strtod_l+0x95c>)
 8005538:	f108 38ff 	add.w	r8, r8, #4294967295
 800553c:	4598      	cmp	r8, r3
 800553e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005542:	f280 80c7 	bge.w	80056d4 <_strtod_l+0x874>
 8005546:	eba3 0308 	sub.w	r3, r3, r8
 800554a:	2b1f      	cmp	r3, #31
 800554c:	eba2 0203 	sub.w	r2, r2, r3
 8005550:	f04f 0101 	mov.w	r1, #1
 8005554:	f300 80b1 	bgt.w	80056ba <_strtod_l+0x85a>
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	930d      	str	r3, [sp, #52]	; 0x34
 800555e:	2300      	movs	r3, #0
 8005560:	9308      	str	r3, [sp, #32]
 8005562:	eb09 0802 	add.w	r8, r9, r2
 8005566:	9b04      	ldr	r3, [sp, #16]
 8005568:	45c1      	cmp	r9, r8
 800556a:	4417      	add	r7, r2
 800556c:	441f      	add	r7, r3
 800556e:	464b      	mov	r3, r9
 8005570:	bfa8      	it	ge
 8005572:	4643      	movge	r3, r8
 8005574:	42bb      	cmp	r3, r7
 8005576:	bfa8      	it	ge
 8005578:	463b      	movge	r3, r7
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfc2      	ittt	gt
 800557e:	eba8 0803 	subgt.w	r8, r8, r3
 8005582:	1aff      	subgt	r7, r7, r3
 8005584:	eba9 0903 	subgt.w	r9, r9, r3
 8005588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800558a:	2b00      	cmp	r3, #0
 800558c:	dd17      	ble.n	80055be <_strtod_l+0x75e>
 800558e:	4631      	mov	r1, r6
 8005590:	461a      	mov	r2, r3
 8005592:	4620      	mov	r0, r4
 8005594:	f002 f804 	bl	80075a0 <__pow5mult>
 8005598:	4606      	mov	r6, r0
 800559a:	2800      	cmp	r0, #0
 800559c:	f43f aea8 	beq.w	80052f0 <_strtod_l+0x490>
 80055a0:	4601      	mov	r1, r0
 80055a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80055a4:	4620      	mov	r0, r4
 80055a6:	f001 ff51 	bl	800744c <__multiply>
 80055aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80055ac:	2800      	cmp	r0, #0
 80055ae:	f43f ae9f 	beq.w	80052f0 <_strtod_l+0x490>
 80055b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80055b4:	4620      	mov	r0, r4
 80055b6:	f001 fe31 	bl	800721c <_Bfree>
 80055ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055bc:	9318      	str	r3, [sp, #96]	; 0x60
 80055be:	f1b8 0f00 	cmp.w	r8, #0
 80055c2:	f300 808c 	bgt.w	80056de <_strtod_l+0x87e>
 80055c6:	9b06      	ldr	r3, [sp, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	dd08      	ble.n	80055de <_strtod_l+0x77e>
 80055cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055ce:	9905      	ldr	r1, [sp, #20]
 80055d0:	4620      	mov	r0, r4
 80055d2:	f001 ffe5 	bl	80075a0 <__pow5mult>
 80055d6:	9005      	str	r0, [sp, #20]
 80055d8:	2800      	cmp	r0, #0
 80055da:	f43f ae89 	beq.w	80052f0 <_strtod_l+0x490>
 80055de:	2f00      	cmp	r7, #0
 80055e0:	dd08      	ble.n	80055f4 <_strtod_l+0x794>
 80055e2:	9905      	ldr	r1, [sp, #20]
 80055e4:	463a      	mov	r2, r7
 80055e6:	4620      	mov	r0, r4
 80055e8:	f002 f834 	bl	8007654 <__lshift>
 80055ec:	9005      	str	r0, [sp, #20]
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f43f ae7e 	beq.w	80052f0 <_strtod_l+0x490>
 80055f4:	f1b9 0f00 	cmp.w	r9, #0
 80055f8:	dd08      	ble.n	800560c <_strtod_l+0x7ac>
 80055fa:	4631      	mov	r1, r6
 80055fc:	464a      	mov	r2, r9
 80055fe:	4620      	mov	r0, r4
 8005600:	f002 f828 	bl	8007654 <__lshift>
 8005604:	4606      	mov	r6, r0
 8005606:	2800      	cmp	r0, #0
 8005608:	f43f ae72 	beq.w	80052f0 <_strtod_l+0x490>
 800560c:	9a05      	ldr	r2, [sp, #20]
 800560e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005610:	4620      	mov	r0, r4
 8005612:	f002 f8ab 	bl	800776c <__mdiff>
 8005616:	4605      	mov	r5, r0
 8005618:	2800      	cmp	r0, #0
 800561a:	f43f ae69 	beq.w	80052f0 <_strtod_l+0x490>
 800561e:	68c3      	ldr	r3, [r0, #12]
 8005620:	930b      	str	r3, [sp, #44]	; 0x2c
 8005622:	2300      	movs	r3, #0
 8005624:	60c3      	str	r3, [r0, #12]
 8005626:	4631      	mov	r1, r6
 8005628:	f002 f884 	bl	8007734 <__mcmp>
 800562c:	2800      	cmp	r0, #0
 800562e:	da60      	bge.n	80056f2 <_strtod_l+0x892>
 8005630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005632:	ea53 030a 	orrs.w	r3, r3, sl
 8005636:	f040 8082 	bne.w	800573e <_strtod_l+0x8de>
 800563a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800563e:	2b00      	cmp	r3, #0
 8005640:	d17d      	bne.n	800573e <_strtod_l+0x8de>
 8005642:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005646:	0d1b      	lsrs	r3, r3, #20
 8005648:	051b      	lsls	r3, r3, #20
 800564a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800564e:	d976      	bls.n	800573e <_strtod_l+0x8de>
 8005650:	696b      	ldr	r3, [r5, #20]
 8005652:	b913      	cbnz	r3, 800565a <_strtod_l+0x7fa>
 8005654:	692b      	ldr	r3, [r5, #16]
 8005656:	2b01      	cmp	r3, #1
 8005658:	dd71      	ble.n	800573e <_strtod_l+0x8de>
 800565a:	4629      	mov	r1, r5
 800565c:	2201      	movs	r2, #1
 800565e:	4620      	mov	r0, r4
 8005660:	f001 fff8 	bl	8007654 <__lshift>
 8005664:	4631      	mov	r1, r6
 8005666:	4605      	mov	r5, r0
 8005668:	f002 f864 	bl	8007734 <__mcmp>
 800566c:	2800      	cmp	r0, #0
 800566e:	dd66      	ble.n	800573e <_strtod_l+0x8de>
 8005670:	9904      	ldr	r1, [sp, #16]
 8005672:	4a53      	ldr	r2, [pc, #332]	; (80057c0 <_strtod_l+0x960>)
 8005674:	465b      	mov	r3, fp
 8005676:	2900      	cmp	r1, #0
 8005678:	f000 8081 	beq.w	800577e <_strtod_l+0x91e>
 800567c:	ea02 010b 	and.w	r1, r2, fp
 8005680:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005684:	dc7b      	bgt.n	800577e <_strtod_l+0x91e>
 8005686:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800568a:	f77f aea9 	ble.w	80053e0 <_strtod_l+0x580>
 800568e:	4b4d      	ldr	r3, [pc, #308]	; (80057c4 <_strtod_l+0x964>)
 8005690:	4650      	mov	r0, sl
 8005692:	4659      	mov	r1, fp
 8005694:	2200      	movs	r2, #0
 8005696:	f7fa ffbf 	bl	8000618 <__aeabi_dmul>
 800569a:	460b      	mov	r3, r1
 800569c:	4303      	orrs	r3, r0
 800569e:	bf08      	it	eq
 80056a0:	2322      	moveq	r3, #34	; 0x22
 80056a2:	4682      	mov	sl, r0
 80056a4:	468b      	mov	fp, r1
 80056a6:	bf08      	it	eq
 80056a8:	6023      	streq	r3, [r4, #0]
 80056aa:	e62b      	b.n	8005304 <_strtod_l+0x4a4>
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	ea03 0a0a 	and.w	sl, r3, sl
 80056b8:	e6e3      	b.n	8005482 <_strtod_l+0x622>
 80056ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80056be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80056c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80056c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80056ca:	fa01 f308 	lsl.w	r3, r1, r8
 80056ce:	9308      	str	r3, [sp, #32]
 80056d0:	910d      	str	r1, [sp, #52]	; 0x34
 80056d2:	e746      	b.n	8005562 <_strtod_l+0x702>
 80056d4:	2300      	movs	r3, #0
 80056d6:	9308      	str	r3, [sp, #32]
 80056d8:	2301      	movs	r3, #1
 80056da:	930d      	str	r3, [sp, #52]	; 0x34
 80056dc:	e741      	b.n	8005562 <_strtod_l+0x702>
 80056de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80056e0:	4642      	mov	r2, r8
 80056e2:	4620      	mov	r0, r4
 80056e4:	f001 ffb6 	bl	8007654 <__lshift>
 80056e8:	9018      	str	r0, [sp, #96]	; 0x60
 80056ea:	2800      	cmp	r0, #0
 80056ec:	f47f af6b 	bne.w	80055c6 <_strtod_l+0x766>
 80056f0:	e5fe      	b.n	80052f0 <_strtod_l+0x490>
 80056f2:	465f      	mov	r7, fp
 80056f4:	d16e      	bne.n	80057d4 <_strtod_l+0x974>
 80056f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056fc:	b342      	cbz	r2, 8005750 <_strtod_l+0x8f0>
 80056fe:	4a32      	ldr	r2, [pc, #200]	; (80057c8 <_strtod_l+0x968>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d128      	bne.n	8005756 <_strtod_l+0x8f6>
 8005704:	9b04      	ldr	r3, [sp, #16]
 8005706:	4651      	mov	r1, sl
 8005708:	b1eb      	cbz	r3, 8005746 <_strtod_l+0x8e6>
 800570a:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <_strtod_l+0x960>)
 800570c:	403b      	ands	r3, r7
 800570e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005712:	f04f 32ff 	mov.w	r2, #4294967295
 8005716:	d819      	bhi.n	800574c <_strtod_l+0x8ec>
 8005718:	0d1b      	lsrs	r3, r3, #20
 800571a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	4299      	cmp	r1, r3
 8005724:	d117      	bne.n	8005756 <_strtod_l+0x8f6>
 8005726:	4b29      	ldr	r3, [pc, #164]	; (80057cc <_strtod_l+0x96c>)
 8005728:	429f      	cmp	r7, r3
 800572a:	d102      	bne.n	8005732 <_strtod_l+0x8d2>
 800572c:	3101      	adds	r1, #1
 800572e:	f43f addf 	beq.w	80052f0 <_strtod_l+0x490>
 8005732:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <_strtod_l+0x960>)
 8005734:	403b      	ands	r3, r7
 8005736:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800573a:	f04f 0a00 	mov.w	sl, #0
 800573e:	9b04      	ldr	r3, [sp, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1a4      	bne.n	800568e <_strtod_l+0x82e>
 8005744:	e5de      	b.n	8005304 <_strtod_l+0x4a4>
 8005746:	f04f 33ff 	mov.w	r3, #4294967295
 800574a:	e7ea      	b.n	8005722 <_strtod_l+0x8c2>
 800574c:	4613      	mov	r3, r2
 800574e:	e7e8      	b.n	8005722 <_strtod_l+0x8c2>
 8005750:	ea53 030a 	orrs.w	r3, r3, sl
 8005754:	d08c      	beq.n	8005670 <_strtod_l+0x810>
 8005756:	9b08      	ldr	r3, [sp, #32]
 8005758:	b1db      	cbz	r3, 8005792 <_strtod_l+0x932>
 800575a:	423b      	tst	r3, r7
 800575c:	d0ef      	beq.n	800573e <_strtod_l+0x8de>
 800575e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005760:	9a04      	ldr	r2, [sp, #16]
 8005762:	4650      	mov	r0, sl
 8005764:	4659      	mov	r1, fp
 8005766:	b1c3      	cbz	r3, 800579a <_strtod_l+0x93a>
 8005768:	f7ff fb5c 	bl	8004e24 <sulp>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	ec51 0b18 	vmov	r0, r1, d8
 8005774:	f7fa fd9a 	bl	80002ac <__adddf3>
 8005778:	4682      	mov	sl, r0
 800577a:	468b      	mov	fp, r1
 800577c:	e7df      	b.n	800573e <_strtod_l+0x8de>
 800577e:	4013      	ands	r3, r2
 8005780:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005784:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005788:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800578c:	f04f 3aff 	mov.w	sl, #4294967295
 8005790:	e7d5      	b.n	800573e <_strtod_l+0x8de>
 8005792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005794:	ea13 0f0a 	tst.w	r3, sl
 8005798:	e7e0      	b.n	800575c <_strtod_l+0x8fc>
 800579a:	f7ff fb43 	bl	8004e24 <sulp>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	ec51 0b18 	vmov	r0, r1, d8
 80057a6:	f7fa fd7f 	bl	80002a8 <__aeabi_dsub>
 80057aa:	2200      	movs	r2, #0
 80057ac:	2300      	movs	r3, #0
 80057ae:	4682      	mov	sl, r0
 80057b0:	468b      	mov	fp, r1
 80057b2:	f7fb f999 	bl	8000ae8 <__aeabi_dcmpeq>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d0c1      	beq.n	800573e <_strtod_l+0x8de>
 80057ba:	e611      	b.n	80053e0 <_strtod_l+0x580>
 80057bc:	fffffc02 	.word	0xfffffc02
 80057c0:	7ff00000 	.word	0x7ff00000
 80057c4:	39500000 	.word	0x39500000
 80057c8:	000fffff 	.word	0x000fffff
 80057cc:	7fefffff 	.word	0x7fefffff
 80057d0:	08008a98 	.word	0x08008a98
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	f002 f92a 	bl	8007a30 <__ratio>
 80057dc:	ec59 8b10 	vmov	r8, r9, d0
 80057e0:	ee10 0a10 	vmov	r0, s0
 80057e4:	2200      	movs	r2, #0
 80057e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ea:	4649      	mov	r1, r9
 80057ec:	f7fb f990 	bl	8000b10 <__aeabi_dcmple>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d07a      	beq.n	80058ea <_strtod_l+0xa8a>
 80057f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d04a      	beq.n	8005890 <_strtod_l+0xa30>
 80057fa:	4b95      	ldr	r3, [pc, #596]	; (8005a50 <_strtod_l+0xbf0>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005802:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005a50 <_strtod_l+0xbf0>
 8005806:	f04f 0800 	mov.w	r8, #0
 800580a:	4b92      	ldr	r3, [pc, #584]	; (8005a54 <_strtod_l+0xbf4>)
 800580c:	403b      	ands	r3, r7
 800580e:	930d      	str	r3, [sp, #52]	; 0x34
 8005810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005812:	4b91      	ldr	r3, [pc, #580]	; (8005a58 <_strtod_l+0xbf8>)
 8005814:	429a      	cmp	r2, r3
 8005816:	f040 80b0 	bne.w	800597a <_strtod_l+0xb1a>
 800581a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800581e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005822:	ec4b ab10 	vmov	d0, sl, fp
 8005826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800582a:	f002 f829 	bl	8007880 <__ulp>
 800582e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005832:	ec53 2b10 	vmov	r2, r3, d0
 8005836:	f7fa feef 	bl	8000618 <__aeabi_dmul>
 800583a:	4652      	mov	r2, sl
 800583c:	465b      	mov	r3, fp
 800583e:	f7fa fd35 	bl	80002ac <__adddf3>
 8005842:	460b      	mov	r3, r1
 8005844:	4983      	ldr	r1, [pc, #524]	; (8005a54 <_strtod_l+0xbf4>)
 8005846:	4a85      	ldr	r2, [pc, #532]	; (8005a5c <_strtod_l+0xbfc>)
 8005848:	4019      	ands	r1, r3
 800584a:	4291      	cmp	r1, r2
 800584c:	4682      	mov	sl, r0
 800584e:	d960      	bls.n	8005912 <_strtod_l+0xab2>
 8005850:	ee18 3a90 	vmov	r3, s17
 8005854:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005858:	4293      	cmp	r3, r2
 800585a:	d104      	bne.n	8005866 <_strtod_l+0xa06>
 800585c:	ee18 3a10 	vmov	r3, s16
 8005860:	3301      	adds	r3, #1
 8005862:	f43f ad45 	beq.w	80052f0 <_strtod_l+0x490>
 8005866:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005a68 <_strtod_l+0xc08>
 800586a:	f04f 3aff 	mov.w	sl, #4294967295
 800586e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005870:	4620      	mov	r0, r4
 8005872:	f001 fcd3 	bl	800721c <_Bfree>
 8005876:	9905      	ldr	r1, [sp, #20]
 8005878:	4620      	mov	r0, r4
 800587a:	f001 fccf 	bl	800721c <_Bfree>
 800587e:	4631      	mov	r1, r6
 8005880:	4620      	mov	r0, r4
 8005882:	f001 fccb 	bl	800721c <_Bfree>
 8005886:	4629      	mov	r1, r5
 8005888:	4620      	mov	r0, r4
 800588a:	f001 fcc7 	bl	800721c <_Bfree>
 800588e:	e61a      	b.n	80054c6 <_strtod_l+0x666>
 8005890:	f1ba 0f00 	cmp.w	sl, #0
 8005894:	d11b      	bne.n	80058ce <_strtod_l+0xa6e>
 8005896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800589a:	b9f3      	cbnz	r3, 80058da <_strtod_l+0xa7a>
 800589c:	4b6c      	ldr	r3, [pc, #432]	; (8005a50 <_strtod_l+0xbf0>)
 800589e:	2200      	movs	r2, #0
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fb f92a 	bl	8000afc <__aeabi_dcmplt>
 80058a8:	b9d0      	cbnz	r0, 80058e0 <_strtod_l+0xa80>
 80058aa:	4640      	mov	r0, r8
 80058ac:	4649      	mov	r1, r9
 80058ae:	4b6c      	ldr	r3, [pc, #432]	; (8005a60 <_strtod_l+0xc00>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	f7fa feb1 	bl	8000618 <__aeabi_dmul>
 80058b6:	4680      	mov	r8, r0
 80058b8:	4689      	mov	r9, r1
 80058ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80058c2:	9315      	str	r3, [sp, #84]	; 0x54
 80058c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80058c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80058cc:	e79d      	b.n	800580a <_strtod_l+0x9aa>
 80058ce:	f1ba 0f01 	cmp.w	sl, #1
 80058d2:	d102      	bne.n	80058da <_strtod_l+0xa7a>
 80058d4:	2f00      	cmp	r7, #0
 80058d6:	f43f ad83 	beq.w	80053e0 <_strtod_l+0x580>
 80058da:	4b62      	ldr	r3, [pc, #392]	; (8005a64 <_strtod_l+0xc04>)
 80058dc:	2200      	movs	r2, #0
 80058de:	e78e      	b.n	80057fe <_strtod_l+0x99e>
 80058e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005a60 <_strtod_l+0xc00>
 80058e4:	f04f 0800 	mov.w	r8, #0
 80058e8:	e7e7      	b.n	80058ba <_strtod_l+0xa5a>
 80058ea:	4b5d      	ldr	r3, [pc, #372]	; (8005a60 <_strtod_l+0xc00>)
 80058ec:	4640      	mov	r0, r8
 80058ee:	4649      	mov	r1, r9
 80058f0:	2200      	movs	r2, #0
 80058f2:	f7fa fe91 	bl	8000618 <__aeabi_dmul>
 80058f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058f8:	4680      	mov	r8, r0
 80058fa:	4689      	mov	r9, r1
 80058fc:	b933      	cbnz	r3, 800590c <_strtod_l+0xaac>
 80058fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005902:	900e      	str	r0, [sp, #56]	; 0x38
 8005904:	930f      	str	r3, [sp, #60]	; 0x3c
 8005906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800590a:	e7dd      	b.n	80058c8 <_strtod_l+0xa68>
 800590c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005910:	e7f9      	b.n	8005906 <_strtod_l+0xaa6>
 8005912:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1a8      	bne.n	800586e <_strtod_l+0xa0e>
 800591c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005922:	0d1b      	lsrs	r3, r3, #20
 8005924:	051b      	lsls	r3, r3, #20
 8005926:	429a      	cmp	r2, r3
 8005928:	d1a1      	bne.n	800586e <_strtod_l+0xa0e>
 800592a:	4640      	mov	r0, r8
 800592c:	4649      	mov	r1, r9
 800592e:	f7fb f9d3 	bl	8000cd8 <__aeabi_d2lz>
 8005932:	f7fa fe43 	bl	80005bc <__aeabi_l2d>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4640      	mov	r0, r8
 800593c:	4649      	mov	r1, r9
 800593e:	f7fa fcb3 	bl	80002a8 <__aeabi_dsub>
 8005942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005948:	ea43 030a 	orr.w	r3, r3, sl
 800594c:	4313      	orrs	r3, r2
 800594e:	4680      	mov	r8, r0
 8005950:	4689      	mov	r9, r1
 8005952:	d055      	beq.n	8005a00 <_strtod_l+0xba0>
 8005954:	a336      	add	r3, pc, #216	; (adr r3, 8005a30 <_strtod_l+0xbd0>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fb f8cf 	bl	8000afc <__aeabi_dcmplt>
 800595e:	2800      	cmp	r0, #0
 8005960:	f47f acd0 	bne.w	8005304 <_strtod_l+0x4a4>
 8005964:	a334      	add	r3, pc, #208	; (adr r3, 8005a38 <_strtod_l+0xbd8>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	4640      	mov	r0, r8
 800596c:	4649      	mov	r1, r9
 800596e:	f7fb f8e3 	bl	8000b38 <__aeabi_dcmpgt>
 8005972:	2800      	cmp	r0, #0
 8005974:	f43f af7b 	beq.w	800586e <_strtod_l+0xa0e>
 8005978:	e4c4      	b.n	8005304 <_strtod_l+0x4a4>
 800597a:	9b04      	ldr	r3, [sp, #16]
 800597c:	b333      	cbz	r3, 80059cc <_strtod_l+0xb6c>
 800597e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005980:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005984:	d822      	bhi.n	80059cc <_strtod_l+0xb6c>
 8005986:	a32e      	add	r3, pc, #184	; (adr r3, 8005a40 <_strtod_l+0xbe0>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	4640      	mov	r0, r8
 800598e:	4649      	mov	r1, r9
 8005990:	f7fb f8be 	bl	8000b10 <__aeabi_dcmple>
 8005994:	b1a0      	cbz	r0, 80059c0 <_strtod_l+0xb60>
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	f7fb f915 	bl	8000bc8 <__aeabi_d2uiz>
 800599e:	2801      	cmp	r0, #1
 80059a0:	bf38      	it	cc
 80059a2:	2001      	movcc	r0, #1
 80059a4:	f7fa fdbe 	bl	8000524 <__aeabi_ui2d>
 80059a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059aa:	4680      	mov	r8, r0
 80059ac:	4689      	mov	r9, r1
 80059ae:	bb23      	cbnz	r3, 80059fa <_strtod_l+0xb9a>
 80059b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059b4:	9010      	str	r0, [sp, #64]	; 0x40
 80059b6:	9311      	str	r3, [sp, #68]	; 0x44
 80059b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80059c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	9309      	str	r3, [sp, #36]	; 0x24
 80059cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059d0:	eeb0 0a48 	vmov.f32	s0, s16
 80059d4:	eef0 0a68 	vmov.f32	s1, s17
 80059d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059dc:	f001 ff50 	bl	8007880 <__ulp>
 80059e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059e4:	ec53 2b10 	vmov	r2, r3, d0
 80059e8:	f7fa fe16 	bl	8000618 <__aeabi_dmul>
 80059ec:	ec53 2b18 	vmov	r2, r3, d8
 80059f0:	f7fa fc5c 	bl	80002ac <__adddf3>
 80059f4:	4682      	mov	sl, r0
 80059f6:	468b      	mov	fp, r1
 80059f8:	e78d      	b.n	8005916 <_strtod_l+0xab6>
 80059fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80059fe:	e7db      	b.n	80059b8 <_strtod_l+0xb58>
 8005a00:	a311      	add	r3, pc, #68	; (adr r3, 8005a48 <_strtod_l+0xbe8>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f7fb f879 	bl	8000afc <__aeabi_dcmplt>
 8005a0a:	e7b2      	b.n	8005972 <_strtod_l+0xb12>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	f7ff ba6b 	b.w	8004ef0 <_strtod_l+0x90>
 8005a1a:	2a65      	cmp	r2, #101	; 0x65
 8005a1c:	f43f ab5f 	beq.w	80050de <_strtod_l+0x27e>
 8005a20:	2a45      	cmp	r2, #69	; 0x45
 8005a22:	f43f ab5c 	beq.w	80050de <_strtod_l+0x27e>
 8005a26:	2301      	movs	r3, #1
 8005a28:	f7ff bb94 	b.w	8005154 <_strtod_l+0x2f4>
 8005a2c:	f3af 8000 	nop.w
 8005a30:	94a03595 	.word	0x94a03595
 8005a34:	3fdfffff 	.word	0x3fdfffff
 8005a38:	35afe535 	.word	0x35afe535
 8005a3c:	3fe00000 	.word	0x3fe00000
 8005a40:	ffc00000 	.word	0xffc00000
 8005a44:	41dfffff 	.word	0x41dfffff
 8005a48:	94a03595 	.word	0x94a03595
 8005a4c:	3fcfffff 	.word	0x3fcfffff
 8005a50:	3ff00000 	.word	0x3ff00000
 8005a54:	7ff00000 	.word	0x7ff00000
 8005a58:	7fe00000 	.word	0x7fe00000
 8005a5c:	7c9fffff 	.word	0x7c9fffff
 8005a60:	3fe00000 	.word	0x3fe00000
 8005a64:	bff00000 	.word	0xbff00000
 8005a68:	7fefffff 	.word	0x7fefffff

08005a6c <_strtod_r>:
 8005a6c:	4b01      	ldr	r3, [pc, #4]	; (8005a74 <_strtod_r+0x8>)
 8005a6e:	f7ff b9f7 	b.w	8004e60 <_strtod_l>
 8005a72:	bf00      	nop
 8005a74:	20000074 	.word	0x20000074

08005a78 <_strtol_l.constprop.0>:
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7e:	d001      	beq.n	8005a84 <_strtol_l.constprop.0+0xc>
 8005a80:	2b24      	cmp	r3, #36	; 0x24
 8005a82:	d906      	bls.n	8005a92 <_strtol_l.constprop.0+0x1a>
 8005a84:	f7fe fae4 	bl	8004050 <__errno>
 8005a88:	2316      	movs	r3, #22
 8005a8a:	6003      	str	r3, [r0, #0]
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005b78 <_strtol_l.constprop.0+0x100>
 8005a96:	460d      	mov	r5, r1
 8005a98:	462e      	mov	r6, r5
 8005a9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005aa2:	f017 0708 	ands.w	r7, r7, #8
 8005aa6:	d1f7      	bne.n	8005a98 <_strtol_l.constprop.0+0x20>
 8005aa8:	2c2d      	cmp	r4, #45	; 0x2d
 8005aaa:	d132      	bne.n	8005b12 <_strtol_l.constprop.0+0x9a>
 8005aac:	782c      	ldrb	r4, [r5, #0]
 8005aae:	2701      	movs	r7, #1
 8005ab0:	1cb5      	adds	r5, r6, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d05b      	beq.n	8005b6e <_strtol_l.constprop.0+0xf6>
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d109      	bne.n	8005ace <_strtol_l.constprop.0+0x56>
 8005aba:	2c30      	cmp	r4, #48	; 0x30
 8005abc:	d107      	bne.n	8005ace <_strtol_l.constprop.0+0x56>
 8005abe:	782c      	ldrb	r4, [r5, #0]
 8005ac0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005ac4:	2c58      	cmp	r4, #88	; 0x58
 8005ac6:	d14d      	bne.n	8005b64 <_strtol_l.constprop.0+0xec>
 8005ac8:	786c      	ldrb	r4, [r5, #1]
 8005aca:	2310      	movs	r3, #16
 8005acc:	3502      	adds	r5, #2
 8005ace:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005ad2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ad6:	f04f 0c00 	mov.w	ip, #0
 8005ada:	fbb8 f9f3 	udiv	r9, r8, r3
 8005ade:	4666      	mov	r6, ip
 8005ae0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ae4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005ae8:	f1be 0f09 	cmp.w	lr, #9
 8005aec:	d816      	bhi.n	8005b1c <_strtol_l.constprop.0+0xa4>
 8005aee:	4674      	mov	r4, lr
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	dd24      	ble.n	8005b3e <_strtol_l.constprop.0+0xc6>
 8005af4:	f1bc 0f00 	cmp.w	ip, #0
 8005af8:	db1e      	blt.n	8005b38 <_strtol_l.constprop.0+0xc0>
 8005afa:	45b1      	cmp	r9, r6
 8005afc:	d31c      	bcc.n	8005b38 <_strtol_l.constprop.0+0xc0>
 8005afe:	d101      	bne.n	8005b04 <_strtol_l.constprop.0+0x8c>
 8005b00:	45a2      	cmp	sl, r4
 8005b02:	db19      	blt.n	8005b38 <_strtol_l.constprop.0+0xc0>
 8005b04:	fb06 4603 	mla	r6, r6, r3, r4
 8005b08:	f04f 0c01 	mov.w	ip, #1
 8005b0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b10:	e7e8      	b.n	8005ae4 <_strtol_l.constprop.0+0x6c>
 8005b12:	2c2b      	cmp	r4, #43	; 0x2b
 8005b14:	bf04      	itt	eq
 8005b16:	782c      	ldrbeq	r4, [r5, #0]
 8005b18:	1cb5      	addeq	r5, r6, #2
 8005b1a:	e7ca      	b.n	8005ab2 <_strtol_l.constprop.0+0x3a>
 8005b1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005b20:	f1be 0f19 	cmp.w	lr, #25
 8005b24:	d801      	bhi.n	8005b2a <_strtol_l.constprop.0+0xb2>
 8005b26:	3c37      	subs	r4, #55	; 0x37
 8005b28:	e7e2      	b.n	8005af0 <_strtol_l.constprop.0+0x78>
 8005b2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005b2e:	f1be 0f19 	cmp.w	lr, #25
 8005b32:	d804      	bhi.n	8005b3e <_strtol_l.constprop.0+0xc6>
 8005b34:	3c57      	subs	r4, #87	; 0x57
 8005b36:	e7db      	b.n	8005af0 <_strtol_l.constprop.0+0x78>
 8005b38:	f04f 3cff 	mov.w	ip, #4294967295
 8005b3c:	e7e6      	b.n	8005b0c <_strtol_l.constprop.0+0x94>
 8005b3e:	f1bc 0f00 	cmp.w	ip, #0
 8005b42:	da05      	bge.n	8005b50 <_strtol_l.constprop.0+0xd8>
 8005b44:	2322      	movs	r3, #34	; 0x22
 8005b46:	6003      	str	r3, [r0, #0]
 8005b48:	4646      	mov	r6, r8
 8005b4a:	b942      	cbnz	r2, 8005b5e <_strtol_l.constprop.0+0xe6>
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	e79e      	b.n	8005a8e <_strtol_l.constprop.0+0x16>
 8005b50:	b107      	cbz	r7, 8005b54 <_strtol_l.constprop.0+0xdc>
 8005b52:	4276      	negs	r6, r6
 8005b54:	2a00      	cmp	r2, #0
 8005b56:	d0f9      	beq.n	8005b4c <_strtol_l.constprop.0+0xd4>
 8005b58:	f1bc 0f00 	cmp.w	ip, #0
 8005b5c:	d000      	beq.n	8005b60 <_strtol_l.constprop.0+0xe8>
 8005b5e:	1e69      	subs	r1, r5, #1
 8005b60:	6011      	str	r1, [r2, #0]
 8005b62:	e7f3      	b.n	8005b4c <_strtol_l.constprop.0+0xd4>
 8005b64:	2430      	movs	r4, #48	; 0x30
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1b1      	bne.n	8005ace <_strtol_l.constprop.0+0x56>
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	e7af      	b.n	8005ace <_strtol_l.constprop.0+0x56>
 8005b6e:	2c30      	cmp	r4, #48	; 0x30
 8005b70:	d0a5      	beq.n	8005abe <_strtol_l.constprop.0+0x46>
 8005b72:	230a      	movs	r3, #10
 8005b74:	e7ab      	b.n	8005ace <_strtol_l.constprop.0+0x56>
 8005b76:	bf00      	nop
 8005b78:	08008ac1 	.word	0x08008ac1

08005b7c <_strtol_r>:
 8005b7c:	f7ff bf7c 	b.w	8005a78 <_strtol_l.constprop.0>

08005b80 <quorem>:
 8005b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	6903      	ldr	r3, [r0, #16]
 8005b86:	690c      	ldr	r4, [r1, #16]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	f2c0 8081 	blt.w	8005c92 <quorem+0x112>
 8005b90:	3c01      	subs	r4, #1
 8005b92:	f101 0814 	add.w	r8, r1, #20
 8005b96:	f100 0514 	add.w	r5, r0, #20
 8005b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	429a      	cmp	r2, r3
 8005bac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bb8:	d331      	bcc.n	8005c1e <quorem+0x9e>
 8005bba:	f04f 0e00 	mov.w	lr, #0
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	46ac      	mov	ip, r5
 8005bc2:	46f2      	mov	sl, lr
 8005bc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bc8:	b293      	uxth	r3, r2
 8005bca:	fb06 e303 	mla	r3, r6, r3, lr
 8005bce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8005bd8:	f8dc a000 	ldr.w	sl, [ip]
 8005bdc:	0c12      	lsrs	r2, r2, #16
 8005bde:	fa13 f38a 	uxtah	r3, r3, sl
 8005be2:	fb06 e202 	mla	r2, r6, r2, lr
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	9b00      	ldr	r3, [sp, #0]
 8005bea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bee:	b292      	uxth	r2, r2
 8005bf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bfc:	4581      	cmp	r9, r0
 8005bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c02:	f84c 3b04 	str.w	r3, [ip], #4
 8005c06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c0a:	d2db      	bcs.n	8005bc4 <quorem+0x44>
 8005c0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c10:	b92b      	cbnz	r3, 8005c1e <quorem+0x9e>
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	429d      	cmp	r5, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	d32e      	bcc.n	8005c7a <quorem+0xfa>
 8005c1c:	613c      	str	r4, [r7, #16]
 8005c1e:	4638      	mov	r0, r7
 8005c20:	f001 fd88 	bl	8007734 <__mcmp>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	db24      	blt.n	8005c72 <quorem+0xf2>
 8005c28:	3601      	adds	r6, #1
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f04f 0c00 	mov.w	ip, #0
 8005c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c34:	f8d0 e000 	ldr.w	lr, [r0]
 8005c38:	b293      	uxth	r3, r2
 8005c3a:	ebac 0303 	sub.w	r3, ip, r3
 8005c3e:	0c12      	lsrs	r2, r2, #16
 8005c40:	fa13 f38e 	uxtah	r3, r3, lr
 8005c44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c52:	45c1      	cmp	r9, r8
 8005c54:	f840 3b04 	str.w	r3, [r0], #4
 8005c58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c5c:	d2e8      	bcs.n	8005c30 <quorem+0xb0>
 8005c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c66:	b922      	cbnz	r2, 8005c72 <quorem+0xf2>
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	d30a      	bcc.n	8005c86 <quorem+0x106>
 8005c70:	613c      	str	r4, [r7, #16]
 8005c72:	4630      	mov	r0, r6
 8005c74:	b003      	add	sp, #12
 8005c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	d1cc      	bne.n	8005c1c <quorem+0x9c>
 8005c82:	3c01      	subs	r4, #1
 8005c84:	e7c7      	b.n	8005c16 <quorem+0x96>
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	3b04      	subs	r3, #4
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	d1f0      	bne.n	8005c70 <quorem+0xf0>
 8005c8e:	3c01      	subs	r4, #1
 8005c90:	e7eb      	b.n	8005c6a <quorem+0xea>
 8005c92:	2000      	movs	r0, #0
 8005c94:	e7ee      	b.n	8005c74 <quorem+0xf4>
	...

08005c98 <_dtoa_r>:
 8005c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	ed2d 8b04 	vpush	{d8-d9}
 8005ca0:	ec57 6b10 	vmov	r6, r7, d0
 8005ca4:	b093      	sub	sp, #76	; 0x4c
 8005ca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ca8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cac:	9106      	str	r1, [sp, #24]
 8005cae:	ee10 aa10 	vmov	sl, s0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005cb8:	46bb      	mov	fp, r7
 8005cba:	b975      	cbnz	r5, 8005cda <_dtoa_r+0x42>
 8005cbc:	2010      	movs	r0, #16
 8005cbe:	f001 fa45 	bl	800714c <malloc>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6260      	str	r0, [r4, #36]	; 0x24
 8005cc6:	b920      	cbnz	r0, 8005cd2 <_dtoa_r+0x3a>
 8005cc8:	4ba7      	ldr	r3, [pc, #668]	; (8005f68 <_dtoa_r+0x2d0>)
 8005cca:	21ea      	movs	r1, #234	; 0xea
 8005ccc:	48a7      	ldr	r0, [pc, #668]	; (8005f6c <_dtoa_r+0x2d4>)
 8005cce:	f002 fc23 	bl	8008518 <__assert_func>
 8005cd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cd6:	6005      	str	r5, [r0, #0]
 8005cd8:	60c5      	str	r5, [r0, #12]
 8005cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cdc:	6819      	ldr	r1, [r3, #0]
 8005cde:	b151      	cbz	r1, 8005cf6 <_dtoa_r+0x5e>
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	604a      	str	r2, [r1, #4]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4093      	lsls	r3, r2
 8005ce8:	608b      	str	r3, [r1, #8]
 8005cea:	4620      	mov	r0, r4
 8005cec:	f001 fa96 	bl	800721c <_Bfree>
 8005cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	1e3b      	subs	r3, r7, #0
 8005cf8:	bfaa      	itet	ge
 8005cfa:	2300      	movge	r3, #0
 8005cfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d00:	f8c8 3000 	strge.w	r3, [r8]
 8005d04:	4b9a      	ldr	r3, [pc, #616]	; (8005f70 <_dtoa_r+0x2d8>)
 8005d06:	bfbc      	itt	lt
 8005d08:	2201      	movlt	r2, #1
 8005d0a:	f8c8 2000 	strlt.w	r2, [r8]
 8005d0e:	ea33 030b 	bics.w	r3, r3, fp
 8005d12:	d11b      	bne.n	8005d4c <_dtoa_r+0xb4>
 8005d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d16:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d20:	4333      	orrs	r3, r6
 8005d22:	f000 8592 	beq.w	800684a <_dtoa_r+0xbb2>
 8005d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d28:	b963      	cbnz	r3, 8005d44 <_dtoa_r+0xac>
 8005d2a:	4b92      	ldr	r3, [pc, #584]	; (8005f74 <_dtoa_r+0x2dc>)
 8005d2c:	e022      	b.n	8005d74 <_dtoa_r+0xdc>
 8005d2e:	4b92      	ldr	r3, [pc, #584]	; (8005f78 <_dtoa_r+0x2e0>)
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	3308      	adds	r3, #8
 8005d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	9801      	ldr	r0, [sp, #4]
 8005d3a:	b013      	add	sp, #76	; 0x4c
 8005d3c:	ecbd 8b04 	vpop	{d8-d9}
 8005d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d44:	4b8b      	ldr	r3, [pc, #556]	; (8005f74 <_dtoa_r+0x2dc>)
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	3303      	adds	r3, #3
 8005d4a:	e7f3      	b.n	8005d34 <_dtoa_r+0x9c>
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2300      	movs	r3, #0
 8005d50:	4650      	mov	r0, sl
 8005d52:	4659      	mov	r1, fp
 8005d54:	f7fa fec8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d58:	ec4b ab19 	vmov	d9, sl, fp
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	b158      	cbz	r0, 8005d78 <_dtoa_r+0xe0>
 8005d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d62:	2301      	movs	r3, #1
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 856b 	beq.w	8006844 <_dtoa_r+0xbac>
 8005d6e:	4883      	ldr	r0, [pc, #524]	; (8005f7c <_dtoa_r+0x2e4>)
 8005d70:	6018      	str	r0, [r3, #0]
 8005d72:	1e43      	subs	r3, r0, #1
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	e7df      	b.n	8005d38 <_dtoa_r+0xa0>
 8005d78:	ec4b ab10 	vmov	d0, sl, fp
 8005d7c:	aa10      	add	r2, sp, #64	; 0x40
 8005d7e:	a911      	add	r1, sp, #68	; 0x44
 8005d80:	4620      	mov	r0, r4
 8005d82:	f001 fdf9 	bl	8007978 <__d2b>
 8005d86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005d8a:	ee08 0a10 	vmov	s16, r0
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f000 8084 	beq.w	8005e9c <_dtoa_r+0x204>
 8005d94:	ee19 3a90 	vmov	r3, s19
 8005d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005da0:	4656      	mov	r6, sl
 8005da2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005da6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005daa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005dae:	4b74      	ldr	r3, [pc, #464]	; (8005f80 <_dtoa_r+0x2e8>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	4630      	mov	r0, r6
 8005db4:	4639      	mov	r1, r7
 8005db6:	f7fa fa77 	bl	80002a8 <__aeabi_dsub>
 8005dba:	a365      	add	r3, pc, #404	; (adr r3, 8005f50 <_dtoa_r+0x2b8>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa fc2a 	bl	8000618 <__aeabi_dmul>
 8005dc4:	a364      	add	r3, pc, #400	; (adr r3, 8005f58 <_dtoa_r+0x2c0>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f7fa fa6f 	bl	80002ac <__adddf3>
 8005dce:	4606      	mov	r6, r0
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	f7fa fbb6 	bl	8000544 <__aeabi_i2d>
 8005dd8:	a361      	add	r3, pc, #388	; (adr r3, 8005f60 <_dtoa_r+0x2c8>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fc1b 	bl	8000618 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4630      	mov	r0, r6
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa fa5f 	bl	80002ac <__adddf3>
 8005dee:	4606      	mov	r6, r0
 8005df0:	460f      	mov	r7, r1
 8005df2:	f7fa fec1 	bl	8000b78 <__aeabi_d2iz>
 8005df6:	2200      	movs	r2, #0
 8005df8:	9000      	str	r0, [sp, #0]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	4639      	mov	r1, r7
 8005e00:	f7fa fe7c 	bl	8000afc <__aeabi_dcmplt>
 8005e04:	b150      	cbz	r0, 8005e1c <_dtoa_r+0x184>
 8005e06:	9800      	ldr	r0, [sp, #0]
 8005e08:	f7fa fb9c 	bl	8000544 <__aeabi_i2d>
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	463b      	mov	r3, r7
 8005e10:	f7fa fe6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e14:	b910      	cbnz	r0, 8005e1c <_dtoa_r+0x184>
 8005e16:	9b00      	ldr	r3, [sp, #0]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	9b00      	ldr	r3, [sp, #0]
 8005e1e:	2b16      	cmp	r3, #22
 8005e20:	d85a      	bhi.n	8005ed8 <_dtoa_r+0x240>
 8005e22:	9a00      	ldr	r2, [sp, #0]
 8005e24:	4b57      	ldr	r3, [pc, #348]	; (8005f84 <_dtoa_r+0x2ec>)
 8005e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	ec51 0b19 	vmov	r0, r1, d9
 8005e32:	f7fa fe63 	bl	8000afc <__aeabi_dcmplt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d050      	beq.n	8005edc <_dtoa_r+0x244>
 8005e3a:	9b00      	ldr	r3, [sp, #0]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	2300      	movs	r3, #0
 8005e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e46:	1b5d      	subs	r5, r3, r5
 8005e48:	1e6b      	subs	r3, r5, #1
 8005e4a:	9305      	str	r3, [sp, #20]
 8005e4c:	bf45      	ittet	mi
 8005e4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e52:	9304      	strmi	r3, [sp, #16]
 8005e54:	2300      	movpl	r3, #0
 8005e56:	2300      	movmi	r3, #0
 8005e58:	bf4c      	ite	mi
 8005e5a:	9305      	strmi	r3, [sp, #20]
 8005e5c:	9304      	strpl	r3, [sp, #16]
 8005e5e:	9b00      	ldr	r3, [sp, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	db3d      	blt.n	8005ee0 <_dtoa_r+0x248>
 8005e64:	9b05      	ldr	r3, [sp, #20]
 8005e66:	9a00      	ldr	r2, [sp, #0]
 8005e68:	920a      	str	r2, [sp, #40]	; 0x28
 8005e6a:	4413      	add	r3, r2
 8005e6c:	9305      	str	r3, [sp, #20]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9307      	str	r3, [sp, #28]
 8005e72:	9b06      	ldr	r3, [sp, #24]
 8005e74:	2b09      	cmp	r3, #9
 8005e76:	f200 8089 	bhi.w	8005f8c <_dtoa_r+0x2f4>
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	bfc4      	itt	gt
 8005e7e:	3b04      	subgt	r3, #4
 8005e80:	9306      	strgt	r3, [sp, #24]
 8005e82:	9b06      	ldr	r3, [sp, #24]
 8005e84:	f1a3 0302 	sub.w	r3, r3, #2
 8005e88:	bfcc      	ite	gt
 8005e8a:	2500      	movgt	r5, #0
 8005e8c:	2501      	movle	r5, #1
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	f200 8087 	bhi.w	8005fa2 <_dtoa_r+0x30a>
 8005e94:	e8df f003 	tbb	[pc, r3]
 8005e98:	59383a2d 	.word	0x59383a2d
 8005e9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ea0:	441d      	add	r5, r3
 8005ea2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	bfc1      	itttt	gt
 8005eaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005eae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005eb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005eb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005eba:	bfda      	itte	le
 8005ebc:	f1c3 0320 	rsble	r3, r3, #32
 8005ec0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ec4:	4318      	orrgt	r0, r3
 8005ec6:	f7fa fb2d 	bl	8000524 <__aeabi_ui2d>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4606      	mov	r6, r0
 8005ece:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ed2:	3d01      	subs	r5, #1
 8005ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ed6:	e76a      	b.n	8005dae <_dtoa_r+0x116>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e7b2      	b.n	8005e42 <_dtoa_r+0x1aa>
 8005edc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ede:	e7b1      	b.n	8005e44 <_dtoa_r+0x1ac>
 8005ee0:	9b04      	ldr	r3, [sp, #16]
 8005ee2:	9a00      	ldr	r2, [sp, #0]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	4253      	negs	r3, r2
 8005eea:	9307      	str	r3, [sp, #28]
 8005eec:	2300      	movs	r3, #0
 8005eee:	930a      	str	r3, [sp, #40]	; 0x28
 8005ef0:	e7bf      	b.n	8005e72 <_dtoa_r+0x1da>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9308      	str	r3, [sp, #32]
 8005ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc55      	bgt.n	8005fa8 <_dtoa_r+0x310>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f02:	461a      	mov	r2, r3
 8005f04:	9209      	str	r2, [sp, #36]	; 0x24
 8005f06:	e00c      	b.n	8005f22 <_dtoa_r+0x28a>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e7f3      	b.n	8005ef4 <_dtoa_r+0x25c>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f10:	9308      	str	r3, [sp, #32]
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	9302      	str	r3, [sp, #8]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	9303      	str	r3, [sp, #12]
 8005f1e:	bfb8      	it	lt
 8005f20:	2301      	movlt	r3, #1
 8005f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f24:	2200      	movs	r2, #0
 8005f26:	6042      	str	r2, [r0, #4]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	f102 0614 	add.w	r6, r2, #20
 8005f2e:	429e      	cmp	r6, r3
 8005f30:	6841      	ldr	r1, [r0, #4]
 8005f32:	d93d      	bls.n	8005fb0 <_dtoa_r+0x318>
 8005f34:	4620      	mov	r0, r4
 8005f36:	f001 f931 	bl	800719c <_Balloc>
 8005f3a:	9001      	str	r0, [sp, #4]
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d13b      	bne.n	8005fb8 <_dtoa_r+0x320>
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <_dtoa_r+0x2f0>)
 8005f42:	4602      	mov	r2, r0
 8005f44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f48:	e6c0      	b.n	8005ccc <_dtoa_r+0x34>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e7df      	b.n	8005f0e <_dtoa_r+0x276>
 8005f4e:	bf00      	nop
 8005f50:	636f4361 	.word	0x636f4361
 8005f54:	3fd287a7 	.word	0x3fd287a7
 8005f58:	8b60c8b3 	.word	0x8b60c8b3
 8005f5c:	3fc68a28 	.word	0x3fc68a28
 8005f60:	509f79fb 	.word	0x509f79fb
 8005f64:	3fd34413 	.word	0x3fd34413
 8005f68:	08008bce 	.word	0x08008bce
 8005f6c:	08008be5 	.word	0x08008be5
 8005f70:	7ff00000 	.word	0x7ff00000
 8005f74:	08008bca 	.word	0x08008bca
 8005f78:	08008bc1 	.word	0x08008bc1
 8005f7c:	08008a45 	.word	0x08008a45
 8005f80:	3ff80000 	.word	0x3ff80000
 8005f84:	08008db8 	.word	0x08008db8
 8005f88:	08008c40 	.word	0x08008c40
 8005f8c:	2501      	movs	r5, #1
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9306      	str	r3, [sp, #24]
 8005f92:	9508      	str	r5, [sp, #32]
 8005f94:	f04f 33ff 	mov.w	r3, #4294967295
 8005f98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2312      	movs	r3, #18
 8005fa0:	e7b0      	b.n	8005f04 <_dtoa_r+0x26c>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	9308      	str	r3, [sp, #32]
 8005fa6:	e7f5      	b.n	8005f94 <_dtoa_r+0x2fc>
 8005fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005faa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005fae:	e7b8      	b.n	8005f22 <_dtoa_r+0x28a>
 8005fb0:	3101      	adds	r1, #1
 8005fb2:	6041      	str	r1, [r0, #4]
 8005fb4:	0052      	lsls	r2, r2, #1
 8005fb6:	e7b8      	b.n	8005f2a <_dtoa_r+0x292>
 8005fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fba:	9a01      	ldr	r2, [sp, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	2b0e      	cmp	r3, #14
 8005fc2:	f200 809d 	bhi.w	8006100 <_dtoa_r+0x468>
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	f000 809a 	beq.w	8006100 <_dtoa_r+0x468>
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd32      	ble.n	8006038 <_dtoa_r+0x3a0>
 8005fd2:	4ab7      	ldr	r2, [pc, #732]	; (80062b0 <_dtoa_r+0x618>)
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fe0:	9b00      	ldr	r3, [sp, #0]
 8005fe2:	05d8      	lsls	r0, r3, #23
 8005fe4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005fe8:	d516      	bpl.n	8006018 <_dtoa_r+0x380>
 8005fea:	4bb2      	ldr	r3, [pc, #712]	; (80062b4 <_dtoa_r+0x61c>)
 8005fec:	ec51 0b19 	vmov	r0, r1, d9
 8005ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ff4:	f7fa fc3a 	bl	800086c <__aeabi_ddiv>
 8005ff8:	f007 070f 	and.w	r7, r7, #15
 8005ffc:	4682      	mov	sl, r0
 8005ffe:	468b      	mov	fp, r1
 8006000:	2503      	movs	r5, #3
 8006002:	4eac      	ldr	r6, [pc, #688]	; (80062b4 <_dtoa_r+0x61c>)
 8006004:	b957      	cbnz	r7, 800601c <_dtoa_r+0x384>
 8006006:	4642      	mov	r2, r8
 8006008:	464b      	mov	r3, r9
 800600a:	4650      	mov	r0, sl
 800600c:	4659      	mov	r1, fp
 800600e:	f7fa fc2d 	bl	800086c <__aeabi_ddiv>
 8006012:	4682      	mov	sl, r0
 8006014:	468b      	mov	fp, r1
 8006016:	e028      	b.n	800606a <_dtoa_r+0x3d2>
 8006018:	2502      	movs	r5, #2
 800601a:	e7f2      	b.n	8006002 <_dtoa_r+0x36a>
 800601c:	07f9      	lsls	r1, r7, #31
 800601e:	d508      	bpl.n	8006032 <_dtoa_r+0x39a>
 8006020:	4640      	mov	r0, r8
 8006022:	4649      	mov	r1, r9
 8006024:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006028:	f7fa faf6 	bl	8000618 <__aeabi_dmul>
 800602c:	3501      	adds	r5, #1
 800602e:	4680      	mov	r8, r0
 8006030:	4689      	mov	r9, r1
 8006032:	107f      	asrs	r7, r7, #1
 8006034:	3608      	adds	r6, #8
 8006036:	e7e5      	b.n	8006004 <_dtoa_r+0x36c>
 8006038:	f000 809b 	beq.w	8006172 <_dtoa_r+0x4da>
 800603c:	9b00      	ldr	r3, [sp, #0]
 800603e:	4f9d      	ldr	r7, [pc, #628]	; (80062b4 <_dtoa_r+0x61c>)
 8006040:	425e      	negs	r6, r3
 8006042:	4b9b      	ldr	r3, [pc, #620]	; (80062b0 <_dtoa_r+0x618>)
 8006044:	f006 020f 	and.w	r2, r6, #15
 8006048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	ec51 0b19 	vmov	r0, r1, d9
 8006054:	f7fa fae0 	bl	8000618 <__aeabi_dmul>
 8006058:	1136      	asrs	r6, r6, #4
 800605a:	4682      	mov	sl, r0
 800605c:	468b      	mov	fp, r1
 800605e:	2300      	movs	r3, #0
 8006060:	2502      	movs	r5, #2
 8006062:	2e00      	cmp	r6, #0
 8006064:	d17a      	bne.n	800615c <_dtoa_r+0x4c4>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1d3      	bne.n	8006012 <_dtoa_r+0x37a>
 800606a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8082 	beq.w	8006176 <_dtoa_r+0x4de>
 8006072:	4b91      	ldr	r3, [pc, #580]	; (80062b8 <_dtoa_r+0x620>)
 8006074:	2200      	movs	r2, #0
 8006076:	4650      	mov	r0, sl
 8006078:	4659      	mov	r1, fp
 800607a:	f7fa fd3f 	bl	8000afc <__aeabi_dcmplt>
 800607e:	2800      	cmp	r0, #0
 8006080:	d079      	beq.n	8006176 <_dtoa_r+0x4de>
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d076      	beq.n	8006176 <_dtoa_r+0x4de>
 8006088:	9b02      	ldr	r3, [sp, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	dd36      	ble.n	80060fc <_dtoa_r+0x464>
 800608e:	9b00      	ldr	r3, [sp, #0]
 8006090:	4650      	mov	r0, sl
 8006092:	4659      	mov	r1, fp
 8006094:	1e5f      	subs	r7, r3, #1
 8006096:	2200      	movs	r2, #0
 8006098:	4b88      	ldr	r3, [pc, #544]	; (80062bc <_dtoa_r+0x624>)
 800609a:	f7fa fabd 	bl	8000618 <__aeabi_dmul>
 800609e:	9e02      	ldr	r6, [sp, #8]
 80060a0:	4682      	mov	sl, r0
 80060a2:	468b      	mov	fp, r1
 80060a4:	3501      	adds	r5, #1
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7fa fa4c 	bl	8000544 <__aeabi_i2d>
 80060ac:	4652      	mov	r2, sl
 80060ae:	465b      	mov	r3, fp
 80060b0:	f7fa fab2 	bl	8000618 <__aeabi_dmul>
 80060b4:	4b82      	ldr	r3, [pc, #520]	; (80062c0 <_dtoa_r+0x628>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	f7fa f8f8 	bl	80002ac <__adddf3>
 80060bc:	46d0      	mov	r8, sl
 80060be:	46d9      	mov	r9, fp
 80060c0:	4682      	mov	sl, r0
 80060c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	d158      	bne.n	800617c <_dtoa_r+0x4e4>
 80060ca:	4b7e      	ldr	r3, [pc, #504]	; (80062c4 <_dtoa_r+0x62c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	f7fa f8e9 	bl	80002a8 <__aeabi_dsub>
 80060d6:	4652      	mov	r2, sl
 80060d8:	465b      	mov	r3, fp
 80060da:	4680      	mov	r8, r0
 80060dc:	4689      	mov	r9, r1
 80060de:	f7fa fd2b 	bl	8000b38 <__aeabi_dcmpgt>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f040 8295 	bne.w	8006612 <_dtoa_r+0x97a>
 80060e8:	4652      	mov	r2, sl
 80060ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80060ee:	4640      	mov	r0, r8
 80060f0:	4649      	mov	r1, r9
 80060f2:	f7fa fd03 	bl	8000afc <__aeabi_dcmplt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f040 8289 	bne.w	800660e <_dtoa_r+0x976>
 80060fc:	ec5b ab19 	vmov	sl, fp, d9
 8006100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006102:	2b00      	cmp	r3, #0
 8006104:	f2c0 8148 	blt.w	8006398 <_dtoa_r+0x700>
 8006108:	9a00      	ldr	r2, [sp, #0]
 800610a:	2a0e      	cmp	r2, #14
 800610c:	f300 8144 	bgt.w	8006398 <_dtoa_r+0x700>
 8006110:	4b67      	ldr	r3, [pc, #412]	; (80062b0 <_dtoa_r+0x618>)
 8006112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006116:	e9d3 8900 	ldrd	r8, r9, [r3]
 800611a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	f280 80d5 	bge.w	80062cc <_dtoa_r+0x634>
 8006122:	9b03      	ldr	r3, [sp, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f300 80d1 	bgt.w	80062cc <_dtoa_r+0x634>
 800612a:	f040 826f 	bne.w	800660c <_dtoa_r+0x974>
 800612e:	4b65      	ldr	r3, [pc, #404]	; (80062c4 <_dtoa_r+0x62c>)
 8006130:	2200      	movs	r2, #0
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa fa6f 	bl	8000618 <__aeabi_dmul>
 800613a:	4652      	mov	r2, sl
 800613c:	465b      	mov	r3, fp
 800613e:	f7fa fcf1 	bl	8000b24 <__aeabi_dcmpge>
 8006142:	9e03      	ldr	r6, [sp, #12]
 8006144:	4637      	mov	r7, r6
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8245 	bne.w	80065d6 <_dtoa_r+0x93e>
 800614c:	9d01      	ldr	r5, [sp, #4]
 800614e:	2331      	movs	r3, #49	; 0x31
 8006150:	f805 3b01 	strb.w	r3, [r5], #1
 8006154:	9b00      	ldr	r3, [sp, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	e240      	b.n	80065de <_dtoa_r+0x946>
 800615c:	07f2      	lsls	r2, r6, #31
 800615e:	d505      	bpl.n	800616c <_dtoa_r+0x4d4>
 8006160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006164:	f7fa fa58 	bl	8000618 <__aeabi_dmul>
 8006168:	3501      	adds	r5, #1
 800616a:	2301      	movs	r3, #1
 800616c:	1076      	asrs	r6, r6, #1
 800616e:	3708      	adds	r7, #8
 8006170:	e777      	b.n	8006062 <_dtoa_r+0x3ca>
 8006172:	2502      	movs	r5, #2
 8006174:	e779      	b.n	800606a <_dtoa_r+0x3d2>
 8006176:	9f00      	ldr	r7, [sp, #0]
 8006178:	9e03      	ldr	r6, [sp, #12]
 800617a:	e794      	b.n	80060a6 <_dtoa_r+0x40e>
 800617c:	9901      	ldr	r1, [sp, #4]
 800617e:	4b4c      	ldr	r3, [pc, #304]	; (80062b0 <_dtoa_r+0x618>)
 8006180:	4431      	add	r1, r6
 8006182:	910d      	str	r1, [sp, #52]	; 0x34
 8006184:	9908      	ldr	r1, [sp, #32]
 8006186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800618a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800618e:	2900      	cmp	r1, #0
 8006190:	d043      	beq.n	800621a <_dtoa_r+0x582>
 8006192:	494d      	ldr	r1, [pc, #308]	; (80062c8 <_dtoa_r+0x630>)
 8006194:	2000      	movs	r0, #0
 8006196:	f7fa fb69 	bl	800086c <__aeabi_ddiv>
 800619a:	4652      	mov	r2, sl
 800619c:	465b      	mov	r3, fp
 800619e:	f7fa f883 	bl	80002a8 <__aeabi_dsub>
 80061a2:	9d01      	ldr	r5, [sp, #4]
 80061a4:	4682      	mov	sl, r0
 80061a6:	468b      	mov	fp, r1
 80061a8:	4649      	mov	r1, r9
 80061aa:	4640      	mov	r0, r8
 80061ac:	f7fa fce4 	bl	8000b78 <__aeabi_d2iz>
 80061b0:	4606      	mov	r6, r0
 80061b2:	f7fa f9c7 	bl	8000544 <__aeabi_i2d>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	f7fa f873 	bl	80002a8 <__aeabi_dsub>
 80061c2:	3630      	adds	r6, #48	; 0x30
 80061c4:	f805 6b01 	strb.w	r6, [r5], #1
 80061c8:	4652      	mov	r2, sl
 80061ca:	465b      	mov	r3, fp
 80061cc:	4680      	mov	r8, r0
 80061ce:	4689      	mov	r9, r1
 80061d0:	f7fa fc94 	bl	8000afc <__aeabi_dcmplt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d163      	bne.n	80062a0 <_dtoa_r+0x608>
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	4936      	ldr	r1, [pc, #216]	; (80062b8 <_dtoa_r+0x620>)
 80061de:	2000      	movs	r0, #0
 80061e0:	f7fa f862 	bl	80002a8 <__aeabi_dsub>
 80061e4:	4652      	mov	r2, sl
 80061e6:	465b      	mov	r3, fp
 80061e8:	f7fa fc88 	bl	8000afc <__aeabi_dcmplt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	f040 80b5 	bne.w	800635c <_dtoa_r+0x6c4>
 80061f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f4:	429d      	cmp	r5, r3
 80061f6:	d081      	beq.n	80060fc <_dtoa_r+0x464>
 80061f8:	4b30      	ldr	r3, [pc, #192]	; (80062bc <_dtoa_r+0x624>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	4650      	mov	r0, sl
 80061fe:	4659      	mov	r1, fp
 8006200:	f7fa fa0a 	bl	8000618 <__aeabi_dmul>
 8006204:	4b2d      	ldr	r3, [pc, #180]	; (80062bc <_dtoa_r+0x624>)
 8006206:	4682      	mov	sl, r0
 8006208:	468b      	mov	fp, r1
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	2200      	movs	r2, #0
 8006210:	f7fa fa02 	bl	8000618 <__aeabi_dmul>
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	e7c6      	b.n	80061a8 <_dtoa_r+0x510>
 800621a:	4650      	mov	r0, sl
 800621c:	4659      	mov	r1, fp
 800621e:	f7fa f9fb 	bl	8000618 <__aeabi_dmul>
 8006222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006224:	9d01      	ldr	r5, [sp, #4]
 8006226:	930f      	str	r3, [sp, #60]	; 0x3c
 8006228:	4682      	mov	sl, r0
 800622a:	468b      	mov	fp, r1
 800622c:	4649      	mov	r1, r9
 800622e:	4640      	mov	r0, r8
 8006230:	f7fa fca2 	bl	8000b78 <__aeabi_d2iz>
 8006234:	4606      	mov	r6, r0
 8006236:	f7fa f985 	bl	8000544 <__aeabi_i2d>
 800623a:	3630      	adds	r6, #48	; 0x30
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4640      	mov	r0, r8
 8006242:	4649      	mov	r1, r9
 8006244:	f7fa f830 	bl	80002a8 <__aeabi_dsub>
 8006248:	f805 6b01 	strb.w	r6, [r5], #1
 800624c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800624e:	429d      	cmp	r5, r3
 8006250:	4680      	mov	r8, r0
 8006252:	4689      	mov	r9, r1
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	d124      	bne.n	80062a4 <_dtoa_r+0x60c>
 800625a:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <_dtoa_r+0x630>)
 800625c:	4650      	mov	r0, sl
 800625e:	4659      	mov	r1, fp
 8006260:	f7fa f824 	bl	80002ac <__adddf3>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa fc64 	bl	8000b38 <__aeabi_dcmpgt>
 8006270:	2800      	cmp	r0, #0
 8006272:	d173      	bne.n	800635c <_dtoa_r+0x6c4>
 8006274:	4652      	mov	r2, sl
 8006276:	465b      	mov	r3, fp
 8006278:	4913      	ldr	r1, [pc, #76]	; (80062c8 <_dtoa_r+0x630>)
 800627a:	2000      	movs	r0, #0
 800627c:	f7fa f814 	bl	80002a8 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4640      	mov	r0, r8
 8006286:	4649      	mov	r1, r9
 8006288:	f7fa fc38 	bl	8000afc <__aeabi_dcmplt>
 800628c:	2800      	cmp	r0, #0
 800628e:	f43f af35 	beq.w	80060fc <_dtoa_r+0x464>
 8006292:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006294:	1e6b      	subs	r3, r5, #1
 8006296:	930f      	str	r3, [sp, #60]	; 0x3c
 8006298:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d0f8      	beq.n	8006292 <_dtoa_r+0x5fa>
 80062a0:	9700      	str	r7, [sp, #0]
 80062a2:	e049      	b.n	8006338 <_dtoa_r+0x6a0>
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <_dtoa_r+0x624>)
 80062a6:	f7fa f9b7 	bl	8000618 <__aeabi_dmul>
 80062aa:	4680      	mov	r8, r0
 80062ac:	4689      	mov	r9, r1
 80062ae:	e7bd      	b.n	800622c <_dtoa_r+0x594>
 80062b0:	08008db8 	.word	0x08008db8
 80062b4:	08008d90 	.word	0x08008d90
 80062b8:	3ff00000 	.word	0x3ff00000
 80062bc:	40240000 	.word	0x40240000
 80062c0:	401c0000 	.word	0x401c0000
 80062c4:	40140000 	.word	0x40140000
 80062c8:	3fe00000 	.word	0x3fe00000
 80062cc:	9d01      	ldr	r5, [sp, #4]
 80062ce:	4656      	mov	r6, sl
 80062d0:	465f      	mov	r7, fp
 80062d2:	4642      	mov	r2, r8
 80062d4:	464b      	mov	r3, r9
 80062d6:	4630      	mov	r0, r6
 80062d8:	4639      	mov	r1, r7
 80062da:	f7fa fac7 	bl	800086c <__aeabi_ddiv>
 80062de:	f7fa fc4b 	bl	8000b78 <__aeabi_d2iz>
 80062e2:	4682      	mov	sl, r0
 80062e4:	f7fa f92e 	bl	8000544 <__aeabi_i2d>
 80062e8:	4642      	mov	r2, r8
 80062ea:	464b      	mov	r3, r9
 80062ec:	f7fa f994 	bl	8000618 <__aeabi_dmul>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80062fc:	f7f9 ffd4 	bl	80002a8 <__aeabi_dsub>
 8006300:	f805 6b01 	strb.w	r6, [r5], #1
 8006304:	9e01      	ldr	r6, [sp, #4]
 8006306:	9f03      	ldr	r7, [sp, #12]
 8006308:	1bae      	subs	r6, r5, r6
 800630a:	42b7      	cmp	r7, r6
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	d135      	bne.n	800637e <_dtoa_r+0x6e6>
 8006312:	f7f9 ffcb 	bl	80002ac <__adddf3>
 8006316:	4642      	mov	r2, r8
 8006318:	464b      	mov	r3, r9
 800631a:	4606      	mov	r6, r0
 800631c:	460f      	mov	r7, r1
 800631e:	f7fa fc0b 	bl	8000b38 <__aeabi_dcmpgt>
 8006322:	b9d0      	cbnz	r0, 800635a <_dtoa_r+0x6c2>
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa fbdc 	bl	8000ae8 <__aeabi_dcmpeq>
 8006330:	b110      	cbz	r0, 8006338 <_dtoa_r+0x6a0>
 8006332:	f01a 0f01 	tst.w	sl, #1
 8006336:	d110      	bne.n	800635a <_dtoa_r+0x6c2>
 8006338:	4620      	mov	r0, r4
 800633a:	ee18 1a10 	vmov	r1, s16
 800633e:	f000 ff6d 	bl	800721c <_Bfree>
 8006342:	2300      	movs	r3, #0
 8006344:	9800      	ldr	r0, [sp, #0]
 8006346:	702b      	strb	r3, [r5, #0]
 8006348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800634a:	3001      	adds	r0, #1
 800634c:	6018      	str	r0, [r3, #0]
 800634e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006350:	2b00      	cmp	r3, #0
 8006352:	f43f acf1 	beq.w	8005d38 <_dtoa_r+0xa0>
 8006356:	601d      	str	r5, [r3, #0]
 8006358:	e4ee      	b.n	8005d38 <_dtoa_r+0xa0>
 800635a:	9f00      	ldr	r7, [sp, #0]
 800635c:	462b      	mov	r3, r5
 800635e:	461d      	mov	r5, r3
 8006360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006364:	2a39      	cmp	r2, #57	; 0x39
 8006366:	d106      	bne.n	8006376 <_dtoa_r+0x6de>
 8006368:	9a01      	ldr	r2, [sp, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d1f7      	bne.n	800635e <_dtoa_r+0x6c6>
 800636e:	9901      	ldr	r1, [sp, #4]
 8006370:	2230      	movs	r2, #48	; 0x30
 8006372:	3701      	adds	r7, #1
 8006374:	700a      	strb	r2, [r1, #0]
 8006376:	781a      	ldrb	r2, [r3, #0]
 8006378:	3201      	adds	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e790      	b.n	80062a0 <_dtoa_r+0x608>
 800637e:	4ba6      	ldr	r3, [pc, #664]	; (8006618 <_dtoa_r+0x980>)
 8006380:	2200      	movs	r2, #0
 8006382:	f7fa f949 	bl	8000618 <__aeabi_dmul>
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	4606      	mov	r6, r0
 800638c:	460f      	mov	r7, r1
 800638e:	f7fa fbab 	bl	8000ae8 <__aeabi_dcmpeq>
 8006392:	2800      	cmp	r0, #0
 8006394:	d09d      	beq.n	80062d2 <_dtoa_r+0x63a>
 8006396:	e7cf      	b.n	8006338 <_dtoa_r+0x6a0>
 8006398:	9a08      	ldr	r2, [sp, #32]
 800639a:	2a00      	cmp	r2, #0
 800639c:	f000 80d7 	beq.w	800654e <_dtoa_r+0x8b6>
 80063a0:	9a06      	ldr	r2, [sp, #24]
 80063a2:	2a01      	cmp	r2, #1
 80063a4:	f300 80ba 	bgt.w	800651c <_dtoa_r+0x884>
 80063a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	f000 80b2 	beq.w	8006514 <_dtoa_r+0x87c>
 80063b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063b4:	9e07      	ldr	r6, [sp, #28]
 80063b6:	9d04      	ldr	r5, [sp, #16]
 80063b8:	9a04      	ldr	r2, [sp, #16]
 80063ba:	441a      	add	r2, r3
 80063bc:	9204      	str	r2, [sp, #16]
 80063be:	9a05      	ldr	r2, [sp, #20]
 80063c0:	2101      	movs	r1, #1
 80063c2:	441a      	add	r2, r3
 80063c4:	4620      	mov	r0, r4
 80063c6:	9205      	str	r2, [sp, #20]
 80063c8:	f001 f82a 	bl	8007420 <__i2b>
 80063cc:	4607      	mov	r7, r0
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	dd0c      	ble.n	80063ec <_dtoa_r+0x754>
 80063d2:	9b05      	ldr	r3, [sp, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	dd09      	ble.n	80063ec <_dtoa_r+0x754>
 80063d8:	42ab      	cmp	r3, r5
 80063da:	9a04      	ldr	r2, [sp, #16]
 80063dc:	bfa8      	it	ge
 80063de:	462b      	movge	r3, r5
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	9204      	str	r2, [sp, #16]
 80063e4:	9a05      	ldr	r2, [sp, #20]
 80063e6:	1aed      	subs	r5, r5, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	9305      	str	r3, [sp, #20]
 80063ec:	9b07      	ldr	r3, [sp, #28]
 80063ee:	b31b      	cbz	r3, 8006438 <_dtoa_r+0x7a0>
 80063f0:	9b08      	ldr	r3, [sp, #32]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80af 	beq.w	8006556 <_dtoa_r+0x8be>
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	dd13      	ble.n	8006424 <_dtoa_r+0x78c>
 80063fc:	4639      	mov	r1, r7
 80063fe:	4632      	mov	r2, r6
 8006400:	4620      	mov	r0, r4
 8006402:	f001 f8cd 	bl	80075a0 <__pow5mult>
 8006406:	ee18 2a10 	vmov	r2, s16
 800640a:	4601      	mov	r1, r0
 800640c:	4607      	mov	r7, r0
 800640e:	4620      	mov	r0, r4
 8006410:	f001 f81c 	bl	800744c <__multiply>
 8006414:	ee18 1a10 	vmov	r1, s16
 8006418:	4680      	mov	r8, r0
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fefe 	bl	800721c <_Bfree>
 8006420:	ee08 8a10 	vmov	s16, r8
 8006424:	9b07      	ldr	r3, [sp, #28]
 8006426:	1b9a      	subs	r2, r3, r6
 8006428:	d006      	beq.n	8006438 <_dtoa_r+0x7a0>
 800642a:	ee18 1a10 	vmov	r1, s16
 800642e:	4620      	mov	r0, r4
 8006430:	f001 f8b6 	bl	80075a0 <__pow5mult>
 8006434:	ee08 0a10 	vmov	s16, r0
 8006438:	2101      	movs	r1, #1
 800643a:	4620      	mov	r0, r4
 800643c:	f000 fff0 	bl	8007420 <__i2b>
 8006440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	4606      	mov	r6, r0
 8006446:	f340 8088 	ble.w	800655a <_dtoa_r+0x8c2>
 800644a:	461a      	mov	r2, r3
 800644c:	4601      	mov	r1, r0
 800644e:	4620      	mov	r0, r4
 8006450:	f001 f8a6 	bl	80075a0 <__pow5mult>
 8006454:	9b06      	ldr	r3, [sp, #24]
 8006456:	2b01      	cmp	r3, #1
 8006458:	4606      	mov	r6, r0
 800645a:	f340 8081 	ble.w	8006560 <_dtoa_r+0x8c8>
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	6933      	ldr	r3, [r6, #16]
 8006464:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006468:	6918      	ldr	r0, [r3, #16]
 800646a:	f000 ff89 	bl	8007380 <__hi0bits>
 800646e:	f1c0 0020 	rsb	r0, r0, #32
 8006472:	9b05      	ldr	r3, [sp, #20]
 8006474:	4418      	add	r0, r3
 8006476:	f010 001f 	ands.w	r0, r0, #31
 800647a:	f000 8092 	beq.w	80065a2 <_dtoa_r+0x90a>
 800647e:	f1c0 0320 	rsb	r3, r0, #32
 8006482:	2b04      	cmp	r3, #4
 8006484:	f340 808a 	ble.w	800659c <_dtoa_r+0x904>
 8006488:	f1c0 001c 	rsb	r0, r0, #28
 800648c:	9b04      	ldr	r3, [sp, #16]
 800648e:	4403      	add	r3, r0
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	4403      	add	r3, r0
 8006496:	4405      	add	r5, r0
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	9b04      	ldr	r3, [sp, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	dd07      	ble.n	80064b0 <_dtoa_r+0x818>
 80064a0:	ee18 1a10 	vmov	r1, s16
 80064a4:	461a      	mov	r2, r3
 80064a6:	4620      	mov	r0, r4
 80064a8:	f001 f8d4 	bl	8007654 <__lshift>
 80064ac:	ee08 0a10 	vmov	s16, r0
 80064b0:	9b05      	ldr	r3, [sp, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dd05      	ble.n	80064c2 <_dtoa_r+0x82a>
 80064b6:	4631      	mov	r1, r6
 80064b8:	461a      	mov	r2, r3
 80064ba:	4620      	mov	r0, r4
 80064bc:	f001 f8ca 	bl	8007654 <__lshift>
 80064c0:	4606      	mov	r6, r0
 80064c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d06e      	beq.n	80065a6 <_dtoa_r+0x90e>
 80064c8:	ee18 0a10 	vmov	r0, s16
 80064cc:	4631      	mov	r1, r6
 80064ce:	f001 f931 	bl	8007734 <__mcmp>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	da67      	bge.n	80065a6 <_dtoa_r+0x90e>
 80064d6:	9b00      	ldr	r3, [sp, #0]
 80064d8:	3b01      	subs	r3, #1
 80064da:	ee18 1a10 	vmov	r1, s16
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	220a      	movs	r2, #10
 80064e2:	2300      	movs	r3, #0
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 febb 	bl	8007260 <__multadd>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	ee08 0a10 	vmov	s16, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 81b1 	beq.w	8006858 <_dtoa_r+0xbc0>
 80064f6:	2300      	movs	r3, #0
 80064f8:	4639      	mov	r1, r7
 80064fa:	220a      	movs	r2, #10
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 feaf 	bl	8007260 <__multadd>
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	4607      	mov	r7, r0
 8006508:	f300 808e 	bgt.w	8006628 <_dtoa_r+0x990>
 800650c:	9b06      	ldr	r3, [sp, #24]
 800650e:	2b02      	cmp	r3, #2
 8006510:	dc51      	bgt.n	80065b6 <_dtoa_r+0x91e>
 8006512:	e089      	b.n	8006628 <_dtoa_r+0x990>
 8006514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800651a:	e74b      	b.n	80063b4 <_dtoa_r+0x71c>
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	1e5e      	subs	r6, r3, #1
 8006520:	9b07      	ldr	r3, [sp, #28]
 8006522:	42b3      	cmp	r3, r6
 8006524:	bfbf      	itttt	lt
 8006526:	9b07      	ldrlt	r3, [sp, #28]
 8006528:	9607      	strlt	r6, [sp, #28]
 800652a:	1af2      	sublt	r2, r6, r3
 800652c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800652e:	bfb6      	itet	lt
 8006530:	189b      	addlt	r3, r3, r2
 8006532:	1b9e      	subge	r6, r3, r6
 8006534:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	bfb8      	it	lt
 800653a:	2600      	movlt	r6, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfb7      	itett	lt
 8006540:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006544:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006548:	1a9d      	sublt	r5, r3, r2
 800654a:	2300      	movlt	r3, #0
 800654c:	e734      	b.n	80063b8 <_dtoa_r+0x720>
 800654e:	9e07      	ldr	r6, [sp, #28]
 8006550:	9d04      	ldr	r5, [sp, #16]
 8006552:	9f08      	ldr	r7, [sp, #32]
 8006554:	e73b      	b.n	80063ce <_dtoa_r+0x736>
 8006556:	9a07      	ldr	r2, [sp, #28]
 8006558:	e767      	b.n	800642a <_dtoa_r+0x792>
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	2b01      	cmp	r3, #1
 800655e:	dc18      	bgt.n	8006592 <_dtoa_r+0x8fa>
 8006560:	f1ba 0f00 	cmp.w	sl, #0
 8006564:	d115      	bne.n	8006592 <_dtoa_r+0x8fa>
 8006566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800656a:	b993      	cbnz	r3, 8006592 <_dtoa_r+0x8fa>
 800656c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006570:	0d1b      	lsrs	r3, r3, #20
 8006572:	051b      	lsls	r3, r3, #20
 8006574:	b183      	cbz	r3, 8006598 <_dtoa_r+0x900>
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	3301      	adds	r3, #1
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	9b05      	ldr	r3, [sp, #20]
 800657e:	3301      	adds	r3, #1
 8006580:	9305      	str	r3, [sp, #20]
 8006582:	f04f 0801 	mov.w	r8, #1
 8006586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	f47f af6a 	bne.w	8006462 <_dtoa_r+0x7ca>
 800658e:	2001      	movs	r0, #1
 8006590:	e76f      	b.n	8006472 <_dtoa_r+0x7da>
 8006592:	f04f 0800 	mov.w	r8, #0
 8006596:	e7f6      	b.n	8006586 <_dtoa_r+0x8ee>
 8006598:	4698      	mov	r8, r3
 800659a:	e7f4      	b.n	8006586 <_dtoa_r+0x8ee>
 800659c:	f43f af7d 	beq.w	800649a <_dtoa_r+0x802>
 80065a0:	4618      	mov	r0, r3
 80065a2:	301c      	adds	r0, #28
 80065a4:	e772      	b.n	800648c <_dtoa_r+0x7f4>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dc37      	bgt.n	800661c <_dtoa_r+0x984>
 80065ac:	9b06      	ldr	r3, [sp, #24]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	dd34      	ble.n	800661c <_dtoa_r+0x984>
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	9302      	str	r3, [sp, #8]
 80065b6:	9b02      	ldr	r3, [sp, #8]
 80065b8:	b96b      	cbnz	r3, 80065d6 <_dtoa_r+0x93e>
 80065ba:	4631      	mov	r1, r6
 80065bc:	2205      	movs	r2, #5
 80065be:	4620      	mov	r0, r4
 80065c0:	f000 fe4e 	bl	8007260 <__multadd>
 80065c4:	4601      	mov	r1, r0
 80065c6:	4606      	mov	r6, r0
 80065c8:	ee18 0a10 	vmov	r0, s16
 80065cc:	f001 f8b2 	bl	8007734 <__mcmp>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f73f adbb 	bgt.w	800614c <_dtoa_r+0x4b4>
 80065d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d8:	9d01      	ldr	r5, [sp, #4]
 80065da:	43db      	mvns	r3, r3
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	f04f 0800 	mov.w	r8, #0
 80065e2:	4631      	mov	r1, r6
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fe19 	bl	800721c <_Bfree>
 80065ea:	2f00      	cmp	r7, #0
 80065ec:	f43f aea4 	beq.w	8006338 <_dtoa_r+0x6a0>
 80065f0:	f1b8 0f00 	cmp.w	r8, #0
 80065f4:	d005      	beq.n	8006602 <_dtoa_r+0x96a>
 80065f6:	45b8      	cmp	r8, r7
 80065f8:	d003      	beq.n	8006602 <_dtoa_r+0x96a>
 80065fa:	4641      	mov	r1, r8
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fe0d 	bl	800721c <_Bfree>
 8006602:	4639      	mov	r1, r7
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fe09 	bl	800721c <_Bfree>
 800660a:	e695      	b.n	8006338 <_dtoa_r+0x6a0>
 800660c:	2600      	movs	r6, #0
 800660e:	4637      	mov	r7, r6
 8006610:	e7e1      	b.n	80065d6 <_dtoa_r+0x93e>
 8006612:	9700      	str	r7, [sp, #0]
 8006614:	4637      	mov	r7, r6
 8006616:	e599      	b.n	800614c <_dtoa_r+0x4b4>
 8006618:	40240000 	.word	0x40240000
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 80ca 	beq.w	80067b8 <_dtoa_r+0xb20>
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	9302      	str	r3, [sp, #8]
 8006628:	2d00      	cmp	r5, #0
 800662a:	dd05      	ble.n	8006638 <_dtoa_r+0x9a0>
 800662c:	4639      	mov	r1, r7
 800662e:	462a      	mov	r2, r5
 8006630:	4620      	mov	r0, r4
 8006632:	f001 f80f 	bl	8007654 <__lshift>
 8006636:	4607      	mov	r7, r0
 8006638:	f1b8 0f00 	cmp.w	r8, #0
 800663c:	d05b      	beq.n	80066f6 <_dtoa_r+0xa5e>
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fdab 	bl	800719c <_Balloc>
 8006646:	4605      	mov	r5, r0
 8006648:	b928      	cbnz	r0, 8006656 <_dtoa_r+0x9be>
 800664a:	4b87      	ldr	r3, [pc, #540]	; (8006868 <_dtoa_r+0xbd0>)
 800664c:	4602      	mov	r2, r0
 800664e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006652:	f7ff bb3b 	b.w	8005ccc <_dtoa_r+0x34>
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	3202      	adds	r2, #2
 800665a:	0092      	lsls	r2, r2, #2
 800665c:	f107 010c 	add.w	r1, r7, #12
 8006660:	300c      	adds	r0, #12
 8006662:	f000 fd8d 	bl	8007180 <memcpy>
 8006666:	2201      	movs	r2, #1
 8006668:	4629      	mov	r1, r5
 800666a:	4620      	mov	r0, r4
 800666c:	f000 fff2 	bl	8007654 <__lshift>
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	f103 0901 	add.w	r9, r3, #1
 8006676:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800667a:	4413      	add	r3, r2
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	f00a 0301 	and.w	r3, sl, #1
 8006682:	46b8      	mov	r8, r7
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	4607      	mov	r7, r0
 8006688:	4631      	mov	r1, r6
 800668a:	ee18 0a10 	vmov	r0, s16
 800668e:	f7ff fa77 	bl	8005b80 <quorem>
 8006692:	4641      	mov	r1, r8
 8006694:	9002      	str	r0, [sp, #8]
 8006696:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800669a:	ee18 0a10 	vmov	r0, s16
 800669e:	f001 f849 	bl	8007734 <__mcmp>
 80066a2:	463a      	mov	r2, r7
 80066a4:	9003      	str	r0, [sp, #12]
 80066a6:	4631      	mov	r1, r6
 80066a8:	4620      	mov	r0, r4
 80066aa:	f001 f85f 	bl	800776c <__mdiff>
 80066ae:	68c2      	ldr	r2, [r0, #12]
 80066b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80066b4:	4605      	mov	r5, r0
 80066b6:	bb02      	cbnz	r2, 80066fa <_dtoa_r+0xa62>
 80066b8:	4601      	mov	r1, r0
 80066ba:	ee18 0a10 	vmov	r0, s16
 80066be:	f001 f839 	bl	8007734 <__mcmp>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4629      	mov	r1, r5
 80066c6:	4620      	mov	r0, r4
 80066c8:	9207      	str	r2, [sp, #28]
 80066ca:	f000 fda7 	bl	800721c <_Bfree>
 80066ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80066d2:	ea43 0102 	orr.w	r1, r3, r2
 80066d6:	9b04      	ldr	r3, [sp, #16]
 80066d8:	430b      	orrs	r3, r1
 80066da:	464d      	mov	r5, r9
 80066dc:	d10f      	bne.n	80066fe <_dtoa_r+0xa66>
 80066de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066e2:	d02a      	beq.n	800673a <_dtoa_r+0xaa2>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dd02      	ble.n	80066f0 <_dtoa_r+0xa58>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80066f0:	f88b a000 	strb.w	sl, [fp]
 80066f4:	e775      	b.n	80065e2 <_dtoa_r+0x94a>
 80066f6:	4638      	mov	r0, r7
 80066f8:	e7ba      	b.n	8006670 <_dtoa_r+0x9d8>
 80066fa:	2201      	movs	r2, #1
 80066fc:	e7e2      	b.n	80066c4 <_dtoa_r+0xa2c>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	db04      	blt.n	800670e <_dtoa_r+0xa76>
 8006704:	9906      	ldr	r1, [sp, #24]
 8006706:	430b      	orrs	r3, r1
 8006708:	9904      	ldr	r1, [sp, #16]
 800670a:	430b      	orrs	r3, r1
 800670c:	d122      	bne.n	8006754 <_dtoa_r+0xabc>
 800670e:	2a00      	cmp	r2, #0
 8006710:	ddee      	ble.n	80066f0 <_dtoa_r+0xa58>
 8006712:	ee18 1a10 	vmov	r1, s16
 8006716:	2201      	movs	r2, #1
 8006718:	4620      	mov	r0, r4
 800671a:	f000 ff9b 	bl	8007654 <__lshift>
 800671e:	4631      	mov	r1, r6
 8006720:	ee08 0a10 	vmov	s16, r0
 8006724:	f001 f806 	bl	8007734 <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	dc03      	bgt.n	8006734 <_dtoa_r+0xa9c>
 800672c:	d1e0      	bne.n	80066f0 <_dtoa_r+0xa58>
 800672e:	f01a 0f01 	tst.w	sl, #1
 8006732:	d0dd      	beq.n	80066f0 <_dtoa_r+0xa58>
 8006734:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006738:	d1d7      	bne.n	80066ea <_dtoa_r+0xa52>
 800673a:	2339      	movs	r3, #57	; 0x39
 800673c:	f88b 3000 	strb.w	r3, [fp]
 8006740:	462b      	mov	r3, r5
 8006742:	461d      	mov	r5, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800674a:	2a39      	cmp	r2, #57	; 0x39
 800674c:	d071      	beq.n	8006832 <_dtoa_r+0xb9a>
 800674e:	3201      	adds	r2, #1
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	e746      	b.n	80065e2 <_dtoa_r+0x94a>
 8006754:	2a00      	cmp	r2, #0
 8006756:	dd07      	ble.n	8006768 <_dtoa_r+0xad0>
 8006758:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800675c:	d0ed      	beq.n	800673a <_dtoa_r+0xaa2>
 800675e:	f10a 0301 	add.w	r3, sl, #1
 8006762:	f88b 3000 	strb.w	r3, [fp]
 8006766:	e73c      	b.n	80065e2 <_dtoa_r+0x94a>
 8006768:	9b05      	ldr	r3, [sp, #20]
 800676a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800676e:	4599      	cmp	r9, r3
 8006770:	d047      	beq.n	8006802 <_dtoa_r+0xb6a>
 8006772:	ee18 1a10 	vmov	r1, s16
 8006776:	2300      	movs	r3, #0
 8006778:	220a      	movs	r2, #10
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fd70 	bl	8007260 <__multadd>
 8006780:	45b8      	cmp	r8, r7
 8006782:	ee08 0a10 	vmov	s16, r0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	f04f 020a 	mov.w	r2, #10
 800678e:	4641      	mov	r1, r8
 8006790:	4620      	mov	r0, r4
 8006792:	d106      	bne.n	80067a2 <_dtoa_r+0xb0a>
 8006794:	f000 fd64 	bl	8007260 <__multadd>
 8006798:	4680      	mov	r8, r0
 800679a:	4607      	mov	r7, r0
 800679c:	f109 0901 	add.w	r9, r9, #1
 80067a0:	e772      	b.n	8006688 <_dtoa_r+0x9f0>
 80067a2:	f000 fd5d 	bl	8007260 <__multadd>
 80067a6:	4639      	mov	r1, r7
 80067a8:	4680      	mov	r8, r0
 80067aa:	2300      	movs	r3, #0
 80067ac:	220a      	movs	r2, #10
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 fd56 	bl	8007260 <__multadd>
 80067b4:	4607      	mov	r7, r0
 80067b6:	e7f1      	b.n	800679c <_dtoa_r+0xb04>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	9302      	str	r3, [sp, #8]
 80067bc:	9d01      	ldr	r5, [sp, #4]
 80067be:	ee18 0a10 	vmov	r0, s16
 80067c2:	4631      	mov	r1, r6
 80067c4:	f7ff f9dc 	bl	8005b80 <quorem>
 80067c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	f805 ab01 	strb.w	sl, [r5], #1
 80067d2:	1aea      	subs	r2, r5, r3
 80067d4:	9b02      	ldr	r3, [sp, #8]
 80067d6:	4293      	cmp	r3, r2
 80067d8:	dd09      	ble.n	80067ee <_dtoa_r+0xb56>
 80067da:	ee18 1a10 	vmov	r1, s16
 80067de:	2300      	movs	r3, #0
 80067e0:	220a      	movs	r2, #10
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fd3c 	bl	8007260 <__multadd>
 80067e8:	ee08 0a10 	vmov	s16, r0
 80067ec:	e7e7      	b.n	80067be <_dtoa_r+0xb26>
 80067ee:	9b02      	ldr	r3, [sp, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bfc8      	it	gt
 80067f4:	461d      	movgt	r5, r3
 80067f6:	9b01      	ldr	r3, [sp, #4]
 80067f8:	bfd8      	it	le
 80067fa:	2501      	movle	r5, #1
 80067fc:	441d      	add	r5, r3
 80067fe:	f04f 0800 	mov.w	r8, #0
 8006802:	ee18 1a10 	vmov	r1, s16
 8006806:	2201      	movs	r2, #1
 8006808:	4620      	mov	r0, r4
 800680a:	f000 ff23 	bl	8007654 <__lshift>
 800680e:	4631      	mov	r1, r6
 8006810:	ee08 0a10 	vmov	s16, r0
 8006814:	f000 ff8e 	bl	8007734 <__mcmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	dc91      	bgt.n	8006740 <_dtoa_r+0xaa8>
 800681c:	d102      	bne.n	8006824 <_dtoa_r+0xb8c>
 800681e:	f01a 0f01 	tst.w	sl, #1
 8006822:	d18d      	bne.n	8006740 <_dtoa_r+0xaa8>
 8006824:	462b      	mov	r3, r5
 8006826:	461d      	mov	r5, r3
 8006828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800682c:	2a30      	cmp	r2, #48	; 0x30
 800682e:	d0fa      	beq.n	8006826 <_dtoa_r+0xb8e>
 8006830:	e6d7      	b.n	80065e2 <_dtoa_r+0x94a>
 8006832:	9a01      	ldr	r2, [sp, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d184      	bne.n	8006742 <_dtoa_r+0xaaa>
 8006838:	9b00      	ldr	r3, [sp, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	2331      	movs	r3, #49	; 0x31
 8006840:	7013      	strb	r3, [r2, #0]
 8006842:	e6ce      	b.n	80065e2 <_dtoa_r+0x94a>
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <_dtoa_r+0xbd4>)
 8006846:	f7ff ba95 	b.w	8005d74 <_dtoa_r+0xdc>
 800684a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800684c:	2b00      	cmp	r3, #0
 800684e:	f47f aa6e 	bne.w	8005d2e <_dtoa_r+0x96>
 8006852:	4b07      	ldr	r3, [pc, #28]	; (8006870 <_dtoa_r+0xbd8>)
 8006854:	f7ff ba8e 	b.w	8005d74 <_dtoa_r+0xdc>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	dcae      	bgt.n	80067bc <_dtoa_r+0xb24>
 800685e:	9b06      	ldr	r3, [sp, #24]
 8006860:	2b02      	cmp	r3, #2
 8006862:	f73f aea8 	bgt.w	80065b6 <_dtoa_r+0x91e>
 8006866:	e7a9      	b.n	80067bc <_dtoa_r+0xb24>
 8006868:	08008c40 	.word	0x08008c40
 800686c:	08008a44 	.word	0x08008a44
 8006870:	08008bc1 	.word	0x08008bc1

08006874 <std>:
 8006874:	2300      	movs	r3, #0
 8006876:	b510      	push	{r4, lr}
 8006878:	4604      	mov	r4, r0
 800687a:	e9c0 3300 	strd	r3, r3, [r0]
 800687e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006882:	6083      	str	r3, [r0, #8]
 8006884:	8181      	strh	r1, [r0, #12]
 8006886:	6643      	str	r3, [r0, #100]	; 0x64
 8006888:	81c2      	strh	r2, [r0, #14]
 800688a:	6183      	str	r3, [r0, #24]
 800688c:	4619      	mov	r1, r3
 800688e:	2208      	movs	r2, #8
 8006890:	305c      	adds	r0, #92	; 0x5c
 8006892:	f7fd fc07 	bl	80040a4 <memset>
 8006896:	4b05      	ldr	r3, [pc, #20]	; (80068ac <std+0x38>)
 8006898:	6263      	str	r3, [r4, #36]	; 0x24
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <std+0x3c>)
 800689c:	62a3      	str	r3, [r4, #40]	; 0x28
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <std+0x40>)
 80068a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <std+0x44>)
 80068a4:	6224      	str	r4, [r4, #32]
 80068a6:	6323      	str	r3, [r4, #48]	; 0x30
 80068a8:	bd10      	pop	{r4, pc}
 80068aa:	bf00      	nop
 80068ac:	080082a9 	.word	0x080082a9
 80068b0:	080082cb 	.word	0x080082cb
 80068b4:	08008303 	.word	0x08008303
 80068b8:	08008327 	.word	0x08008327

080068bc <_cleanup_r>:
 80068bc:	4901      	ldr	r1, [pc, #4]	; (80068c4 <_cleanup_r+0x8>)
 80068be:	f000 b8af 	b.w	8006a20 <_fwalk_reent>
 80068c2:	bf00      	nop
 80068c4:	08008681 	.word	0x08008681

080068c8 <__sfmoreglue>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	2268      	movs	r2, #104	; 0x68
 80068cc:	1e4d      	subs	r5, r1, #1
 80068ce:	4355      	muls	r5, r2
 80068d0:	460e      	mov	r6, r1
 80068d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068d6:	f001 f9a5 	bl	8007c24 <_malloc_r>
 80068da:	4604      	mov	r4, r0
 80068dc:	b140      	cbz	r0, 80068f0 <__sfmoreglue+0x28>
 80068de:	2100      	movs	r1, #0
 80068e0:	e9c0 1600 	strd	r1, r6, [r0]
 80068e4:	300c      	adds	r0, #12
 80068e6:	60a0      	str	r0, [r4, #8]
 80068e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068ec:	f7fd fbda 	bl	80040a4 <memset>
 80068f0:	4620      	mov	r0, r4
 80068f2:	bd70      	pop	{r4, r5, r6, pc}

080068f4 <__sfp_lock_acquire>:
 80068f4:	4801      	ldr	r0, [pc, #4]	; (80068fc <__sfp_lock_acquire+0x8>)
 80068f6:	f000 bc26 	b.w	8007146 <__retarget_lock_acquire_recursive>
 80068fa:	bf00      	nop
 80068fc:	20000209 	.word	0x20000209

08006900 <__sfp_lock_release>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__sfp_lock_release+0x8>)
 8006902:	f000 bc21 	b.w	8007148 <__retarget_lock_release_recursive>
 8006906:	bf00      	nop
 8006908:	20000209 	.word	0x20000209

0800690c <__sinit_lock_acquire>:
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <__sinit_lock_acquire+0x8>)
 800690e:	f000 bc1a 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8006912:	bf00      	nop
 8006914:	2000020a 	.word	0x2000020a

08006918 <__sinit_lock_release>:
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <__sinit_lock_release+0x8>)
 800691a:	f000 bc15 	b.w	8007148 <__retarget_lock_release_recursive>
 800691e:	bf00      	nop
 8006920:	2000020a 	.word	0x2000020a

08006924 <__sinit>:
 8006924:	b510      	push	{r4, lr}
 8006926:	4604      	mov	r4, r0
 8006928:	f7ff fff0 	bl	800690c <__sinit_lock_acquire>
 800692c:	69a3      	ldr	r3, [r4, #24]
 800692e:	b11b      	cbz	r3, 8006938 <__sinit+0x14>
 8006930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006934:	f7ff bff0 	b.w	8006918 <__sinit_lock_release>
 8006938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800693c:	6523      	str	r3, [r4, #80]	; 0x50
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <__sinit+0x68>)
 8006940:	4a13      	ldr	r2, [pc, #76]	; (8006990 <__sinit+0x6c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	62a2      	str	r2, [r4, #40]	; 0x28
 8006946:	42a3      	cmp	r3, r4
 8006948:	bf04      	itt	eq
 800694a:	2301      	moveq	r3, #1
 800694c:	61a3      	streq	r3, [r4, #24]
 800694e:	4620      	mov	r0, r4
 8006950:	f000 f820 	bl	8006994 <__sfp>
 8006954:	6060      	str	r0, [r4, #4]
 8006956:	4620      	mov	r0, r4
 8006958:	f000 f81c 	bl	8006994 <__sfp>
 800695c:	60a0      	str	r0, [r4, #8]
 800695e:	4620      	mov	r0, r4
 8006960:	f000 f818 	bl	8006994 <__sfp>
 8006964:	2200      	movs	r2, #0
 8006966:	60e0      	str	r0, [r4, #12]
 8006968:	2104      	movs	r1, #4
 800696a:	6860      	ldr	r0, [r4, #4]
 800696c:	f7ff ff82 	bl	8006874 <std>
 8006970:	68a0      	ldr	r0, [r4, #8]
 8006972:	2201      	movs	r2, #1
 8006974:	2109      	movs	r1, #9
 8006976:	f7ff ff7d 	bl	8006874 <std>
 800697a:	68e0      	ldr	r0, [r4, #12]
 800697c:	2202      	movs	r2, #2
 800697e:	2112      	movs	r1, #18
 8006980:	f7ff ff78 	bl	8006874 <std>
 8006984:	2301      	movs	r3, #1
 8006986:	61a3      	str	r3, [r4, #24]
 8006988:	e7d2      	b.n	8006930 <__sinit+0xc>
 800698a:	bf00      	nop
 800698c:	08008a30 	.word	0x08008a30
 8006990:	080068bd 	.word	0x080068bd

08006994 <__sfp>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	4607      	mov	r7, r0
 8006998:	f7ff ffac 	bl	80068f4 <__sfp_lock_acquire>
 800699c:	4b1e      	ldr	r3, [pc, #120]	; (8006a18 <__sfp+0x84>)
 800699e:	681e      	ldr	r6, [r3, #0]
 80069a0:	69b3      	ldr	r3, [r6, #24]
 80069a2:	b913      	cbnz	r3, 80069aa <__sfp+0x16>
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff ffbd 	bl	8006924 <__sinit>
 80069aa:	3648      	adds	r6, #72	; 0x48
 80069ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	d503      	bpl.n	80069bc <__sfp+0x28>
 80069b4:	6833      	ldr	r3, [r6, #0]
 80069b6:	b30b      	cbz	r3, 80069fc <__sfp+0x68>
 80069b8:	6836      	ldr	r6, [r6, #0]
 80069ba:	e7f7      	b.n	80069ac <__sfp+0x18>
 80069bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069c0:	b9d5      	cbnz	r5, 80069f8 <__sfp+0x64>
 80069c2:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <__sfp+0x88>)
 80069c4:	60e3      	str	r3, [r4, #12]
 80069c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069ca:	6665      	str	r5, [r4, #100]	; 0x64
 80069cc:	f000 fbba 	bl	8007144 <__retarget_lock_init_recursive>
 80069d0:	f7ff ff96 	bl	8006900 <__sfp_lock_release>
 80069d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069dc:	6025      	str	r5, [r4, #0]
 80069de:	61a5      	str	r5, [r4, #24]
 80069e0:	2208      	movs	r2, #8
 80069e2:	4629      	mov	r1, r5
 80069e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069e8:	f7fd fb5c 	bl	80040a4 <memset>
 80069ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069f4:	4620      	mov	r0, r4
 80069f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f8:	3468      	adds	r4, #104	; 0x68
 80069fa:	e7d9      	b.n	80069b0 <__sfp+0x1c>
 80069fc:	2104      	movs	r1, #4
 80069fe:	4638      	mov	r0, r7
 8006a00:	f7ff ff62 	bl	80068c8 <__sfmoreglue>
 8006a04:	4604      	mov	r4, r0
 8006a06:	6030      	str	r0, [r6, #0]
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d1d5      	bne.n	80069b8 <__sfp+0x24>
 8006a0c:	f7ff ff78 	bl	8006900 <__sfp_lock_release>
 8006a10:	230c      	movs	r3, #12
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	e7ee      	b.n	80069f4 <__sfp+0x60>
 8006a16:	bf00      	nop
 8006a18:	08008a30 	.word	0x08008a30
 8006a1c:	ffff0001 	.word	0xffff0001

08006a20 <_fwalk_reent>:
 8006a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	4606      	mov	r6, r0
 8006a26:	4688      	mov	r8, r1
 8006a28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a2c:	2700      	movs	r7, #0
 8006a2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a32:	f1b9 0901 	subs.w	r9, r9, #1
 8006a36:	d505      	bpl.n	8006a44 <_fwalk_reent+0x24>
 8006a38:	6824      	ldr	r4, [r4, #0]
 8006a3a:	2c00      	cmp	r4, #0
 8006a3c:	d1f7      	bne.n	8006a2e <_fwalk_reent+0xe>
 8006a3e:	4638      	mov	r0, r7
 8006a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a44:	89ab      	ldrh	r3, [r5, #12]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d907      	bls.n	8006a5a <_fwalk_reent+0x3a>
 8006a4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	d003      	beq.n	8006a5a <_fwalk_reent+0x3a>
 8006a52:	4629      	mov	r1, r5
 8006a54:	4630      	mov	r0, r6
 8006a56:	47c0      	blx	r8
 8006a58:	4307      	orrs	r7, r0
 8006a5a:	3568      	adds	r5, #104	; 0x68
 8006a5c:	e7e9      	b.n	8006a32 <_fwalk_reent+0x12>

08006a5e <rshift>:
 8006a5e:	6903      	ldr	r3, [r0, #16]
 8006a60:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a68:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006a6c:	f100 0414 	add.w	r4, r0, #20
 8006a70:	dd45      	ble.n	8006afe <rshift+0xa0>
 8006a72:	f011 011f 	ands.w	r1, r1, #31
 8006a76:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006a7a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006a7e:	d10c      	bne.n	8006a9a <rshift+0x3c>
 8006a80:	f100 0710 	add.w	r7, r0, #16
 8006a84:	4629      	mov	r1, r5
 8006a86:	42b1      	cmp	r1, r6
 8006a88:	d334      	bcc.n	8006af4 <rshift+0x96>
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	1eea      	subs	r2, r5, #3
 8006a90:	4296      	cmp	r6, r2
 8006a92:	bf38      	it	cc
 8006a94:	2300      	movcc	r3, #0
 8006a96:	4423      	add	r3, r4
 8006a98:	e015      	b.n	8006ac6 <rshift+0x68>
 8006a9a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006a9e:	f1c1 0820 	rsb	r8, r1, #32
 8006aa2:	40cf      	lsrs	r7, r1
 8006aa4:	f105 0e04 	add.w	lr, r5, #4
 8006aa8:	46a1      	mov	r9, r4
 8006aaa:	4576      	cmp	r6, lr
 8006aac:	46f4      	mov	ip, lr
 8006aae:	d815      	bhi.n	8006adc <rshift+0x7e>
 8006ab0:	1a9a      	subs	r2, r3, r2
 8006ab2:	0092      	lsls	r2, r2, #2
 8006ab4:	3a04      	subs	r2, #4
 8006ab6:	3501      	adds	r5, #1
 8006ab8:	42ae      	cmp	r6, r5
 8006aba:	bf38      	it	cc
 8006abc:	2200      	movcc	r2, #0
 8006abe:	18a3      	adds	r3, r4, r2
 8006ac0:	50a7      	str	r7, [r4, r2]
 8006ac2:	b107      	cbz	r7, 8006ac6 <rshift+0x68>
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	1b1a      	subs	r2, r3, r4
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ace:	bf08      	it	eq
 8006ad0:	2300      	moveq	r3, #0
 8006ad2:	6102      	str	r2, [r0, #16]
 8006ad4:	bf08      	it	eq
 8006ad6:	6143      	streq	r3, [r0, #20]
 8006ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006adc:	f8dc c000 	ldr.w	ip, [ip]
 8006ae0:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ae4:	ea4c 0707 	orr.w	r7, ip, r7
 8006ae8:	f849 7b04 	str.w	r7, [r9], #4
 8006aec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006af0:	40cf      	lsrs	r7, r1
 8006af2:	e7da      	b.n	8006aaa <rshift+0x4c>
 8006af4:	f851 cb04 	ldr.w	ip, [r1], #4
 8006af8:	f847 cf04 	str.w	ip, [r7, #4]!
 8006afc:	e7c3      	b.n	8006a86 <rshift+0x28>
 8006afe:	4623      	mov	r3, r4
 8006b00:	e7e1      	b.n	8006ac6 <rshift+0x68>

08006b02 <__hexdig_fun>:
 8006b02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d802      	bhi.n	8006b10 <__hexdig_fun+0xe>
 8006b0a:	3820      	subs	r0, #32
 8006b0c:	b2c0      	uxtb	r0, r0
 8006b0e:	4770      	bx	lr
 8006b10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	d801      	bhi.n	8006b1c <__hexdig_fun+0x1a>
 8006b18:	3847      	subs	r0, #71	; 0x47
 8006b1a:	e7f7      	b.n	8006b0c <__hexdig_fun+0xa>
 8006b1c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	d801      	bhi.n	8006b28 <__hexdig_fun+0x26>
 8006b24:	3827      	subs	r0, #39	; 0x27
 8006b26:	e7f1      	b.n	8006b0c <__hexdig_fun+0xa>
 8006b28:	2000      	movs	r0, #0
 8006b2a:	4770      	bx	lr

08006b2c <__gethex>:
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	ed2d 8b02 	vpush	{d8}
 8006b34:	b089      	sub	sp, #36	; 0x24
 8006b36:	ee08 0a10 	vmov	s16, r0
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	4bb4      	ldr	r3, [pc, #720]	; (8006e10 <__gethex+0x2e4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	4618      	mov	r0, r3
 8006b44:	468b      	mov	fp, r1
 8006b46:	4690      	mov	r8, r2
 8006b48:	f7f9 fb52 	bl	80001f0 <strlen>
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	f8db 2000 	ldr.w	r2, [fp]
 8006b52:	4403      	add	r3, r0
 8006b54:	4682      	mov	sl, r0
 8006b56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	1c93      	adds	r3, r2, #2
 8006b5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006b62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006b66:	32fe      	adds	r2, #254	; 0xfe
 8006b68:	18d1      	adds	r1, r2, r3
 8006b6a:	461f      	mov	r7, r3
 8006b6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b70:	9100      	str	r1, [sp, #0]
 8006b72:	2830      	cmp	r0, #48	; 0x30
 8006b74:	d0f8      	beq.n	8006b68 <__gethex+0x3c>
 8006b76:	f7ff ffc4 	bl	8006b02 <__hexdig_fun>
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d13a      	bne.n	8006bf6 <__gethex+0xca>
 8006b80:	9901      	ldr	r1, [sp, #4]
 8006b82:	4652      	mov	r2, sl
 8006b84:	4638      	mov	r0, r7
 8006b86:	f001 fbd2 	bl	800832e <strncmp>
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d168      	bne.n	8006c62 <__gethex+0x136>
 8006b90:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006b94:	eb07 060a 	add.w	r6, r7, sl
 8006b98:	f7ff ffb3 	bl	8006b02 <__hexdig_fun>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d062      	beq.n	8006c66 <__gethex+0x13a>
 8006ba0:	4633      	mov	r3, r6
 8006ba2:	7818      	ldrb	r0, [r3, #0]
 8006ba4:	2830      	cmp	r0, #48	; 0x30
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	f103 0301 	add.w	r3, r3, #1
 8006bac:	d0f9      	beq.n	8006ba2 <__gethex+0x76>
 8006bae:	f7ff ffa8 	bl	8006b02 <__hexdig_fun>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	fab0 f480 	clz	r4, r0
 8006bb8:	0964      	lsrs	r4, r4, #5
 8006bba:	4635      	mov	r5, r6
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	463a      	mov	r2, r7
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	3201      	adds	r2, #1
 8006bc4:	7830      	ldrb	r0, [r6, #0]
 8006bc6:	f7ff ff9c 	bl	8006b02 <__hexdig_fun>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d1f8      	bne.n	8006bc0 <__gethex+0x94>
 8006bce:	9901      	ldr	r1, [sp, #4]
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f001 fbab 	bl	800832e <strncmp>
 8006bd8:	b980      	cbnz	r0, 8006bfc <__gethex+0xd0>
 8006bda:	b94d      	cbnz	r5, 8006bf0 <__gethex+0xc4>
 8006bdc:	eb06 050a 	add.w	r5, r6, sl
 8006be0:	462a      	mov	r2, r5
 8006be2:	4616      	mov	r6, r2
 8006be4:	3201      	adds	r2, #1
 8006be6:	7830      	ldrb	r0, [r6, #0]
 8006be8:	f7ff ff8b 	bl	8006b02 <__hexdig_fun>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d1f8      	bne.n	8006be2 <__gethex+0xb6>
 8006bf0:	1bad      	subs	r5, r5, r6
 8006bf2:	00ad      	lsls	r5, r5, #2
 8006bf4:	e004      	b.n	8006c00 <__gethex+0xd4>
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	4625      	mov	r5, r4
 8006bfa:	e7e0      	b.n	8006bbe <__gethex+0x92>
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	d1f7      	bne.n	8006bf0 <__gethex+0xc4>
 8006c00:	7833      	ldrb	r3, [r6, #0]
 8006c02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c06:	2b50      	cmp	r3, #80	; 0x50
 8006c08:	d13b      	bne.n	8006c82 <__gethex+0x156>
 8006c0a:	7873      	ldrb	r3, [r6, #1]
 8006c0c:	2b2b      	cmp	r3, #43	; 0x2b
 8006c0e:	d02c      	beq.n	8006c6a <__gethex+0x13e>
 8006c10:	2b2d      	cmp	r3, #45	; 0x2d
 8006c12:	d02e      	beq.n	8006c72 <__gethex+0x146>
 8006c14:	1c71      	adds	r1, r6, #1
 8006c16:	f04f 0900 	mov.w	r9, #0
 8006c1a:	7808      	ldrb	r0, [r1, #0]
 8006c1c:	f7ff ff71 	bl	8006b02 <__hexdig_fun>
 8006c20:	1e43      	subs	r3, r0, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b18      	cmp	r3, #24
 8006c26:	d82c      	bhi.n	8006c82 <__gethex+0x156>
 8006c28:	f1a0 0210 	sub.w	r2, r0, #16
 8006c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c30:	f7ff ff67 	bl	8006b02 <__hexdig_fun>
 8006c34:	1e43      	subs	r3, r0, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b18      	cmp	r3, #24
 8006c3a:	d91d      	bls.n	8006c78 <__gethex+0x14c>
 8006c3c:	f1b9 0f00 	cmp.w	r9, #0
 8006c40:	d000      	beq.n	8006c44 <__gethex+0x118>
 8006c42:	4252      	negs	r2, r2
 8006c44:	4415      	add	r5, r2
 8006c46:	f8cb 1000 	str.w	r1, [fp]
 8006c4a:	b1e4      	cbz	r4, 8006c86 <__gethex+0x15a>
 8006c4c:	9b00      	ldr	r3, [sp, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	bf14      	ite	ne
 8006c52:	2700      	movne	r7, #0
 8006c54:	2706      	moveq	r7, #6
 8006c56:	4638      	mov	r0, r7
 8006c58:	b009      	add	sp, #36	; 0x24
 8006c5a:	ecbd 8b02 	vpop	{d8}
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	463e      	mov	r6, r7
 8006c64:	4625      	mov	r5, r4
 8006c66:	2401      	movs	r4, #1
 8006c68:	e7ca      	b.n	8006c00 <__gethex+0xd4>
 8006c6a:	f04f 0900 	mov.w	r9, #0
 8006c6e:	1cb1      	adds	r1, r6, #2
 8006c70:	e7d3      	b.n	8006c1a <__gethex+0xee>
 8006c72:	f04f 0901 	mov.w	r9, #1
 8006c76:	e7fa      	b.n	8006c6e <__gethex+0x142>
 8006c78:	230a      	movs	r3, #10
 8006c7a:	fb03 0202 	mla	r2, r3, r2, r0
 8006c7e:	3a10      	subs	r2, #16
 8006c80:	e7d4      	b.n	8006c2c <__gethex+0x100>
 8006c82:	4631      	mov	r1, r6
 8006c84:	e7df      	b.n	8006c46 <__gethex+0x11a>
 8006c86:	1bf3      	subs	r3, r6, r7
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	dc0b      	bgt.n	8006ca8 <__gethex+0x17c>
 8006c90:	ee18 0a10 	vmov	r0, s16
 8006c94:	f000 fa82 	bl	800719c <_Balloc>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	b940      	cbnz	r0, 8006cae <__gethex+0x182>
 8006c9c:	4b5d      	ldr	r3, [pc, #372]	; (8006e14 <__gethex+0x2e8>)
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	21de      	movs	r1, #222	; 0xde
 8006ca2:	485d      	ldr	r0, [pc, #372]	; (8006e18 <__gethex+0x2ec>)
 8006ca4:	f001 fc38 	bl	8008518 <__assert_func>
 8006ca8:	3101      	adds	r1, #1
 8006caa:	105b      	asrs	r3, r3, #1
 8006cac:	e7ee      	b.n	8006c8c <__gethex+0x160>
 8006cae:	f100 0914 	add.w	r9, r0, #20
 8006cb2:	f04f 0b00 	mov.w	fp, #0
 8006cb6:	f1ca 0301 	rsb	r3, sl, #1
 8006cba:	f8cd 9008 	str.w	r9, [sp, #8]
 8006cbe:	f8cd b000 	str.w	fp, [sp]
 8006cc2:	9306      	str	r3, [sp, #24]
 8006cc4:	42b7      	cmp	r7, r6
 8006cc6:	d340      	bcc.n	8006d4a <__gethex+0x21e>
 8006cc8:	9802      	ldr	r0, [sp, #8]
 8006cca:	9b00      	ldr	r3, [sp, #0]
 8006ccc:	f840 3b04 	str.w	r3, [r0], #4
 8006cd0:	eba0 0009 	sub.w	r0, r0, r9
 8006cd4:	1080      	asrs	r0, r0, #2
 8006cd6:	0146      	lsls	r6, r0, #5
 8006cd8:	6120      	str	r0, [r4, #16]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fb50 	bl	8007380 <__hi0bits>
 8006ce0:	1a30      	subs	r0, r6, r0
 8006ce2:	f8d8 6000 	ldr.w	r6, [r8]
 8006ce6:	42b0      	cmp	r0, r6
 8006ce8:	dd63      	ble.n	8006db2 <__gethex+0x286>
 8006cea:	1b87      	subs	r7, r0, r6
 8006cec:	4639      	mov	r1, r7
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 fef4 	bl	8007adc <__any_on>
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	b1a8      	cbz	r0, 8006d24 <__gethex+0x1f8>
 8006cf8:	1e7b      	subs	r3, r7, #1
 8006cfa:	1159      	asrs	r1, r3, #5
 8006cfc:	f003 021f 	and.w	r2, r3, #31
 8006d00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006d04:	f04f 0a01 	mov.w	sl, #1
 8006d08:	fa0a f202 	lsl.w	r2, sl, r2
 8006d0c:	420a      	tst	r2, r1
 8006d0e:	d009      	beq.n	8006d24 <__gethex+0x1f8>
 8006d10:	4553      	cmp	r3, sl
 8006d12:	dd05      	ble.n	8006d20 <__gethex+0x1f4>
 8006d14:	1eb9      	subs	r1, r7, #2
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fee0 	bl	8007adc <__any_on>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d145      	bne.n	8006dac <__gethex+0x280>
 8006d20:	f04f 0a02 	mov.w	sl, #2
 8006d24:	4639      	mov	r1, r7
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7ff fe99 	bl	8006a5e <rshift>
 8006d2c:	443d      	add	r5, r7
 8006d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d32:	42ab      	cmp	r3, r5
 8006d34:	da4c      	bge.n	8006dd0 <__gethex+0x2a4>
 8006d36:	ee18 0a10 	vmov	r0, s16
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	f000 fa6e 	bl	800721c <_Bfree>
 8006d40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d42:	2300      	movs	r3, #0
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	27a3      	movs	r7, #163	; 0xa3
 8006d48:	e785      	b.n	8006c56 <__gethex+0x12a>
 8006d4a:	1e73      	subs	r3, r6, #1
 8006d4c:	9a05      	ldr	r2, [sp, #20]
 8006d4e:	9303      	str	r3, [sp, #12]
 8006d50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d019      	beq.n	8006d8c <__gethex+0x260>
 8006d58:	f1bb 0f20 	cmp.w	fp, #32
 8006d5c:	d107      	bne.n	8006d6e <__gethex+0x242>
 8006d5e:	9b02      	ldr	r3, [sp, #8]
 8006d60:	9a00      	ldr	r2, [sp, #0]
 8006d62:	f843 2b04 	str.w	r2, [r3], #4
 8006d66:	9302      	str	r3, [sp, #8]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	469b      	mov	fp, r3
 8006d6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d72:	f7ff fec6 	bl	8006b02 <__hexdig_fun>
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	f000 000f 	and.w	r0, r0, #15
 8006d7c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006d80:	4303      	orrs	r3, r0
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	f10b 0b04 	add.w	fp, fp, #4
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	e00d      	b.n	8006da8 <__gethex+0x27c>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	9a06      	ldr	r2, [sp, #24]
 8006d90:	4413      	add	r3, r2
 8006d92:	42bb      	cmp	r3, r7
 8006d94:	d3e0      	bcc.n	8006d58 <__gethex+0x22c>
 8006d96:	4618      	mov	r0, r3
 8006d98:	9901      	ldr	r1, [sp, #4]
 8006d9a:	9307      	str	r3, [sp, #28]
 8006d9c:	4652      	mov	r2, sl
 8006d9e:	f001 fac6 	bl	800832e <strncmp>
 8006da2:	9b07      	ldr	r3, [sp, #28]
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d1d7      	bne.n	8006d58 <__gethex+0x22c>
 8006da8:	461e      	mov	r6, r3
 8006daa:	e78b      	b.n	8006cc4 <__gethex+0x198>
 8006dac:	f04f 0a03 	mov.w	sl, #3
 8006db0:	e7b8      	b.n	8006d24 <__gethex+0x1f8>
 8006db2:	da0a      	bge.n	8006dca <__gethex+0x29e>
 8006db4:	1a37      	subs	r7, r6, r0
 8006db6:	4621      	mov	r1, r4
 8006db8:	ee18 0a10 	vmov	r0, s16
 8006dbc:	463a      	mov	r2, r7
 8006dbe:	f000 fc49 	bl	8007654 <__lshift>
 8006dc2:	1bed      	subs	r5, r5, r7
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	f100 0914 	add.w	r9, r0, #20
 8006dca:	f04f 0a00 	mov.w	sl, #0
 8006dce:	e7ae      	b.n	8006d2e <__gethex+0x202>
 8006dd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006dd4:	42a8      	cmp	r0, r5
 8006dd6:	dd72      	ble.n	8006ebe <__gethex+0x392>
 8006dd8:	1b45      	subs	r5, r0, r5
 8006dda:	42ae      	cmp	r6, r5
 8006ddc:	dc36      	bgt.n	8006e4c <__gethex+0x320>
 8006dde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d02a      	beq.n	8006e3c <__gethex+0x310>
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d02c      	beq.n	8006e44 <__gethex+0x318>
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d11c      	bne.n	8006e28 <__gethex+0x2fc>
 8006dee:	42ae      	cmp	r6, r5
 8006df0:	d11a      	bne.n	8006e28 <__gethex+0x2fc>
 8006df2:	2e01      	cmp	r6, #1
 8006df4:	d112      	bne.n	8006e1c <__gethex+0x2f0>
 8006df6:	9a04      	ldr	r2, [sp, #16]
 8006df8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	2301      	movs	r3, #1
 8006e00:	6123      	str	r3, [r4, #16]
 8006e02:	f8c9 3000 	str.w	r3, [r9]
 8006e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e08:	2762      	movs	r7, #98	; 0x62
 8006e0a:	601c      	str	r4, [r3, #0]
 8006e0c:	e723      	b.n	8006c56 <__gethex+0x12a>
 8006e0e:	bf00      	nop
 8006e10:	08008d1c 	.word	0x08008d1c
 8006e14:	08008c40 	.word	0x08008c40
 8006e18:	08008cb4 	.word	0x08008cb4
 8006e1c:	1e71      	subs	r1, r6, #1
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 fe5c 	bl	8007adc <__any_on>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d1e6      	bne.n	8006df6 <__gethex+0x2ca>
 8006e28:	ee18 0a10 	vmov	r0, s16
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	f000 f9f5 	bl	800721c <_Bfree>
 8006e32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e34:	2300      	movs	r3, #0
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	2750      	movs	r7, #80	; 0x50
 8006e3a:	e70c      	b.n	8006c56 <__gethex+0x12a>
 8006e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f2      	bne.n	8006e28 <__gethex+0x2fc>
 8006e42:	e7d8      	b.n	8006df6 <__gethex+0x2ca>
 8006e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1d5      	bne.n	8006df6 <__gethex+0x2ca>
 8006e4a:	e7ed      	b.n	8006e28 <__gethex+0x2fc>
 8006e4c:	1e6f      	subs	r7, r5, #1
 8006e4e:	f1ba 0f00 	cmp.w	sl, #0
 8006e52:	d131      	bne.n	8006eb8 <__gethex+0x38c>
 8006e54:	b127      	cbz	r7, 8006e60 <__gethex+0x334>
 8006e56:	4639      	mov	r1, r7
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fe3f 	bl	8007adc <__any_on>
 8006e5e:	4682      	mov	sl, r0
 8006e60:	117b      	asrs	r3, r7, #5
 8006e62:	2101      	movs	r1, #1
 8006e64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006e68:	f007 071f 	and.w	r7, r7, #31
 8006e6c:	fa01 f707 	lsl.w	r7, r1, r7
 8006e70:	421f      	tst	r7, r3
 8006e72:	4629      	mov	r1, r5
 8006e74:	4620      	mov	r0, r4
 8006e76:	bf18      	it	ne
 8006e78:	f04a 0a02 	orrne.w	sl, sl, #2
 8006e7c:	1b76      	subs	r6, r6, r5
 8006e7e:	f7ff fdee 	bl	8006a5e <rshift>
 8006e82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e86:	2702      	movs	r7, #2
 8006e88:	f1ba 0f00 	cmp.w	sl, #0
 8006e8c:	d048      	beq.n	8006f20 <__gethex+0x3f4>
 8006e8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d015      	beq.n	8006ec2 <__gethex+0x396>
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d017      	beq.n	8006eca <__gethex+0x39e>
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d109      	bne.n	8006eb2 <__gethex+0x386>
 8006e9e:	f01a 0f02 	tst.w	sl, #2
 8006ea2:	d006      	beq.n	8006eb2 <__gethex+0x386>
 8006ea4:	f8d9 0000 	ldr.w	r0, [r9]
 8006ea8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006eac:	f01a 0f01 	tst.w	sl, #1
 8006eb0:	d10e      	bne.n	8006ed0 <__gethex+0x3a4>
 8006eb2:	f047 0710 	orr.w	r7, r7, #16
 8006eb6:	e033      	b.n	8006f20 <__gethex+0x3f4>
 8006eb8:	f04f 0a01 	mov.w	sl, #1
 8006ebc:	e7d0      	b.n	8006e60 <__gethex+0x334>
 8006ebe:	2701      	movs	r7, #1
 8006ec0:	e7e2      	b.n	8006e88 <__gethex+0x35c>
 8006ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ec4:	f1c3 0301 	rsb	r3, r3, #1
 8006ec8:	9315      	str	r3, [sp, #84]	; 0x54
 8006eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <__gethex+0x386>
 8006ed0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006ed4:	f104 0314 	add.w	r3, r4, #20
 8006ed8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006edc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006ee0:	f04f 0c00 	mov.w	ip, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eea:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006eee:	d01c      	beq.n	8006f2a <__gethex+0x3fe>
 8006ef0:	3201      	adds	r2, #1
 8006ef2:	6002      	str	r2, [r0, #0]
 8006ef4:	2f02      	cmp	r7, #2
 8006ef6:	f104 0314 	add.w	r3, r4, #20
 8006efa:	d13f      	bne.n	8006f7c <__gethex+0x450>
 8006efc:	f8d8 2000 	ldr.w	r2, [r8]
 8006f00:	3a01      	subs	r2, #1
 8006f02:	42b2      	cmp	r2, r6
 8006f04:	d10a      	bne.n	8006f1c <__gethex+0x3f0>
 8006f06:	1171      	asrs	r1, r6, #5
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f0e:	f006 061f 	and.w	r6, r6, #31
 8006f12:	fa02 f606 	lsl.w	r6, r2, r6
 8006f16:	421e      	tst	r6, r3
 8006f18:	bf18      	it	ne
 8006f1a:	4617      	movne	r7, r2
 8006f1c:	f047 0720 	orr.w	r7, r7, #32
 8006f20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f22:	601c      	str	r4, [r3, #0]
 8006f24:	9b04      	ldr	r3, [sp, #16]
 8006f26:	601d      	str	r5, [r3, #0]
 8006f28:	e695      	b.n	8006c56 <__gethex+0x12a>
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f30:	d8d8      	bhi.n	8006ee4 <__gethex+0x3b8>
 8006f32:	68a3      	ldr	r3, [r4, #8]
 8006f34:	459b      	cmp	fp, r3
 8006f36:	db19      	blt.n	8006f6c <__gethex+0x440>
 8006f38:	6861      	ldr	r1, [r4, #4]
 8006f3a:	ee18 0a10 	vmov	r0, s16
 8006f3e:	3101      	adds	r1, #1
 8006f40:	f000 f92c 	bl	800719c <_Balloc>
 8006f44:	4681      	mov	r9, r0
 8006f46:	b918      	cbnz	r0, 8006f50 <__gethex+0x424>
 8006f48:	4b1a      	ldr	r3, [pc, #104]	; (8006fb4 <__gethex+0x488>)
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	2184      	movs	r1, #132	; 0x84
 8006f4e:	e6a8      	b.n	8006ca2 <__gethex+0x176>
 8006f50:	6922      	ldr	r2, [r4, #16]
 8006f52:	3202      	adds	r2, #2
 8006f54:	f104 010c 	add.w	r1, r4, #12
 8006f58:	0092      	lsls	r2, r2, #2
 8006f5a:	300c      	adds	r0, #12
 8006f5c:	f000 f910 	bl	8007180 <memcpy>
 8006f60:	4621      	mov	r1, r4
 8006f62:	ee18 0a10 	vmov	r0, s16
 8006f66:	f000 f959 	bl	800721c <_Bfree>
 8006f6a:	464c      	mov	r4, r9
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f74:	6122      	str	r2, [r4, #16]
 8006f76:	2201      	movs	r2, #1
 8006f78:	615a      	str	r2, [r3, #20]
 8006f7a:	e7bb      	b.n	8006ef4 <__gethex+0x3c8>
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	455a      	cmp	r2, fp
 8006f80:	dd0b      	ble.n	8006f9a <__gethex+0x46e>
 8006f82:	2101      	movs	r1, #1
 8006f84:	4620      	mov	r0, r4
 8006f86:	f7ff fd6a 	bl	8006a5e <rshift>
 8006f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f8e:	3501      	adds	r5, #1
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	f6ff aed0 	blt.w	8006d36 <__gethex+0x20a>
 8006f96:	2701      	movs	r7, #1
 8006f98:	e7c0      	b.n	8006f1c <__gethex+0x3f0>
 8006f9a:	f016 061f 	ands.w	r6, r6, #31
 8006f9e:	d0fa      	beq.n	8006f96 <__gethex+0x46a>
 8006fa0:	4453      	add	r3, sl
 8006fa2:	f1c6 0620 	rsb	r6, r6, #32
 8006fa6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006faa:	f000 f9e9 	bl	8007380 <__hi0bits>
 8006fae:	42b0      	cmp	r0, r6
 8006fb0:	dbe7      	blt.n	8006f82 <__gethex+0x456>
 8006fb2:	e7f0      	b.n	8006f96 <__gethex+0x46a>
 8006fb4:	08008c40 	.word	0x08008c40

08006fb8 <L_shift>:
 8006fb8:	f1c2 0208 	rsb	r2, r2, #8
 8006fbc:	0092      	lsls	r2, r2, #2
 8006fbe:	b570      	push	{r4, r5, r6, lr}
 8006fc0:	f1c2 0620 	rsb	r6, r2, #32
 8006fc4:	6843      	ldr	r3, [r0, #4]
 8006fc6:	6804      	ldr	r4, [r0, #0]
 8006fc8:	fa03 f506 	lsl.w	r5, r3, r6
 8006fcc:	432c      	orrs	r4, r5
 8006fce:	40d3      	lsrs	r3, r2
 8006fd0:	6004      	str	r4, [r0, #0]
 8006fd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006fd6:	4288      	cmp	r0, r1
 8006fd8:	d3f4      	bcc.n	8006fc4 <L_shift+0xc>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}

08006fdc <__match>:
 8006fdc:	b530      	push	{r4, r5, lr}
 8006fde:	6803      	ldr	r3, [r0, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fe6:	b914      	cbnz	r4, 8006fee <__match+0x12>
 8006fe8:	6003      	str	r3, [r0, #0]
 8006fea:	2001      	movs	r0, #1
 8006fec:	bd30      	pop	{r4, r5, pc}
 8006fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006ff6:	2d19      	cmp	r5, #25
 8006ff8:	bf98      	it	ls
 8006ffa:	3220      	addls	r2, #32
 8006ffc:	42a2      	cmp	r2, r4
 8006ffe:	d0f0      	beq.n	8006fe2 <__match+0x6>
 8007000:	2000      	movs	r0, #0
 8007002:	e7f3      	b.n	8006fec <__match+0x10>

08007004 <__hexnan>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	680b      	ldr	r3, [r1, #0]
 800700a:	115e      	asrs	r6, r3, #5
 800700c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007010:	f013 031f 	ands.w	r3, r3, #31
 8007014:	b087      	sub	sp, #28
 8007016:	bf18      	it	ne
 8007018:	3604      	addne	r6, #4
 800701a:	2500      	movs	r5, #0
 800701c:	1f37      	subs	r7, r6, #4
 800701e:	4690      	mov	r8, r2
 8007020:	6802      	ldr	r2, [r0, #0]
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	4682      	mov	sl, r0
 8007026:	f846 5c04 	str.w	r5, [r6, #-4]
 800702a:	46b9      	mov	r9, r7
 800702c:	463c      	mov	r4, r7
 800702e:	9502      	str	r5, [sp, #8]
 8007030:	46ab      	mov	fp, r5
 8007032:	7851      	ldrb	r1, [r2, #1]
 8007034:	1c53      	adds	r3, r2, #1
 8007036:	9303      	str	r3, [sp, #12]
 8007038:	b341      	cbz	r1, 800708c <__hexnan+0x88>
 800703a:	4608      	mov	r0, r1
 800703c:	9205      	str	r2, [sp, #20]
 800703e:	9104      	str	r1, [sp, #16]
 8007040:	f7ff fd5f 	bl	8006b02 <__hexdig_fun>
 8007044:	2800      	cmp	r0, #0
 8007046:	d14f      	bne.n	80070e8 <__hexnan+0xe4>
 8007048:	9904      	ldr	r1, [sp, #16]
 800704a:	9a05      	ldr	r2, [sp, #20]
 800704c:	2920      	cmp	r1, #32
 800704e:	d818      	bhi.n	8007082 <__hexnan+0x7e>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	459b      	cmp	fp, r3
 8007054:	dd13      	ble.n	800707e <__hexnan+0x7a>
 8007056:	454c      	cmp	r4, r9
 8007058:	d206      	bcs.n	8007068 <__hexnan+0x64>
 800705a:	2d07      	cmp	r5, #7
 800705c:	dc04      	bgt.n	8007068 <__hexnan+0x64>
 800705e:	462a      	mov	r2, r5
 8007060:	4649      	mov	r1, r9
 8007062:	4620      	mov	r0, r4
 8007064:	f7ff ffa8 	bl	8006fb8 <L_shift>
 8007068:	4544      	cmp	r4, r8
 800706a:	d950      	bls.n	800710e <__hexnan+0x10a>
 800706c:	2300      	movs	r3, #0
 800706e:	f1a4 0904 	sub.w	r9, r4, #4
 8007072:	f844 3c04 	str.w	r3, [r4, #-4]
 8007076:	f8cd b008 	str.w	fp, [sp, #8]
 800707a:	464c      	mov	r4, r9
 800707c:	461d      	mov	r5, r3
 800707e:	9a03      	ldr	r2, [sp, #12]
 8007080:	e7d7      	b.n	8007032 <__hexnan+0x2e>
 8007082:	2929      	cmp	r1, #41	; 0x29
 8007084:	d156      	bne.n	8007134 <__hexnan+0x130>
 8007086:	3202      	adds	r2, #2
 8007088:	f8ca 2000 	str.w	r2, [sl]
 800708c:	f1bb 0f00 	cmp.w	fp, #0
 8007090:	d050      	beq.n	8007134 <__hexnan+0x130>
 8007092:	454c      	cmp	r4, r9
 8007094:	d206      	bcs.n	80070a4 <__hexnan+0xa0>
 8007096:	2d07      	cmp	r5, #7
 8007098:	dc04      	bgt.n	80070a4 <__hexnan+0xa0>
 800709a:	462a      	mov	r2, r5
 800709c:	4649      	mov	r1, r9
 800709e:	4620      	mov	r0, r4
 80070a0:	f7ff ff8a 	bl	8006fb8 <L_shift>
 80070a4:	4544      	cmp	r4, r8
 80070a6:	d934      	bls.n	8007112 <__hexnan+0x10e>
 80070a8:	f1a8 0204 	sub.w	r2, r8, #4
 80070ac:	4623      	mov	r3, r4
 80070ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80070b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80070b6:	429f      	cmp	r7, r3
 80070b8:	d2f9      	bcs.n	80070ae <__hexnan+0xaa>
 80070ba:	1b3b      	subs	r3, r7, r4
 80070bc:	f023 0303 	bic.w	r3, r3, #3
 80070c0:	3304      	adds	r3, #4
 80070c2:	3401      	adds	r4, #1
 80070c4:	3e03      	subs	r6, #3
 80070c6:	42b4      	cmp	r4, r6
 80070c8:	bf88      	it	hi
 80070ca:	2304      	movhi	r3, #4
 80070cc:	4443      	add	r3, r8
 80070ce:	2200      	movs	r2, #0
 80070d0:	f843 2b04 	str.w	r2, [r3], #4
 80070d4:	429f      	cmp	r7, r3
 80070d6:	d2fb      	bcs.n	80070d0 <__hexnan+0xcc>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	b91b      	cbnz	r3, 80070e4 <__hexnan+0xe0>
 80070dc:	4547      	cmp	r7, r8
 80070de:	d127      	bne.n	8007130 <__hexnan+0x12c>
 80070e0:	2301      	movs	r3, #1
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	2005      	movs	r0, #5
 80070e6:	e026      	b.n	8007136 <__hexnan+0x132>
 80070e8:	3501      	adds	r5, #1
 80070ea:	2d08      	cmp	r5, #8
 80070ec:	f10b 0b01 	add.w	fp, fp, #1
 80070f0:	dd06      	ble.n	8007100 <__hexnan+0xfc>
 80070f2:	4544      	cmp	r4, r8
 80070f4:	d9c3      	bls.n	800707e <__hexnan+0x7a>
 80070f6:	2300      	movs	r3, #0
 80070f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80070fc:	2501      	movs	r5, #1
 80070fe:	3c04      	subs	r4, #4
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	f000 000f 	and.w	r0, r0, #15
 8007106:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800710a:	6022      	str	r2, [r4, #0]
 800710c:	e7b7      	b.n	800707e <__hexnan+0x7a>
 800710e:	2508      	movs	r5, #8
 8007110:	e7b5      	b.n	800707e <__hexnan+0x7a>
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0df      	beq.n	80070d8 <__hexnan+0xd4>
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	f1c3 0320 	rsb	r3, r3, #32
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
 8007124:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007128:	401a      	ands	r2, r3
 800712a:	f846 2c04 	str.w	r2, [r6, #-4]
 800712e:	e7d3      	b.n	80070d8 <__hexnan+0xd4>
 8007130:	3f04      	subs	r7, #4
 8007132:	e7d1      	b.n	80070d8 <__hexnan+0xd4>
 8007134:	2004      	movs	r0, #4
 8007136:	b007      	add	sp, #28
 8007138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800713c <_localeconv_r>:
 800713c:	4800      	ldr	r0, [pc, #0]	; (8007140 <_localeconv_r+0x4>)
 800713e:	4770      	bx	lr
 8007140:	20000164 	.word	0x20000164

08007144 <__retarget_lock_init_recursive>:
 8007144:	4770      	bx	lr

08007146 <__retarget_lock_acquire_recursive>:
 8007146:	4770      	bx	lr

08007148 <__retarget_lock_release_recursive>:
 8007148:	4770      	bx	lr
	...

0800714c <malloc>:
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <malloc+0xc>)
 800714e:	4601      	mov	r1, r0
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f000 bd67 	b.w	8007c24 <_malloc_r>
 8007156:	bf00      	nop
 8007158:	2000000c 	.word	0x2000000c

0800715c <__ascii_mbtowc>:
 800715c:	b082      	sub	sp, #8
 800715e:	b901      	cbnz	r1, 8007162 <__ascii_mbtowc+0x6>
 8007160:	a901      	add	r1, sp, #4
 8007162:	b142      	cbz	r2, 8007176 <__ascii_mbtowc+0x1a>
 8007164:	b14b      	cbz	r3, 800717a <__ascii_mbtowc+0x1e>
 8007166:	7813      	ldrb	r3, [r2, #0]
 8007168:	600b      	str	r3, [r1, #0]
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	1e10      	subs	r0, r2, #0
 800716e:	bf18      	it	ne
 8007170:	2001      	movne	r0, #1
 8007172:	b002      	add	sp, #8
 8007174:	4770      	bx	lr
 8007176:	4610      	mov	r0, r2
 8007178:	e7fb      	b.n	8007172 <__ascii_mbtowc+0x16>
 800717a:	f06f 0001 	mvn.w	r0, #1
 800717e:	e7f8      	b.n	8007172 <__ascii_mbtowc+0x16>

08007180 <memcpy>:
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	f100 33ff 	add.w	r3, r0, #4294967295
 8007188:	d100      	bne.n	800718c <memcpy+0xc>
 800718a:	4770      	bx	lr
 800718c:	b510      	push	{r4, lr}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	4291      	cmp	r1, r2
 8007198:	d1f9      	bne.n	800718e <memcpy+0xe>
 800719a:	bd10      	pop	{r4, pc}

0800719c <_Balloc>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071a0:	4604      	mov	r4, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	b976      	cbnz	r6, 80071c4 <_Balloc+0x28>
 80071a6:	2010      	movs	r0, #16
 80071a8:	f7ff ffd0 	bl	800714c <malloc>
 80071ac:	4602      	mov	r2, r0
 80071ae:	6260      	str	r0, [r4, #36]	; 0x24
 80071b0:	b920      	cbnz	r0, 80071bc <_Balloc+0x20>
 80071b2:	4b18      	ldr	r3, [pc, #96]	; (8007214 <_Balloc+0x78>)
 80071b4:	4818      	ldr	r0, [pc, #96]	; (8007218 <_Balloc+0x7c>)
 80071b6:	2166      	movs	r1, #102	; 0x66
 80071b8:	f001 f9ae 	bl	8008518 <__assert_func>
 80071bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c0:	6006      	str	r6, [r0, #0]
 80071c2:	60c6      	str	r6, [r0, #12]
 80071c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071c6:	68f3      	ldr	r3, [r6, #12]
 80071c8:	b183      	cbz	r3, 80071ec <_Balloc+0x50>
 80071ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071d2:	b9b8      	cbnz	r0, 8007204 <_Balloc+0x68>
 80071d4:	2101      	movs	r1, #1
 80071d6:	fa01 f605 	lsl.w	r6, r1, r5
 80071da:	1d72      	adds	r2, r6, #5
 80071dc:	0092      	lsls	r2, r2, #2
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 fc9d 	bl	8007b1e <_calloc_r>
 80071e4:	b160      	cbz	r0, 8007200 <_Balloc+0x64>
 80071e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071ea:	e00e      	b.n	800720a <_Balloc+0x6e>
 80071ec:	2221      	movs	r2, #33	; 0x21
 80071ee:	2104      	movs	r1, #4
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fc94 	bl	8007b1e <_calloc_r>
 80071f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f8:	60f0      	str	r0, [r6, #12]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e4      	bne.n	80071ca <_Balloc+0x2e>
 8007200:	2000      	movs	r0, #0
 8007202:	bd70      	pop	{r4, r5, r6, pc}
 8007204:	6802      	ldr	r2, [r0, #0]
 8007206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800720a:	2300      	movs	r3, #0
 800720c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007210:	e7f7      	b.n	8007202 <_Balloc+0x66>
 8007212:	bf00      	nop
 8007214:	08008bce 	.word	0x08008bce
 8007218:	08008d30 	.word	0x08008d30

0800721c <_Bfree>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007220:	4605      	mov	r5, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b976      	cbnz	r6, 8007244 <_Bfree+0x28>
 8007226:	2010      	movs	r0, #16
 8007228:	f7ff ff90 	bl	800714c <malloc>
 800722c:	4602      	mov	r2, r0
 800722e:	6268      	str	r0, [r5, #36]	; 0x24
 8007230:	b920      	cbnz	r0, 800723c <_Bfree+0x20>
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <_Bfree+0x3c>)
 8007234:	4809      	ldr	r0, [pc, #36]	; (800725c <_Bfree+0x40>)
 8007236:	218a      	movs	r1, #138	; 0x8a
 8007238:	f001 f96e 	bl	8008518 <__assert_func>
 800723c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007240:	6006      	str	r6, [r0, #0]
 8007242:	60c6      	str	r6, [r0, #12]
 8007244:	b13c      	cbz	r4, 8007256 <_Bfree+0x3a>
 8007246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007248:	6862      	ldr	r2, [r4, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007250:	6021      	str	r1, [r4, #0]
 8007252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	08008bce 	.word	0x08008bce
 800725c:	08008d30 	.word	0x08008d30

08007260 <__multadd>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	690d      	ldr	r5, [r1, #16]
 8007266:	4607      	mov	r7, r0
 8007268:	460c      	mov	r4, r1
 800726a:	461e      	mov	r6, r3
 800726c:	f101 0c14 	add.w	ip, r1, #20
 8007270:	2000      	movs	r0, #0
 8007272:	f8dc 3000 	ldr.w	r3, [ip]
 8007276:	b299      	uxth	r1, r3
 8007278:	fb02 6101 	mla	r1, r2, r1, r6
 800727c:	0c1e      	lsrs	r6, r3, #16
 800727e:	0c0b      	lsrs	r3, r1, #16
 8007280:	fb02 3306 	mla	r3, r2, r6, r3
 8007284:	b289      	uxth	r1, r1
 8007286:	3001      	adds	r0, #1
 8007288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800728c:	4285      	cmp	r5, r0
 800728e:	f84c 1b04 	str.w	r1, [ip], #4
 8007292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007296:	dcec      	bgt.n	8007272 <__multadd+0x12>
 8007298:	b30e      	cbz	r6, 80072de <__multadd+0x7e>
 800729a:	68a3      	ldr	r3, [r4, #8]
 800729c:	42ab      	cmp	r3, r5
 800729e:	dc19      	bgt.n	80072d4 <__multadd+0x74>
 80072a0:	6861      	ldr	r1, [r4, #4]
 80072a2:	4638      	mov	r0, r7
 80072a4:	3101      	adds	r1, #1
 80072a6:	f7ff ff79 	bl	800719c <_Balloc>
 80072aa:	4680      	mov	r8, r0
 80072ac:	b928      	cbnz	r0, 80072ba <__multadd+0x5a>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <__multadd+0x84>)
 80072b2:	480d      	ldr	r0, [pc, #52]	; (80072e8 <__multadd+0x88>)
 80072b4:	21b5      	movs	r1, #181	; 0xb5
 80072b6:	f001 f92f 	bl	8008518 <__assert_func>
 80072ba:	6922      	ldr	r2, [r4, #16]
 80072bc:	3202      	adds	r2, #2
 80072be:	f104 010c 	add.w	r1, r4, #12
 80072c2:	0092      	lsls	r2, r2, #2
 80072c4:	300c      	adds	r0, #12
 80072c6:	f7ff ff5b 	bl	8007180 <memcpy>
 80072ca:	4621      	mov	r1, r4
 80072cc:	4638      	mov	r0, r7
 80072ce:	f7ff ffa5 	bl	800721c <_Bfree>
 80072d2:	4644      	mov	r4, r8
 80072d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072d8:	3501      	adds	r5, #1
 80072da:	615e      	str	r6, [r3, #20]
 80072dc:	6125      	str	r5, [r4, #16]
 80072de:	4620      	mov	r0, r4
 80072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e4:	08008c40 	.word	0x08008c40
 80072e8:	08008d30 	.word	0x08008d30

080072ec <__s2b>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	460c      	mov	r4, r1
 80072f2:	4615      	mov	r5, r2
 80072f4:	461f      	mov	r7, r3
 80072f6:	2209      	movs	r2, #9
 80072f8:	3308      	adds	r3, #8
 80072fa:	4606      	mov	r6, r0
 80072fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007300:	2100      	movs	r1, #0
 8007302:	2201      	movs	r2, #1
 8007304:	429a      	cmp	r2, r3
 8007306:	db09      	blt.n	800731c <__s2b+0x30>
 8007308:	4630      	mov	r0, r6
 800730a:	f7ff ff47 	bl	800719c <_Balloc>
 800730e:	b940      	cbnz	r0, 8007322 <__s2b+0x36>
 8007310:	4602      	mov	r2, r0
 8007312:	4b19      	ldr	r3, [pc, #100]	; (8007378 <__s2b+0x8c>)
 8007314:	4819      	ldr	r0, [pc, #100]	; (800737c <__s2b+0x90>)
 8007316:	21ce      	movs	r1, #206	; 0xce
 8007318:	f001 f8fe 	bl	8008518 <__assert_func>
 800731c:	0052      	lsls	r2, r2, #1
 800731e:	3101      	adds	r1, #1
 8007320:	e7f0      	b.n	8007304 <__s2b+0x18>
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	6143      	str	r3, [r0, #20]
 8007326:	2d09      	cmp	r5, #9
 8007328:	f04f 0301 	mov.w	r3, #1
 800732c:	6103      	str	r3, [r0, #16]
 800732e:	dd16      	ble.n	800735e <__s2b+0x72>
 8007330:	f104 0909 	add.w	r9, r4, #9
 8007334:	46c8      	mov	r8, r9
 8007336:	442c      	add	r4, r5
 8007338:	f818 3b01 	ldrb.w	r3, [r8], #1
 800733c:	4601      	mov	r1, r0
 800733e:	3b30      	subs	r3, #48	; 0x30
 8007340:	220a      	movs	r2, #10
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff8c 	bl	8007260 <__multadd>
 8007348:	45a0      	cmp	r8, r4
 800734a:	d1f5      	bne.n	8007338 <__s2b+0x4c>
 800734c:	f1a5 0408 	sub.w	r4, r5, #8
 8007350:	444c      	add	r4, r9
 8007352:	1b2d      	subs	r5, r5, r4
 8007354:	1963      	adds	r3, r4, r5
 8007356:	42bb      	cmp	r3, r7
 8007358:	db04      	blt.n	8007364 <__s2b+0x78>
 800735a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800735e:	340a      	adds	r4, #10
 8007360:	2509      	movs	r5, #9
 8007362:	e7f6      	b.n	8007352 <__s2b+0x66>
 8007364:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007368:	4601      	mov	r1, r0
 800736a:	3b30      	subs	r3, #48	; 0x30
 800736c:	220a      	movs	r2, #10
 800736e:	4630      	mov	r0, r6
 8007370:	f7ff ff76 	bl	8007260 <__multadd>
 8007374:	e7ee      	b.n	8007354 <__s2b+0x68>
 8007376:	bf00      	nop
 8007378:	08008c40 	.word	0x08008c40
 800737c:	08008d30 	.word	0x08008d30

08007380 <__hi0bits>:
 8007380:	0c03      	lsrs	r3, r0, #16
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	b9d3      	cbnz	r3, 80073bc <__hi0bits+0x3c>
 8007386:	0400      	lsls	r0, r0, #16
 8007388:	2310      	movs	r3, #16
 800738a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800738e:	bf04      	itt	eq
 8007390:	0200      	lsleq	r0, r0, #8
 8007392:	3308      	addeq	r3, #8
 8007394:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007398:	bf04      	itt	eq
 800739a:	0100      	lsleq	r0, r0, #4
 800739c:	3304      	addeq	r3, #4
 800739e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073a2:	bf04      	itt	eq
 80073a4:	0080      	lsleq	r0, r0, #2
 80073a6:	3302      	addeq	r3, #2
 80073a8:	2800      	cmp	r0, #0
 80073aa:	db05      	blt.n	80073b8 <__hi0bits+0x38>
 80073ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073b0:	f103 0301 	add.w	r3, r3, #1
 80073b4:	bf08      	it	eq
 80073b6:	2320      	moveq	r3, #32
 80073b8:	4618      	mov	r0, r3
 80073ba:	4770      	bx	lr
 80073bc:	2300      	movs	r3, #0
 80073be:	e7e4      	b.n	800738a <__hi0bits+0xa>

080073c0 <__lo0bits>:
 80073c0:	6803      	ldr	r3, [r0, #0]
 80073c2:	f013 0207 	ands.w	r2, r3, #7
 80073c6:	4601      	mov	r1, r0
 80073c8:	d00b      	beq.n	80073e2 <__lo0bits+0x22>
 80073ca:	07da      	lsls	r2, r3, #31
 80073cc:	d423      	bmi.n	8007416 <__lo0bits+0x56>
 80073ce:	0798      	lsls	r0, r3, #30
 80073d0:	bf49      	itett	mi
 80073d2:	085b      	lsrmi	r3, r3, #1
 80073d4:	089b      	lsrpl	r3, r3, #2
 80073d6:	2001      	movmi	r0, #1
 80073d8:	600b      	strmi	r3, [r1, #0]
 80073da:	bf5c      	itt	pl
 80073dc:	600b      	strpl	r3, [r1, #0]
 80073de:	2002      	movpl	r0, #2
 80073e0:	4770      	bx	lr
 80073e2:	b298      	uxth	r0, r3
 80073e4:	b9a8      	cbnz	r0, 8007412 <__lo0bits+0x52>
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	2010      	movs	r0, #16
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	b90a      	cbnz	r2, 80073f2 <__lo0bits+0x32>
 80073ee:	3008      	adds	r0, #8
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	071a      	lsls	r2, r3, #28
 80073f4:	bf04      	itt	eq
 80073f6:	091b      	lsreq	r3, r3, #4
 80073f8:	3004      	addeq	r0, #4
 80073fa:	079a      	lsls	r2, r3, #30
 80073fc:	bf04      	itt	eq
 80073fe:	089b      	lsreq	r3, r3, #2
 8007400:	3002      	addeq	r0, #2
 8007402:	07da      	lsls	r2, r3, #31
 8007404:	d403      	bmi.n	800740e <__lo0bits+0x4e>
 8007406:	085b      	lsrs	r3, r3, #1
 8007408:	f100 0001 	add.w	r0, r0, #1
 800740c:	d005      	beq.n	800741a <__lo0bits+0x5a>
 800740e:	600b      	str	r3, [r1, #0]
 8007410:	4770      	bx	lr
 8007412:	4610      	mov	r0, r2
 8007414:	e7e9      	b.n	80073ea <__lo0bits+0x2a>
 8007416:	2000      	movs	r0, #0
 8007418:	4770      	bx	lr
 800741a:	2020      	movs	r0, #32
 800741c:	4770      	bx	lr
	...

08007420 <__i2b>:
 8007420:	b510      	push	{r4, lr}
 8007422:	460c      	mov	r4, r1
 8007424:	2101      	movs	r1, #1
 8007426:	f7ff feb9 	bl	800719c <_Balloc>
 800742a:	4602      	mov	r2, r0
 800742c:	b928      	cbnz	r0, 800743a <__i2b+0x1a>
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <__i2b+0x24>)
 8007430:	4805      	ldr	r0, [pc, #20]	; (8007448 <__i2b+0x28>)
 8007432:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007436:	f001 f86f 	bl	8008518 <__assert_func>
 800743a:	2301      	movs	r3, #1
 800743c:	6144      	str	r4, [r0, #20]
 800743e:	6103      	str	r3, [r0, #16]
 8007440:	bd10      	pop	{r4, pc}
 8007442:	bf00      	nop
 8007444:	08008c40 	.word	0x08008c40
 8007448:	08008d30 	.word	0x08008d30

0800744c <__multiply>:
 800744c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007450:	4691      	mov	r9, r2
 8007452:	690a      	ldr	r2, [r1, #16]
 8007454:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007458:	429a      	cmp	r2, r3
 800745a:	bfb8      	it	lt
 800745c:	460b      	movlt	r3, r1
 800745e:	460c      	mov	r4, r1
 8007460:	bfbc      	itt	lt
 8007462:	464c      	movlt	r4, r9
 8007464:	4699      	movlt	r9, r3
 8007466:	6927      	ldr	r7, [r4, #16]
 8007468:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800746c:	68a3      	ldr	r3, [r4, #8]
 800746e:	6861      	ldr	r1, [r4, #4]
 8007470:	eb07 060a 	add.w	r6, r7, sl
 8007474:	42b3      	cmp	r3, r6
 8007476:	b085      	sub	sp, #20
 8007478:	bfb8      	it	lt
 800747a:	3101      	addlt	r1, #1
 800747c:	f7ff fe8e 	bl	800719c <_Balloc>
 8007480:	b930      	cbnz	r0, 8007490 <__multiply+0x44>
 8007482:	4602      	mov	r2, r0
 8007484:	4b44      	ldr	r3, [pc, #272]	; (8007598 <__multiply+0x14c>)
 8007486:	4845      	ldr	r0, [pc, #276]	; (800759c <__multiply+0x150>)
 8007488:	f240 115d 	movw	r1, #349	; 0x15d
 800748c:	f001 f844 	bl	8008518 <__assert_func>
 8007490:	f100 0514 	add.w	r5, r0, #20
 8007494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007498:	462b      	mov	r3, r5
 800749a:	2200      	movs	r2, #0
 800749c:	4543      	cmp	r3, r8
 800749e:	d321      	bcc.n	80074e4 <__multiply+0x98>
 80074a0:	f104 0314 	add.w	r3, r4, #20
 80074a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074a8:	f109 0314 	add.w	r3, r9, #20
 80074ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074b0:	9202      	str	r2, [sp, #8]
 80074b2:	1b3a      	subs	r2, r7, r4
 80074b4:	3a15      	subs	r2, #21
 80074b6:	f022 0203 	bic.w	r2, r2, #3
 80074ba:	3204      	adds	r2, #4
 80074bc:	f104 0115 	add.w	r1, r4, #21
 80074c0:	428f      	cmp	r7, r1
 80074c2:	bf38      	it	cc
 80074c4:	2204      	movcc	r2, #4
 80074c6:	9201      	str	r2, [sp, #4]
 80074c8:	9a02      	ldr	r2, [sp, #8]
 80074ca:	9303      	str	r3, [sp, #12]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d80c      	bhi.n	80074ea <__multiply+0x9e>
 80074d0:	2e00      	cmp	r6, #0
 80074d2:	dd03      	ble.n	80074dc <__multiply+0x90>
 80074d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d05a      	beq.n	8007592 <__multiply+0x146>
 80074dc:	6106      	str	r6, [r0, #16]
 80074de:	b005      	add	sp, #20
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	f843 2b04 	str.w	r2, [r3], #4
 80074e8:	e7d8      	b.n	800749c <__multiply+0x50>
 80074ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80074ee:	f1ba 0f00 	cmp.w	sl, #0
 80074f2:	d024      	beq.n	800753e <__multiply+0xf2>
 80074f4:	f104 0e14 	add.w	lr, r4, #20
 80074f8:	46a9      	mov	r9, r5
 80074fa:	f04f 0c00 	mov.w	ip, #0
 80074fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007502:	f8d9 1000 	ldr.w	r1, [r9]
 8007506:	fa1f fb82 	uxth.w	fp, r2
 800750a:	b289      	uxth	r1, r1
 800750c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007510:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007514:	f8d9 2000 	ldr.w	r2, [r9]
 8007518:	4461      	add	r1, ip
 800751a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800751e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007522:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007526:	b289      	uxth	r1, r1
 8007528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800752c:	4577      	cmp	r7, lr
 800752e:	f849 1b04 	str.w	r1, [r9], #4
 8007532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007536:	d8e2      	bhi.n	80074fe <__multiply+0xb2>
 8007538:	9a01      	ldr	r2, [sp, #4]
 800753a:	f845 c002 	str.w	ip, [r5, r2]
 800753e:	9a03      	ldr	r2, [sp, #12]
 8007540:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007544:	3304      	adds	r3, #4
 8007546:	f1b9 0f00 	cmp.w	r9, #0
 800754a:	d020      	beq.n	800758e <__multiply+0x142>
 800754c:	6829      	ldr	r1, [r5, #0]
 800754e:	f104 0c14 	add.w	ip, r4, #20
 8007552:	46ae      	mov	lr, r5
 8007554:	f04f 0a00 	mov.w	sl, #0
 8007558:	f8bc b000 	ldrh.w	fp, [ip]
 800755c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007560:	fb09 220b 	mla	r2, r9, fp, r2
 8007564:	4492      	add	sl, r2
 8007566:	b289      	uxth	r1, r1
 8007568:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800756c:	f84e 1b04 	str.w	r1, [lr], #4
 8007570:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007574:	f8be 1000 	ldrh.w	r1, [lr]
 8007578:	0c12      	lsrs	r2, r2, #16
 800757a:	fb09 1102 	mla	r1, r9, r2, r1
 800757e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007582:	4567      	cmp	r7, ip
 8007584:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007588:	d8e6      	bhi.n	8007558 <__multiply+0x10c>
 800758a:	9a01      	ldr	r2, [sp, #4]
 800758c:	50a9      	str	r1, [r5, r2]
 800758e:	3504      	adds	r5, #4
 8007590:	e79a      	b.n	80074c8 <__multiply+0x7c>
 8007592:	3e01      	subs	r6, #1
 8007594:	e79c      	b.n	80074d0 <__multiply+0x84>
 8007596:	bf00      	nop
 8007598:	08008c40 	.word	0x08008c40
 800759c:	08008d30 	.word	0x08008d30

080075a0 <__pow5mult>:
 80075a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a4:	4615      	mov	r5, r2
 80075a6:	f012 0203 	ands.w	r2, r2, #3
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	d007      	beq.n	80075c0 <__pow5mult+0x20>
 80075b0:	4c25      	ldr	r4, [pc, #148]	; (8007648 <__pow5mult+0xa8>)
 80075b2:	3a01      	subs	r2, #1
 80075b4:	2300      	movs	r3, #0
 80075b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ba:	f7ff fe51 	bl	8007260 <__multadd>
 80075be:	4607      	mov	r7, r0
 80075c0:	10ad      	asrs	r5, r5, #2
 80075c2:	d03d      	beq.n	8007640 <__pow5mult+0xa0>
 80075c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075c6:	b97c      	cbnz	r4, 80075e8 <__pow5mult+0x48>
 80075c8:	2010      	movs	r0, #16
 80075ca:	f7ff fdbf 	bl	800714c <malloc>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6270      	str	r0, [r6, #36]	; 0x24
 80075d2:	b928      	cbnz	r0, 80075e0 <__pow5mult+0x40>
 80075d4:	4b1d      	ldr	r3, [pc, #116]	; (800764c <__pow5mult+0xac>)
 80075d6:	481e      	ldr	r0, [pc, #120]	; (8007650 <__pow5mult+0xb0>)
 80075d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075dc:	f000 ff9c 	bl	8008518 <__assert_func>
 80075e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075e4:	6004      	str	r4, [r0, #0]
 80075e6:	60c4      	str	r4, [r0, #12]
 80075e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075f0:	b94c      	cbnz	r4, 8007606 <__pow5mult+0x66>
 80075f2:	f240 2171 	movw	r1, #625	; 0x271
 80075f6:	4630      	mov	r0, r6
 80075f8:	f7ff ff12 	bl	8007420 <__i2b>
 80075fc:	2300      	movs	r3, #0
 80075fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007602:	4604      	mov	r4, r0
 8007604:	6003      	str	r3, [r0, #0]
 8007606:	f04f 0900 	mov.w	r9, #0
 800760a:	07eb      	lsls	r3, r5, #31
 800760c:	d50a      	bpl.n	8007624 <__pow5mult+0x84>
 800760e:	4639      	mov	r1, r7
 8007610:	4622      	mov	r2, r4
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ff1a 	bl	800744c <__multiply>
 8007618:	4639      	mov	r1, r7
 800761a:	4680      	mov	r8, r0
 800761c:	4630      	mov	r0, r6
 800761e:	f7ff fdfd 	bl	800721c <_Bfree>
 8007622:	4647      	mov	r7, r8
 8007624:	106d      	asrs	r5, r5, #1
 8007626:	d00b      	beq.n	8007640 <__pow5mult+0xa0>
 8007628:	6820      	ldr	r0, [r4, #0]
 800762a:	b938      	cbnz	r0, 800763c <__pow5mult+0x9c>
 800762c:	4622      	mov	r2, r4
 800762e:	4621      	mov	r1, r4
 8007630:	4630      	mov	r0, r6
 8007632:	f7ff ff0b 	bl	800744c <__multiply>
 8007636:	6020      	str	r0, [r4, #0]
 8007638:	f8c0 9000 	str.w	r9, [r0]
 800763c:	4604      	mov	r4, r0
 800763e:	e7e4      	b.n	800760a <__pow5mult+0x6a>
 8007640:	4638      	mov	r0, r7
 8007642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007646:	bf00      	nop
 8007648:	08008e80 	.word	0x08008e80
 800764c:	08008bce 	.word	0x08008bce
 8007650:	08008d30 	.word	0x08008d30

08007654 <__lshift>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	460c      	mov	r4, r1
 800765a:	6849      	ldr	r1, [r1, #4]
 800765c:	6923      	ldr	r3, [r4, #16]
 800765e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	4607      	mov	r7, r0
 8007666:	4691      	mov	r9, r2
 8007668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800766c:	f108 0601 	add.w	r6, r8, #1
 8007670:	42b3      	cmp	r3, r6
 8007672:	db0b      	blt.n	800768c <__lshift+0x38>
 8007674:	4638      	mov	r0, r7
 8007676:	f7ff fd91 	bl	800719c <_Balloc>
 800767a:	4605      	mov	r5, r0
 800767c:	b948      	cbnz	r0, 8007692 <__lshift+0x3e>
 800767e:	4602      	mov	r2, r0
 8007680:	4b2a      	ldr	r3, [pc, #168]	; (800772c <__lshift+0xd8>)
 8007682:	482b      	ldr	r0, [pc, #172]	; (8007730 <__lshift+0xdc>)
 8007684:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007688:	f000 ff46 	bl	8008518 <__assert_func>
 800768c:	3101      	adds	r1, #1
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	e7ee      	b.n	8007670 <__lshift+0x1c>
 8007692:	2300      	movs	r3, #0
 8007694:	f100 0114 	add.w	r1, r0, #20
 8007698:	f100 0210 	add.w	r2, r0, #16
 800769c:	4618      	mov	r0, r3
 800769e:	4553      	cmp	r3, sl
 80076a0:	db37      	blt.n	8007712 <__lshift+0xbe>
 80076a2:	6920      	ldr	r0, [r4, #16]
 80076a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076a8:	f104 0314 	add.w	r3, r4, #20
 80076ac:	f019 091f 	ands.w	r9, r9, #31
 80076b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076b8:	d02f      	beq.n	800771a <__lshift+0xc6>
 80076ba:	f1c9 0e20 	rsb	lr, r9, #32
 80076be:	468a      	mov	sl, r1
 80076c0:	f04f 0c00 	mov.w	ip, #0
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	fa02 f209 	lsl.w	r2, r2, r9
 80076ca:	ea42 020c 	orr.w	r2, r2, ip
 80076ce:	f84a 2b04 	str.w	r2, [sl], #4
 80076d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d6:	4298      	cmp	r0, r3
 80076d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076dc:	d8f2      	bhi.n	80076c4 <__lshift+0x70>
 80076de:	1b03      	subs	r3, r0, r4
 80076e0:	3b15      	subs	r3, #21
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	3304      	adds	r3, #4
 80076e8:	f104 0215 	add.w	r2, r4, #21
 80076ec:	4290      	cmp	r0, r2
 80076ee:	bf38      	it	cc
 80076f0:	2304      	movcc	r3, #4
 80076f2:	f841 c003 	str.w	ip, [r1, r3]
 80076f6:	f1bc 0f00 	cmp.w	ip, #0
 80076fa:	d001      	beq.n	8007700 <__lshift+0xac>
 80076fc:	f108 0602 	add.w	r6, r8, #2
 8007700:	3e01      	subs	r6, #1
 8007702:	4638      	mov	r0, r7
 8007704:	612e      	str	r6, [r5, #16]
 8007706:	4621      	mov	r1, r4
 8007708:	f7ff fd88 	bl	800721c <_Bfree>
 800770c:	4628      	mov	r0, r5
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	f842 0f04 	str.w	r0, [r2, #4]!
 8007716:	3301      	adds	r3, #1
 8007718:	e7c1      	b.n	800769e <__lshift+0x4a>
 800771a:	3904      	subs	r1, #4
 800771c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007720:	f841 2f04 	str.w	r2, [r1, #4]!
 8007724:	4298      	cmp	r0, r3
 8007726:	d8f9      	bhi.n	800771c <__lshift+0xc8>
 8007728:	e7ea      	b.n	8007700 <__lshift+0xac>
 800772a:	bf00      	nop
 800772c:	08008c40 	.word	0x08008c40
 8007730:	08008d30 	.word	0x08008d30

08007734 <__mcmp>:
 8007734:	b530      	push	{r4, r5, lr}
 8007736:	6902      	ldr	r2, [r0, #16]
 8007738:	690c      	ldr	r4, [r1, #16]
 800773a:	1b12      	subs	r2, r2, r4
 800773c:	d10e      	bne.n	800775c <__mcmp+0x28>
 800773e:	f100 0314 	add.w	r3, r0, #20
 8007742:	3114      	adds	r1, #20
 8007744:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007748:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800774c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007750:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007754:	42a5      	cmp	r5, r4
 8007756:	d003      	beq.n	8007760 <__mcmp+0x2c>
 8007758:	d305      	bcc.n	8007766 <__mcmp+0x32>
 800775a:	2201      	movs	r2, #1
 800775c:	4610      	mov	r0, r2
 800775e:	bd30      	pop	{r4, r5, pc}
 8007760:	4283      	cmp	r3, r0
 8007762:	d3f3      	bcc.n	800774c <__mcmp+0x18>
 8007764:	e7fa      	b.n	800775c <__mcmp+0x28>
 8007766:	f04f 32ff 	mov.w	r2, #4294967295
 800776a:	e7f7      	b.n	800775c <__mcmp+0x28>

0800776c <__mdiff>:
 800776c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	460c      	mov	r4, r1
 8007772:	4606      	mov	r6, r0
 8007774:	4611      	mov	r1, r2
 8007776:	4620      	mov	r0, r4
 8007778:	4690      	mov	r8, r2
 800777a:	f7ff ffdb 	bl	8007734 <__mcmp>
 800777e:	1e05      	subs	r5, r0, #0
 8007780:	d110      	bne.n	80077a4 <__mdiff+0x38>
 8007782:	4629      	mov	r1, r5
 8007784:	4630      	mov	r0, r6
 8007786:	f7ff fd09 	bl	800719c <_Balloc>
 800778a:	b930      	cbnz	r0, 800779a <__mdiff+0x2e>
 800778c:	4b3a      	ldr	r3, [pc, #232]	; (8007878 <__mdiff+0x10c>)
 800778e:	4602      	mov	r2, r0
 8007790:	f240 2132 	movw	r1, #562	; 0x232
 8007794:	4839      	ldr	r0, [pc, #228]	; (800787c <__mdiff+0x110>)
 8007796:	f000 febf 	bl	8008518 <__assert_func>
 800779a:	2301      	movs	r3, #1
 800779c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a4:	bfa4      	itt	ge
 80077a6:	4643      	movge	r3, r8
 80077a8:	46a0      	movge	r8, r4
 80077aa:	4630      	mov	r0, r6
 80077ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077b0:	bfa6      	itte	ge
 80077b2:	461c      	movge	r4, r3
 80077b4:	2500      	movge	r5, #0
 80077b6:	2501      	movlt	r5, #1
 80077b8:	f7ff fcf0 	bl	800719c <_Balloc>
 80077bc:	b920      	cbnz	r0, 80077c8 <__mdiff+0x5c>
 80077be:	4b2e      	ldr	r3, [pc, #184]	; (8007878 <__mdiff+0x10c>)
 80077c0:	4602      	mov	r2, r0
 80077c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077c6:	e7e5      	b.n	8007794 <__mdiff+0x28>
 80077c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077cc:	6926      	ldr	r6, [r4, #16]
 80077ce:	60c5      	str	r5, [r0, #12]
 80077d0:	f104 0914 	add.w	r9, r4, #20
 80077d4:	f108 0514 	add.w	r5, r8, #20
 80077d8:	f100 0e14 	add.w	lr, r0, #20
 80077dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077e4:	f108 0210 	add.w	r2, r8, #16
 80077e8:	46f2      	mov	sl, lr
 80077ea:	2100      	movs	r1, #0
 80077ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80077f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077f4:	fa1f f883 	uxth.w	r8, r3
 80077f8:	fa11 f18b 	uxtah	r1, r1, fp
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	eba1 0808 	sub.w	r8, r1, r8
 8007802:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007806:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800780a:	fa1f f888 	uxth.w	r8, r8
 800780e:	1419      	asrs	r1, r3, #16
 8007810:	454e      	cmp	r6, r9
 8007812:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007816:	f84a 3b04 	str.w	r3, [sl], #4
 800781a:	d8e7      	bhi.n	80077ec <__mdiff+0x80>
 800781c:	1b33      	subs	r3, r6, r4
 800781e:	3b15      	subs	r3, #21
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	3304      	adds	r3, #4
 8007826:	3415      	adds	r4, #21
 8007828:	42a6      	cmp	r6, r4
 800782a:	bf38      	it	cc
 800782c:	2304      	movcc	r3, #4
 800782e:	441d      	add	r5, r3
 8007830:	4473      	add	r3, lr
 8007832:	469e      	mov	lr, r3
 8007834:	462e      	mov	r6, r5
 8007836:	4566      	cmp	r6, ip
 8007838:	d30e      	bcc.n	8007858 <__mdiff+0xec>
 800783a:	f10c 0203 	add.w	r2, ip, #3
 800783e:	1b52      	subs	r2, r2, r5
 8007840:	f022 0203 	bic.w	r2, r2, #3
 8007844:	3d03      	subs	r5, #3
 8007846:	45ac      	cmp	ip, r5
 8007848:	bf38      	it	cc
 800784a:	2200      	movcc	r2, #0
 800784c:	441a      	add	r2, r3
 800784e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007852:	b17b      	cbz	r3, 8007874 <__mdiff+0x108>
 8007854:	6107      	str	r7, [r0, #16]
 8007856:	e7a3      	b.n	80077a0 <__mdiff+0x34>
 8007858:	f856 8b04 	ldr.w	r8, [r6], #4
 800785c:	fa11 f288 	uxtah	r2, r1, r8
 8007860:	1414      	asrs	r4, r2, #16
 8007862:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007866:	b292      	uxth	r2, r2
 8007868:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800786c:	f84e 2b04 	str.w	r2, [lr], #4
 8007870:	1421      	asrs	r1, r4, #16
 8007872:	e7e0      	b.n	8007836 <__mdiff+0xca>
 8007874:	3f01      	subs	r7, #1
 8007876:	e7ea      	b.n	800784e <__mdiff+0xe2>
 8007878:	08008c40 	.word	0x08008c40
 800787c:	08008d30 	.word	0x08008d30

08007880 <__ulp>:
 8007880:	b082      	sub	sp, #8
 8007882:	ed8d 0b00 	vstr	d0, [sp]
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	4912      	ldr	r1, [pc, #72]	; (80078d4 <__ulp+0x54>)
 800788a:	4019      	ands	r1, r3
 800788c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007890:	2900      	cmp	r1, #0
 8007892:	dd05      	ble.n	80078a0 <__ulp+0x20>
 8007894:	2200      	movs	r2, #0
 8007896:	460b      	mov	r3, r1
 8007898:	ec43 2b10 	vmov	d0, r2, r3
 800789c:	b002      	add	sp, #8
 800789e:	4770      	bx	lr
 80078a0:	4249      	negs	r1, r1
 80078a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80078a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	da04      	bge.n	80078be <__ulp+0x3e>
 80078b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80078b8:	fa41 f300 	asr.w	r3, r1, r0
 80078bc:	e7ec      	b.n	8007898 <__ulp+0x18>
 80078be:	f1a0 0114 	sub.w	r1, r0, #20
 80078c2:	291e      	cmp	r1, #30
 80078c4:	bfda      	itte	le
 80078c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80078ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80078ce:	2101      	movgt	r1, #1
 80078d0:	460a      	mov	r2, r1
 80078d2:	e7e1      	b.n	8007898 <__ulp+0x18>
 80078d4:	7ff00000 	.word	0x7ff00000

080078d8 <__b2d>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	6905      	ldr	r5, [r0, #16]
 80078dc:	f100 0714 	add.w	r7, r0, #20
 80078e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80078e4:	1f2e      	subs	r6, r5, #4
 80078e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7ff fd48 	bl	8007380 <__hi0bits>
 80078f0:	f1c0 0320 	rsb	r3, r0, #32
 80078f4:	280a      	cmp	r0, #10
 80078f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007974 <__b2d+0x9c>
 80078fa:	600b      	str	r3, [r1, #0]
 80078fc:	dc14      	bgt.n	8007928 <__b2d+0x50>
 80078fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8007902:	fa24 f10e 	lsr.w	r1, r4, lr
 8007906:	42b7      	cmp	r7, r6
 8007908:	ea41 030c 	orr.w	r3, r1, ip
 800790c:	bf34      	ite	cc
 800790e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007912:	2100      	movcs	r1, #0
 8007914:	3015      	adds	r0, #21
 8007916:	fa04 f000 	lsl.w	r0, r4, r0
 800791a:	fa21 f10e 	lsr.w	r1, r1, lr
 800791e:	ea40 0201 	orr.w	r2, r0, r1
 8007922:	ec43 2b10 	vmov	d0, r2, r3
 8007926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007928:	42b7      	cmp	r7, r6
 800792a:	bf3a      	itte	cc
 800792c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007930:	f1a5 0608 	subcc.w	r6, r5, #8
 8007934:	2100      	movcs	r1, #0
 8007936:	380b      	subs	r0, #11
 8007938:	d017      	beq.n	800796a <__b2d+0x92>
 800793a:	f1c0 0c20 	rsb	ip, r0, #32
 800793e:	fa04 f500 	lsl.w	r5, r4, r0
 8007942:	42be      	cmp	r6, r7
 8007944:	fa21 f40c 	lsr.w	r4, r1, ip
 8007948:	ea45 0504 	orr.w	r5, r5, r4
 800794c:	bf8c      	ite	hi
 800794e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007952:	2400      	movls	r4, #0
 8007954:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007958:	fa01 f000 	lsl.w	r0, r1, r0
 800795c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007960:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007964:	ea40 0204 	orr.w	r2, r0, r4
 8007968:	e7db      	b.n	8007922 <__b2d+0x4a>
 800796a:	ea44 030c 	orr.w	r3, r4, ip
 800796e:	460a      	mov	r2, r1
 8007970:	e7d7      	b.n	8007922 <__b2d+0x4a>
 8007972:	bf00      	nop
 8007974:	3ff00000 	.word	0x3ff00000

08007978 <__d2b>:
 8007978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800797c:	4689      	mov	r9, r1
 800797e:	2101      	movs	r1, #1
 8007980:	ec57 6b10 	vmov	r6, r7, d0
 8007984:	4690      	mov	r8, r2
 8007986:	f7ff fc09 	bl	800719c <_Balloc>
 800798a:	4604      	mov	r4, r0
 800798c:	b930      	cbnz	r0, 800799c <__d2b+0x24>
 800798e:	4602      	mov	r2, r0
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <__d2b+0xb0>)
 8007992:	4826      	ldr	r0, [pc, #152]	; (8007a2c <__d2b+0xb4>)
 8007994:	f240 310a 	movw	r1, #778	; 0x30a
 8007998:	f000 fdbe 	bl	8008518 <__assert_func>
 800799c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079a4:	bb35      	cbnz	r5, 80079f4 <__d2b+0x7c>
 80079a6:	2e00      	cmp	r6, #0
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	d028      	beq.n	80079fe <__d2b+0x86>
 80079ac:	4668      	mov	r0, sp
 80079ae:	9600      	str	r6, [sp, #0]
 80079b0:	f7ff fd06 	bl	80073c0 <__lo0bits>
 80079b4:	9900      	ldr	r1, [sp, #0]
 80079b6:	b300      	cbz	r0, 80079fa <__d2b+0x82>
 80079b8:	9a01      	ldr	r2, [sp, #4]
 80079ba:	f1c0 0320 	rsb	r3, r0, #32
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	430b      	orrs	r3, r1
 80079c4:	40c2      	lsrs	r2, r0
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	9201      	str	r2, [sp, #4]
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	61a3      	str	r3, [r4, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	bf14      	ite	ne
 80079d2:	2202      	movne	r2, #2
 80079d4:	2201      	moveq	r2, #1
 80079d6:	6122      	str	r2, [r4, #16]
 80079d8:	b1d5      	cbz	r5, 8007a10 <__d2b+0x98>
 80079da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079de:	4405      	add	r5, r0
 80079e0:	f8c9 5000 	str.w	r5, [r9]
 80079e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079e8:	f8c8 0000 	str.w	r0, [r8]
 80079ec:	4620      	mov	r0, r4
 80079ee:	b003      	add	sp, #12
 80079f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079f8:	e7d5      	b.n	80079a6 <__d2b+0x2e>
 80079fa:	6161      	str	r1, [r4, #20]
 80079fc:	e7e5      	b.n	80079ca <__d2b+0x52>
 80079fe:	a801      	add	r0, sp, #4
 8007a00:	f7ff fcde 	bl	80073c0 <__lo0bits>
 8007a04:	9b01      	ldr	r3, [sp, #4]
 8007a06:	6163      	str	r3, [r4, #20]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	6122      	str	r2, [r4, #16]
 8007a0c:	3020      	adds	r0, #32
 8007a0e:	e7e3      	b.n	80079d8 <__d2b+0x60>
 8007a10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a18:	f8c9 0000 	str.w	r0, [r9]
 8007a1c:	6918      	ldr	r0, [r3, #16]
 8007a1e:	f7ff fcaf 	bl	8007380 <__hi0bits>
 8007a22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a26:	e7df      	b.n	80079e8 <__d2b+0x70>
 8007a28:	08008c40 	.word	0x08008c40
 8007a2c:	08008d30 	.word	0x08008d30

08007a30 <__ratio>:
 8007a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	4688      	mov	r8, r1
 8007a36:	4669      	mov	r1, sp
 8007a38:	4681      	mov	r9, r0
 8007a3a:	f7ff ff4d 	bl	80078d8 <__b2d>
 8007a3e:	a901      	add	r1, sp, #4
 8007a40:	4640      	mov	r0, r8
 8007a42:	ec55 4b10 	vmov	r4, r5, d0
 8007a46:	f7ff ff47 	bl	80078d8 <__b2d>
 8007a4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a52:	eba3 0c02 	sub.w	ip, r3, r2
 8007a56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a5a:	1a9b      	subs	r3, r3, r2
 8007a5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a60:	ec51 0b10 	vmov	r0, r1, d0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bfd6      	itet	le
 8007a68:	460a      	movle	r2, r1
 8007a6a:	462a      	movgt	r2, r5
 8007a6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a70:	468b      	mov	fp, r1
 8007a72:	462f      	mov	r7, r5
 8007a74:	bfd4      	ite	le
 8007a76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007a7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a7e:	4620      	mov	r0, r4
 8007a80:	ee10 2a10 	vmov	r2, s0
 8007a84:	465b      	mov	r3, fp
 8007a86:	4639      	mov	r1, r7
 8007a88:	f7f8 fef0 	bl	800086c <__aeabi_ddiv>
 8007a8c:	ec41 0b10 	vmov	d0, r0, r1
 8007a90:	b003      	add	sp, #12
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a96 <__copybits>:
 8007a96:	3901      	subs	r1, #1
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	1149      	asrs	r1, r1, #5
 8007a9c:	6914      	ldr	r4, [r2, #16]
 8007a9e:	3101      	adds	r1, #1
 8007aa0:	f102 0314 	add.w	r3, r2, #20
 8007aa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007aa8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007aac:	1f05      	subs	r5, r0, #4
 8007aae:	42a3      	cmp	r3, r4
 8007ab0:	d30c      	bcc.n	8007acc <__copybits+0x36>
 8007ab2:	1aa3      	subs	r3, r4, r2
 8007ab4:	3b11      	subs	r3, #17
 8007ab6:	f023 0303 	bic.w	r3, r3, #3
 8007aba:	3211      	adds	r2, #17
 8007abc:	42a2      	cmp	r2, r4
 8007abe:	bf88      	it	hi
 8007ac0:	2300      	movhi	r3, #0
 8007ac2:	4418      	add	r0, r3
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4288      	cmp	r0, r1
 8007ac8:	d305      	bcc.n	8007ad6 <__copybits+0x40>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	f853 6b04 	ldr.w	r6, [r3], #4
 8007ad0:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ad4:	e7eb      	b.n	8007aae <__copybits+0x18>
 8007ad6:	f840 3b04 	str.w	r3, [r0], #4
 8007ada:	e7f4      	b.n	8007ac6 <__copybits+0x30>

08007adc <__any_on>:
 8007adc:	f100 0214 	add.w	r2, r0, #20
 8007ae0:	6900      	ldr	r0, [r0, #16]
 8007ae2:	114b      	asrs	r3, r1, #5
 8007ae4:	4298      	cmp	r0, r3
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	db11      	blt.n	8007b0e <__any_on+0x32>
 8007aea:	dd0a      	ble.n	8007b02 <__any_on+0x26>
 8007aec:	f011 011f 	ands.w	r1, r1, #31
 8007af0:	d007      	beq.n	8007b02 <__any_on+0x26>
 8007af2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007af6:	fa24 f001 	lsr.w	r0, r4, r1
 8007afa:	fa00 f101 	lsl.w	r1, r0, r1
 8007afe:	428c      	cmp	r4, r1
 8007b00:	d10b      	bne.n	8007b1a <__any_on+0x3e>
 8007b02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d803      	bhi.n	8007b12 <__any_on+0x36>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	4603      	mov	r3, r0
 8007b10:	e7f7      	b.n	8007b02 <__any_on+0x26>
 8007b12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b16:	2900      	cmp	r1, #0
 8007b18:	d0f5      	beq.n	8007b06 <__any_on+0x2a>
 8007b1a:	2001      	movs	r0, #1
 8007b1c:	e7f6      	b.n	8007b0c <__any_on+0x30>

08007b1e <_calloc_r>:
 8007b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b20:	fba1 2402 	umull	r2, r4, r1, r2
 8007b24:	b94c      	cbnz	r4, 8007b3a <_calloc_r+0x1c>
 8007b26:	4611      	mov	r1, r2
 8007b28:	9201      	str	r2, [sp, #4]
 8007b2a:	f000 f87b 	bl	8007c24 <_malloc_r>
 8007b2e:	9a01      	ldr	r2, [sp, #4]
 8007b30:	4605      	mov	r5, r0
 8007b32:	b930      	cbnz	r0, 8007b42 <_calloc_r+0x24>
 8007b34:	4628      	mov	r0, r5
 8007b36:	b003      	add	sp, #12
 8007b38:	bd30      	pop	{r4, r5, pc}
 8007b3a:	220c      	movs	r2, #12
 8007b3c:	6002      	str	r2, [r0, #0]
 8007b3e:	2500      	movs	r5, #0
 8007b40:	e7f8      	b.n	8007b34 <_calloc_r+0x16>
 8007b42:	4621      	mov	r1, r4
 8007b44:	f7fc faae 	bl	80040a4 <memset>
 8007b48:	e7f4      	b.n	8007b34 <_calloc_r+0x16>
	...

08007b4c <_free_r>:
 8007b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	d044      	beq.n	8007bdc <_free_r+0x90>
 8007b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b56:	9001      	str	r0, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b5e:	bfb8      	it	lt
 8007b60:	18e4      	addlt	r4, r4, r3
 8007b62:	f000 fe6d 	bl	8008840 <__malloc_lock>
 8007b66:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <_free_r+0x94>)
 8007b68:	9801      	ldr	r0, [sp, #4]
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	b933      	cbnz	r3, 8007b7c <_free_r+0x30>
 8007b6e:	6063      	str	r3, [r4, #4]
 8007b70:	6014      	str	r4, [r2, #0]
 8007b72:	b003      	add	sp, #12
 8007b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b78:	f000 be68 	b.w	800884c <__malloc_unlock>
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d908      	bls.n	8007b92 <_free_r+0x46>
 8007b80:	6825      	ldr	r5, [r4, #0]
 8007b82:	1961      	adds	r1, r4, r5
 8007b84:	428b      	cmp	r3, r1
 8007b86:	bf01      	itttt	eq
 8007b88:	6819      	ldreq	r1, [r3, #0]
 8007b8a:	685b      	ldreq	r3, [r3, #4]
 8007b8c:	1949      	addeq	r1, r1, r5
 8007b8e:	6021      	streq	r1, [r4, #0]
 8007b90:	e7ed      	b.n	8007b6e <_free_r+0x22>
 8007b92:	461a      	mov	r2, r3
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b10b      	cbz	r3, 8007b9c <_free_r+0x50>
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d9fa      	bls.n	8007b92 <_free_r+0x46>
 8007b9c:	6811      	ldr	r1, [r2, #0]
 8007b9e:	1855      	adds	r5, r2, r1
 8007ba0:	42a5      	cmp	r5, r4
 8007ba2:	d10b      	bne.n	8007bbc <_free_r+0x70>
 8007ba4:	6824      	ldr	r4, [r4, #0]
 8007ba6:	4421      	add	r1, r4
 8007ba8:	1854      	adds	r4, r2, r1
 8007baa:	42a3      	cmp	r3, r4
 8007bac:	6011      	str	r1, [r2, #0]
 8007bae:	d1e0      	bne.n	8007b72 <_free_r+0x26>
 8007bb0:	681c      	ldr	r4, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	6053      	str	r3, [r2, #4]
 8007bb6:	4421      	add	r1, r4
 8007bb8:	6011      	str	r1, [r2, #0]
 8007bba:	e7da      	b.n	8007b72 <_free_r+0x26>
 8007bbc:	d902      	bls.n	8007bc4 <_free_r+0x78>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	6003      	str	r3, [r0, #0]
 8007bc2:	e7d6      	b.n	8007b72 <_free_r+0x26>
 8007bc4:	6825      	ldr	r5, [r4, #0]
 8007bc6:	1961      	adds	r1, r4, r5
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	bf04      	itt	eq
 8007bcc:	6819      	ldreq	r1, [r3, #0]
 8007bce:	685b      	ldreq	r3, [r3, #4]
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	bf04      	itt	eq
 8007bd4:	1949      	addeq	r1, r1, r5
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	6054      	str	r4, [r2, #4]
 8007bda:	e7ca      	b.n	8007b72 <_free_r+0x26>
 8007bdc:	b003      	add	sp, #12
 8007bde:	bd30      	pop	{r4, r5, pc}
 8007be0:	2000020c 	.word	0x2000020c

08007be4 <sbrk_aligned>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4e0e      	ldr	r6, [pc, #56]	; (8007c20 <sbrk_aligned+0x3c>)
 8007be8:	460c      	mov	r4, r1
 8007bea:	6831      	ldr	r1, [r6, #0]
 8007bec:	4605      	mov	r5, r0
 8007bee:	b911      	cbnz	r1, 8007bf6 <sbrk_aligned+0x12>
 8007bf0:	f000 fb4a 	bl	8008288 <_sbrk_r>
 8007bf4:	6030      	str	r0, [r6, #0]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 fb45 	bl	8008288 <_sbrk_r>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d00a      	beq.n	8007c18 <sbrk_aligned+0x34>
 8007c02:	1cc4      	adds	r4, r0, #3
 8007c04:	f024 0403 	bic.w	r4, r4, #3
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d007      	beq.n	8007c1c <sbrk_aligned+0x38>
 8007c0c:	1a21      	subs	r1, r4, r0
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 fb3a 	bl	8008288 <_sbrk_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d101      	bne.n	8007c1c <sbrk_aligned+0x38>
 8007c18:	f04f 34ff 	mov.w	r4, #4294967295
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	20000210 	.word	0x20000210

08007c24 <_malloc_r>:
 8007c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c28:	1ccd      	adds	r5, r1, #3
 8007c2a:	f025 0503 	bic.w	r5, r5, #3
 8007c2e:	3508      	adds	r5, #8
 8007c30:	2d0c      	cmp	r5, #12
 8007c32:	bf38      	it	cc
 8007c34:	250c      	movcc	r5, #12
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	4607      	mov	r7, r0
 8007c3a:	db01      	blt.n	8007c40 <_malloc_r+0x1c>
 8007c3c:	42a9      	cmp	r1, r5
 8007c3e:	d905      	bls.n	8007c4c <_malloc_r+0x28>
 8007c40:	230c      	movs	r3, #12
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	2600      	movs	r6, #0
 8007c46:	4630      	mov	r0, r6
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	4e2e      	ldr	r6, [pc, #184]	; (8007d08 <_malloc_r+0xe4>)
 8007c4e:	f000 fdf7 	bl	8008840 <__malloc_lock>
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	461c      	mov	r4, r3
 8007c56:	bb34      	cbnz	r4, 8007ca6 <_malloc_r+0x82>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f7ff ffc2 	bl	8007be4 <sbrk_aligned>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	4604      	mov	r4, r0
 8007c64:	d14d      	bne.n	8007d02 <_malloc_r+0xde>
 8007c66:	6834      	ldr	r4, [r6, #0]
 8007c68:	4626      	mov	r6, r4
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	d140      	bne.n	8007cf0 <_malloc_r+0xcc>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	4631      	mov	r1, r6
 8007c72:	4638      	mov	r0, r7
 8007c74:	eb04 0803 	add.w	r8, r4, r3
 8007c78:	f000 fb06 	bl	8008288 <_sbrk_r>
 8007c7c:	4580      	cmp	r8, r0
 8007c7e:	d13a      	bne.n	8007cf6 <_malloc_r+0xd2>
 8007c80:	6821      	ldr	r1, [r4, #0]
 8007c82:	3503      	adds	r5, #3
 8007c84:	1a6d      	subs	r5, r5, r1
 8007c86:	f025 0503 	bic.w	r5, r5, #3
 8007c8a:	3508      	adds	r5, #8
 8007c8c:	2d0c      	cmp	r5, #12
 8007c8e:	bf38      	it	cc
 8007c90:	250c      	movcc	r5, #12
 8007c92:	4629      	mov	r1, r5
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff ffa5 	bl	8007be4 <sbrk_aligned>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d02b      	beq.n	8007cf6 <_malloc_r+0xd2>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	442b      	add	r3, r5
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	e00e      	b.n	8007cc4 <_malloc_r+0xa0>
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	1b52      	subs	r2, r2, r5
 8007caa:	d41e      	bmi.n	8007cea <_malloc_r+0xc6>
 8007cac:	2a0b      	cmp	r2, #11
 8007cae:	d916      	bls.n	8007cde <_malloc_r+0xba>
 8007cb0:	1961      	adds	r1, r4, r5
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	6025      	str	r5, [r4, #0]
 8007cb6:	bf18      	it	ne
 8007cb8:	6059      	strne	r1, [r3, #4]
 8007cba:	6863      	ldr	r3, [r4, #4]
 8007cbc:	bf08      	it	eq
 8007cbe:	6031      	streq	r1, [r6, #0]
 8007cc0:	5162      	str	r2, [r4, r5]
 8007cc2:	604b      	str	r3, [r1, #4]
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f104 060b 	add.w	r6, r4, #11
 8007cca:	f000 fdbf 	bl	800884c <__malloc_unlock>
 8007cce:	f026 0607 	bic.w	r6, r6, #7
 8007cd2:	1d23      	adds	r3, r4, #4
 8007cd4:	1af2      	subs	r2, r6, r3
 8007cd6:	d0b6      	beq.n	8007c46 <_malloc_r+0x22>
 8007cd8:	1b9b      	subs	r3, r3, r6
 8007cda:	50a3      	str	r3, [r4, r2]
 8007cdc:	e7b3      	b.n	8007c46 <_malloc_r+0x22>
 8007cde:	6862      	ldr	r2, [r4, #4]
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	bf0c      	ite	eq
 8007ce4:	6032      	streq	r2, [r6, #0]
 8007ce6:	605a      	strne	r2, [r3, #4]
 8007ce8:	e7ec      	b.n	8007cc4 <_malloc_r+0xa0>
 8007cea:	4623      	mov	r3, r4
 8007cec:	6864      	ldr	r4, [r4, #4]
 8007cee:	e7b2      	b.n	8007c56 <_malloc_r+0x32>
 8007cf0:	4634      	mov	r4, r6
 8007cf2:	6876      	ldr	r6, [r6, #4]
 8007cf4:	e7b9      	b.n	8007c6a <_malloc_r+0x46>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	603b      	str	r3, [r7, #0]
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f000 fda6 	bl	800884c <__malloc_unlock>
 8007d00:	e7a1      	b.n	8007c46 <_malloc_r+0x22>
 8007d02:	6025      	str	r5, [r4, #0]
 8007d04:	e7de      	b.n	8007cc4 <_malloc_r+0xa0>
 8007d06:	bf00      	nop
 8007d08:	2000020c 	.word	0x2000020c

08007d0c <__ssputs_r>:
 8007d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d10:	688e      	ldr	r6, [r1, #8]
 8007d12:	429e      	cmp	r6, r3
 8007d14:	4682      	mov	sl, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	4690      	mov	r8, r2
 8007d1a:	461f      	mov	r7, r3
 8007d1c:	d838      	bhi.n	8007d90 <__ssputs_r+0x84>
 8007d1e:	898a      	ldrh	r2, [r1, #12]
 8007d20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d24:	d032      	beq.n	8007d8c <__ssputs_r+0x80>
 8007d26:	6825      	ldr	r5, [r4, #0]
 8007d28:	6909      	ldr	r1, [r1, #16]
 8007d2a:	eba5 0901 	sub.w	r9, r5, r1
 8007d2e:	6965      	ldr	r5, [r4, #20]
 8007d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d38:	3301      	adds	r3, #1
 8007d3a:	444b      	add	r3, r9
 8007d3c:	106d      	asrs	r5, r5, #1
 8007d3e:	429d      	cmp	r5, r3
 8007d40:	bf38      	it	cc
 8007d42:	461d      	movcc	r5, r3
 8007d44:	0553      	lsls	r3, r2, #21
 8007d46:	d531      	bpl.n	8007dac <__ssputs_r+0xa0>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7ff ff6b 	bl	8007c24 <_malloc_r>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	b950      	cbnz	r0, 8007d68 <__ssputs_r+0x5c>
 8007d52:	230c      	movs	r3, #12
 8007d54:	f8ca 3000 	str.w	r3, [sl]
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d68:	6921      	ldr	r1, [r4, #16]
 8007d6a:	464a      	mov	r2, r9
 8007d6c:	f7ff fa08 	bl	8007180 <memcpy>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	6126      	str	r6, [r4, #16]
 8007d7e:	6165      	str	r5, [r4, #20]
 8007d80:	444e      	add	r6, r9
 8007d82:	eba5 0509 	sub.w	r5, r5, r9
 8007d86:	6026      	str	r6, [r4, #0]
 8007d88:	60a5      	str	r5, [r4, #8]
 8007d8a:	463e      	mov	r6, r7
 8007d8c:	42be      	cmp	r6, r7
 8007d8e:	d900      	bls.n	8007d92 <__ssputs_r+0x86>
 8007d90:	463e      	mov	r6, r7
 8007d92:	6820      	ldr	r0, [r4, #0]
 8007d94:	4632      	mov	r2, r6
 8007d96:	4641      	mov	r1, r8
 8007d98:	f000 fd38 	bl	800880c <memmove>
 8007d9c:	68a3      	ldr	r3, [r4, #8]
 8007d9e:	1b9b      	subs	r3, r3, r6
 8007da0:	60a3      	str	r3, [r4, #8]
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	4433      	add	r3, r6
 8007da6:	6023      	str	r3, [r4, #0]
 8007da8:	2000      	movs	r0, #0
 8007daa:	e7db      	b.n	8007d64 <__ssputs_r+0x58>
 8007dac:	462a      	mov	r2, r5
 8007dae:	f000 fd53 	bl	8008858 <_realloc_r>
 8007db2:	4606      	mov	r6, r0
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d1e1      	bne.n	8007d7c <__ssputs_r+0x70>
 8007db8:	6921      	ldr	r1, [r4, #16]
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f7ff fec6 	bl	8007b4c <_free_r>
 8007dc0:	e7c7      	b.n	8007d52 <__ssputs_r+0x46>
	...

08007dc4 <_svfiprintf_r>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	4698      	mov	r8, r3
 8007dca:	898b      	ldrh	r3, [r1, #12]
 8007dcc:	061b      	lsls	r3, r3, #24
 8007dce:	b09d      	sub	sp, #116	; 0x74
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	4614      	mov	r4, r2
 8007dd6:	d50e      	bpl.n	8007df6 <_svfiprintf_r+0x32>
 8007dd8:	690b      	ldr	r3, [r1, #16]
 8007dda:	b963      	cbnz	r3, 8007df6 <_svfiprintf_r+0x32>
 8007ddc:	2140      	movs	r1, #64	; 0x40
 8007dde:	f7ff ff21 	bl	8007c24 <_malloc_r>
 8007de2:	6028      	str	r0, [r5, #0]
 8007de4:	6128      	str	r0, [r5, #16]
 8007de6:	b920      	cbnz	r0, 8007df2 <_svfiprintf_r+0x2e>
 8007de8:	230c      	movs	r3, #12
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	e0d1      	b.n	8007f96 <_svfiprintf_r+0x1d2>
 8007df2:	2340      	movs	r3, #64	; 0x40
 8007df4:	616b      	str	r3, [r5, #20]
 8007df6:	2300      	movs	r3, #0
 8007df8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfa:	2320      	movs	r3, #32
 8007dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e04:	2330      	movs	r3, #48	; 0x30
 8007e06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fb0 <_svfiprintf_r+0x1ec>
 8007e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e0e:	f04f 0901 	mov.w	r9, #1
 8007e12:	4623      	mov	r3, r4
 8007e14:	469a      	mov	sl, r3
 8007e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e1a:	b10a      	cbz	r2, 8007e20 <_svfiprintf_r+0x5c>
 8007e1c:	2a25      	cmp	r2, #37	; 0x25
 8007e1e:	d1f9      	bne.n	8007e14 <_svfiprintf_r+0x50>
 8007e20:	ebba 0b04 	subs.w	fp, sl, r4
 8007e24:	d00b      	beq.n	8007e3e <_svfiprintf_r+0x7a>
 8007e26:	465b      	mov	r3, fp
 8007e28:	4622      	mov	r2, r4
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f7ff ff6d 	bl	8007d0c <__ssputs_r>
 8007e32:	3001      	adds	r0, #1
 8007e34:	f000 80aa 	beq.w	8007f8c <_svfiprintf_r+0x1c8>
 8007e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e3a:	445a      	add	r2, fp
 8007e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 80a2 	beq.w	8007f8c <_svfiprintf_r+0x1c8>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e52:	f10a 0a01 	add.w	sl, sl, #1
 8007e56:	9304      	str	r3, [sp, #16]
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e60:	4654      	mov	r4, sl
 8007e62:	2205      	movs	r2, #5
 8007e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e68:	4851      	ldr	r0, [pc, #324]	; (8007fb0 <_svfiprintf_r+0x1ec>)
 8007e6a:	f7f8 f9c9 	bl	8000200 <memchr>
 8007e6e:	9a04      	ldr	r2, [sp, #16]
 8007e70:	b9d8      	cbnz	r0, 8007eaa <_svfiprintf_r+0xe6>
 8007e72:	06d0      	lsls	r0, r2, #27
 8007e74:	bf44      	itt	mi
 8007e76:	2320      	movmi	r3, #32
 8007e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e7c:	0711      	lsls	r1, r2, #28
 8007e7e:	bf44      	itt	mi
 8007e80:	232b      	movmi	r3, #43	; 0x2b
 8007e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e86:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8c:	d015      	beq.n	8007eba <_svfiprintf_r+0xf6>
 8007e8e:	9a07      	ldr	r2, [sp, #28]
 8007e90:	4654      	mov	r4, sl
 8007e92:	2000      	movs	r0, #0
 8007e94:	f04f 0c0a 	mov.w	ip, #10
 8007e98:	4621      	mov	r1, r4
 8007e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e9e:	3b30      	subs	r3, #48	; 0x30
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	d94e      	bls.n	8007f42 <_svfiprintf_r+0x17e>
 8007ea4:	b1b0      	cbz	r0, 8007ed4 <_svfiprintf_r+0x110>
 8007ea6:	9207      	str	r2, [sp, #28]
 8007ea8:	e014      	b.n	8007ed4 <_svfiprintf_r+0x110>
 8007eaa:	eba0 0308 	sub.w	r3, r0, r8
 8007eae:	fa09 f303 	lsl.w	r3, r9, r3
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	46a2      	mov	sl, r4
 8007eb8:	e7d2      	b.n	8007e60 <_svfiprintf_r+0x9c>
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	1d19      	adds	r1, r3, #4
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	9103      	str	r1, [sp, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bfbb      	ittet	lt
 8007ec6:	425b      	neglt	r3, r3
 8007ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8007ecc:	9307      	strge	r3, [sp, #28]
 8007ece:	9307      	strlt	r3, [sp, #28]
 8007ed0:	bfb8      	it	lt
 8007ed2:	9204      	strlt	r2, [sp, #16]
 8007ed4:	7823      	ldrb	r3, [r4, #0]
 8007ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed8:	d10c      	bne.n	8007ef4 <_svfiprintf_r+0x130>
 8007eda:	7863      	ldrb	r3, [r4, #1]
 8007edc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ede:	d135      	bne.n	8007f4c <_svfiprintf_r+0x188>
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	1d1a      	adds	r2, r3, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	9203      	str	r2, [sp, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bfb8      	it	lt
 8007eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ef0:	3402      	adds	r4, #2
 8007ef2:	9305      	str	r3, [sp, #20]
 8007ef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fc0 <_svfiprintf_r+0x1fc>
 8007ef8:	7821      	ldrb	r1, [r4, #0]
 8007efa:	2203      	movs	r2, #3
 8007efc:	4650      	mov	r0, sl
 8007efe:	f7f8 f97f 	bl	8000200 <memchr>
 8007f02:	b140      	cbz	r0, 8007f16 <_svfiprintf_r+0x152>
 8007f04:	2340      	movs	r3, #64	; 0x40
 8007f06:	eba0 000a 	sub.w	r0, r0, sl
 8007f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f0e:	9b04      	ldr	r3, [sp, #16]
 8007f10:	4303      	orrs	r3, r0
 8007f12:	3401      	adds	r4, #1
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1a:	4826      	ldr	r0, [pc, #152]	; (8007fb4 <_svfiprintf_r+0x1f0>)
 8007f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f20:	2206      	movs	r2, #6
 8007f22:	f7f8 f96d 	bl	8000200 <memchr>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d038      	beq.n	8007f9c <_svfiprintf_r+0x1d8>
 8007f2a:	4b23      	ldr	r3, [pc, #140]	; (8007fb8 <_svfiprintf_r+0x1f4>)
 8007f2c:	bb1b      	cbnz	r3, 8007f76 <_svfiprintf_r+0x1b2>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	3307      	adds	r3, #7
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	3308      	adds	r3, #8
 8007f38:	9303      	str	r3, [sp, #12]
 8007f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3c:	4433      	add	r3, r6
 8007f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f40:	e767      	b.n	8007e12 <_svfiprintf_r+0x4e>
 8007f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f46:	460c      	mov	r4, r1
 8007f48:	2001      	movs	r0, #1
 8007f4a:	e7a5      	b.n	8007e98 <_svfiprintf_r+0xd4>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	3401      	adds	r4, #1
 8007f50:	9305      	str	r3, [sp, #20]
 8007f52:	4619      	mov	r1, r3
 8007f54:	f04f 0c0a 	mov.w	ip, #10
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f5e:	3a30      	subs	r2, #48	; 0x30
 8007f60:	2a09      	cmp	r2, #9
 8007f62:	d903      	bls.n	8007f6c <_svfiprintf_r+0x1a8>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0c5      	beq.n	8007ef4 <_svfiprintf_r+0x130>
 8007f68:	9105      	str	r1, [sp, #20]
 8007f6a:	e7c3      	b.n	8007ef4 <_svfiprintf_r+0x130>
 8007f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f70:	4604      	mov	r4, r0
 8007f72:	2301      	movs	r3, #1
 8007f74:	e7f0      	b.n	8007f58 <_svfiprintf_r+0x194>
 8007f76:	ab03      	add	r3, sp, #12
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <_svfiprintf_r+0x1f8>)
 8007f7e:	a904      	add	r1, sp, #16
 8007f80:	4638      	mov	r0, r7
 8007f82:	f7fc f937 	bl	80041f4 <_printf_float>
 8007f86:	1c42      	adds	r2, r0, #1
 8007f88:	4606      	mov	r6, r0
 8007f8a:	d1d6      	bne.n	8007f3a <_svfiprintf_r+0x176>
 8007f8c:	89ab      	ldrh	r3, [r5, #12]
 8007f8e:	065b      	lsls	r3, r3, #25
 8007f90:	f53f af2c 	bmi.w	8007dec <_svfiprintf_r+0x28>
 8007f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f96:	b01d      	add	sp, #116	; 0x74
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	ab03      	add	r3, sp, #12
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <_svfiprintf_r+0x1f8>)
 8007fa4:	a904      	add	r1, sp, #16
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f7fc fbc8 	bl	800473c <_printf_i>
 8007fac:	e7eb      	b.n	8007f86 <_svfiprintf_r+0x1c2>
 8007fae:	bf00      	nop
 8007fb0:	08008e8c 	.word	0x08008e8c
 8007fb4:	08008e96 	.word	0x08008e96
 8007fb8:	080041f5 	.word	0x080041f5
 8007fbc:	08007d0d 	.word	0x08007d0d
 8007fc0:	08008e92 	.word	0x08008e92

08007fc4 <__sfputc_r>:
 8007fc4:	6893      	ldr	r3, [r2, #8]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	b410      	push	{r4}
 8007fcc:	6093      	str	r3, [r2, #8]
 8007fce:	da08      	bge.n	8007fe2 <__sfputc_r+0x1e>
 8007fd0:	6994      	ldr	r4, [r2, #24]
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	db01      	blt.n	8007fda <__sfputc_r+0x16>
 8007fd6:	290a      	cmp	r1, #10
 8007fd8:	d103      	bne.n	8007fe2 <__sfputc_r+0x1e>
 8007fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fde:	f000 b9bb 	b.w	8008358 <__swbuf_r>
 8007fe2:	6813      	ldr	r3, [r2, #0]
 8007fe4:	1c58      	adds	r0, r3, #1
 8007fe6:	6010      	str	r0, [r2, #0]
 8007fe8:	7019      	strb	r1, [r3, #0]
 8007fea:	4608      	mov	r0, r1
 8007fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <__sfputs_r>:
 8007ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460f      	mov	r7, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	18d5      	adds	r5, r2, r3
 8007ffc:	42ac      	cmp	r4, r5
 8007ffe:	d101      	bne.n	8008004 <__sfputs_r+0x12>
 8008000:	2000      	movs	r0, #0
 8008002:	e007      	b.n	8008014 <__sfputs_r+0x22>
 8008004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008008:	463a      	mov	r2, r7
 800800a:	4630      	mov	r0, r6
 800800c:	f7ff ffda 	bl	8007fc4 <__sfputc_r>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d1f3      	bne.n	8007ffc <__sfputs_r+0xa>
 8008014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008018 <_vfiprintf_r>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	460d      	mov	r5, r1
 800801e:	b09d      	sub	sp, #116	; 0x74
 8008020:	4614      	mov	r4, r2
 8008022:	4698      	mov	r8, r3
 8008024:	4606      	mov	r6, r0
 8008026:	b118      	cbz	r0, 8008030 <_vfiprintf_r+0x18>
 8008028:	6983      	ldr	r3, [r0, #24]
 800802a:	b90b      	cbnz	r3, 8008030 <_vfiprintf_r+0x18>
 800802c:	f7fe fc7a 	bl	8006924 <__sinit>
 8008030:	4b89      	ldr	r3, [pc, #548]	; (8008258 <_vfiprintf_r+0x240>)
 8008032:	429d      	cmp	r5, r3
 8008034:	d11b      	bne.n	800806e <_vfiprintf_r+0x56>
 8008036:	6875      	ldr	r5, [r6, #4]
 8008038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800803a:	07d9      	lsls	r1, r3, #31
 800803c:	d405      	bmi.n	800804a <_vfiprintf_r+0x32>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	059a      	lsls	r2, r3, #22
 8008042:	d402      	bmi.n	800804a <_vfiprintf_r+0x32>
 8008044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008046:	f7ff f87e 	bl	8007146 <__retarget_lock_acquire_recursive>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	071b      	lsls	r3, r3, #28
 800804e:	d501      	bpl.n	8008054 <_vfiprintf_r+0x3c>
 8008050:	692b      	ldr	r3, [r5, #16]
 8008052:	b9eb      	cbnz	r3, 8008090 <_vfiprintf_r+0x78>
 8008054:	4629      	mov	r1, r5
 8008056:	4630      	mov	r0, r6
 8008058:	f000 f9f0 	bl	800843c <__swsetup_r>
 800805c:	b1c0      	cbz	r0, 8008090 <_vfiprintf_r+0x78>
 800805e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008060:	07dc      	lsls	r4, r3, #31
 8008062:	d50e      	bpl.n	8008082 <_vfiprintf_r+0x6a>
 8008064:	f04f 30ff 	mov.w	r0, #4294967295
 8008068:	b01d      	add	sp, #116	; 0x74
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	4b7b      	ldr	r3, [pc, #492]	; (800825c <_vfiprintf_r+0x244>)
 8008070:	429d      	cmp	r5, r3
 8008072:	d101      	bne.n	8008078 <_vfiprintf_r+0x60>
 8008074:	68b5      	ldr	r5, [r6, #8]
 8008076:	e7df      	b.n	8008038 <_vfiprintf_r+0x20>
 8008078:	4b79      	ldr	r3, [pc, #484]	; (8008260 <_vfiprintf_r+0x248>)
 800807a:	429d      	cmp	r5, r3
 800807c:	bf08      	it	eq
 800807e:	68f5      	ldreq	r5, [r6, #12]
 8008080:	e7da      	b.n	8008038 <_vfiprintf_r+0x20>
 8008082:	89ab      	ldrh	r3, [r5, #12]
 8008084:	0598      	lsls	r0, r3, #22
 8008086:	d4ed      	bmi.n	8008064 <_vfiprintf_r+0x4c>
 8008088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800808a:	f7ff f85d 	bl	8007148 <__retarget_lock_release_recursive>
 800808e:	e7e9      	b.n	8008064 <_vfiprintf_r+0x4c>
 8008090:	2300      	movs	r3, #0
 8008092:	9309      	str	r3, [sp, #36]	; 0x24
 8008094:	2320      	movs	r3, #32
 8008096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800809a:	f8cd 800c 	str.w	r8, [sp, #12]
 800809e:	2330      	movs	r3, #48	; 0x30
 80080a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008264 <_vfiprintf_r+0x24c>
 80080a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080a8:	f04f 0901 	mov.w	r9, #1
 80080ac:	4623      	mov	r3, r4
 80080ae:	469a      	mov	sl, r3
 80080b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b4:	b10a      	cbz	r2, 80080ba <_vfiprintf_r+0xa2>
 80080b6:	2a25      	cmp	r2, #37	; 0x25
 80080b8:	d1f9      	bne.n	80080ae <_vfiprintf_r+0x96>
 80080ba:	ebba 0b04 	subs.w	fp, sl, r4
 80080be:	d00b      	beq.n	80080d8 <_vfiprintf_r+0xc0>
 80080c0:	465b      	mov	r3, fp
 80080c2:	4622      	mov	r2, r4
 80080c4:	4629      	mov	r1, r5
 80080c6:	4630      	mov	r0, r6
 80080c8:	f7ff ff93 	bl	8007ff2 <__sfputs_r>
 80080cc:	3001      	adds	r0, #1
 80080ce:	f000 80aa 	beq.w	8008226 <_vfiprintf_r+0x20e>
 80080d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d4:	445a      	add	r2, fp
 80080d6:	9209      	str	r2, [sp, #36]	; 0x24
 80080d8:	f89a 3000 	ldrb.w	r3, [sl]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80a2 	beq.w	8008226 <_vfiprintf_r+0x20e>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ec:	f10a 0a01 	add.w	sl, sl, #1
 80080f0:	9304      	str	r3, [sp, #16]
 80080f2:	9307      	str	r3, [sp, #28]
 80080f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080f8:	931a      	str	r3, [sp, #104]	; 0x68
 80080fa:	4654      	mov	r4, sl
 80080fc:	2205      	movs	r2, #5
 80080fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008102:	4858      	ldr	r0, [pc, #352]	; (8008264 <_vfiprintf_r+0x24c>)
 8008104:	f7f8 f87c 	bl	8000200 <memchr>
 8008108:	9a04      	ldr	r2, [sp, #16]
 800810a:	b9d8      	cbnz	r0, 8008144 <_vfiprintf_r+0x12c>
 800810c:	06d1      	lsls	r1, r2, #27
 800810e:	bf44      	itt	mi
 8008110:	2320      	movmi	r3, #32
 8008112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008116:	0713      	lsls	r3, r2, #28
 8008118:	bf44      	itt	mi
 800811a:	232b      	movmi	r3, #43	; 0x2b
 800811c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008120:	f89a 3000 	ldrb.w	r3, [sl]
 8008124:	2b2a      	cmp	r3, #42	; 0x2a
 8008126:	d015      	beq.n	8008154 <_vfiprintf_r+0x13c>
 8008128:	9a07      	ldr	r2, [sp, #28]
 800812a:	4654      	mov	r4, sl
 800812c:	2000      	movs	r0, #0
 800812e:	f04f 0c0a 	mov.w	ip, #10
 8008132:	4621      	mov	r1, r4
 8008134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008138:	3b30      	subs	r3, #48	; 0x30
 800813a:	2b09      	cmp	r3, #9
 800813c:	d94e      	bls.n	80081dc <_vfiprintf_r+0x1c4>
 800813e:	b1b0      	cbz	r0, 800816e <_vfiprintf_r+0x156>
 8008140:	9207      	str	r2, [sp, #28]
 8008142:	e014      	b.n	800816e <_vfiprintf_r+0x156>
 8008144:	eba0 0308 	sub.w	r3, r0, r8
 8008148:	fa09 f303 	lsl.w	r3, r9, r3
 800814c:	4313      	orrs	r3, r2
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	46a2      	mov	sl, r4
 8008152:	e7d2      	b.n	80080fa <_vfiprintf_r+0xe2>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	1d19      	adds	r1, r3, #4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	9103      	str	r1, [sp, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	bfbb      	ittet	lt
 8008160:	425b      	neglt	r3, r3
 8008162:	f042 0202 	orrlt.w	r2, r2, #2
 8008166:	9307      	strge	r3, [sp, #28]
 8008168:	9307      	strlt	r3, [sp, #28]
 800816a:	bfb8      	it	lt
 800816c:	9204      	strlt	r2, [sp, #16]
 800816e:	7823      	ldrb	r3, [r4, #0]
 8008170:	2b2e      	cmp	r3, #46	; 0x2e
 8008172:	d10c      	bne.n	800818e <_vfiprintf_r+0x176>
 8008174:	7863      	ldrb	r3, [r4, #1]
 8008176:	2b2a      	cmp	r3, #42	; 0x2a
 8008178:	d135      	bne.n	80081e6 <_vfiprintf_r+0x1ce>
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	1d1a      	adds	r2, r3, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	9203      	str	r2, [sp, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bfb8      	it	lt
 8008186:	f04f 33ff 	movlt.w	r3, #4294967295
 800818a:	3402      	adds	r4, #2
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008274 <_vfiprintf_r+0x25c>
 8008192:	7821      	ldrb	r1, [r4, #0]
 8008194:	2203      	movs	r2, #3
 8008196:	4650      	mov	r0, sl
 8008198:	f7f8 f832 	bl	8000200 <memchr>
 800819c:	b140      	cbz	r0, 80081b0 <_vfiprintf_r+0x198>
 800819e:	2340      	movs	r3, #64	; 0x40
 80081a0:	eba0 000a 	sub.w	r0, r0, sl
 80081a4:	fa03 f000 	lsl.w	r0, r3, r0
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	4303      	orrs	r3, r0
 80081ac:	3401      	adds	r4, #1
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b4:	482c      	ldr	r0, [pc, #176]	; (8008268 <_vfiprintf_r+0x250>)
 80081b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ba:	2206      	movs	r2, #6
 80081bc:	f7f8 f820 	bl	8000200 <memchr>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d03f      	beq.n	8008244 <_vfiprintf_r+0x22c>
 80081c4:	4b29      	ldr	r3, [pc, #164]	; (800826c <_vfiprintf_r+0x254>)
 80081c6:	bb1b      	cbnz	r3, 8008210 <_vfiprintf_r+0x1f8>
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	3307      	adds	r3, #7
 80081cc:	f023 0307 	bic.w	r3, r3, #7
 80081d0:	3308      	adds	r3, #8
 80081d2:	9303      	str	r3, [sp, #12]
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	443b      	add	r3, r7
 80081d8:	9309      	str	r3, [sp, #36]	; 0x24
 80081da:	e767      	b.n	80080ac <_vfiprintf_r+0x94>
 80081dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e0:	460c      	mov	r4, r1
 80081e2:	2001      	movs	r0, #1
 80081e4:	e7a5      	b.n	8008132 <_vfiprintf_r+0x11a>
 80081e6:	2300      	movs	r3, #0
 80081e8:	3401      	adds	r4, #1
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	4619      	mov	r1, r3
 80081ee:	f04f 0c0a 	mov.w	ip, #10
 80081f2:	4620      	mov	r0, r4
 80081f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f8:	3a30      	subs	r2, #48	; 0x30
 80081fa:	2a09      	cmp	r2, #9
 80081fc:	d903      	bls.n	8008206 <_vfiprintf_r+0x1ee>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0c5      	beq.n	800818e <_vfiprintf_r+0x176>
 8008202:	9105      	str	r1, [sp, #20]
 8008204:	e7c3      	b.n	800818e <_vfiprintf_r+0x176>
 8008206:	fb0c 2101 	mla	r1, ip, r1, r2
 800820a:	4604      	mov	r4, r0
 800820c:	2301      	movs	r3, #1
 800820e:	e7f0      	b.n	80081f2 <_vfiprintf_r+0x1da>
 8008210:	ab03      	add	r3, sp, #12
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	462a      	mov	r2, r5
 8008216:	4b16      	ldr	r3, [pc, #88]	; (8008270 <_vfiprintf_r+0x258>)
 8008218:	a904      	add	r1, sp, #16
 800821a:	4630      	mov	r0, r6
 800821c:	f7fb ffea 	bl	80041f4 <_printf_float>
 8008220:	4607      	mov	r7, r0
 8008222:	1c78      	adds	r0, r7, #1
 8008224:	d1d6      	bne.n	80081d4 <_vfiprintf_r+0x1bc>
 8008226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008228:	07d9      	lsls	r1, r3, #31
 800822a:	d405      	bmi.n	8008238 <_vfiprintf_r+0x220>
 800822c:	89ab      	ldrh	r3, [r5, #12]
 800822e:	059a      	lsls	r2, r3, #22
 8008230:	d402      	bmi.n	8008238 <_vfiprintf_r+0x220>
 8008232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008234:	f7fe ff88 	bl	8007148 <__retarget_lock_release_recursive>
 8008238:	89ab      	ldrh	r3, [r5, #12]
 800823a:	065b      	lsls	r3, r3, #25
 800823c:	f53f af12 	bmi.w	8008064 <_vfiprintf_r+0x4c>
 8008240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008242:	e711      	b.n	8008068 <_vfiprintf_r+0x50>
 8008244:	ab03      	add	r3, sp, #12
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	462a      	mov	r2, r5
 800824a:	4b09      	ldr	r3, [pc, #36]	; (8008270 <_vfiprintf_r+0x258>)
 800824c:	a904      	add	r1, sp, #16
 800824e:	4630      	mov	r0, r6
 8008250:	f7fc fa74 	bl	800473c <_printf_i>
 8008254:	e7e4      	b.n	8008220 <_vfiprintf_r+0x208>
 8008256:	bf00      	nop
 8008258:	08008c74 	.word	0x08008c74
 800825c:	08008c94 	.word	0x08008c94
 8008260:	08008c54 	.word	0x08008c54
 8008264:	08008e8c 	.word	0x08008e8c
 8008268:	08008e96 	.word	0x08008e96
 800826c:	080041f5 	.word	0x080041f5
 8008270:	08007ff3 	.word	0x08007ff3
 8008274:	08008e92 	.word	0x08008e92

08008278 <nan>:
 8008278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008280 <nan+0x8>
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	00000000 	.word	0x00000000
 8008284:	7ff80000 	.word	0x7ff80000

08008288 <_sbrk_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	; (80082a4 <_sbrk_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f9 fb32 	bl	80018fc <_sbrk>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_sbrk_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_sbrk_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20000214 	.word	0x20000214

080082a8 <__sread>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	460c      	mov	r4, r1
 80082ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b0:	f000 fb02 	bl	80088b8 <_read_r>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	bfab      	itete	ge
 80082b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ba:	89a3      	ldrhlt	r3, [r4, #12]
 80082bc:	181b      	addge	r3, r3, r0
 80082be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082c2:	bfac      	ite	ge
 80082c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082c6:	81a3      	strhlt	r3, [r4, #12]
 80082c8:	bd10      	pop	{r4, pc}

080082ca <__swrite>:
 80082ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ce:	461f      	mov	r7, r3
 80082d0:	898b      	ldrh	r3, [r1, #12]
 80082d2:	05db      	lsls	r3, r3, #23
 80082d4:	4605      	mov	r5, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	4616      	mov	r6, r2
 80082da:	d505      	bpl.n	80082e8 <__swrite+0x1e>
 80082dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e0:	2302      	movs	r3, #2
 80082e2:	2200      	movs	r2, #0
 80082e4:	f000 fa1a 	bl	800871c <_lseek_r>
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	4632      	mov	r2, r6
 80082f6:	463b      	mov	r3, r7
 80082f8:	4628      	mov	r0, r5
 80082fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	f000 b88b 	b.w	8008418 <_write_r>

08008302 <__sseek>:
 8008302:	b510      	push	{r4, lr}
 8008304:	460c      	mov	r4, r1
 8008306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830a:	f000 fa07 	bl	800871c <_lseek_r>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	bf15      	itete	ne
 8008314:	6560      	strne	r0, [r4, #84]	; 0x54
 8008316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800831a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800831e:	81a3      	strheq	r3, [r4, #12]
 8008320:	bf18      	it	ne
 8008322:	81a3      	strhne	r3, [r4, #12]
 8008324:	bd10      	pop	{r4, pc}

08008326 <__sclose>:
 8008326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832a:	f000 b913 	b.w	8008554 <_close_r>

0800832e <strncmp>:
 800832e:	b510      	push	{r4, lr}
 8008330:	b17a      	cbz	r2, 8008352 <strncmp+0x24>
 8008332:	4603      	mov	r3, r0
 8008334:	3901      	subs	r1, #1
 8008336:	1884      	adds	r4, r0, r2
 8008338:	f813 0b01 	ldrb.w	r0, [r3], #1
 800833c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008340:	4290      	cmp	r0, r2
 8008342:	d101      	bne.n	8008348 <strncmp+0x1a>
 8008344:	42a3      	cmp	r3, r4
 8008346:	d101      	bne.n	800834c <strncmp+0x1e>
 8008348:	1a80      	subs	r0, r0, r2
 800834a:	bd10      	pop	{r4, pc}
 800834c:	2800      	cmp	r0, #0
 800834e:	d1f3      	bne.n	8008338 <strncmp+0xa>
 8008350:	e7fa      	b.n	8008348 <strncmp+0x1a>
 8008352:	4610      	mov	r0, r2
 8008354:	e7f9      	b.n	800834a <strncmp+0x1c>
	...

08008358 <__swbuf_r>:
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	460e      	mov	r6, r1
 800835c:	4614      	mov	r4, r2
 800835e:	4605      	mov	r5, r0
 8008360:	b118      	cbz	r0, 800836a <__swbuf_r+0x12>
 8008362:	6983      	ldr	r3, [r0, #24]
 8008364:	b90b      	cbnz	r3, 800836a <__swbuf_r+0x12>
 8008366:	f7fe fadd 	bl	8006924 <__sinit>
 800836a:	4b21      	ldr	r3, [pc, #132]	; (80083f0 <__swbuf_r+0x98>)
 800836c:	429c      	cmp	r4, r3
 800836e:	d12b      	bne.n	80083c8 <__swbuf_r+0x70>
 8008370:	686c      	ldr	r4, [r5, #4]
 8008372:	69a3      	ldr	r3, [r4, #24]
 8008374:	60a3      	str	r3, [r4, #8]
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	071a      	lsls	r2, r3, #28
 800837a:	d52f      	bpl.n	80083dc <__swbuf_r+0x84>
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	b36b      	cbz	r3, 80083dc <__swbuf_r+0x84>
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	6820      	ldr	r0, [r4, #0]
 8008384:	1ac0      	subs	r0, r0, r3
 8008386:	6963      	ldr	r3, [r4, #20]
 8008388:	b2f6      	uxtb	r6, r6
 800838a:	4283      	cmp	r3, r0
 800838c:	4637      	mov	r7, r6
 800838e:	dc04      	bgt.n	800839a <__swbuf_r+0x42>
 8008390:	4621      	mov	r1, r4
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f974 	bl	8008680 <_fflush_r>
 8008398:	bb30      	cbnz	r0, 80083e8 <__swbuf_r+0x90>
 800839a:	68a3      	ldr	r3, [r4, #8]
 800839c:	3b01      	subs	r3, #1
 800839e:	60a3      	str	r3, [r4, #8]
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	6022      	str	r2, [r4, #0]
 80083a6:	701e      	strb	r6, [r3, #0]
 80083a8:	6963      	ldr	r3, [r4, #20]
 80083aa:	3001      	adds	r0, #1
 80083ac:	4283      	cmp	r3, r0
 80083ae:	d004      	beq.n	80083ba <__swbuf_r+0x62>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	07db      	lsls	r3, r3, #31
 80083b4:	d506      	bpl.n	80083c4 <__swbuf_r+0x6c>
 80083b6:	2e0a      	cmp	r6, #10
 80083b8:	d104      	bne.n	80083c4 <__swbuf_r+0x6c>
 80083ba:	4621      	mov	r1, r4
 80083bc:	4628      	mov	r0, r5
 80083be:	f000 f95f 	bl	8008680 <_fflush_r>
 80083c2:	b988      	cbnz	r0, 80083e8 <__swbuf_r+0x90>
 80083c4:	4638      	mov	r0, r7
 80083c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <__swbuf_r+0x9c>)
 80083ca:	429c      	cmp	r4, r3
 80083cc:	d101      	bne.n	80083d2 <__swbuf_r+0x7a>
 80083ce:	68ac      	ldr	r4, [r5, #8]
 80083d0:	e7cf      	b.n	8008372 <__swbuf_r+0x1a>
 80083d2:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <__swbuf_r+0xa0>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	bf08      	it	eq
 80083d8:	68ec      	ldreq	r4, [r5, #12]
 80083da:	e7ca      	b.n	8008372 <__swbuf_r+0x1a>
 80083dc:	4621      	mov	r1, r4
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 f82c 	bl	800843c <__swsetup_r>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0cb      	beq.n	8008380 <__swbuf_r+0x28>
 80083e8:	f04f 37ff 	mov.w	r7, #4294967295
 80083ec:	e7ea      	b.n	80083c4 <__swbuf_r+0x6c>
 80083ee:	bf00      	nop
 80083f0:	08008c74 	.word	0x08008c74
 80083f4:	08008c94 	.word	0x08008c94
 80083f8:	08008c54 	.word	0x08008c54

080083fc <__ascii_wctomb>:
 80083fc:	b149      	cbz	r1, 8008412 <__ascii_wctomb+0x16>
 80083fe:	2aff      	cmp	r2, #255	; 0xff
 8008400:	bf85      	ittet	hi
 8008402:	238a      	movhi	r3, #138	; 0x8a
 8008404:	6003      	strhi	r3, [r0, #0]
 8008406:	700a      	strbls	r2, [r1, #0]
 8008408:	f04f 30ff 	movhi.w	r0, #4294967295
 800840c:	bf98      	it	ls
 800840e:	2001      	movls	r0, #1
 8008410:	4770      	bx	lr
 8008412:	4608      	mov	r0, r1
 8008414:	4770      	bx	lr
	...

08008418 <_write_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	; (8008438 <_write_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f9 f80e 	bl	8001448 <_write>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_write_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_write_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	20000214 	.word	0x20000214

0800843c <__swsetup_r>:
 800843c:	4b32      	ldr	r3, [pc, #200]	; (8008508 <__swsetup_r+0xcc>)
 800843e:	b570      	push	{r4, r5, r6, lr}
 8008440:	681d      	ldr	r5, [r3, #0]
 8008442:	4606      	mov	r6, r0
 8008444:	460c      	mov	r4, r1
 8008446:	b125      	cbz	r5, 8008452 <__swsetup_r+0x16>
 8008448:	69ab      	ldr	r3, [r5, #24]
 800844a:	b913      	cbnz	r3, 8008452 <__swsetup_r+0x16>
 800844c:	4628      	mov	r0, r5
 800844e:	f7fe fa69 	bl	8006924 <__sinit>
 8008452:	4b2e      	ldr	r3, [pc, #184]	; (800850c <__swsetup_r+0xd0>)
 8008454:	429c      	cmp	r4, r3
 8008456:	d10f      	bne.n	8008478 <__swsetup_r+0x3c>
 8008458:	686c      	ldr	r4, [r5, #4]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008460:	0719      	lsls	r1, r3, #28
 8008462:	d42c      	bmi.n	80084be <__swsetup_r+0x82>
 8008464:	06dd      	lsls	r5, r3, #27
 8008466:	d411      	bmi.n	800848c <__swsetup_r+0x50>
 8008468:	2309      	movs	r3, #9
 800846a:	6033      	str	r3, [r6, #0]
 800846c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	f04f 30ff 	mov.w	r0, #4294967295
 8008476:	e03e      	b.n	80084f6 <__swsetup_r+0xba>
 8008478:	4b25      	ldr	r3, [pc, #148]	; (8008510 <__swsetup_r+0xd4>)
 800847a:	429c      	cmp	r4, r3
 800847c:	d101      	bne.n	8008482 <__swsetup_r+0x46>
 800847e:	68ac      	ldr	r4, [r5, #8]
 8008480:	e7eb      	b.n	800845a <__swsetup_r+0x1e>
 8008482:	4b24      	ldr	r3, [pc, #144]	; (8008514 <__swsetup_r+0xd8>)
 8008484:	429c      	cmp	r4, r3
 8008486:	bf08      	it	eq
 8008488:	68ec      	ldreq	r4, [r5, #12]
 800848a:	e7e6      	b.n	800845a <__swsetup_r+0x1e>
 800848c:	0758      	lsls	r0, r3, #29
 800848e:	d512      	bpl.n	80084b6 <__swsetup_r+0x7a>
 8008490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008492:	b141      	cbz	r1, 80084a6 <__swsetup_r+0x6a>
 8008494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008498:	4299      	cmp	r1, r3
 800849a:	d002      	beq.n	80084a2 <__swsetup_r+0x66>
 800849c:	4630      	mov	r0, r6
 800849e:	f7ff fb55 	bl	8007b4c <_free_r>
 80084a2:	2300      	movs	r3, #0
 80084a4:	6363      	str	r3, [r4, #52]	; 0x34
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	2300      	movs	r3, #0
 80084b0:	6063      	str	r3, [r4, #4]
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f043 0308 	orr.w	r3, r3, #8
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	b94b      	cbnz	r3, 80084d6 <__swsetup_r+0x9a>
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084cc:	d003      	beq.n	80084d6 <__swsetup_r+0x9a>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 f95b 	bl	800878c <__smakebuf_r>
 80084d6:	89a0      	ldrh	r0, [r4, #12]
 80084d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084dc:	f010 0301 	ands.w	r3, r0, #1
 80084e0:	d00a      	beq.n	80084f8 <__swsetup_r+0xbc>
 80084e2:	2300      	movs	r3, #0
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	6963      	ldr	r3, [r4, #20]
 80084e8:	425b      	negs	r3, r3
 80084ea:	61a3      	str	r3, [r4, #24]
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	b943      	cbnz	r3, 8008502 <__swsetup_r+0xc6>
 80084f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084f4:	d1ba      	bne.n	800846c <__swsetup_r+0x30>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	0781      	lsls	r1, r0, #30
 80084fa:	bf58      	it	pl
 80084fc:	6963      	ldrpl	r3, [r4, #20]
 80084fe:	60a3      	str	r3, [r4, #8]
 8008500:	e7f4      	b.n	80084ec <__swsetup_r+0xb0>
 8008502:	2000      	movs	r0, #0
 8008504:	e7f7      	b.n	80084f6 <__swsetup_r+0xba>
 8008506:	bf00      	nop
 8008508:	2000000c 	.word	0x2000000c
 800850c:	08008c74 	.word	0x08008c74
 8008510:	08008c94 	.word	0x08008c94
 8008514:	08008c54 	.word	0x08008c54

08008518 <__assert_func>:
 8008518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800851a:	4614      	mov	r4, r2
 800851c:	461a      	mov	r2, r3
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <__assert_func+0x2c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4605      	mov	r5, r0
 8008524:	68d8      	ldr	r0, [r3, #12]
 8008526:	b14c      	cbz	r4, 800853c <__assert_func+0x24>
 8008528:	4b07      	ldr	r3, [pc, #28]	; (8008548 <__assert_func+0x30>)
 800852a:	9100      	str	r1, [sp, #0]
 800852c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008530:	4906      	ldr	r1, [pc, #24]	; (800854c <__assert_func+0x34>)
 8008532:	462b      	mov	r3, r5
 8008534:	f000 f8e0 	bl	80086f8 <fiprintf>
 8008538:	f000 f9d0 	bl	80088dc <abort>
 800853c:	4b04      	ldr	r3, [pc, #16]	; (8008550 <__assert_func+0x38>)
 800853e:	461c      	mov	r4, r3
 8008540:	e7f3      	b.n	800852a <__assert_func+0x12>
 8008542:	bf00      	nop
 8008544:	2000000c 	.word	0x2000000c
 8008548:	08008e9d 	.word	0x08008e9d
 800854c:	08008eaa 	.word	0x08008eaa
 8008550:	08008ed8 	.word	0x08008ed8

08008554 <_close_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d06      	ldr	r5, [pc, #24]	; (8008570 <_close_r+0x1c>)
 8008558:	2300      	movs	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f7f9 f997 	bl	8001892 <_close>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_close_r+0x1a>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_close_r+0x1a>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	20000214 	.word	0x20000214

08008574 <__sflush_r>:
 8008574:	898a      	ldrh	r2, [r1, #12]
 8008576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857a:	4605      	mov	r5, r0
 800857c:	0710      	lsls	r0, r2, #28
 800857e:	460c      	mov	r4, r1
 8008580:	d458      	bmi.n	8008634 <__sflush_r+0xc0>
 8008582:	684b      	ldr	r3, [r1, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	dc05      	bgt.n	8008594 <__sflush_r+0x20>
 8008588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	dc02      	bgt.n	8008594 <__sflush_r+0x20>
 800858e:	2000      	movs	r0, #0
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008596:	2e00      	cmp	r6, #0
 8008598:	d0f9      	beq.n	800858e <__sflush_r+0x1a>
 800859a:	2300      	movs	r3, #0
 800859c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085a0:	682f      	ldr	r7, [r5, #0]
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	d032      	beq.n	800860c <__sflush_r+0x98>
 80085a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	075a      	lsls	r2, r3, #29
 80085ac:	d505      	bpl.n	80085ba <__sflush_r+0x46>
 80085ae:	6863      	ldr	r3, [r4, #4]
 80085b0:	1ac0      	subs	r0, r0, r3
 80085b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085b4:	b10b      	cbz	r3, 80085ba <__sflush_r+0x46>
 80085b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085b8:	1ac0      	subs	r0, r0, r3
 80085ba:	2300      	movs	r3, #0
 80085bc:	4602      	mov	r2, r0
 80085be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c0:	6a21      	ldr	r1, [r4, #32]
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b0      	blx	r6
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	d106      	bne.n	80085da <__sflush_r+0x66>
 80085cc:	6829      	ldr	r1, [r5, #0]
 80085ce:	291d      	cmp	r1, #29
 80085d0:	d82c      	bhi.n	800862c <__sflush_r+0xb8>
 80085d2:	4a2a      	ldr	r2, [pc, #168]	; (800867c <__sflush_r+0x108>)
 80085d4:	40ca      	lsrs	r2, r1
 80085d6:	07d6      	lsls	r6, r2, #31
 80085d8:	d528      	bpl.n	800862c <__sflush_r+0xb8>
 80085da:	2200      	movs	r2, #0
 80085dc:	6062      	str	r2, [r4, #4]
 80085de:	04d9      	lsls	r1, r3, #19
 80085e0:	6922      	ldr	r2, [r4, #16]
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	d504      	bpl.n	80085f0 <__sflush_r+0x7c>
 80085e6:	1c42      	adds	r2, r0, #1
 80085e8:	d101      	bne.n	80085ee <__sflush_r+0x7a>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	b903      	cbnz	r3, 80085f0 <__sflush_r+0x7c>
 80085ee:	6560      	str	r0, [r4, #84]	; 0x54
 80085f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085f2:	602f      	str	r7, [r5, #0]
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d0ca      	beq.n	800858e <__sflush_r+0x1a>
 80085f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085fc:	4299      	cmp	r1, r3
 80085fe:	d002      	beq.n	8008606 <__sflush_r+0x92>
 8008600:	4628      	mov	r0, r5
 8008602:	f7ff faa3 	bl	8007b4c <_free_r>
 8008606:	2000      	movs	r0, #0
 8008608:	6360      	str	r0, [r4, #52]	; 0x34
 800860a:	e7c1      	b.n	8008590 <__sflush_r+0x1c>
 800860c:	6a21      	ldr	r1, [r4, #32]
 800860e:	2301      	movs	r3, #1
 8008610:	4628      	mov	r0, r5
 8008612:	47b0      	blx	r6
 8008614:	1c41      	adds	r1, r0, #1
 8008616:	d1c7      	bne.n	80085a8 <__sflush_r+0x34>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0c4      	beq.n	80085a8 <__sflush_r+0x34>
 800861e:	2b1d      	cmp	r3, #29
 8008620:	d001      	beq.n	8008626 <__sflush_r+0xb2>
 8008622:	2b16      	cmp	r3, #22
 8008624:	d101      	bne.n	800862a <__sflush_r+0xb6>
 8008626:	602f      	str	r7, [r5, #0]
 8008628:	e7b1      	b.n	800858e <__sflush_r+0x1a>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	e7ad      	b.n	8008590 <__sflush_r+0x1c>
 8008634:	690f      	ldr	r7, [r1, #16]
 8008636:	2f00      	cmp	r7, #0
 8008638:	d0a9      	beq.n	800858e <__sflush_r+0x1a>
 800863a:	0793      	lsls	r3, r2, #30
 800863c:	680e      	ldr	r6, [r1, #0]
 800863e:	bf08      	it	eq
 8008640:	694b      	ldreq	r3, [r1, #20]
 8008642:	600f      	str	r7, [r1, #0]
 8008644:	bf18      	it	ne
 8008646:	2300      	movne	r3, #0
 8008648:	eba6 0807 	sub.w	r8, r6, r7
 800864c:	608b      	str	r3, [r1, #8]
 800864e:	f1b8 0f00 	cmp.w	r8, #0
 8008652:	dd9c      	ble.n	800858e <__sflush_r+0x1a>
 8008654:	6a21      	ldr	r1, [r4, #32]
 8008656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008658:	4643      	mov	r3, r8
 800865a:	463a      	mov	r2, r7
 800865c:	4628      	mov	r0, r5
 800865e:	47b0      	blx	r6
 8008660:	2800      	cmp	r0, #0
 8008662:	dc06      	bgt.n	8008672 <__sflush_r+0xfe>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e78e      	b.n	8008590 <__sflush_r+0x1c>
 8008672:	4407      	add	r7, r0
 8008674:	eba8 0800 	sub.w	r8, r8, r0
 8008678:	e7e9      	b.n	800864e <__sflush_r+0xda>
 800867a:	bf00      	nop
 800867c:	20400001 	.word	0x20400001

08008680 <_fflush_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	690b      	ldr	r3, [r1, #16]
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b913      	cbnz	r3, 8008690 <_fflush_r+0x10>
 800868a:	2500      	movs	r5, #0
 800868c:	4628      	mov	r0, r5
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	b118      	cbz	r0, 800869a <_fflush_r+0x1a>
 8008692:	6983      	ldr	r3, [r0, #24]
 8008694:	b90b      	cbnz	r3, 800869a <_fflush_r+0x1a>
 8008696:	f7fe f945 	bl	8006924 <__sinit>
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <_fflush_r+0x6c>)
 800869c:	429c      	cmp	r4, r3
 800869e:	d11b      	bne.n	80086d8 <_fflush_r+0x58>
 80086a0:	686c      	ldr	r4, [r5, #4]
 80086a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0ef      	beq.n	800868a <_fflush_r+0xa>
 80086aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086ac:	07d0      	lsls	r0, r2, #31
 80086ae:	d404      	bmi.n	80086ba <_fflush_r+0x3a>
 80086b0:	0599      	lsls	r1, r3, #22
 80086b2:	d402      	bmi.n	80086ba <_fflush_r+0x3a>
 80086b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086b6:	f7fe fd46 	bl	8007146 <__retarget_lock_acquire_recursive>
 80086ba:	4628      	mov	r0, r5
 80086bc:	4621      	mov	r1, r4
 80086be:	f7ff ff59 	bl	8008574 <__sflush_r>
 80086c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086c4:	07da      	lsls	r2, r3, #31
 80086c6:	4605      	mov	r5, r0
 80086c8:	d4e0      	bmi.n	800868c <_fflush_r+0xc>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	059b      	lsls	r3, r3, #22
 80086ce:	d4dd      	bmi.n	800868c <_fflush_r+0xc>
 80086d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086d2:	f7fe fd39 	bl	8007148 <__retarget_lock_release_recursive>
 80086d6:	e7d9      	b.n	800868c <_fflush_r+0xc>
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_fflush_r+0x70>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d101      	bne.n	80086e2 <_fflush_r+0x62>
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	e7df      	b.n	80086a2 <_fflush_r+0x22>
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <_fflush_r+0x74>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	bf08      	it	eq
 80086e8:	68ec      	ldreq	r4, [r5, #12]
 80086ea:	e7da      	b.n	80086a2 <_fflush_r+0x22>
 80086ec:	08008c74 	.word	0x08008c74
 80086f0:	08008c94 	.word	0x08008c94
 80086f4:	08008c54 	.word	0x08008c54

080086f8 <fiprintf>:
 80086f8:	b40e      	push	{r1, r2, r3}
 80086fa:	b503      	push	{r0, r1, lr}
 80086fc:	4601      	mov	r1, r0
 80086fe:	ab03      	add	r3, sp, #12
 8008700:	4805      	ldr	r0, [pc, #20]	; (8008718 <fiprintf+0x20>)
 8008702:	f853 2b04 	ldr.w	r2, [r3], #4
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f7ff fc85 	bl	8008018 <_vfiprintf_r>
 800870e:	b002      	add	sp, #8
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
 8008714:	b003      	add	sp, #12
 8008716:	4770      	bx	lr
 8008718:	2000000c 	.word	0x2000000c

0800871c <_lseek_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4d07      	ldr	r5, [pc, #28]	; (800873c <_lseek_r+0x20>)
 8008720:	4604      	mov	r4, r0
 8008722:	4608      	mov	r0, r1
 8008724:	4611      	mov	r1, r2
 8008726:	2200      	movs	r2, #0
 8008728:	602a      	str	r2, [r5, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	f7f9 f8d8 	bl	80018e0 <_lseek>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_lseek_r+0x1e>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_lseek_r+0x1e>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000214 	.word	0x20000214

08008740 <__swhatbuf_r>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	460e      	mov	r6, r1
 8008744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008748:	2900      	cmp	r1, #0
 800874a:	b096      	sub	sp, #88	; 0x58
 800874c:	4614      	mov	r4, r2
 800874e:	461d      	mov	r5, r3
 8008750:	da08      	bge.n	8008764 <__swhatbuf_r+0x24>
 8008752:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	061a      	lsls	r2, r3, #24
 800875c:	d410      	bmi.n	8008780 <__swhatbuf_r+0x40>
 800875e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008762:	e00e      	b.n	8008782 <__swhatbuf_r+0x42>
 8008764:	466a      	mov	r2, sp
 8008766:	f000 f8c1 	bl	80088ec <_fstat_r>
 800876a:	2800      	cmp	r0, #0
 800876c:	dbf1      	blt.n	8008752 <__swhatbuf_r+0x12>
 800876e:	9a01      	ldr	r2, [sp, #4]
 8008770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008778:	425a      	negs	r2, r3
 800877a:	415a      	adcs	r2, r3
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	e7ee      	b.n	800875e <__swhatbuf_r+0x1e>
 8008780:	2340      	movs	r3, #64	; 0x40
 8008782:	2000      	movs	r0, #0
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	b016      	add	sp, #88	; 0x58
 8008788:	bd70      	pop	{r4, r5, r6, pc}
	...

0800878c <__smakebuf_r>:
 800878c:	898b      	ldrh	r3, [r1, #12]
 800878e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008790:	079d      	lsls	r5, r3, #30
 8008792:	4606      	mov	r6, r0
 8008794:	460c      	mov	r4, r1
 8008796:	d507      	bpl.n	80087a8 <__smakebuf_r+0x1c>
 8008798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	2301      	movs	r3, #1
 80087a2:	6163      	str	r3, [r4, #20]
 80087a4:	b002      	add	sp, #8
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	ab01      	add	r3, sp, #4
 80087aa:	466a      	mov	r2, sp
 80087ac:	f7ff ffc8 	bl	8008740 <__swhatbuf_r>
 80087b0:	9900      	ldr	r1, [sp, #0]
 80087b2:	4605      	mov	r5, r0
 80087b4:	4630      	mov	r0, r6
 80087b6:	f7ff fa35 	bl	8007c24 <_malloc_r>
 80087ba:	b948      	cbnz	r0, 80087d0 <__smakebuf_r+0x44>
 80087bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c0:	059a      	lsls	r2, r3, #22
 80087c2:	d4ef      	bmi.n	80087a4 <__smakebuf_r+0x18>
 80087c4:	f023 0303 	bic.w	r3, r3, #3
 80087c8:	f043 0302 	orr.w	r3, r3, #2
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	e7e3      	b.n	8008798 <__smakebuf_r+0xc>
 80087d0:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <__smakebuf_r+0x7c>)
 80087d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	6020      	str	r0, [r4, #0]
 80087d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	6163      	str	r3, [r4, #20]
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	6120      	str	r0, [r4, #16]
 80087e6:	b15b      	cbz	r3, 8008800 <__smakebuf_r+0x74>
 80087e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 f88f 	bl	8008910 <_isatty_r>
 80087f2:	b128      	cbz	r0, 8008800 <__smakebuf_r+0x74>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f023 0303 	bic.w	r3, r3, #3
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	89a0      	ldrh	r0, [r4, #12]
 8008802:	4305      	orrs	r5, r0
 8008804:	81a5      	strh	r5, [r4, #12]
 8008806:	e7cd      	b.n	80087a4 <__smakebuf_r+0x18>
 8008808:	080068bd 	.word	0x080068bd

0800880c <memmove>:
 800880c:	4288      	cmp	r0, r1
 800880e:	b510      	push	{r4, lr}
 8008810:	eb01 0402 	add.w	r4, r1, r2
 8008814:	d902      	bls.n	800881c <memmove+0x10>
 8008816:	4284      	cmp	r4, r0
 8008818:	4623      	mov	r3, r4
 800881a:	d807      	bhi.n	800882c <memmove+0x20>
 800881c:	1e43      	subs	r3, r0, #1
 800881e:	42a1      	cmp	r1, r4
 8008820:	d008      	beq.n	8008834 <memmove+0x28>
 8008822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800882a:	e7f8      	b.n	800881e <memmove+0x12>
 800882c:	4402      	add	r2, r0
 800882e:	4601      	mov	r1, r0
 8008830:	428a      	cmp	r2, r1
 8008832:	d100      	bne.n	8008836 <memmove+0x2a>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800883a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800883e:	e7f7      	b.n	8008830 <memmove+0x24>

08008840 <__malloc_lock>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__malloc_lock+0x8>)
 8008842:	f7fe bc80 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	20000208 	.word	0x20000208

0800884c <__malloc_unlock>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__malloc_unlock+0x8>)
 800884e:	f7fe bc7b 	b.w	8007148 <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	20000208 	.word	0x20000208

08008858 <_realloc_r>:
 8008858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	4680      	mov	r8, r0
 800885e:	4614      	mov	r4, r2
 8008860:	460e      	mov	r6, r1
 8008862:	b921      	cbnz	r1, 800886e <_realloc_r+0x16>
 8008864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008868:	4611      	mov	r1, r2
 800886a:	f7ff b9db 	b.w	8007c24 <_malloc_r>
 800886e:	b92a      	cbnz	r2, 800887c <_realloc_r+0x24>
 8008870:	f7ff f96c 	bl	8007b4c <_free_r>
 8008874:	4625      	mov	r5, r4
 8008876:	4628      	mov	r0, r5
 8008878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800887c:	f000 f858 	bl	8008930 <_malloc_usable_size_r>
 8008880:	4284      	cmp	r4, r0
 8008882:	4607      	mov	r7, r0
 8008884:	d802      	bhi.n	800888c <_realloc_r+0x34>
 8008886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800888a:	d812      	bhi.n	80088b2 <_realloc_r+0x5a>
 800888c:	4621      	mov	r1, r4
 800888e:	4640      	mov	r0, r8
 8008890:	f7ff f9c8 	bl	8007c24 <_malloc_r>
 8008894:	4605      	mov	r5, r0
 8008896:	2800      	cmp	r0, #0
 8008898:	d0ed      	beq.n	8008876 <_realloc_r+0x1e>
 800889a:	42bc      	cmp	r4, r7
 800889c:	4622      	mov	r2, r4
 800889e:	4631      	mov	r1, r6
 80088a0:	bf28      	it	cs
 80088a2:	463a      	movcs	r2, r7
 80088a4:	f7fe fc6c 	bl	8007180 <memcpy>
 80088a8:	4631      	mov	r1, r6
 80088aa:	4640      	mov	r0, r8
 80088ac:	f7ff f94e 	bl	8007b4c <_free_r>
 80088b0:	e7e1      	b.n	8008876 <_realloc_r+0x1e>
 80088b2:	4635      	mov	r5, r6
 80088b4:	e7df      	b.n	8008876 <_realloc_r+0x1e>
	...

080088b8 <_read_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	; (80088d8 <_read_r+0x20>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	2200      	movs	r2, #0
 80088c4:	602a      	str	r2, [r5, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7f8 ffc6 	bl	8001858 <_read>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_read_r+0x1e>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_read_r+0x1e>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000214 	.word	0x20000214

080088dc <abort>:
 80088dc:	b508      	push	{r3, lr}
 80088de:	2006      	movs	r0, #6
 80088e0:	f000 f856 	bl	8008990 <raise>
 80088e4:	2001      	movs	r0, #1
 80088e6:	f7f8 ffad 	bl	8001844 <_exit>
	...

080088ec <_fstat_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d07      	ldr	r5, [pc, #28]	; (800890c <_fstat_r+0x20>)
 80088f0:	2300      	movs	r3, #0
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	4611      	mov	r1, r2
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	f7f8 ffd6 	bl	80018aa <_fstat>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	d102      	bne.n	8008908 <_fstat_r+0x1c>
 8008902:	682b      	ldr	r3, [r5, #0]
 8008904:	b103      	cbz	r3, 8008908 <_fstat_r+0x1c>
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	bd38      	pop	{r3, r4, r5, pc}
 800890a:	bf00      	nop
 800890c:	20000214 	.word	0x20000214

08008910 <_isatty_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d06      	ldr	r5, [pc, #24]	; (800892c <_isatty_r+0x1c>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	f7f8 ffd5 	bl	80018ca <_isatty>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_isatty_r+0x1a>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_isatty_r+0x1a>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	20000214 	.word	0x20000214

08008930 <_malloc_usable_size_r>:
 8008930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008934:	1f18      	subs	r0, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfbc      	itt	lt
 800893a:	580b      	ldrlt	r3, [r1, r0]
 800893c:	18c0      	addlt	r0, r0, r3
 800893e:	4770      	bx	lr

08008940 <_raise_r>:
 8008940:	291f      	cmp	r1, #31
 8008942:	b538      	push	{r3, r4, r5, lr}
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	d904      	bls.n	8008954 <_raise_r+0x14>
 800894a:	2316      	movs	r3, #22
 800894c:	6003      	str	r3, [r0, #0]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008956:	b112      	cbz	r2, 800895e <_raise_r+0x1e>
 8008958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800895c:	b94b      	cbnz	r3, 8008972 <_raise_r+0x32>
 800895e:	4620      	mov	r0, r4
 8008960:	f000 f830 	bl	80089c4 <_getpid_r>
 8008964:	462a      	mov	r2, r5
 8008966:	4601      	mov	r1, r0
 8008968:	4620      	mov	r0, r4
 800896a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800896e:	f000 b817 	b.w	80089a0 <_kill_r>
 8008972:	2b01      	cmp	r3, #1
 8008974:	d00a      	beq.n	800898c <_raise_r+0x4c>
 8008976:	1c59      	adds	r1, r3, #1
 8008978:	d103      	bne.n	8008982 <_raise_r+0x42>
 800897a:	2316      	movs	r3, #22
 800897c:	6003      	str	r3, [r0, #0]
 800897e:	2001      	movs	r0, #1
 8008980:	e7e7      	b.n	8008952 <_raise_r+0x12>
 8008982:	2400      	movs	r4, #0
 8008984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008988:	4628      	mov	r0, r5
 800898a:	4798      	blx	r3
 800898c:	2000      	movs	r0, #0
 800898e:	e7e0      	b.n	8008952 <_raise_r+0x12>

08008990 <raise>:
 8008990:	4b02      	ldr	r3, [pc, #8]	; (800899c <raise+0xc>)
 8008992:	4601      	mov	r1, r0
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	f7ff bfd3 	b.w	8008940 <_raise_r>
 800899a:	bf00      	nop
 800899c:	2000000c 	.word	0x2000000c

080089a0 <_kill_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d07      	ldr	r5, [pc, #28]	; (80089c0 <_kill_r+0x20>)
 80089a4:	2300      	movs	r3, #0
 80089a6:	4604      	mov	r4, r0
 80089a8:	4608      	mov	r0, r1
 80089aa:	4611      	mov	r1, r2
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	f7f8 ff39 	bl	8001824 <_kill>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	d102      	bne.n	80089bc <_kill_r+0x1c>
 80089b6:	682b      	ldr	r3, [r5, #0]
 80089b8:	b103      	cbz	r3, 80089bc <_kill_r+0x1c>
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	bd38      	pop	{r3, r4, r5, pc}
 80089be:	bf00      	nop
 80089c0:	20000214 	.word	0x20000214

080089c4 <_getpid_r>:
 80089c4:	f7f8 bf26 	b.w	8001814 <_getpid>

080089c8 <_init>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr

080089d4 <_fini>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	bf00      	nop
 80089d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089da:	bc08      	pop	{r3}
 80089dc:	469e      	mov	lr, r3
 80089de:	4770      	bx	lr
